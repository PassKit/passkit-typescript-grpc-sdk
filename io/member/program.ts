/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/member/program.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./../common/distribution";
import * as dependency_3 from "./../common/localization";
import * as dependency_4 from "./../common/metrics";
import * as dependency_5 from "./../common/project";
import * as dependency_6 from "./../common/billing";
import * as dependency_7 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace members {
    export enum ProgramAutoUpDownGradeTierType {
        UPDOWNGRADE_POINTS = 0,
        UPDOWNGRADE_SECONDARY_POINTS = 1,
        UPDOWNGRADE_TIER_POINTS = 2,
        UPDOWNGRADE_VISITS = 3
    }
    export enum BalanceType {
        BALANCE_TYPE_STRING = 0,
        BALANCE_TYPE_INT = 1,
        BALANCE_TYPE_DOUBLE = 2,
        BALANCE_TYPE_MONEY = 3
    }
    export enum ProfileImageSetting {
        PROFILE_IMAGE_NONE = 0,
        PROFILE_IMAGE_OPTIONAL = 1,
        PROFILE_IMAGE_REQUIRED = 2,
        PROFILE_IMAGE_RESTRICTED = 3
    }
    export enum RecoverPassDelivery {
        DELIVERY_REDIRECT = 0,
        DELIVERY_EMAIL = 1,
        DELIVERY_SMS = 2
    }
    export class PointsType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            balanceType?: BalanceType;
            currencyCode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balanceType" in data && data.balanceType != undefined) {
                    this.balanceType = data.balanceType;
                }
                if ("currencyCode" in data && data.currencyCode != undefined) {
                    this.currencyCode = data.currencyCode;
                }
            }
        }
        get balanceType() {
            return pb_1.Message.getFieldWithDefault(this, 1, BalanceType.BALANCE_TYPE_STRING) as BalanceType;
        }
        set balanceType(value: BalanceType) {
            pb_1.Message.setField(this, 1, value);
        }
        get currencyCode() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set currencyCode(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            balanceType?: BalanceType;
            currencyCode?: string;
        }): PointsType {
            const message = new PointsType({});
            if (data.balanceType != null) {
                message.balanceType = data.balanceType;
            }
            if (data.currencyCode != null) {
                message.currencyCode = data.currencyCode;
            }
            return message;
        }
        toObject() {
            const data: {
                balanceType?: BalanceType;
                currencyCode?: string;
            } = {};
            if (this.balanceType != null) {
                data.balanceType = this.balanceType;
            }
            if (this.currencyCode != null) {
                data.currencyCode = this.currencyCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.balanceType != BalanceType.BALANCE_TYPE_STRING)
                writer.writeEnum(1, this.balanceType);
            if (this.currencyCode.length)
                writer.writeString(2, this.currencyCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PointsType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PointsType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.balanceType = reader.readEnum();
                        break;
                    case 2:
                        message.currencyCode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PointsType {
            return PointsType.deserialize(bytes);
        }
    }
    export class Program extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            localizedName?: dependency_3.io.LocalizedString;
            status?: dependency_5.io.ProjectStatus[];
            quota?: dependency_6.io.Quota;
            passTypeIdentifier?: string;
            distributionSettings?: dependency_2.io.DistributionSettings;
            autoDeleteDaysAfterExpiry?: number;
            expiryMessage?: string;
            localizedExpiryMessage?: dependency_3.io.LocalizedString;
            pointsType?: PointsType;
            secondaryPointsType?: PointsType;
            metrics?: dependency_4.io.Metrics;
            metaFieldsList?: string[];
            created?: dependency_1.google.protobuf.Timestamp;
            updated?: dependency_1.google.protobuf.Timestamp;
            profileImageSettings?: ProfileImageSetting;
            applyFieldToExternalIdOnEnrol?: CustomExternalId;
            eventCaptureSettings?: EventCaptureSettings;
            passRecoverySettings?: PassRecoverySettings;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 20], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("localizedName" in data && data.localizedName != undefined) {
                    this.localizedName = data.localizedName;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("quota" in data && data.quota != undefined) {
                    this.quota = data.quota;
                }
                if ("passTypeIdentifier" in data && data.passTypeIdentifier != undefined) {
                    this.passTypeIdentifier = data.passTypeIdentifier;
                }
                if ("distributionSettings" in data && data.distributionSettings != undefined) {
                    this.distributionSettings = data.distributionSettings;
                }
                if ("autoDeleteDaysAfterExpiry" in data && data.autoDeleteDaysAfterExpiry != undefined) {
                    this.autoDeleteDaysAfterExpiry = data.autoDeleteDaysAfterExpiry;
                }
                if ("expiryMessage" in data && data.expiryMessage != undefined) {
                    this.expiryMessage = data.expiryMessage;
                }
                if ("localizedExpiryMessage" in data && data.localizedExpiryMessage != undefined) {
                    this.localizedExpiryMessage = data.localizedExpiryMessage;
                }
                if ("pointsType" in data && data.pointsType != undefined) {
                    this.pointsType = data.pointsType;
                }
                if ("secondaryPointsType" in data && data.secondaryPointsType != undefined) {
                    this.secondaryPointsType = data.secondaryPointsType;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
                if ("metaFieldsList" in data && data.metaFieldsList != undefined) {
                    this.metaFieldsList = data.metaFieldsList;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
                if ("profileImageSettings" in data && data.profileImageSettings != undefined) {
                    this.profileImageSettings = data.profileImageSettings;
                }
                if ("applyFieldToExternalIdOnEnrol" in data && data.applyFieldToExternalIdOnEnrol != undefined) {
                    this.applyFieldToExternalIdOnEnrol = data.applyFieldToExternalIdOnEnrol;
                }
                if ("eventCaptureSettings" in data && data.eventCaptureSettings != undefined) {
                    this.eventCaptureSettings = data.eventCaptureSettings;
                }
                if ("passRecoverySettings" in data && data.passRecoverySettings != undefined) {
                    this.passRecoverySettings = data.passRecoverySettings;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get localizedName() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.LocalizedString, 3) as dependency_3.io.LocalizedString;
        }
        set localizedName(value: dependency_3.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocalizedName() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as dependency_5.io.ProjectStatus[];
        }
        set status(value: dependency_5.io.ProjectStatus[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get quota() {
            return pb_1.Message.getWrapperField(this, dependency_6.io.Quota, 5) as dependency_6.io.Quota;
        }
        set quota(value: dependency_6.io.Quota) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasQuota() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get passTypeIdentifier() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set passTypeIdentifier(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get distributionSettings() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.DistributionSettings, 7) as dependency_2.io.DistributionSettings;
        }
        set distributionSettings(value: dependency_2.io.DistributionSettings) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasDistributionSettings() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get autoDeleteDaysAfterExpiry() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set autoDeleteDaysAfterExpiry(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get expiryMessage() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set expiryMessage(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get localizedExpiryMessage() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.LocalizedString, 11) as dependency_3.io.LocalizedString;
        }
        set localizedExpiryMessage(value: dependency_3.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasLocalizedExpiryMessage() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get pointsType() {
            return pb_1.Message.getWrapperField(this, PointsType, 16) as PointsType;
        }
        set pointsType(value: PointsType) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get hasPointsType() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get secondaryPointsType() {
            return pb_1.Message.getWrapperField(this, PointsType, 17) as PointsType;
        }
        set secondaryPointsType(value: PointsType) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get hasSecondaryPointsType() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get metrics() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.Metrics, 19) as dependency_4.io.Metrics;
        }
        set metrics(value: dependency_4.io.Metrics) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get hasMetrics() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get metaFieldsList() {
            return pb_1.Message.getFieldWithDefault(this, 20, []) as string[];
        }
        set metaFieldsList(value: string[]) {
            pb_1.Message.setField(this, 20, value);
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 21) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 21, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 22) as dependency_1.google.protobuf.Timestamp;
        }
        set updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 22, value);
        }
        get hasUpdated() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get profileImageSettings() {
            return pb_1.Message.getFieldWithDefault(this, 23, ProfileImageSetting.PROFILE_IMAGE_NONE) as ProfileImageSetting;
        }
        set profileImageSettings(value: ProfileImageSetting) {
            pb_1.Message.setField(this, 23, value);
        }
        get applyFieldToExternalIdOnEnrol() {
            return pb_1.Message.getWrapperField(this, CustomExternalId, 24) as CustomExternalId;
        }
        set applyFieldToExternalIdOnEnrol(value: CustomExternalId) {
            pb_1.Message.setWrapperField(this, 24, value);
        }
        get hasApplyFieldToExternalIdOnEnrol() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get eventCaptureSettings() {
            return pb_1.Message.getWrapperField(this, EventCaptureSettings, 25) as EventCaptureSettings;
        }
        set eventCaptureSettings(value: EventCaptureSettings) {
            pb_1.Message.setWrapperField(this, 25, value);
        }
        get hasEventCaptureSettings() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get passRecoverySettings() {
            return pb_1.Message.getWrapperField(this, PassRecoverySettings, 26) as PassRecoverySettings;
        }
        set passRecoverySettings(value: PassRecoverySettings) {
            pb_1.Message.setWrapperField(this, 26, value);
        }
        get hasPassRecoverySettings() {
            return pb_1.Message.getField(this, 26) != null;
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            localizedName?: ReturnType<typeof dependency_3.io.LocalizedString.prototype.toObject>;
            status?: dependency_5.io.ProjectStatus[];
            quota?: ReturnType<typeof dependency_6.io.Quota.prototype.toObject>;
            passTypeIdentifier?: string;
            distributionSettings?: ReturnType<typeof dependency_2.io.DistributionSettings.prototype.toObject>;
            autoDeleteDaysAfterExpiry?: number;
            expiryMessage?: string;
            localizedExpiryMessage?: ReturnType<typeof dependency_3.io.LocalizedString.prototype.toObject>;
            pointsType?: ReturnType<typeof PointsType.prototype.toObject>;
            secondaryPointsType?: ReturnType<typeof PointsType.prototype.toObject>;
            metrics?: ReturnType<typeof dependency_4.io.Metrics.prototype.toObject>;
            metaFieldsList?: string[];
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            profileImageSettings?: ProfileImageSetting;
            applyFieldToExternalIdOnEnrol?: ReturnType<typeof CustomExternalId.prototype.toObject>;
            eventCaptureSettings?: ReturnType<typeof EventCaptureSettings.prototype.toObject>;
            passRecoverySettings?: ReturnType<typeof PassRecoverySettings.prototype.toObject>;
        }): Program {
            const message = new Program({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.localizedName != null) {
                message.localizedName = dependency_3.io.LocalizedString.fromObject(data.localizedName);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.quota != null) {
                message.quota = dependency_6.io.Quota.fromObject(data.quota);
            }
            if (data.passTypeIdentifier != null) {
                message.passTypeIdentifier = data.passTypeIdentifier;
            }
            if (data.distributionSettings != null) {
                message.distributionSettings = dependency_2.io.DistributionSettings.fromObject(data.distributionSettings);
            }
            if (data.autoDeleteDaysAfterExpiry != null) {
                message.autoDeleteDaysAfterExpiry = data.autoDeleteDaysAfterExpiry;
            }
            if (data.expiryMessage != null) {
                message.expiryMessage = data.expiryMessage;
            }
            if (data.localizedExpiryMessage != null) {
                message.localizedExpiryMessage = dependency_3.io.LocalizedString.fromObject(data.localizedExpiryMessage);
            }
            if (data.pointsType != null) {
                message.pointsType = PointsType.fromObject(data.pointsType);
            }
            if (data.secondaryPointsType != null) {
                message.secondaryPointsType = PointsType.fromObject(data.secondaryPointsType);
            }
            if (data.metrics != null) {
                message.metrics = dependency_4.io.Metrics.fromObject(data.metrics);
            }
            if (data.metaFieldsList != null) {
                message.metaFieldsList = data.metaFieldsList;
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_1.google.protobuf.Timestamp.fromObject(data.updated);
            }
            if (data.profileImageSettings != null) {
                message.profileImageSettings = data.profileImageSettings;
            }
            if (data.applyFieldToExternalIdOnEnrol != null) {
                message.applyFieldToExternalIdOnEnrol = CustomExternalId.fromObject(data.applyFieldToExternalIdOnEnrol);
            }
            if (data.eventCaptureSettings != null) {
                message.eventCaptureSettings = EventCaptureSettings.fromObject(data.eventCaptureSettings);
            }
            if (data.passRecoverySettings != null) {
                message.passRecoverySettings = PassRecoverySettings.fromObject(data.passRecoverySettings);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                localizedName?: ReturnType<typeof dependency_3.io.LocalizedString.prototype.toObject>;
                status?: dependency_5.io.ProjectStatus[];
                quota?: ReturnType<typeof dependency_6.io.Quota.prototype.toObject>;
                passTypeIdentifier?: string;
                distributionSettings?: ReturnType<typeof dependency_2.io.DistributionSettings.prototype.toObject>;
                autoDeleteDaysAfterExpiry?: number;
                expiryMessage?: string;
                localizedExpiryMessage?: ReturnType<typeof dependency_3.io.LocalizedString.prototype.toObject>;
                pointsType?: ReturnType<typeof PointsType.prototype.toObject>;
                secondaryPointsType?: ReturnType<typeof PointsType.prototype.toObject>;
                metrics?: ReturnType<typeof dependency_4.io.Metrics.prototype.toObject>;
                metaFieldsList?: string[];
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                profileImageSettings?: ProfileImageSetting;
                applyFieldToExternalIdOnEnrol?: ReturnType<typeof CustomExternalId.prototype.toObject>;
                eventCaptureSettings?: ReturnType<typeof EventCaptureSettings.prototype.toObject>;
                passRecoverySettings?: ReturnType<typeof PassRecoverySettings.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.localizedName != null) {
                data.localizedName = this.localizedName.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.quota != null) {
                data.quota = this.quota.toObject();
            }
            if (this.passTypeIdentifier != null) {
                data.passTypeIdentifier = this.passTypeIdentifier;
            }
            if (this.distributionSettings != null) {
                data.distributionSettings = this.distributionSettings.toObject();
            }
            if (this.autoDeleteDaysAfterExpiry != null) {
                data.autoDeleteDaysAfterExpiry = this.autoDeleteDaysAfterExpiry;
            }
            if (this.expiryMessage != null) {
                data.expiryMessage = this.expiryMessage;
            }
            if (this.localizedExpiryMessage != null) {
                data.localizedExpiryMessage = this.localizedExpiryMessage.toObject();
            }
            if (this.pointsType != null) {
                data.pointsType = this.pointsType.toObject();
            }
            if (this.secondaryPointsType != null) {
                data.secondaryPointsType = this.secondaryPointsType.toObject();
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.toObject();
            }
            if (this.metaFieldsList != null) {
                data.metaFieldsList = this.metaFieldsList;
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            if (this.profileImageSettings != null) {
                data.profileImageSettings = this.profileImageSettings;
            }
            if (this.applyFieldToExternalIdOnEnrol != null) {
                data.applyFieldToExternalIdOnEnrol = this.applyFieldToExternalIdOnEnrol.toObject();
            }
            if (this.eventCaptureSettings != null) {
                data.eventCaptureSettings = this.eventCaptureSettings.toObject();
            }
            if (this.passRecoverySettings != null) {
                data.passRecoverySettings = this.passRecoverySettings.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.hasLocalizedName)
                writer.writeMessage(3, this.localizedName, () => this.localizedName.serialize(writer));
            if (this.status.length)
                writer.writePackedEnum(4, this.status);
            if (this.hasQuota)
                writer.writeMessage(5, this.quota, () => this.quota.serialize(writer));
            if (this.passTypeIdentifier.length)
                writer.writeString(6, this.passTypeIdentifier);
            if (this.hasDistributionSettings)
                writer.writeMessage(7, this.distributionSettings, () => this.distributionSettings.serialize(writer));
            if (this.autoDeleteDaysAfterExpiry != 0)
                writer.writeUint32(8, this.autoDeleteDaysAfterExpiry);
            if (this.expiryMessage.length)
                writer.writeString(10, this.expiryMessage);
            if (this.hasLocalizedExpiryMessage)
                writer.writeMessage(11, this.localizedExpiryMessage, () => this.localizedExpiryMessage.serialize(writer));
            if (this.hasPointsType)
                writer.writeMessage(16, this.pointsType, () => this.pointsType.serialize(writer));
            if (this.hasSecondaryPointsType)
                writer.writeMessage(17, this.secondaryPointsType, () => this.secondaryPointsType.serialize(writer));
            if (this.hasMetrics)
                writer.writeMessage(19, this.metrics, () => this.metrics.serialize(writer));
            if (this.metaFieldsList.length)
                writer.writeRepeatedString(20, this.metaFieldsList);
            if (this.hasCreated)
                writer.writeMessage(21, this.created, () => this.created.serialize(writer));
            if (this.hasUpdated)
                writer.writeMessage(22, this.updated, () => this.updated.serialize(writer));
            if (this.profileImageSettings != ProfileImageSetting.PROFILE_IMAGE_NONE)
                writer.writeEnum(23, this.profileImageSettings);
            if (this.hasApplyFieldToExternalIdOnEnrol)
                writer.writeMessage(24, this.applyFieldToExternalIdOnEnrol, () => this.applyFieldToExternalIdOnEnrol.serialize(writer));
            if (this.hasEventCaptureSettings)
                writer.writeMessage(25, this.eventCaptureSettings, () => this.eventCaptureSettings.serialize(writer));
            if (this.hasPassRecoverySettings)
                writer.writeMessage(26, this.passRecoverySettings, () => this.passRecoverySettings.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Program {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Program();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.localizedName, () => message.localizedName = dependency_3.io.LocalizedString.deserialize(reader));
                        break;
                    case 4:
                        message.status = reader.readPackedEnum();
                        break;
                    case 5:
                        reader.readMessage(message.quota, () => message.quota = dependency_6.io.Quota.deserialize(reader));
                        break;
                    case 6:
                        message.passTypeIdentifier = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.distributionSettings, () => message.distributionSettings = dependency_2.io.DistributionSettings.deserialize(reader));
                        break;
                    case 8:
                        message.autoDeleteDaysAfterExpiry = reader.readUint32();
                        break;
                    case 10:
                        message.expiryMessage = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message.localizedExpiryMessage, () => message.localizedExpiryMessage = dependency_3.io.LocalizedString.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.pointsType, () => message.pointsType = PointsType.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.secondaryPointsType, () => message.secondaryPointsType = PointsType.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.metrics, () => message.metrics = dependency_4.io.Metrics.deserialize(reader));
                        break;
                    case 20:
                        pb_1.Message.addToRepeatedField(message, 20, reader.readString());
                        break;
                    case 21:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.updated, () => message.updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 23:
                        message.profileImageSettings = reader.readEnum();
                        break;
                    case 24:
                        reader.readMessage(message.applyFieldToExternalIdOnEnrol, () => message.applyFieldToExternalIdOnEnrol = CustomExternalId.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.eventCaptureSettings, () => message.eventCaptureSettings = EventCaptureSettings.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.passRecoverySettings, () => message.passRecoverySettings = PassRecoverySettings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Program {
            return Program.deserialize(bytes);
        }
    }
    export class EventCaptureSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            eventDataRetentionSettings?: Map<number, number>;
            smsConfirmUponCheckIn?: boolean;
            emailConfirmUponCheckIn?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("eventDataRetentionSettings" in data && data.eventDataRetentionSettings != undefined) {
                    this.eventDataRetentionSettings = data.eventDataRetentionSettings;
                }
                if ("smsConfirmUponCheckIn" in data && data.smsConfirmUponCheckIn != undefined) {
                    this.smsConfirmUponCheckIn = data.smsConfirmUponCheckIn;
                }
                if ("emailConfirmUponCheckIn" in data && data.emailConfirmUponCheckIn != undefined) {
                    this.emailConfirmUponCheckIn = data.emailConfirmUponCheckIn;
                }
            }
            if (!this.eventDataRetentionSettings)
                this.eventDataRetentionSettings = new Map();
        }
        get eventDataRetentionSettings() {
            return pb_1.Message.getField(this, 1) as any as Map<number, number>;
        }
        set eventDataRetentionSettings(value: Map<number, number>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        get smsConfirmUponCheckIn() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set smsConfirmUponCheckIn(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get emailConfirmUponCheckIn() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set emailConfirmUponCheckIn(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            eventDataRetentionSettings?: {
                [key: number]: number;
            };
            smsConfirmUponCheckIn?: boolean;
            emailConfirmUponCheckIn?: boolean;
        }): EventCaptureSettings {
            const message = new EventCaptureSettings({});
            if (typeof data.eventDataRetentionSettings == "object") {
                message.eventDataRetentionSettings = new Map(Object.entries(data.eventDataRetentionSettings).map(([key, value]) => [Number(key), value]));
            }
            if (data.smsConfirmUponCheckIn != null) {
                message.smsConfirmUponCheckIn = data.smsConfirmUponCheckIn;
            }
            if (data.emailConfirmUponCheckIn != null) {
                message.emailConfirmUponCheckIn = data.emailConfirmUponCheckIn;
            }
            return message;
        }
        toObject() {
            const data: {
                eventDataRetentionSettings?: {
                    [key: number]: number;
                };
                smsConfirmUponCheckIn?: boolean;
                emailConfirmUponCheckIn?: boolean;
            } = {};
            if (this.eventDataRetentionSettings != null) {
                data.eventDataRetentionSettings = (Object.fromEntries)(this.eventDataRetentionSettings);
            }
            if (this.smsConfirmUponCheckIn != null) {
                data.smsConfirmUponCheckIn = this.smsConfirmUponCheckIn;
            }
            if (this.emailConfirmUponCheckIn != null) {
                data.emailConfirmUponCheckIn = this.emailConfirmUponCheckIn;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.eventDataRetentionSettings) {
                writer.writeMessage(1, this.eventDataRetentionSettings, () => {
                    writer.writeUint32(1, key);
                    writer.writeUint32(2, value);
                });
            }
            if (this.smsConfirmUponCheckIn != false)
                writer.writeBool(2, this.smsConfirmUponCheckIn);
            if (this.emailConfirmUponCheckIn != false)
                writer.writeBool(3, this.emailConfirmUponCheckIn);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventCaptureSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventCaptureSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.eventDataRetentionSettings as any, reader, reader.readUint32, reader.readUint32));
                        break;
                    case 2:
                        message.smsConfirmUponCheckIn = reader.readBool();
                        break;
                    case 3:
                        message.emailConfirmUponCheckIn = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventCaptureSettings {
            return EventCaptureSettings.deserialize(bytes);
        }
    }
    export class ProgramCopyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            status?: dependency_5.io.ProjectStatus[];
            passTypeIdentifier?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("passTypeIdentifier" in data && data.passTypeIdentifier != undefined) {
                    this.passTypeIdentifier = data.passTypeIdentifier;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as dependency_5.io.ProjectStatus[];
        }
        set status(value: dependency_5.io.ProjectStatus[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get passTypeIdentifier() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set passTypeIdentifier(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            status?: dependency_5.io.ProjectStatus[];
            passTypeIdentifier?: string;
        }): ProgramCopyRequest {
            const message = new ProgramCopyRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.passTypeIdentifier != null) {
                message.passTypeIdentifier = data.passTypeIdentifier;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                status?: dependency_5.io.ProjectStatus[];
                passTypeIdentifier?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.passTypeIdentifier != null) {
                data.passTypeIdentifier = this.passTypeIdentifier;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.status.length)
                writer.writePackedEnum(3, this.status);
            if (this.passTypeIdentifier.length)
                writer.writeString(4, this.passTypeIdentifier);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProgramCopyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProgramCopyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.status = reader.readPackedEnum();
                        break;
                    case 4:
                        message.passTypeIdentifier = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProgramCopyRequest {
            return ProgramCopyRequest.deserialize(bytes);
        }
    }
    export class ListProgramsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            programs?: Program[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("programs" in data && data.programs != undefined) {
                    this.programs = data.programs;
                }
            }
        }
        get programs() {
            return pb_1.Message.getRepeatedWrapperField(this, Program, 1) as Program[];
        }
        set programs(value: Program[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            programs?: ReturnType<typeof Program.prototype.toObject>[];
        }): ListProgramsResponse {
            const message = new ListProgramsResponse({});
            if (data.programs != null) {
                message.programs = data.programs.map(item => Program.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                programs?: ReturnType<typeof Program.prototype.toObject>[];
            } = {};
            if (this.programs != null) {
                data.programs = this.programs.map((item: Program) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.programs.length)
                writer.writeRepeatedMessage(1, this.programs, (item: Program) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListProgramsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListProgramsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.programs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Program.deserialize(reader), Program));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListProgramsResponse {
            return ListProgramsResponse.deserialize(bytes);
        }
    }
    export class GetMetaKeysResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            keys?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("keys" in data && data.keys != undefined) {
                    this.keys = data.keys;
                }
            }
        }
        get keys() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set keys(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            keys?: string[];
        }): GetMetaKeysResponse {
            const message = new GetMetaKeysResponse({});
            if (data.keys != null) {
                message.keys = data.keys;
            }
            return message;
        }
        toObject() {
            const data: {
                keys?: string[];
            } = {};
            if (this.keys != null) {
                data.keys = this.keys;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.keys.length)
                writer.writeRepeatedString(1, this.keys);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMetaKeysResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMetaKeysResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMetaKeysResponse {
            return GetMetaKeysResponse.deserialize(bytes);
        }
    }
    export class CustomExternalId extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fieldUniqueName?: string;
            errorMessage?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fieldUniqueName" in data && data.fieldUniqueName != undefined) {
                    this.fieldUniqueName = data.fieldUniqueName;
                }
                if ("errorMessage" in data && data.errorMessage != undefined) {
                    this.errorMessage = data.errorMessage;
                }
            }
        }
        get fieldUniqueName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set fieldUniqueName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get errorMessage() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set errorMessage(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            fieldUniqueName?: string;
            errorMessage?: string;
        }): CustomExternalId {
            const message = new CustomExternalId({});
            if (data.fieldUniqueName != null) {
                message.fieldUniqueName = data.fieldUniqueName;
            }
            if (data.errorMessage != null) {
                message.errorMessage = data.errorMessage;
            }
            return message;
        }
        toObject() {
            const data: {
                fieldUniqueName?: string;
                errorMessage?: string;
            } = {};
            if (this.fieldUniqueName != null) {
                data.fieldUniqueName = this.fieldUniqueName;
            }
            if (this.errorMessage != null) {
                data.errorMessage = this.errorMessage;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fieldUniqueName.length)
                writer.writeString(1, this.fieldUniqueName);
            if (this.errorMessage.length)
                writer.writeString(2, this.errorMessage);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomExternalId {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomExternalId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fieldUniqueName = reader.readString();
                        break;
                    case 2:
                        message.errorMessage = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomExternalId {
            return CustomExternalId.deserialize(bytes);
        }
    }
    export class PassRecoverySettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enabled?: boolean;
            delivery?: RecoverPassDelivery;
            errorPageHeader?: string;
            errorPageBody?: string;
            fieldsToMatchUponRecovery?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
                if ("delivery" in data && data.delivery != undefined) {
                    this.delivery = data.delivery;
                }
                if ("errorPageHeader" in data && data.errorPageHeader != undefined) {
                    this.errorPageHeader = data.errorPageHeader;
                }
                if ("errorPageBody" in data && data.errorPageBody != undefined) {
                    this.errorPageBody = data.errorPageBody;
                }
                if ("fieldsToMatchUponRecovery" in data && data.fieldsToMatchUponRecovery != undefined) {
                    this.fieldsToMatchUponRecovery = data.fieldsToMatchUponRecovery;
                }
            }
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get delivery() {
            return pb_1.Message.getFieldWithDefault(this, 2, RecoverPassDelivery.DELIVERY_REDIRECT) as RecoverPassDelivery;
        }
        set delivery(value: RecoverPassDelivery) {
            pb_1.Message.setField(this, 2, value);
        }
        get errorPageHeader() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set errorPageHeader(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get errorPageBody() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set errorPageBody(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get fieldsToMatchUponRecovery() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set fieldsToMatchUponRecovery(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            enabled?: boolean;
            delivery?: RecoverPassDelivery;
            errorPageHeader?: string;
            errorPageBody?: string;
            fieldsToMatchUponRecovery?: string[];
        }): PassRecoverySettings {
            const message = new PassRecoverySettings({});
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            if (data.delivery != null) {
                message.delivery = data.delivery;
            }
            if (data.errorPageHeader != null) {
                message.errorPageHeader = data.errorPageHeader;
            }
            if (data.errorPageBody != null) {
                message.errorPageBody = data.errorPageBody;
            }
            if (data.fieldsToMatchUponRecovery != null) {
                message.fieldsToMatchUponRecovery = data.fieldsToMatchUponRecovery;
            }
            return message;
        }
        toObject() {
            const data: {
                enabled?: boolean;
                delivery?: RecoverPassDelivery;
                errorPageHeader?: string;
                errorPageBody?: string;
                fieldsToMatchUponRecovery?: string[];
            } = {};
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            if (this.delivery != null) {
                data.delivery = this.delivery;
            }
            if (this.errorPageHeader != null) {
                data.errorPageHeader = this.errorPageHeader;
            }
            if (this.errorPageBody != null) {
                data.errorPageBody = this.errorPageBody;
            }
            if (this.fieldsToMatchUponRecovery != null) {
                data.fieldsToMatchUponRecovery = this.fieldsToMatchUponRecovery;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enabled != false)
                writer.writeBool(1, this.enabled);
            if (this.delivery != RecoverPassDelivery.DELIVERY_REDIRECT)
                writer.writeEnum(2, this.delivery);
            if (this.errorPageHeader.length)
                writer.writeString(3, this.errorPageHeader);
            if (this.errorPageBody.length)
                writer.writeString(4, this.errorPageBody);
            if (this.fieldsToMatchUponRecovery.length)
                writer.writeRepeatedString(5, this.fieldsToMatchUponRecovery);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PassRecoverySettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PassRecoverySettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enabled = reader.readBool();
                        break;
                    case 2:
                        message.delivery = reader.readEnum();
                        break;
                    case 3:
                        message.errorPageHeader = reader.readString();
                        break;
                    case 4:
                        message.errorPageBody = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PassRecoverySettings {
            return PassRecoverySettings.deserialize(bytes);
        }
    }
}
