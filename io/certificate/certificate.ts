/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/certificate/certificate.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace io {
    export class CertificateData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            passTypeId?: string;
            teamId?: string;
            teamName?: string;
            serialNumber?: string;
            validFrom?: dependency_1.google.protobuf.Timestamp;
            validTo?: dependency_1.google.protobuf.Timestamp;
            modulus?: string;
            nfcCapable?: boolean;
            ownerUsername?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("passTypeId" in data && data.passTypeId != undefined) {
                    this.passTypeId = data.passTypeId;
                }
                if ("teamId" in data && data.teamId != undefined) {
                    this.teamId = data.teamId;
                }
                if ("teamName" in data && data.teamName != undefined) {
                    this.teamName = data.teamName;
                }
                if ("serialNumber" in data && data.serialNumber != undefined) {
                    this.serialNumber = data.serialNumber;
                }
                if ("validFrom" in data && data.validFrom != undefined) {
                    this.validFrom = data.validFrom;
                }
                if ("validTo" in data && data.validTo != undefined) {
                    this.validTo = data.validTo;
                }
                if ("modulus" in data && data.modulus != undefined) {
                    this.modulus = data.modulus;
                }
                if ("nfcCapable" in data && data.nfcCapable != undefined) {
                    this.nfcCapable = data.nfcCapable;
                }
                if ("ownerUsername" in data && data.ownerUsername != undefined) {
                    this.ownerUsername = data.ownerUsername;
                }
            }
        }
        get passTypeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set passTypeId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get teamId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set teamId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get teamName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set teamName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get serialNumber() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set serialNumber(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get validFrom() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set validFrom(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasValidFrom() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get validTo() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set validTo(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasValidTo() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get modulus() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set modulus(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get nfcCapable() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set nfcCapable(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get ownerUsername() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set ownerUsername(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            passTypeId?: string;
            teamId?: string;
            teamName?: string;
            serialNumber?: string;
            validFrom?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            validTo?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            modulus?: string;
            nfcCapable?: boolean;
            ownerUsername?: string;
        }): CertificateData {
            const message = new CertificateData({});
            if (data.passTypeId != null) {
                message.passTypeId = data.passTypeId;
            }
            if (data.teamId != null) {
                message.teamId = data.teamId;
            }
            if (data.teamName != null) {
                message.teamName = data.teamName;
            }
            if (data.serialNumber != null) {
                message.serialNumber = data.serialNumber;
            }
            if (data.validFrom != null) {
                message.validFrom = dependency_1.google.protobuf.Timestamp.fromObject(data.validFrom);
            }
            if (data.validTo != null) {
                message.validTo = dependency_1.google.protobuf.Timestamp.fromObject(data.validTo);
            }
            if (data.modulus != null) {
                message.modulus = data.modulus;
            }
            if (data.nfcCapable != null) {
                message.nfcCapable = data.nfcCapable;
            }
            if (data.ownerUsername != null) {
                message.ownerUsername = data.ownerUsername;
            }
            return message;
        }
        toObject() {
            const data: {
                passTypeId?: string;
                teamId?: string;
                teamName?: string;
                serialNumber?: string;
                validFrom?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                validTo?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                modulus?: string;
                nfcCapable?: boolean;
                ownerUsername?: string;
            } = {};
            if (this.passTypeId != null) {
                data.passTypeId = this.passTypeId;
            }
            if (this.teamId != null) {
                data.teamId = this.teamId;
            }
            if (this.teamName != null) {
                data.teamName = this.teamName;
            }
            if (this.serialNumber != null) {
                data.serialNumber = this.serialNumber;
            }
            if (this.validFrom != null) {
                data.validFrom = this.validFrom.toObject();
            }
            if (this.validTo != null) {
                data.validTo = this.validTo.toObject();
            }
            if (this.modulus != null) {
                data.modulus = this.modulus;
            }
            if (this.nfcCapable != null) {
                data.nfcCapable = this.nfcCapable;
            }
            if (this.ownerUsername != null) {
                data.ownerUsername = this.ownerUsername;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.passTypeId.length)
                writer.writeString(1, this.passTypeId);
            if (this.teamId.length)
                writer.writeString(2, this.teamId);
            if (this.teamName.length)
                writer.writeString(3, this.teamName);
            if (this.serialNumber.length)
                writer.writeString(4, this.serialNumber);
            if (this.hasValidFrom)
                writer.writeMessage(5, this.validFrom, () => this.validFrom.serialize(writer));
            if (this.hasValidTo)
                writer.writeMessage(6, this.validTo, () => this.validTo.serialize(writer));
            if (this.modulus.length)
                writer.writeString(7, this.modulus);
            if (this.nfcCapable != false)
                writer.writeBool(8, this.nfcCapable);
            if (this.ownerUsername.length)
                writer.writeString(9, this.ownerUsername);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CertificateData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CertificateData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.passTypeId = reader.readString();
                        break;
                    case 2:
                        message.teamId = reader.readString();
                        break;
                    case 3:
                        message.teamName = reader.readString();
                        break;
                    case 4:
                        message.serialNumber = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.validFrom, () => message.validFrom = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.validTo, () => message.validTo = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        message.modulus = reader.readString();
                        break;
                    case 8:
                        message.nfcCapable = reader.readBool();
                        break;
                    case 9:
                        message.ownerUsername = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CertificateData {
            return CertificateData.deserialize(bytes);
        }
    }
    export class PrivateKeyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            expiry?: dependency_1.google.protobuf.Timestamp;
            privateKey?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("expiry" in data && data.expiry != undefined) {
                    this.expiry = data.expiry;
                }
                if ("privateKey" in data && data.privateKey != undefined) {
                    this.privateKey = data.privateKey;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get expiry() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set expiry(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasExpiry() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get privateKey() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set privateKey(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            expiry?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            privateKey?: Uint8Array;
        }): PrivateKeyRequest {
            const message = new PrivateKeyRequest({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.expiry != null) {
                message.expiry = dependency_1.google.protobuf.Timestamp.fromObject(data.expiry);
            }
            if (data.privateKey != null) {
                message.privateKey = data.privateKey;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                expiry?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                privateKey?: Uint8Array;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.expiry != null) {
                data.expiry = this.expiry.toObject();
            }
            if (this.privateKey != null) {
                data.privateKey = this.privateKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.hasExpiry)
                writer.writeMessage(3, this.expiry, () => this.expiry.serialize(writer));
            if (this.privateKey.length)
                writer.writeBytes(4, this.privateKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrivateKeyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrivateKeyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.expiry, () => message.expiry = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        message.privateKey = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrivateKeyRequest {
            return PrivateKeyRequest.deserialize(bytes);
        }
    }
    export class TLSCertificateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            certificate?: Uint8Array;
            caChain?: Uint8Array;
            privateKey?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("certificate" in data && data.certificate != undefined) {
                    this.certificate = data.certificate;
                }
                if ("caChain" in data && data.caChain != undefined) {
                    this.caChain = data.caChain;
                }
                if ("privateKey" in data && data.privateKey != undefined) {
                    this.privateKey = data.privateKey;
                }
            }
        }
        get certificate() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set certificate(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get caChain() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set caChain(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get privateKey() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set privateKey(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            certificate?: Uint8Array;
            caChain?: Uint8Array;
            privateKey?: Uint8Array;
        }): TLSCertificateRequest {
            const message = new TLSCertificateRequest({});
            if (data.certificate != null) {
                message.certificate = data.certificate;
            }
            if (data.caChain != null) {
                message.caChain = data.caChain;
            }
            if (data.privateKey != null) {
                message.privateKey = data.privateKey;
            }
            return message;
        }
        toObject() {
            const data: {
                certificate?: Uint8Array;
                caChain?: Uint8Array;
                privateKey?: Uint8Array;
            } = {};
            if (this.certificate != null) {
                data.certificate = this.certificate;
            }
            if (this.caChain != null) {
                data.caChain = this.caChain;
            }
            if (this.privateKey != null) {
                data.privateKey = this.privateKey;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.certificate.length)
                writer.writeBytes(1, this.certificate);
            if (this.caChain.length)
                writer.writeBytes(2, this.caChain);
            if (this.privateKey.length)
                writer.writeBytes(3, this.privateKey);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TLSCertificateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TLSCertificateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.certificate = reader.readBytes();
                        break;
                    case 2:
                        message.caChain = reader.readBytes();
                        break;
                    case 3:
                        message.privateKey = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TLSCertificateRequest {
            return TLSCertificateRequest.deserialize(bytes);
        }
    }
    export class TLSCertificateData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            commonName?: string;
            serialNumber?: string;
            validFrom?: dependency_1.google.protobuf.Timestamp;
            validTo?: dependency_1.google.protobuf.Timestamp;
            modulus?: string;
            subjectAlternativeNames?: string[];
            ownerUsername?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("commonName" in data && data.commonName != undefined) {
                    this.commonName = data.commonName;
                }
                if ("serialNumber" in data && data.serialNumber != undefined) {
                    this.serialNumber = data.serialNumber;
                }
                if ("validFrom" in data && data.validFrom != undefined) {
                    this.validFrom = data.validFrom;
                }
                if ("validTo" in data && data.validTo != undefined) {
                    this.validTo = data.validTo;
                }
                if ("modulus" in data && data.modulus != undefined) {
                    this.modulus = data.modulus;
                }
                if ("subjectAlternativeNames" in data && data.subjectAlternativeNames != undefined) {
                    this.subjectAlternativeNames = data.subjectAlternativeNames;
                }
                if ("ownerUsername" in data && data.ownerUsername != undefined) {
                    this.ownerUsername = data.ownerUsername;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get commonName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set commonName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get serialNumber() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set serialNumber(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get validFrom() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set validFrom(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasValidFrom() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get validTo() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set validTo(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasValidTo() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get modulus() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set modulus(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get subjectAlternativeNames() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set subjectAlternativeNames(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get ownerUsername() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set ownerUsername(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            commonName?: string;
            serialNumber?: string;
            validFrom?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            validTo?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            modulus?: string;
            subjectAlternativeNames?: string[];
            ownerUsername?: string;
        }): TLSCertificateData {
            const message = new TLSCertificateData({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.commonName != null) {
                message.commonName = data.commonName;
            }
            if (data.serialNumber != null) {
                message.serialNumber = data.serialNumber;
            }
            if (data.validFrom != null) {
                message.validFrom = dependency_1.google.protobuf.Timestamp.fromObject(data.validFrom);
            }
            if (data.validTo != null) {
                message.validTo = dependency_1.google.protobuf.Timestamp.fromObject(data.validTo);
            }
            if (data.modulus != null) {
                message.modulus = data.modulus;
            }
            if (data.subjectAlternativeNames != null) {
                message.subjectAlternativeNames = data.subjectAlternativeNames;
            }
            if (data.ownerUsername != null) {
                message.ownerUsername = data.ownerUsername;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                commonName?: string;
                serialNumber?: string;
                validFrom?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                validTo?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                modulus?: string;
                subjectAlternativeNames?: string[];
                ownerUsername?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.commonName != null) {
                data.commonName = this.commonName;
            }
            if (this.serialNumber != null) {
                data.serialNumber = this.serialNumber;
            }
            if (this.validFrom != null) {
                data.validFrom = this.validFrom.toObject();
            }
            if (this.validTo != null) {
                data.validTo = this.validTo.toObject();
            }
            if (this.modulus != null) {
                data.modulus = this.modulus;
            }
            if (this.subjectAlternativeNames != null) {
                data.subjectAlternativeNames = this.subjectAlternativeNames;
            }
            if (this.ownerUsername != null) {
                data.ownerUsername = this.ownerUsername;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.commonName.length)
                writer.writeString(2, this.commonName);
            if (this.serialNumber.length)
                writer.writeString(3, this.serialNumber);
            if (this.hasValidFrom)
                writer.writeMessage(4, this.validFrom, () => this.validFrom.serialize(writer));
            if (this.hasValidTo)
                writer.writeMessage(5, this.validTo, () => this.validTo.serialize(writer));
            if (this.modulus.length)
                writer.writeString(6, this.modulus);
            if (this.subjectAlternativeNames.length)
                writer.writeRepeatedString(7, this.subjectAlternativeNames);
            if (this.ownerUsername.length)
                writer.writeString(8, this.ownerUsername);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TLSCertificateData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TLSCertificateData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.commonName = reader.readString();
                        break;
                    case 3:
                        message.serialNumber = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.validFrom, () => message.validFrom = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.validTo, () => message.validTo = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        message.modulus = reader.readString();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        message.ownerUsername = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TLSCertificateData {
            return TLSCertificateData.deserialize(bytes);
        }
    }
    export class PrivateKeyData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            description?: string;
            expiry?: dependency_1.google.protobuf.Timestamp;
            ownerUsername?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("expiry" in data && data.expiry != undefined) {
                    this.expiry = data.expiry;
                }
                if ("ownerUsername" in data && data.ownerUsername != undefined) {
                    this.ownerUsername = data.ownerUsername;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get expiry() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set expiry(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasExpiry() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ownerUsername() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ownerUsername(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
            expiry?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            ownerUsername?: string;
        }): PrivateKeyData {
            const message = new PrivateKeyData({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.expiry != null) {
                message.expiry = dependency_1.google.protobuf.Timestamp.fromObject(data.expiry);
            }
            if (data.ownerUsername != null) {
                message.ownerUsername = data.ownerUsername;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
                expiry?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                ownerUsername?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.expiry != null) {
                data.expiry = this.expiry.toObject();
            }
            if (this.ownerUsername != null) {
                data.ownerUsername = this.ownerUsername;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.hasExpiry)
                writer.writeMessage(4, this.expiry, () => this.expiry.serialize(writer));
            if (this.ownerUsername.length)
                writer.writeString(5, this.ownerUsername);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrivateKeyData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrivateKeyData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.expiry, () => message.expiry = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        message.ownerUsername = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PrivateKeyData {
            return PrivateKeyData.deserialize(bytes);
        }
    }
    export class PassTypeIdentifier extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            passTypeId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("passTypeId" in data && data.passTypeId != undefined) {
                    this.passTypeId = data.passTypeId;
                }
            }
        }
        get passTypeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set passTypeId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            passTypeId?: string;
        }): PassTypeIdentifier {
            const message = new PassTypeIdentifier({});
            if (data.passTypeId != null) {
                message.passTypeId = data.passTypeId;
            }
            return message;
        }
        toObject() {
            const data: {
                passTypeId?: string;
            } = {};
            if (this.passTypeId != null) {
                data.passTypeId = this.passTypeId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.passTypeId.length)
                writer.writeString(1, this.passTypeId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PassTypeIdentifier {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PassTypeIdentifier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.passTypeId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PassTypeIdentifier {
            return PassTypeIdentifier.deserialize(bytes);
        }
    }
    export class CertificateSigningRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            csr?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("csr" in data && data.csr != undefined) {
                    this.csr = data.csr;
                }
            }
        }
        get csr() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set csr(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            csr?: string;
        }): CertificateSigningRequest {
            const message = new CertificateSigningRequest({});
            if (data.csr != null) {
                message.csr = data.csr;
            }
            return message;
        }
        toObject() {
            const data: {
                csr?: string;
            } = {};
            if (this.csr != null) {
                data.csr = this.csr;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.csr.length)
                writer.writeString(1, this.csr);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CertificateSigningRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CertificateSigningRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.csr = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CertificateSigningRequest {
            return CertificateSigningRequest.deserialize(bytes);
        }
    }
    export class NFCSigningCredentialsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            password?: string;
            privateKeyId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("privateKeyId" in data && data.privateKeyId != undefined) {
                    this.privateKeyId = data.privateKeyId;
                }
            }
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get privateKeyId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set privateKeyId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            password?: string;
            privateKeyId?: string;
        }): NFCSigningCredentialsRequest {
            const message = new NFCSigningCredentialsRequest({});
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.privateKeyId != null) {
                message.privateKeyId = data.privateKeyId;
            }
            return message;
        }
        toObject() {
            const data: {
                password?: string;
                privateKeyId?: string;
            } = {};
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.privateKeyId != null) {
                data.privateKeyId = this.privateKeyId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.password.length)
                writer.writeString(1, this.password);
            if (this.privateKeyId.length)
                writer.writeString(2, this.privateKeyId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NFCSigningCredentialsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NFCSigningCredentialsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.password = reader.readString();
                        break;
                    case 2:
                        message.privateKeyId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NFCSigningCredentialsRequest {
            return NFCSigningCredentialsRequest.deserialize(bytes);
        }
    }
}
