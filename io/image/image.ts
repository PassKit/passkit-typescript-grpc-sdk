/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/image/image.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../common/localization";
import * as dependency_2 from "./../../protoc-gen-openapiv2/options/annotations";
import * as dependency_3 from "./../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace io {
    export enum ImageUse {
        icon = 0,
        logo = 1,
        appleLogo = 2,
        hero = 3,
        eventStrip = 4,
        strip = 5,
        thumbnail = 6,
        background = 7,
        footer = 8,
        security = 9,
        privilege = 10,
        airlineAlliance = 11,
        personalization = 12,
        banner = 13,
        message = 14,
        profile = 15,
        appImage = 16,
        stampedImage = 18,
        unstampedImage = 19,
        stampImage = 20,
        wideLogo = 21,
        secondaryLogo = 22,
        artwork = 23,
        posterLogo = 24,
        venueMap = 25
    }
    export class ImageIds extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            icon?: string;
            logo?: string;
            appleLogo?: string;
            hero?: string;
            eventStrip?: string;
            strip?: string;
            thumbnail?: string;
            background?: string;
            footer?: string;
            security?: string;
            privilege?: string;
            airlineAlliance?: string;
            personalization?: string;
            banner?: string;
            message?: string;
            profile?: string;
            appImage?: string;
            stampedImage?: string;
            unstampedImage?: string;
            stampImage?: string;
            wideLogo?: string;
            secondaryLogo?: string;
            artwork?: string;
            posterLogo?: string;
            venueMap?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("icon" in data && data.icon != undefined) {
                    this.icon = data.icon;
                }
                if ("logo" in data && data.logo != undefined) {
                    this.logo = data.logo;
                }
                if ("appleLogo" in data && data.appleLogo != undefined) {
                    this.appleLogo = data.appleLogo;
                }
                if ("hero" in data && data.hero != undefined) {
                    this.hero = data.hero;
                }
                if ("eventStrip" in data && data.eventStrip != undefined) {
                    this.eventStrip = data.eventStrip;
                }
                if ("strip" in data && data.strip != undefined) {
                    this.strip = data.strip;
                }
                if ("thumbnail" in data && data.thumbnail != undefined) {
                    this.thumbnail = data.thumbnail;
                }
                if ("background" in data && data.background != undefined) {
                    this.background = data.background;
                }
                if ("footer" in data && data.footer != undefined) {
                    this.footer = data.footer;
                }
                if ("security" in data && data.security != undefined) {
                    this.security = data.security;
                }
                if ("privilege" in data && data.privilege != undefined) {
                    this.privilege = data.privilege;
                }
                if ("airlineAlliance" in data && data.airlineAlliance != undefined) {
                    this.airlineAlliance = data.airlineAlliance;
                }
                if ("personalization" in data && data.personalization != undefined) {
                    this.personalization = data.personalization;
                }
                if ("banner" in data && data.banner != undefined) {
                    this.banner = data.banner;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("profile" in data && data.profile != undefined) {
                    this.profile = data.profile;
                }
                if ("appImage" in data && data.appImage != undefined) {
                    this.appImage = data.appImage;
                }
                if ("stampedImage" in data && data.stampedImage != undefined) {
                    this.stampedImage = data.stampedImage;
                }
                if ("unstampedImage" in data && data.unstampedImage != undefined) {
                    this.unstampedImage = data.unstampedImage;
                }
                if ("stampImage" in data && data.stampImage != undefined) {
                    this.stampImage = data.stampImage;
                }
                if ("wideLogo" in data && data.wideLogo != undefined) {
                    this.wideLogo = data.wideLogo;
                }
                if ("secondaryLogo" in data && data.secondaryLogo != undefined) {
                    this.secondaryLogo = data.secondaryLogo;
                }
                if ("artwork" in data && data.artwork != undefined) {
                    this.artwork = data.artwork;
                }
                if ("posterLogo" in data && data.posterLogo != undefined) {
                    this.posterLogo = data.posterLogo;
                }
                if ("venueMap" in data && data.venueMap != undefined) {
                    this.venueMap = data.venueMap;
                }
            }
        }
        get icon() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set icon(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get logo() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set logo(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get appleLogo() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set appleLogo(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get hero() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set hero(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get eventStrip() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set eventStrip(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get strip() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set strip(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get thumbnail() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set thumbnail(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get background() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set background(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get footer() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set footer(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get security() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set security(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get privilege() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set privilege(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get airlineAlliance() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set airlineAlliance(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get personalization() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set personalization(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get banner() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set banner(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get profile() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set profile(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get appImage() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set appImage(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get stampedImage() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set stampedImage(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get unstampedImage() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set unstampedImage(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get stampImage() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set stampImage(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get wideLogo() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set wideLogo(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get secondaryLogo() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set secondaryLogo(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get artwork() {
            return pb_1.Message.getFieldWithDefault(this, 23, "") as string;
        }
        set artwork(value: string) {
            pb_1.Message.setField(this, 23, value);
        }
        get posterLogo() {
            return pb_1.Message.getFieldWithDefault(this, 24, "") as string;
        }
        set posterLogo(value: string) {
            pb_1.Message.setField(this, 24, value);
        }
        get venueMap() {
            return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
        }
        set venueMap(value: string) {
            pb_1.Message.setField(this, 25, value);
        }
        static fromObject(data: {
            icon?: string;
            logo?: string;
            appleLogo?: string;
            hero?: string;
            eventStrip?: string;
            strip?: string;
            thumbnail?: string;
            background?: string;
            footer?: string;
            security?: string;
            privilege?: string;
            airlineAlliance?: string;
            personalization?: string;
            banner?: string;
            message?: string;
            profile?: string;
            appImage?: string;
            stampedImage?: string;
            unstampedImage?: string;
            stampImage?: string;
            wideLogo?: string;
            secondaryLogo?: string;
            artwork?: string;
            posterLogo?: string;
            venueMap?: string;
        }): ImageIds {
            const message = new ImageIds({});
            if (data.icon != null) {
                message.icon = data.icon;
            }
            if (data.logo != null) {
                message.logo = data.logo;
            }
            if (data.appleLogo != null) {
                message.appleLogo = data.appleLogo;
            }
            if (data.hero != null) {
                message.hero = data.hero;
            }
            if (data.eventStrip != null) {
                message.eventStrip = data.eventStrip;
            }
            if (data.strip != null) {
                message.strip = data.strip;
            }
            if (data.thumbnail != null) {
                message.thumbnail = data.thumbnail;
            }
            if (data.background != null) {
                message.background = data.background;
            }
            if (data.footer != null) {
                message.footer = data.footer;
            }
            if (data.security != null) {
                message.security = data.security;
            }
            if (data.privilege != null) {
                message.privilege = data.privilege;
            }
            if (data.airlineAlliance != null) {
                message.airlineAlliance = data.airlineAlliance;
            }
            if (data.personalization != null) {
                message.personalization = data.personalization;
            }
            if (data.banner != null) {
                message.banner = data.banner;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.profile != null) {
                message.profile = data.profile;
            }
            if (data.appImage != null) {
                message.appImage = data.appImage;
            }
            if (data.stampedImage != null) {
                message.stampedImage = data.stampedImage;
            }
            if (data.unstampedImage != null) {
                message.unstampedImage = data.unstampedImage;
            }
            if (data.stampImage != null) {
                message.stampImage = data.stampImage;
            }
            if (data.wideLogo != null) {
                message.wideLogo = data.wideLogo;
            }
            if (data.secondaryLogo != null) {
                message.secondaryLogo = data.secondaryLogo;
            }
            if (data.artwork != null) {
                message.artwork = data.artwork;
            }
            if (data.posterLogo != null) {
                message.posterLogo = data.posterLogo;
            }
            if (data.venueMap != null) {
                message.venueMap = data.venueMap;
            }
            return message;
        }
        toObject() {
            const data: {
                icon?: string;
                logo?: string;
                appleLogo?: string;
                hero?: string;
                eventStrip?: string;
                strip?: string;
                thumbnail?: string;
                background?: string;
                footer?: string;
                security?: string;
                privilege?: string;
                airlineAlliance?: string;
                personalization?: string;
                banner?: string;
                message?: string;
                profile?: string;
                appImage?: string;
                stampedImage?: string;
                unstampedImage?: string;
                stampImage?: string;
                wideLogo?: string;
                secondaryLogo?: string;
                artwork?: string;
                posterLogo?: string;
                venueMap?: string;
            } = {};
            if (this.icon != null) {
                data.icon = this.icon;
            }
            if (this.logo != null) {
                data.logo = this.logo;
            }
            if (this.appleLogo != null) {
                data.appleLogo = this.appleLogo;
            }
            if (this.hero != null) {
                data.hero = this.hero;
            }
            if (this.eventStrip != null) {
                data.eventStrip = this.eventStrip;
            }
            if (this.strip != null) {
                data.strip = this.strip;
            }
            if (this.thumbnail != null) {
                data.thumbnail = this.thumbnail;
            }
            if (this.background != null) {
                data.background = this.background;
            }
            if (this.footer != null) {
                data.footer = this.footer;
            }
            if (this.security != null) {
                data.security = this.security;
            }
            if (this.privilege != null) {
                data.privilege = this.privilege;
            }
            if (this.airlineAlliance != null) {
                data.airlineAlliance = this.airlineAlliance;
            }
            if (this.personalization != null) {
                data.personalization = this.personalization;
            }
            if (this.banner != null) {
                data.banner = this.banner;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.profile != null) {
                data.profile = this.profile;
            }
            if (this.appImage != null) {
                data.appImage = this.appImage;
            }
            if (this.stampedImage != null) {
                data.stampedImage = this.stampedImage;
            }
            if (this.unstampedImage != null) {
                data.unstampedImage = this.unstampedImage;
            }
            if (this.stampImage != null) {
                data.stampImage = this.stampImage;
            }
            if (this.wideLogo != null) {
                data.wideLogo = this.wideLogo;
            }
            if (this.secondaryLogo != null) {
                data.secondaryLogo = this.secondaryLogo;
            }
            if (this.artwork != null) {
                data.artwork = this.artwork;
            }
            if (this.posterLogo != null) {
                data.posterLogo = this.posterLogo;
            }
            if (this.venueMap != null) {
                data.venueMap = this.venueMap;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.icon.length)
                writer.writeString(1, this.icon);
            if (this.logo.length)
                writer.writeString(2, this.logo);
            if (this.appleLogo.length)
                writer.writeString(3, this.appleLogo);
            if (this.hero.length)
                writer.writeString(4, this.hero);
            if (this.eventStrip.length)
                writer.writeString(5, this.eventStrip);
            if (this.strip.length)
                writer.writeString(6, this.strip);
            if (this.thumbnail.length)
                writer.writeString(7, this.thumbnail);
            if (this.background.length)
                writer.writeString(8, this.background);
            if (this.footer.length)
                writer.writeString(9, this.footer);
            if (this.security.length)
                writer.writeString(10, this.security);
            if (this.privilege.length)
                writer.writeString(11, this.privilege);
            if (this.airlineAlliance.length)
                writer.writeString(12, this.airlineAlliance);
            if (this.personalization.length)
                writer.writeString(13, this.personalization);
            if (this.banner.length)
                writer.writeString(14, this.banner);
            if (this.message.length)
                writer.writeString(15, this.message);
            if (this.profile.length)
                writer.writeString(16, this.profile);
            if (this.appImage.length)
                writer.writeString(17, this.appImage);
            if (this.stampedImage.length)
                writer.writeString(18, this.stampedImage);
            if (this.unstampedImage.length)
                writer.writeString(19, this.unstampedImage);
            if (this.stampImage.length)
                writer.writeString(20, this.stampImage);
            if (this.wideLogo.length)
                writer.writeString(21, this.wideLogo);
            if (this.secondaryLogo.length)
                writer.writeString(22, this.secondaryLogo);
            if (this.artwork.length)
                writer.writeString(23, this.artwork);
            if (this.posterLogo.length)
                writer.writeString(24, this.posterLogo);
            if (this.venueMap.length)
                writer.writeString(25, this.venueMap);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageIds {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageIds();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.icon = reader.readString();
                        break;
                    case 2:
                        message.logo = reader.readString();
                        break;
                    case 3:
                        message.appleLogo = reader.readString();
                        break;
                    case 4:
                        message.hero = reader.readString();
                        break;
                    case 5:
                        message.eventStrip = reader.readString();
                        break;
                    case 6:
                        message.strip = reader.readString();
                        break;
                    case 7:
                        message.thumbnail = reader.readString();
                        break;
                    case 8:
                        message.background = reader.readString();
                        break;
                    case 9:
                        message.footer = reader.readString();
                        break;
                    case 10:
                        message.security = reader.readString();
                        break;
                    case 11:
                        message.privilege = reader.readString();
                        break;
                    case 12:
                        message.airlineAlliance = reader.readString();
                        break;
                    case 13:
                        message.personalization = reader.readString();
                        break;
                    case 14:
                        message.banner = reader.readString();
                        break;
                    case 15:
                        message.message = reader.readString();
                        break;
                    case 16:
                        message.profile = reader.readString();
                        break;
                    case 17:
                        message.appImage = reader.readString();
                        break;
                    case 18:
                        message.stampedImage = reader.readString();
                        break;
                    case 19:
                        message.unstampedImage = reader.readString();
                        break;
                    case 20:
                        message.stampImage = reader.readString();
                        break;
                    case 21:
                        message.wideLogo = reader.readString();
                        break;
                    case 22:
                        message.secondaryLogo = reader.readString();
                        break;
                    case 23:
                        message.artwork = reader.readString();
                        break;
                    case 24:
                        message.posterLogo = reader.readString();
                        break;
                    case 25:
                        message.venueMap = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImageIds {
            return ImageIds.deserialize(bytes);
        }
    }
    export class ImageData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            icon?: string;
            logo?: string;
            appleLogo?: string;
            hero?: string;
            eventStrip?: string;
            strip?: string;
            thumbnail?: string;
            background?: string;
            footer?: string;
            security?: string;
            privilege?: string;
            airlineAlliance?: string;
            personalization?: string;
            banner?: string;
            message?: string;
            profile?: string;
            appImage?: string;
            stampedImage?: string;
            unstampedImage?: string;
            stampConfig?: StampImageConfig;
            wideLogo?: string;
            secondaryLogo?: string;
            artwork?: string;
            posterLogo?: string;
            venueMap?: string;
            localizedIcon?: dependency_1.io.LocalizedString;
            localizedLogo?: dependency_1.io.LocalizedString;
            localizedAppleLogo?: dependency_1.io.LocalizedString;
            localizedHero?: dependency_1.io.LocalizedString;
            localizedEventStrip?: dependency_1.io.LocalizedString;
            localizedStrip?: dependency_1.io.LocalizedString;
            localizedThumbnail?: dependency_1.io.LocalizedString;
            localizedBackground?: dependency_1.io.LocalizedString;
            localizedFooter?: dependency_1.io.LocalizedString;
            localizedSecurity?: dependency_1.io.LocalizedString;
            localizedPrivilege?: dependency_1.io.LocalizedString;
            localizedAirlineAlliance?: dependency_1.io.LocalizedString;
            localizedPersonalization?: dependency_1.io.LocalizedString;
            localizedBanner?: dependency_1.io.LocalizedString;
            localizedMessage?: dependency_1.io.LocalizedString;
            localizedWideLogo?: dependency_1.io.LocalizedString;
            localizedSecondaryLogo?: dependency_1.io.LocalizedString;
            localizedArtwork?: dependency_1.io.LocalizedString;
            localizedPosterLogo?: dependency_1.io.LocalizedString;
            localizedVenueMap?: dependency_1.io.LocalizedString;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("icon" in data && data.icon != undefined) {
                    this.icon = data.icon;
                }
                if ("logo" in data && data.logo != undefined) {
                    this.logo = data.logo;
                }
                if ("appleLogo" in data && data.appleLogo != undefined) {
                    this.appleLogo = data.appleLogo;
                }
                if ("hero" in data && data.hero != undefined) {
                    this.hero = data.hero;
                }
                if ("eventStrip" in data && data.eventStrip != undefined) {
                    this.eventStrip = data.eventStrip;
                }
                if ("strip" in data && data.strip != undefined) {
                    this.strip = data.strip;
                }
                if ("thumbnail" in data && data.thumbnail != undefined) {
                    this.thumbnail = data.thumbnail;
                }
                if ("background" in data && data.background != undefined) {
                    this.background = data.background;
                }
                if ("footer" in data && data.footer != undefined) {
                    this.footer = data.footer;
                }
                if ("security" in data && data.security != undefined) {
                    this.security = data.security;
                }
                if ("privilege" in data && data.privilege != undefined) {
                    this.privilege = data.privilege;
                }
                if ("airlineAlliance" in data && data.airlineAlliance != undefined) {
                    this.airlineAlliance = data.airlineAlliance;
                }
                if ("personalization" in data && data.personalization != undefined) {
                    this.personalization = data.personalization;
                }
                if ("banner" in data && data.banner != undefined) {
                    this.banner = data.banner;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("profile" in data && data.profile != undefined) {
                    this.profile = data.profile;
                }
                if ("appImage" in data && data.appImage != undefined) {
                    this.appImage = data.appImage;
                }
                if ("stampedImage" in data && data.stampedImage != undefined) {
                    this.stampedImage = data.stampedImage;
                }
                if ("unstampedImage" in data && data.unstampedImage != undefined) {
                    this.unstampedImage = data.unstampedImage;
                }
                if ("stampConfig" in data && data.stampConfig != undefined) {
                    this.stampConfig = data.stampConfig;
                }
                if ("wideLogo" in data && data.wideLogo != undefined) {
                    this.wideLogo = data.wideLogo;
                }
                if ("secondaryLogo" in data && data.secondaryLogo != undefined) {
                    this.secondaryLogo = data.secondaryLogo;
                }
                if ("artwork" in data && data.artwork != undefined) {
                    this.artwork = data.artwork;
                }
                if ("posterLogo" in data && data.posterLogo != undefined) {
                    this.posterLogo = data.posterLogo;
                }
                if ("venueMap" in data && data.venueMap != undefined) {
                    this.venueMap = data.venueMap;
                }
                if ("localizedIcon" in data && data.localizedIcon != undefined) {
                    this.localizedIcon = data.localizedIcon;
                }
                if ("localizedLogo" in data && data.localizedLogo != undefined) {
                    this.localizedLogo = data.localizedLogo;
                }
                if ("localizedAppleLogo" in data && data.localizedAppleLogo != undefined) {
                    this.localizedAppleLogo = data.localizedAppleLogo;
                }
                if ("localizedHero" in data && data.localizedHero != undefined) {
                    this.localizedHero = data.localizedHero;
                }
                if ("localizedEventStrip" in data && data.localizedEventStrip != undefined) {
                    this.localizedEventStrip = data.localizedEventStrip;
                }
                if ("localizedStrip" in data && data.localizedStrip != undefined) {
                    this.localizedStrip = data.localizedStrip;
                }
                if ("localizedThumbnail" in data && data.localizedThumbnail != undefined) {
                    this.localizedThumbnail = data.localizedThumbnail;
                }
                if ("localizedBackground" in data && data.localizedBackground != undefined) {
                    this.localizedBackground = data.localizedBackground;
                }
                if ("localizedFooter" in data && data.localizedFooter != undefined) {
                    this.localizedFooter = data.localizedFooter;
                }
                if ("localizedSecurity" in data && data.localizedSecurity != undefined) {
                    this.localizedSecurity = data.localizedSecurity;
                }
                if ("localizedPrivilege" in data && data.localizedPrivilege != undefined) {
                    this.localizedPrivilege = data.localizedPrivilege;
                }
                if ("localizedAirlineAlliance" in data && data.localizedAirlineAlliance != undefined) {
                    this.localizedAirlineAlliance = data.localizedAirlineAlliance;
                }
                if ("localizedPersonalization" in data && data.localizedPersonalization != undefined) {
                    this.localizedPersonalization = data.localizedPersonalization;
                }
                if ("localizedBanner" in data && data.localizedBanner != undefined) {
                    this.localizedBanner = data.localizedBanner;
                }
                if ("localizedMessage" in data && data.localizedMessage != undefined) {
                    this.localizedMessage = data.localizedMessage;
                }
                if ("localizedWideLogo" in data && data.localizedWideLogo != undefined) {
                    this.localizedWideLogo = data.localizedWideLogo;
                }
                if ("localizedSecondaryLogo" in data && data.localizedSecondaryLogo != undefined) {
                    this.localizedSecondaryLogo = data.localizedSecondaryLogo;
                }
                if ("localizedArtwork" in data && data.localizedArtwork != undefined) {
                    this.localizedArtwork = data.localizedArtwork;
                }
                if ("localizedPosterLogo" in data && data.localizedPosterLogo != undefined) {
                    this.localizedPosterLogo = data.localizedPosterLogo;
                }
                if ("localizedVenueMap" in data && data.localizedVenueMap != undefined) {
                    this.localizedVenueMap = data.localizedVenueMap;
                }
            }
        }
        get icon() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set icon(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get logo() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set logo(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get appleLogo() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set appleLogo(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get hero() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set hero(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get eventStrip() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set eventStrip(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get strip() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set strip(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get thumbnail() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set thumbnail(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get background() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set background(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get footer() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set footer(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get security() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set security(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get privilege() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set privilege(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get airlineAlliance() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set airlineAlliance(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get personalization() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set personalization(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get banner() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set banner(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get profile() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set profile(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get appImage() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set appImage(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get stampedImage() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set stampedImage(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get unstampedImage() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set unstampedImage(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get stampConfig() {
            return pb_1.Message.getWrapperField(this, StampImageConfig, 20) as StampImageConfig;
        }
        set stampConfig(value: StampImageConfig) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get hasStampConfig() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get wideLogo() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set wideLogo(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get secondaryLogo() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set secondaryLogo(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get artwork() {
            return pb_1.Message.getFieldWithDefault(this, 23, "") as string;
        }
        set artwork(value: string) {
            pb_1.Message.setField(this, 23, value);
        }
        get posterLogo() {
            return pb_1.Message.getFieldWithDefault(this, 24, "") as string;
        }
        set posterLogo(value: string) {
            pb_1.Message.setField(this, 24, value);
        }
        get venueMap() {
            return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
        }
        set venueMap(value: string) {
            pb_1.Message.setField(this, 25, value);
        }
        get localizedIcon() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 31) as dependency_1.io.LocalizedString;
        }
        set localizedIcon(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 31, value);
        }
        get hasLocalizedIcon() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get localizedLogo() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 32) as dependency_1.io.LocalizedString;
        }
        set localizedLogo(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 32, value);
        }
        get hasLocalizedLogo() {
            return pb_1.Message.getField(this, 32) != null;
        }
        get localizedAppleLogo() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 33) as dependency_1.io.LocalizedString;
        }
        set localizedAppleLogo(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 33, value);
        }
        get hasLocalizedAppleLogo() {
            return pb_1.Message.getField(this, 33) != null;
        }
        get localizedHero() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 34) as dependency_1.io.LocalizedString;
        }
        set localizedHero(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 34, value);
        }
        get hasLocalizedHero() {
            return pb_1.Message.getField(this, 34) != null;
        }
        get localizedEventStrip() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 35) as dependency_1.io.LocalizedString;
        }
        set localizedEventStrip(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 35, value);
        }
        get hasLocalizedEventStrip() {
            return pb_1.Message.getField(this, 35) != null;
        }
        get localizedStrip() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 36) as dependency_1.io.LocalizedString;
        }
        set localizedStrip(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 36, value);
        }
        get hasLocalizedStrip() {
            return pb_1.Message.getField(this, 36) != null;
        }
        get localizedThumbnail() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 37) as dependency_1.io.LocalizedString;
        }
        set localizedThumbnail(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 37, value);
        }
        get hasLocalizedThumbnail() {
            return pb_1.Message.getField(this, 37) != null;
        }
        get localizedBackground() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 38) as dependency_1.io.LocalizedString;
        }
        set localizedBackground(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 38, value);
        }
        get hasLocalizedBackground() {
            return pb_1.Message.getField(this, 38) != null;
        }
        get localizedFooter() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 39) as dependency_1.io.LocalizedString;
        }
        set localizedFooter(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 39, value);
        }
        get hasLocalizedFooter() {
            return pb_1.Message.getField(this, 39) != null;
        }
        get localizedSecurity() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 40) as dependency_1.io.LocalizedString;
        }
        set localizedSecurity(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 40, value);
        }
        get hasLocalizedSecurity() {
            return pb_1.Message.getField(this, 40) != null;
        }
        get localizedPrivilege() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 41) as dependency_1.io.LocalizedString;
        }
        set localizedPrivilege(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 41, value);
        }
        get hasLocalizedPrivilege() {
            return pb_1.Message.getField(this, 41) != null;
        }
        get localizedAirlineAlliance() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 42) as dependency_1.io.LocalizedString;
        }
        set localizedAirlineAlliance(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 42, value);
        }
        get hasLocalizedAirlineAlliance() {
            return pb_1.Message.getField(this, 42) != null;
        }
        get localizedPersonalization() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 43) as dependency_1.io.LocalizedString;
        }
        set localizedPersonalization(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 43, value);
        }
        get hasLocalizedPersonalization() {
            return pb_1.Message.getField(this, 43) != null;
        }
        get localizedBanner() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 44) as dependency_1.io.LocalizedString;
        }
        set localizedBanner(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 44, value);
        }
        get hasLocalizedBanner() {
            return pb_1.Message.getField(this, 44) != null;
        }
        get localizedMessage() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 45) as dependency_1.io.LocalizedString;
        }
        set localizedMessage(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 45, value);
        }
        get hasLocalizedMessage() {
            return pb_1.Message.getField(this, 45) != null;
        }
        get localizedWideLogo() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 46) as dependency_1.io.LocalizedString;
        }
        set localizedWideLogo(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 46, value);
        }
        get hasLocalizedWideLogo() {
            return pb_1.Message.getField(this, 46) != null;
        }
        get localizedSecondaryLogo() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 47) as dependency_1.io.LocalizedString;
        }
        set localizedSecondaryLogo(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 47, value);
        }
        get hasLocalizedSecondaryLogo() {
            return pb_1.Message.getField(this, 47) != null;
        }
        get localizedArtwork() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 48) as dependency_1.io.LocalizedString;
        }
        set localizedArtwork(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 48, value);
        }
        get hasLocalizedArtwork() {
            return pb_1.Message.getField(this, 48) != null;
        }
        get localizedPosterLogo() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 49) as dependency_1.io.LocalizedString;
        }
        set localizedPosterLogo(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 49, value);
        }
        get hasLocalizedPosterLogo() {
            return pb_1.Message.getField(this, 49) != null;
        }
        get localizedVenueMap() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 50) as dependency_1.io.LocalizedString;
        }
        set localizedVenueMap(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 50, value);
        }
        get hasLocalizedVenueMap() {
            return pb_1.Message.getField(this, 50) != null;
        }
        static fromObject(data: {
            icon?: string;
            logo?: string;
            appleLogo?: string;
            hero?: string;
            eventStrip?: string;
            strip?: string;
            thumbnail?: string;
            background?: string;
            footer?: string;
            security?: string;
            privilege?: string;
            airlineAlliance?: string;
            personalization?: string;
            banner?: string;
            message?: string;
            profile?: string;
            appImage?: string;
            stampedImage?: string;
            unstampedImage?: string;
            stampConfig?: ReturnType<typeof StampImageConfig.prototype.toObject>;
            wideLogo?: string;
            secondaryLogo?: string;
            artwork?: string;
            posterLogo?: string;
            venueMap?: string;
            localizedIcon?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedLogo?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedAppleLogo?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedHero?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedEventStrip?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedStrip?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedThumbnail?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedBackground?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedFooter?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedSecurity?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedPrivilege?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedAirlineAlliance?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedPersonalization?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedBanner?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedMessage?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedWideLogo?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedSecondaryLogo?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedArtwork?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedPosterLogo?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            localizedVenueMap?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
        }): ImageData {
            const message = new ImageData({});
            if (data.icon != null) {
                message.icon = data.icon;
            }
            if (data.logo != null) {
                message.logo = data.logo;
            }
            if (data.appleLogo != null) {
                message.appleLogo = data.appleLogo;
            }
            if (data.hero != null) {
                message.hero = data.hero;
            }
            if (data.eventStrip != null) {
                message.eventStrip = data.eventStrip;
            }
            if (data.strip != null) {
                message.strip = data.strip;
            }
            if (data.thumbnail != null) {
                message.thumbnail = data.thumbnail;
            }
            if (data.background != null) {
                message.background = data.background;
            }
            if (data.footer != null) {
                message.footer = data.footer;
            }
            if (data.security != null) {
                message.security = data.security;
            }
            if (data.privilege != null) {
                message.privilege = data.privilege;
            }
            if (data.airlineAlliance != null) {
                message.airlineAlliance = data.airlineAlliance;
            }
            if (data.personalization != null) {
                message.personalization = data.personalization;
            }
            if (data.banner != null) {
                message.banner = data.banner;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.profile != null) {
                message.profile = data.profile;
            }
            if (data.appImage != null) {
                message.appImage = data.appImage;
            }
            if (data.stampedImage != null) {
                message.stampedImage = data.stampedImage;
            }
            if (data.unstampedImage != null) {
                message.unstampedImage = data.unstampedImage;
            }
            if (data.stampConfig != null) {
                message.stampConfig = StampImageConfig.fromObject(data.stampConfig);
            }
            if (data.wideLogo != null) {
                message.wideLogo = data.wideLogo;
            }
            if (data.secondaryLogo != null) {
                message.secondaryLogo = data.secondaryLogo;
            }
            if (data.artwork != null) {
                message.artwork = data.artwork;
            }
            if (data.posterLogo != null) {
                message.posterLogo = data.posterLogo;
            }
            if (data.venueMap != null) {
                message.venueMap = data.venueMap;
            }
            if (data.localizedIcon != null) {
                message.localizedIcon = dependency_1.io.LocalizedString.fromObject(data.localizedIcon);
            }
            if (data.localizedLogo != null) {
                message.localizedLogo = dependency_1.io.LocalizedString.fromObject(data.localizedLogo);
            }
            if (data.localizedAppleLogo != null) {
                message.localizedAppleLogo = dependency_1.io.LocalizedString.fromObject(data.localizedAppleLogo);
            }
            if (data.localizedHero != null) {
                message.localizedHero = dependency_1.io.LocalizedString.fromObject(data.localizedHero);
            }
            if (data.localizedEventStrip != null) {
                message.localizedEventStrip = dependency_1.io.LocalizedString.fromObject(data.localizedEventStrip);
            }
            if (data.localizedStrip != null) {
                message.localizedStrip = dependency_1.io.LocalizedString.fromObject(data.localizedStrip);
            }
            if (data.localizedThumbnail != null) {
                message.localizedThumbnail = dependency_1.io.LocalizedString.fromObject(data.localizedThumbnail);
            }
            if (data.localizedBackground != null) {
                message.localizedBackground = dependency_1.io.LocalizedString.fromObject(data.localizedBackground);
            }
            if (data.localizedFooter != null) {
                message.localizedFooter = dependency_1.io.LocalizedString.fromObject(data.localizedFooter);
            }
            if (data.localizedSecurity != null) {
                message.localizedSecurity = dependency_1.io.LocalizedString.fromObject(data.localizedSecurity);
            }
            if (data.localizedPrivilege != null) {
                message.localizedPrivilege = dependency_1.io.LocalizedString.fromObject(data.localizedPrivilege);
            }
            if (data.localizedAirlineAlliance != null) {
                message.localizedAirlineAlliance = dependency_1.io.LocalizedString.fromObject(data.localizedAirlineAlliance);
            }
            if (data.localizedPersonalization != null) {
                message.localizedPersonalization = dependency_1.io.LocalizedString.fromObject(data.localizedPersonalization);
            }
            if (data.localizedBanner != null) {
                message.localizedBanner = dependency_1.io.LocalizedString.fromObject(data.localizedBanner);
            }
            if (data.localizedMessage != null) {
                message.localizedMessage = dependency_1.io.LocalizedString.fromObject(data.localizedMessage);
            }
            if (data.localizedWideLogo != null) {
                message.localizedWideLogo = dependency_1.io.LocalizedString.fromObject(data.localizedWideLogo);
            }
            if (data.localizedSecondaryLogo != null) {
                message.localizedSecondaryLogo = dependency_1.io.LocalizedString.fromObject(data.localizedSecondaryLogo);
            }
            if (data.localizedArtwork != null) {
                message.localizedArtwork = dependency_1.io.LocalizedString.fromObject(data.localizedArtwork);
            }
            if (data.localizedPosterLogo != null) {
                message.localizedPosterLogo = dependency_1.io.LocalizedString.fromObject(data.localizedPosterLogo);
            }
            if (data.localizedVenueMap != null) {
                message.localizedVenueMap = dependency_1.io.LocalizedString.fromObject(data.localizedVenueMap);
            }
            return message;
        }
        toObject() {
            const data: {
                icon?: string;
                logo?: string;
                appleLogo?: string;
                hero?: string;
                eventStrip?: string;
                strip?: string;
                thumbnail?: string;
                background?: string;
                footer?: string;
                security?: string;
                privilege?: string;
                airlineAlliance?: string;
                personalization?: string;
                banner?: string;
                message?: string;
                profile?: string;
                appImage?: string;
                stampedImage?: string;
                unstampedImage?: string;
                stampConfig?: ReturnType<typeof StampImageConfig.prototype.toObject>;
                wideLogo?: string;
                secondaryLogo?: string;
                artwork?: string;
                posterLogo?: string;
                venueMap?: string;
                localizedIcon?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedLogo?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedAppleLogo?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedHero?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedEventStrip?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedStrip?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedThumbnail?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedBackground?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedFooter?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedSecurity?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedPrivilege?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedAirlineAlliance?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedPersonalization?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedBanner?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedMessage?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedWideLogo?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedSecondaryLogo?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedArtwork?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedPosterLogo?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                localizedVenueMap?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            } = {};
            if (this.icon != null) {
                data.icon = this.icon;
            }
            if (this.logo != null) {
                data.logo = this.logo;
            }
            if (this.appleLogo != null) {
                data.appleLogo = this.appleLogo;
            }
            if (this.hero != null) {
                data.hero = this.hero;
            }
            if (this.eventStrip != null) {
                data.eventStrip = this.eventStrip;
            }
            if (this.strip != null) {
                data.strip = this.strip;
            }
            if (this.thumbnail != null) {
                data.thumbnail = this.thumbnail;
            }
            if (this.background != null) {
                data.background = this.background;
            }
            if (this.footer != null) {
                data.footer = this.footer;
            }
            if (this.security != null) {
                data.security = this.security;
            }
            if (this.privilege != null) {
                data.privilege = this.privilege;
            }
            if (this.airlineAlliance != null) {
                data.airlineAlliance = this.airlineAlliance;
            }
            if (this.personalization != null) {
                data.personalization = this.personalization;
            }
            if (this.banner != null) {
                data.banner = this.banner;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.profile != null) {
                data.profile = this.profile;
            }
            if (this.appImage != null) {
                data.appImage = this.appImage;
            }
            if (this.stampedImage != null) {
                data.stampedImage = this.stampedImage;
            }
            if (this.unstampedImage != null) {
                data.unstampedImage = this.unstampedImage;
            }
            if (this.stampConfig != null) {
                data.stampConfig = this.stampConfig.toObject();
            }
            if (this.wideLogo != null) {
                data.wideLogo = this.wideLogo;
            }
            if (this.secondaryLogo != null) {
                data.secondaryLogo = this.secondaryLogo;
            }
            if (this.artwork != null) {
                data.artwork = this.artwork;
            }
            if (this.posterLogo != null) {
                data.posterLogo = this.posterLogo;
            }
            if (this.venueMap != null) {
                data.venueMap = this.venueMap;
            }
            if (this.localizedIcon != null) {
                data.localizedIcon = this.localizedIcon.toObject();
            }
            if (this.localizedLogo != null) {
                data.localizedLogo = this.localizedLogo.toObject();
            }
            if (this.localizedAppleLogo != null) {
                data.localizedAppleLogo = this.localizedAppleLogo.toObject();
            }
            if (this.localizedHero != null) {
                data.localizedHero = this.localizedHero.toObject();
            }
            if (this.localizedEventStrip != null) {
                data.localizedEventStrip = this.localizedEventStrip.toObject();
            }
            if (this.localizedStrip != null) {
                data.localizedStrip = this.localizedStrip.toObject();
            }
            if (this.localizedThumbnail != null) {
                data.localizedThumbnail = this.localizedThumbnail.toObject();
            }
            if (this.localizedBackground != null) {
                data.localizedBackground = this.localizedBackground.toObject();
            }
            if (this.localizedFooter != null) {
                data.localizedFooter = this.localizedFooter.toObject();
            }
            if (this.localizedSecurity != null) {
                data.localizedSecurity = this.localizedSecurity.toObject();
            }
            if (this.localizedPrivilege != null) {
                data.localizedPrivilege = this.localizedPrivilege.toObject();
            }
            if (this.localizedAirlineAlliance != null) {
                data.localizedAirlineAlliance = this.localizedAirlineAlliance.toObject();
            }
            if (this.localizedPersonalization != null) {
                data.localizedPersonalization = this.localizedPersonalization.toObject();
            }
            if (this.localizedBanner != null) {
                data.localizedBanner = this.localizedBanner.toObject();
            }
            if (this.localizedMessage != null) {
                data.localizedMessage = this.localizedMessage.toObject();
            }
            if (this.localizedWideLogo != null) {
                data.localizedWideLogo = this.localizedWideLogo.toObject();
            }
            if (this.localizedSecondaryLogo != null) {
                data.localizedSecondaryLogo = this.localizedSecondaryLogo.toObject();
            }
            if (this.localizedArtwork != null) {
                data.localizedArtwork = this.localizedArtwork.toObject();
            }
            if (this.localizedPosterLogo != null) {
                data.localizedPosterLogo = this.localizedPosterLogo.toObject();
            }
            if (this.localizedVenueMap != null) {
                data.localizedVenueMap = this.localizedVenueMap.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.icon.length)
                writer.writeString(1, this.icon);
            if (this.logo.length)
                writer.writeString(2, this.logo);
            if (this.appleLogo.length)
                writer.writeString(3, this.appleLogo);
            if (this.hero.length)
                writer.writeString(4, this.hero);
            if (this.eventStrip.length)
                writer.writeString(5, this.eventStrip);
            if (this.strip.length)
                writer.writeString(6, this.strip);
            if (this.thumbnail.length)
                writer.writeString(7, this.thumbnail);
            if (this.background.length)
                writer.writeString(8, this.background);
            if (this.footer.length)
                writer.writeString(9, this.footer);
            if (this.security.length)
                writer.writeString(10, this.security);
            if (this.privilege.length)
                writer.writeString(11, this.privilege);
            if (this.airlineAlliance.length)
                writer.writeString(12, this.airlineAlliance);
            if (this.personalization.length)
                writer.writeString(13, this.personalization);
            if (this.banner.length)
                writer.writeString(14, this.banner);
            if (this.message.length)
                writer.writeString(15, this.message);
            if (this.profile.length)
                writer.writeString(16, this.profile);
            if (this.appImage.length)
                writer.writeString(17, this.appImage);
            if (this.stampedImage.length)
                writer.writeString(18, this.stampedImage);
            if (this.unstampedImage.length)
                writer.writeString(19, this.unstampedImage);
            if (this.hasStampConfig)
                writer.writeMessage(20, this.stampConfig, () => this.stampConfig.serialize(writer));
            if (this.wideLogo.length)
                writer.writeString(21, this.wideLogo);
            if (this.secondaryLogo.length)
                writer.writeString(22, this.secondaryLogo);
            if (this.artwork.length)
                writer.writeString(23, this.artwork);
            if (this.posterLogo.length)
                writer.writeString(24, this.posterLogo);
            if (this.venueMap.length)
                writer.writeString(25, this.venueMap);
            if (this.hasLocalizedIcon)
                writer.writeMessage(31, this.localizedIcon, () => this.localizedIcon.serialize(writer));
            if (this.hasLocalizedLogo)
                writer.writeMessage(32, this.localizedLogo, () => this.localizedLogo.serialize(writer));
            if (this.hasLocalizedAppleLogo)
                writer.writeMessage(33, this.localizedAppleLogo, () => this.localizedAppleLogo.serialize(writer));
            if (this.hasLocalizedHero)
                writer.writeMessage(34, this.localizedHero, () => this.localizedHero.serialize(writer));
            if (this.hasLocalizedEventStrip)
                writer.writeMessage(35, this.localizedEventStrip, () => this.localizedEventStrip.serialize(writer));
            if (this.hasLocalizedStrip)
                writer.writeMessage(36, this.localizedStrip, () => this.localizedStrip.serialize(writer));
            if (this.hasLocalizedThumbnail)
                writer.writeMessage(37, this.localizedThumbnail, () => this.localizedThumbnail.serialize(writer));
            if (this.hasLocalizedBackground)
                writer.writeMessage(38, this.localizedBackground, () => this.localizedBackground.serialize(writer));
            if (this.hasLocalizedFooter)
                writer.writeMessage(39, this.localizedFooter, () => this.localizedFooter.serialize(writer));
            if (this.hasLocalizedSecurity)
                writer.writeMessage(40, this.localizedSecurity, () => this.localizedSecurity.serialize(writer));
            if (this.hasLocalizedPrivilege)
                writer.writeMessage(41, this.localizedPrivilege, () => this.localizedPrivilege.serialize(writer));
            if (this.hasLocalizedAirlineAlliance)
                writer.writeMessage(42, this.localizedAirlineAlliance, () => this.localizedAirlineAlliance.serialize(writer));
            if (this.hasLocalizedPersonalization)
                writer.writeMessage(43, this.localizedPersonalization, () => this.localizedPersonalization.serialize(writer));
            if (this.hasLocalizedBanner)
                writer.writeMessage(44, this.localizedBanner, () => this.localizedBanner.serialize(writer));
            if (this.hasLocalizedMessage)
                writer.writeMessage(45, this.localizedMessage, () => this.localizedMessage.serialize(writer));
            if (this.hasLocalizedWideLogo)
                writer.writeMessage(46, this.localizedWideLogo, () => this.localizedWideLogo.serialize(writer));
            if (this.hasLocalizedSecondaryLogo)
                writer.writeMessage(47, this.localizedSecondaryLogo, () => this.localizedSecondaryLogo.serialize(writer));
            if (this.hasLocalizedArtwork)
                writer.writeMessage(48, this.localizedArtwork, () => this.localizedArtwork.serialize(writer));
            if (this.hasLocalizedPosterLogo)
                writer.writeMessage(49, this.localizedPosterLogo, () => this.localizedPosterLogo.serialize(writer));
            if (this.hasLocalizedVenueMap)
                writer.writeMessage(50, this.localizedVenueMap, () => this.localizedVenueMap.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.icon = reader.readString();
                        break;
                    case 2:
                        message.logo = reader.readString();
                        break;
                    case 3:
                        message.appleLogo = reader.readString();
                        break;
                    case 4:
                        message.hero = reader.readString();
                        break;
                    case 5:
                        message.eventStrip = reader.readString();
                        break;
                    case 6:
                        message.strip = reader.readString();
                        break;
                    case 7:
                        message.thumbnail = reader.readString();
                        break;
                    case 8:
                        message.background = reader.readString();
                        break;
                    case 9:
                        message.footer = reader.readString();
                        break;
                    case 10:
                        message.security = reader.readString();
                        break;
                    case 11:
                        message.privilege = reader.readString();
                        break;
                    case 12:
                        message.airlineAlliance = reader.readString();
                        break;
                    case 13:
                        message.personalization = reader.readString();
                        break;
                    case 14:
                        message.banner = reader.readString();
                        break;
                    case 15:
                        message.message = reader.readString();
                        break;
                    case 16:
                        message.profile = reader.readString();
                        break;
                    case 17:
                        message.appImage = reader.readString();
                        break;
                    case 18:
                        message.stampedImage = reader.readString();
                        break;
                    case 19:
                        message.unstampedImage = reader.readString();
                        break;
                    case 20:
                        reader.readMessage(message.stampConfig, () => message.stampConfig = StampImageConfig.deserialize(reader));
                        break;
                    case 21:
                        message.wideLogo = reader.readString();
                        break;
                    case 22:
                        message.secondaryLogo = reader.readString();
                        break;
                    case 23:
                        message.artwork = reader.readString();
                        break;
                    case 24:
                        message.posterLogo = reader.readString();
                        break;
                    case 25:
                        message.venueMap = reader.readString();
                        break;
                    case 31:
                        reader.readMessage(message.localizedIcon, () => message.localizedIcon = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 32:
                        reader.readMessage(message.localizedLogo, () => message.localizedLogo = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 33:
                        reader.readMessage(message.localizedAppleLogo, () => message.localizedAppleLogo = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 34:
                        reader.readMessage(message.localizedHero, () => message.localizedHero = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 35:
                        reader.readMessage(message.localizedEventStrip, () => message.localizedEventStrip = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 36:
                        reader.readMessage(message.localizedStrip, () => message.localizedStrip = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 37:
                        reader.readMessage(message.localizedThumbnail, () => message.localizedThumbnail = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 38:
                        reader.readMessage(message.localizedBackground, () => message.localizedBackground = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 39:
                        reader.readMessage(message.localizedFooter, () => message.localizedFooter = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 40:
                        reader.readMessage(message.localizedSecurity, () => message.localizedSecurity = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 41:
                        reader.readMessage(message.localizedPrivilege, () => message.localizedPrivilege = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 42:
                        reader.readMessage(message.localizedAirlineAlliance, () => message.localizedAirlineAlliance = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 43:
                        reader.readMessage(message.localizedPersonalization, () => message.localizedPersonalization = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 44:
                        reader.readMessage(message.localizedBanner, () => message.localizedBanner = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 45:
                        reader.readMessage(message.localizedMessage, () => message.localizedMessage = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 46:
                        reader.readMessage(message.localizedWideLogo, () => message.localizedWideLogo = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 47:
                        reader.readMessage(message.localizedSecondaryLogo, () => message.localizedSecondaryLogo = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 48:
                        reader.readMessage(message.localizedArtwork, () => message.localizedArtwork = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 49:
                        reader.readMessage(message.localizedPosterLogo, () => message.localizedPosterLogo = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 50:
                        reader.readMessage(message.localizedVenueMap, () => message.localizedVenueMap = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImageData {
            return ImageData.deserialize(bytes);
        }
    }
    export class ImageRecord extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            url?: string;
            use?: ImageUse;
            languages?: dependency_1.io.LanguageCode[];
            ownerUsername?: string;
            createdAt?: dependency_3.google.protobuf.Timestamp;
            updatedAt?: dependency_3.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("use" in data && data.use != undefined) {
                    this.use = data.use;
                }
                if ("languages" in data && data.languages != undefined) {
                    this.languages = data.languages;
                }
                if ("ownerUsername" in data && data.ownerUsername != undefined) {
                    this.ownerUsername = data.ownerUsername;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get use() {
            return pb_1.Message.getFieldWithDefault(this, 5, ImageUse.icon) as ImageUse;
        }
        set use(value: ImageUse) {
            pb_1.Message.setField(this, 5, value);
        }
        get languages() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as dependency_1.io.LanguageCode[];
        }
        set languages(value: dependency_1.io.LanguageCode[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get ownerUsername() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set ownerUsername(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get createdAt() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 8) as dependency_3.google.protobuf.Timestamp;
        }
        set createdAt(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasCreatedAt() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get updatedAt() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 9) as dependency_3.google.protobuf.Timestamp;
        }
        set updatedAt(value: dependency_3.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasUpdatedAt() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            url?: string;
            use?: ImageUse;
            languages?: dependency_1.io.LanguageCode[];
            ownerUsername?: string;
            createdAt?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            updatedAt?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
        }): ImageRecord {
            const message = new ImageRecord({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.use != null) {
                message.use = data.use;
            }
            if (data.languages != null) {
                message.languages = data.languages;
            }
            if (data.ownerUsername != null) {
                message.ownerUsername = data.ownerUsername;
            }
            if (data.createdAt != null) {
                message.createdAt = dependency_3.google.protobuf.Timestamp.fromObject(data.createdAt);
            }
            if (data.updatedAt != null) {
                message.updatedAt = dependency_3.google.protobuf.Timestamp.fromObject(data.updatedAt);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                url?: string;
                use?: ImageUse;
                languages?: dependency_1.io.LanguageCode[];
                ownerUsername?: string;
                createdAt?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
                updatedAt?: ReturnType<typeof dependency_3.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.use != null) {
                data.use = this.use;
            }
            if (this.languages != null) {
                data.languages = this.languages;
            }
            if (this.ownerUsername != null) {
                data.ownerUsername = this.ownerUsername;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt.toObject();
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.url.length)
                writer.writeString(3, this.url);
            if (this.use != ImageUse.icon)
                writer.writeEnum(5, this.use);
            if (this.languages.length)
                writer.writePackedEnum(6, this.languages);
            if (this.ownerUsername.length)
                writer.writeString(7, this.ownerUsername);
            if (this.hasCreatedAt)
                writer.writeMessage(8, this.createdAt, () => this.createdAt.serialize(writer));
            if (this.hasUpdatedAt)
                writer.writeMessage(9, this.updatedAt, () => this.updatedAt.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageRecord {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.url = reader.readString();
                        break;
                    case 5:
                        message.use = reader.readEnum();
                        break;
                    case 6:
                        message.languages = reader.readPackedEnum();
                        break;
                    case 7:
                        message.ownerUsername = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.createdAt, () => message.createdAt = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImageRecord {
            return ImageRecord.deserialize(bytes);
        }
    }
    export class ProfileImageInput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            imageData?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("imageData" in data && data.imageData != undefined) {
                    this.imageData = data.imageData;
                }
            }
        }
        get imageData() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set imageData(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            imageData?: string;
        }): ProfileImageInput {
            const message = new ProfileImageInput({});
            if (data.imageData != null) {
                message.imageData = data.imageData;
            }
            return message;
        }
        toObject() {
            const data: {
                imageData?: string;
            } = {};
            if (this.imageData != null) {
                data.imageData = this.imageData;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.imageData.length)
                writer.writeString(1, this.imageData);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProfileImageInput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProfileImageInput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.imageData = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProfileImageInput {
            return ProfileImageInput.deserialize(bytes);
        }
    }
    export class MultipleImages extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            images?: ImageRecord[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("images" in data && data.images != undefined) {
                    this.images = data.images;
                }
            }
        }
        get images() {
            return pb_1.Message.getRepeatedWrapperField(this, ImageRecord, 1) as ImageRecord[];
        }
        set images(value: ImageRecord[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            images?: ReturnType<typeof ImageRecord.prototype.toObject>[];
        }): MultipleImages {
            const message = new MultipleImages({});
            if (data.images != null) {
                message.images = data.images.map(item => ImageRecord.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                images?: ReturnType<typeof ImageRecord.prototype.toObject>[];
            } = {};
            if (this.images != null) {
                data.images = this.images.map((item: ImageRecord) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.images.length)
                writer.writeRepeatedMessage(1, this.images, (item: ImageRecord) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MultipleImages {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultipleImages();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.images, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ImageRecord.deserialize(reader), ImageRecord));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MultipleImages {
            return MultipleImages.deserialize(bytes);
        }
    }
    export class StampImageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            status?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            status?: number;
        }): StampImageRequest {
            const message = new StampImageRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                status?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.status != 0)
                writer.writeUint64(2, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StampImageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StampImageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.status = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StampImageRequest {
            return StampImageRequest.deserialize(bytes);
        }
    }
    export class CreateImageInput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            imageData?: ImageData;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("imageData" in data && data.imageData != undefined) {
                    this.imageData = data.imageData;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get imageData() {
            return pb_1.Message.getWrapperField(this, ImageData, 2) as ImageData;
        }
        set imageData(value: ImageData) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasImageData() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            name?: string;
            imageData?: ReturnType<typeof ImageData.prototype.toObject>;
        }): CreateImageInput {
            const message = new CreateImageInput({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.imageData != null) {
                message.imageData = ImageData.fromObject(data.imageData);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                imageData?: ReturnType<typeof ImageData.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.imageData != null) {
                data.imageData = this.imageData.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.hasImageData)
                writer.writeMessage(2, this.imageData, () => this.imageData.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateImageInput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateImageInput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.imageData, () => message.imageData = ImageData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateImageInput {
            return CreateImageInput.deserialize(bytes);
        }
    }
    export class UpdateImageInput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            imageData?: string;
            localizedImageData?: dependency_1.io.LocalizedString;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("imageData" in data && data.imageData != undefined) {
                    this.imageData = data.imageData;
                }
                if ("localizedImageData" in data && data.localizedImageData != undefined) {
                    this.localizedImageData = data.localizedImageData;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get imageData() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set imageData(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get localizedImageData() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 4) as dependency_1.io.LocalizedString;
        }
        set localizedImageData(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasLocalizedImageData() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            imageData?: string;
            localizedImageData?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
        }): UpdateImageInput {
            const message = new UpdateImageInput({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.imageData != null) {
                message.imageData = data.imageData;
            }
            if (data.localizedImageData != null) {
                message.localizedImageData = dependency_1.io.LocalizedString.fromObject(data.localizedImageData);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                imageData?: string;
                localizedImageData?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.imageData != null) {
                data.imageData = this.imageData;
            }
            if (this.localizedImageData != null) {
                data.localizedImageData = this.localizedImageData.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.imageData.length)
                writer.writeString(3, this.imageData);
            if (this.hasLocalizedImageData)
                writer.writeMessage(4, this.localizedImageData, () => this.localizedImageData.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateImageInput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateImageInput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.imageData = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.localizedImageData, () => message.localizedImageData = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateImageInput {
            return UpdateImageInput.deserialize(bytes);
        }
    }
    export class ImageBundle extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            image?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
            }
        }
        get image() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set image(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            image?: Uint8Array;
        }): ImageBundle {
            const message = new ImageBundle({});
            if (data.image != null) {
                message.image = data.image;
            }
            return message;
        }
        toObject() {
            const data: {
                image?: Uint8Array;
            } = {};
            if (this.image != null) {
                data.image = this.image;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.image.length)
                writer.writeBytes(1, this.image);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageBundle {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageBundle();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.image = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImageBundle {
            return ImageBundle.deserialize(bytes);
        }
    }
    export class LocalizedImageInput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            languageCode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("languageCode" in data && data.languageCode != undefined) {
                    this.languageCode = data.languageCode;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get languageCode() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set languageCode(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            languageCode?: string;
        }): LocalizedImageInput {
            const message = new LocalizedImageInput({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.languageCode != null) {
                message.languageCode = data.languageCode;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                languageCode?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.languageCode != null) {
                data.languageCode = this.languageCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.languageCode.length)
                writer.writeString(2, this.languageCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocalizedImageInput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LocalizedImageInput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.languageCode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LocalizedImageInput {
            return LocalizedImageInput.deserialize(bytes);
        }
    }
    export class StampImageConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            padding?: number;
            totalStamps?: number;
            stampImage?: string;
            unstampImage?: string;
            backgroundImage?: string;
            backgroundColor?: string;
            backgroundOpacity?: number;
            stampColor?: string;
            stampOpacity?: number;
            unstampColor?: string;
            unstampOpacity?: number;
            placeholders?: boolean;
            placeholderColor?: string;
            placeholderOpacity?: number;
            placeholderBorderColor?: string;
            placeholderBorderOpacity?: number;
            rewardPlaceholders?: boolean;
            rewardBorderColor?: string;
            rewardBorderOpacity?: number;
            rewardBackgroundColor?: string;
            rewardBackgroundOpacity?: number;
            rewardPositions?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("padding" in data && data.padding != undefined) {
                    this.padding = data.padding;
                }
                if ("totalStamps" in data && data.totalStamps != undefined) {
                    this.totalStamps = data.totalStamps;
                }
                if ("stampImage" in data && data.stampImage != undefined) {
                    this.stampImage = data.stampImage;
                }
                if ("unstampImage" in data && data.unstampImage != undefined) {
                    this.unstampImage = data.unstampImage;
                }
                if ("backgroundImage" in data && data.backgroundImage != undefined) {
                    this.backgroundImage = data.backgroundImage;
                }
                if ("backgroundColor" in data && data.backgroundColor != undefined) {
                    this.backgroundColor = data.backgroundColor;
                }
                if ("backgroundOpacity" in data && data.backgroundOpacity != undefined) {
                    this.backgroundOpacity = data.backgroundOpacity;
                }
                if ("stampColor" in data && data.stampColor != undefined) {
                    this.stampColor = data.stampColor;
                }
                if ("stampOpacity" in data && data.stampOpacity != undefined) {
                    this.stampOpacity = data.stampOpacity;
                }
                if ("unstampColor" in data && data.unstampColor != undefined) {
                    this.unstampColor = data.unstampColor;
                }
                if ("unstampOpacity" in data && data.unstampOpacity != undefined) {
                    this.unstampOpacity = data.unstampOpacity;
                }
                if ("placeholders" in data && data.placeholders != undefined) {
                    this.placeholders = data.placeholders;
                }
                if ("placeholderColor" in data && data.placeholderColor != undefined) {
                    this.placeholderColor = data.placeholderColor;
                }
                if ("placeholderOpacity" in data && data.placeholderOpacity != undefined) {
                    this.placeholderOpacity = data.placeholderOpacity;
                }
                if ("placeholderBorderColor" in data && data.placeholderBorderColor != undefined) {
                    this.placeholderBorderColor = data.placeholderBorderColor;
                }
                if ("placeholderBorderOpacity" in data && data.placeholderBorderOpacity != undefined) {
                    this.placeholderBorderOpacity = data.placeholderBorderOpacity;
                }
                if ("rewardPlaceholders" in data && data.rewardPlaceholders != undefined) {
                    this.rewardPlaceholders = data.rewardPlaceholders;
                }
                if ("rewardBorderColor" in data && data.rewardBorderColor != undefined) {
                    this.rewardBorderColor = data.rewardBorderColor;
                }
                if ("rewardBorderOpacity" in data && data.rewardBorderOpacity != undefined) {
                    this.rewardBorderOpacity = data.rewardBorderOpacity;
                }
                if ("rewardBackgroundColor" in data && data.rewardBackgroundColor != undefined) {
                    this.rewardBackgroundColor = data.rewardBackgroundColor;
                }
                if ("rewardBackgroundOpacity" in data && data.rewardBackgroundOpacity != undefined) {
                    this.rewardBackgroundOpacity = data.rewardBackgroundOpacity;
                }
                if ("rewardPositions" in data && data.rewardPositions != undefined) {
                    this.rewardPositions = data.rewardPositions;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get padding() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set padding(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get totalStamps() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set totalStamps(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get stampImage() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set stampImage(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get unstampImage() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set unstampImage(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get backgroundImage() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set backgroundImage(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get backgroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set backgroundColor(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get backgroundOpacity() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set backgroundOpacity(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get stampColor() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set stampColor(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get stampOpacity() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set stampOpacity(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get unstampColor() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set unstampColor(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get unstampOpacity() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set unstampOpacity(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get placeholders() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set placeholders(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get placeholderColor() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set placeholderColor(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get placeholderOpacity() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set placeholderOpacity(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get placeholderBorderColor() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set placeholderBorderColor(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get placeholderBorderOpacity() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set placeholderBorderOpacity(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get rewardPlaceholders() {
            return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
        }
        set rewardPlaceholders(value: boolean) {
            pb_1.Message.setField(this, 18, value);
        }
        get rewardBorderColor() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set rewardBorderColor(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get rewardBorderOpacity() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set rewardBorderOpacity(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        get rewardBackgroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set rewardBackgroundColor(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get rewardBackgroundOpacity() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set rewardBackgroundOpacity(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get rewardPositions() {
            return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
        }
        set rewardPositions(value: number) {
            pb_1.Message.setField(this, 23, value);
        }
        static fromObject(data: {
            id?: string;
            padding?: number;
            totalStamps?: number;
            stampImage?: string;
            unstampImage?: string;
            backgroundImage?: string;
            backgroundColor?: string;
            backgroundOpacity?: number;
            stampColor?: string;
            stampOpacity?: number;
            unstampColor?: string;
            unstampOpacity?: number;
            placeholders?: boolean;
            placeholderColor?: string;
            placeholderOpacity?: number;
            placeholderBorderColor?: string;
            placeholderBorderOpacity?: number;
            rewardPlaceholders?: boolean;
            rewardBorderColor?: string;
            rewardBorderOpacity?: number;
            rewardBackgroundColor?: string;
            rewardBackgroundOpacity?: number;
            rewardPositions?: number;
        }): StampImageConfig {
            const message = new StampImageConfig({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.padding != null) {
                message.padding = data.padding;
            }
            if (data.totalStamps != null) {
                message.totalStamps = data.totalStamps;
            }
            if (data.stampImage != null) {
                message.stampImage = data.stampImage;
            }
            if (data.unstampImage != null) {
                message.unstampImage = data.unstampImage;
            }
            if (data.backgroundImage != null) {
                message.backgroundImage = data.backgroundImage;
            }
            if (data.backgroundColor != null) {
                message.backgroundColor = data.backgroundColor;
            }
            if (data.backgroundOpacity != null) {
                message.backgroundOpacity = data.backgroundOpacity;
            }
            if (data.stampColor != null) {
                message.stampColor = data.stampColor;
            }
            if (data.stampOpacity != null) {
                message.stampOpacity = data.stampOpacity;
            }
            if (data.unstampColor != null) {
                message.unstampColor = data.unstampColor;
            }
            if (data.unstampOpacity != null) {
                message.unstampOpacity = data.unstampOpacity;
            }
            if (data.placeholders != null) {
                message.placeholders = data.placeholders;
            }
            if (data.placeholderColor != null) {
                message.placeholderColor = data.placeholderColor;
            }
            if (data.placeholderOpacity != null) {
                message.placeholderOpacity = data.placeholderOpacity;
            }
            if (data.placeholderBorderColor != null) {
                message.placeholderBorderColor = data.placeholderBorderColor;
            }
            if (data.placeholderBorderOpacity != null) {
                message.placeholderBorderOpacity = data.placeholderBorderOpacity;
            }
            if (data.rewardPlaceholders != null) {
                message.rewardPlaceholders = data.rewardPlaceholders;
            }
            if (data.rewardBorderColor != null) {
                message.rewardBorderColor = data.rewardBorderColor;
            }
            if (data.rewardBorderOpacity != null) {
                message.rewardBorderOpacity = data.rewardBorderOpacity;
            }
            if (data.rewardBackgroundColor != null) {
                message.rewardBackgroundColor = data.rewardBackgroundColor;
            }
            if (data.rewardBackgroundOpacity != null) {
                message.rewardBackgroundOpacity = data.rewardBackgroundOpacity;
            }
            if (data.rewardPositions != null) {
                message.rewardPositions = data.rewardPositions;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                padding?: number;
                totalStamps?: number;
                stampImage?: string;
                unstampImage?: string;
                backgroundImage?: string;
                backgroundColor?: string;
                backgroundOpacity?: number;
                stampColor?: string;
                stampOpacity?: number;
                unstampColor?: string;
                unstampOpacity?: number;
                placeholders?: boolean;
                placeholderColor?: string;
                placeholderOpacity?: number;
                placeholderBorderColor?: string;
                placeholderBorderOpacity?: number;
                rewardPlaceholders?: boolean;
                rewardBorderColor?: string;
                rewardBorderOpacity?: number;
                rewardBackgroundColor?: string;
                rewardBackgroundOpacity?: number;
                rewardPositions?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.padding != null) {
                data.padding = this.padding;
            }
            if (this.totalStamps != null) {
                data.totalStamps = this.totalStamps;
            }
            if (this.stampImage != null) {
                data.stampImage = this.stampImage;
            }
            if (this.unstampImage != null) {
                data.unstampImage = this.unstampImage;
            }
            if (this.backgroundImage != null) {
                data.backgroundImage = this.backgroundImage;
            }
            if (this.backgroundColor != null) {
                data.backgroundColor = this.backgroundColor;
            }
            if (this.backgroundOpacity != null) {
                data.backgroundOpacity = this.backgroundOpacity;
            }
            if (this.stampColor != null) {
                data.stampColor = this.stampColor;
            }
            if (this.stampOpacity != null) {
                data.stampOpacity = this.stampOpacity;
            }
            if (this.unstampColor != null) {
                data.unstampColor = this.unstampColor;
            }
            if (this.unstampOpacity != null) {
                data.unstampOpacity = this.unstampOpacity;
            }
            if (this.placeholders != null) {
                data.placeholders = this.placeholders;
            }
            if (this.placeholderColor != null) {
                data.placeholderColor = this.placeholderColor;
            }
            if (this.placeholderOpacity != null) {
                data.placeholderOpacity = this.placeholderOpacity;
            }
            if (this.placeholderBorderColor != null) {
                data.placeholderBorderColor = this.placeholderBorderColor;
            }
            if (this.placeholderBorderOpacity != null) {
                data.placeholderBorderOpacity = this.placeholderBorderOpacity;
            }
            if (this.rewardPlaceholders != null) {
                data.rewardPlaceholders = this.rewardPlaceholders;
            }
            if (this.rewardBorderColor != null) {
                data.rewardBorderColor = this.rewardBorderColor;
            }
            if (this.rewardBorderOpacity != null) {
                data.rewardBorderOpacity = this.rewardBorderOpacity;
            }
            if (this.rewardBackgroundColor != null) {
                data.rewardBackgroundColor = this.rewardBackgroundColor;
            }
            if (this.rewardBackgroundOpacity != null) {
                data.rewardBackgroundOpacity = this.rewardBackgroundOpacity;
            }
            if (this.rewardPositions != null) {
                data.rewardPositions = this.rewardPositions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.padding != 0)
                writer.writeFloat(2, this.padding);
            if (this.totalStamps != 0)
                writer.writeUint32(3, this.totalStamps);
            if (this.stampImage.length)
                writer.writeString(4, this.stampImage);
            if (this.unstampImage.length)
                writer.writeString(5, this.unstampImage);
            if (this.backgroundImage.length)
                writer.writeString(6, this.backgroundImage);
            if (this.backgroundColor.length)
                writer.writeString(7, this.backgroundColor);
            if (this.backgroundOpacity != 0)
                writer.writeFloat(8, this.backgroundOpacity);
            if (this.stampColor.length)
                writer.writeString(9, this.stampColor);
            if (this.stampOpacity != 0)
                writer.writeFloat(10, this.stampOpacity);
            if (this.unstampColor.length)
                writer.writeString(11, this.unstampColor);
            if (this.unstampOpacity != 0)
                writer.writeFloat(12, this.unstampOpacity);
            if (this.placeholders != false)
                writer.writeBool(13, this.placeholders);
            if (this.placeholderColor.length)
                writer.writeString(14, this.placeholderColor);
            if (this.placeholderOpacity != 0)
                writer.writeFloat(15, this.placeholderOpacity);
            if (this.placeholderBorderColor.length)
                writer.writeString(16, this.placeholderBorderColor);
            if (this.placeholderBorderOpacity != 0)
                writer.writeFloat(17, this.placeholderBorderOpacity);
            if (this.rewardPlaceholders != false)
                writer.writeBool(18, this.rewardPlaceholders);
            if (this.rewardBorderColor.length)
                writer.writeString(19, this.rewardBorderColor);
            if (this.rewardBorderOpacity != 0)
                writer.writeFloat(20, this.rewardBorderOpacity);
            if (this.rewardBackgroundColor.length)
                writer.writeString(21, this.rewardBackgroundColor);
            if (this.rewardBackgroundOpacity != 0)
                writer.writeFloat(22, this.rewardBackgroundOpacity);
            if (this.rewardPositions != 0)
                writer.writeUint64(23, this.rewardPositions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StampImageConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StampImageConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.padding = reader.readFloat();
                        break;
                    case 3:
                        message.totalStamps = reader.readUint32();
                        break;
                    case 4:
                        message.stampImage = reader.readString();
                        break;
                    case 5:
                        message.unstampImage = reader.readString();
                        break;
                    case 6:
                        message.backgroundImage = reader.readString();
                        break;
                    case 7:
                        message.backgroundColor = reader.readString();
                        break;
                    case 8:
                        message.backgroundOpacity = reader.readFloat();
                        break;
                    case 9:
                        message.stampColor = reader.readString();
                        break;
                    case 10:
                        message.stampOpacity = reader.readFloat();
                        break;
                    case 11:
                        message.unstampColor = reader.readString();
                        break;
                    case 12:
                        message.unstampOpacity = reader.readFloat();
                        break;
                    case 13:
                        message.placeholders = reader.readBool();
                        break;
                    case 14:
                        message.placeholderColor = reader.readString();
                        break;
                    case 15:
                        message.placeholderOpacity = reader.readFloat();
                        break;
                    case 16:
                        message.placeholderBorderColor = reader.readString();
                        break;
                    case 17:
                        message.placeholderBorderOpacity = reader.readFloat();
                        break;
                    case 18:
                        message.rewardPlaceholders = reader.readBool();
                        break;
                    case 19:
                        message.rewardBorderColor = reader.readString();
                        break;
                    case 20:
                        message.rewardBorderOpacity = reader.readFloat();
                        break;
                    case 21:
                        message.rewardBackgroundColor = reader.readString();
                        break;
                    case 22:
                        message.rewardBackgroundOpacity = reader.readFloat();
                        break;
                    case 23:
                        message.rewardPositions = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StampImageConfig {
            return StampImageConfig.deserialize(bytes);
        }
    }
    export class StampImagePreviewRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            stampImageConfig?: StampImageConfig;
            status?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("stampImageConfig" in data && data.stampImageConfig != undefined) {
                    this.stampImageConfig = data.stampImageConfig;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get stampImageConfig() {
            return pb_1.Message.getWrapperField(this, StampImageConfig, 1) as StampImageConfig;
        }
        set stampImageConfig(value: StampImageConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasStampImageConfig() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            stampImageConfig?: ReturnType<typeof StampImageConfig.prototype.toObject>;
            status?: number;
        }): StampImagePreviewRequest {
            const message = new StampImagePreviewRequest({});
            if (data.stampImageConfig != null) {
                message.stampImageConfig = StampImageConfig.fromObject(data.stampImageConfig);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                stampImageConfig?: ReturnType<typeof StampImageConfig.prototype.toObject>;
                status?: number;
            } = {};
            if (this.stampImageConfig != null) {
                data.stampImageConfig = this.stampImageConfig.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasStampImageConfig)
                writer.writeMessage(1, this.stampImageConfig, () => this.stampImageConfig.serialize(writer));
            if (this.status != 0)
                writer.writeUint64(2, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StampImagePreviewRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StampImagePreviewRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.stampImageConfig, () => message.stampImageConfig = StampImageConfig.deserialize(reader));
                        break;
                    case 2:
                        message.status = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StampImagePreviewRequest {
            return StampImagePreviewRequest.deserialize(bytes);
        }
    }
    export class StampImagePreview extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            preview?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("preview" in data && data.preview != undefined) {
                    this.preview = data.preview;
                }
            }
        }
        get preview() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set preview(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            preview?: string;
        }): StampImagePreview {
            const message = new StampImagePreview({});
            if (data.preview != null) {
                message.preview = data.preview;
            }
            return message;
        }
        toObject() {
            const data: {
                preview?: string;
            } = {};
            if (this.preview != null) {
                data.preview = this.preview;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.preview.length)
                writer.writeString(1, this.preview);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StampImagePreview {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StampImagePreview();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.preview = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StampImagePreview {
            return StampImagePreview.deserialize(bytes);
        }
    }
}
