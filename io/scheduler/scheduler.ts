/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/scheduler/scheduler.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../common/filter";
import * as pb_1 from "google-protobuf";
export namespace scheduler {
    export class ListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            jobId?: string;
            filters?: dependency_1.io.Filters;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("jobId" in data && data.jobId != undefined) {
                    this.jobId = data.jobId;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
            }
        }
        get jobId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set jobId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Filters, 2) as dependency_1.io.Filters;
        }
        set filters(value: dependency_1.io.Filters) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasFilters() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            jobId?: string;
            filters?: ReturnType<typeof dependency_1.io.Filters.prototype.toObject>;
        }): ListRequest {
            const message = new ListRequest({});
            if (data.jobId != null) {
                message.jobId = data.jobId;
            }
            if (data.filters != null) {
                message.filters = dependency_1.io.Filters.fromObject(data.filters);
            }
            return message;
        }
        toObject() {
            const data: {
                jobId?: string;
                filters?: ReturnType<typeof dependency_1.io.Filters.prototype.toObject>;
            } = {};
            if (this.jobId != null) {
                data.jobId = this.jobId;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.jobId.length)
                writer.writeString(1, this.jobId);
            if (this.hasFilters)
                writer.writeMessage(2, this.filters, () => this.filters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.jobId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.filters, () => message.filters = dependency_1.io.Filters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRequest {
            return ListRequest.deserialize(bytes);
        }
    }
}
