/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/message.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./localization";
import * as dependency_2 from "./pagination";
import * as dependency_3 from "./common_objects";
import * as dependency_4 from "./../image/image";
import * as dependency_5 from "./../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace io {
    export enum MessageStatus {
        MESSAGE_STATUS_DO_NOT_USE = 0,
        SCHEDULED = 1,
        ACTIVE = 2,
        EXPIRED = 3,
        CANCELLED = 4
    }
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            title?: string;
            localizedTitle?: dependency_1.io.LocalizedString;
            plainTextContent?: string;
            localizedPlainTextContent?: dependency_1.io.LocalizedString;
            richTextContent?: string;
            localizedRichTextContent?: dependency_1.io.LocalizedString;
            urls?: dependency_3.io.Url[];
            images?: dependency_4.io.ImageIds;
            priority?: number;
            displayFrom?: string;
            displayUntil?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("localizedTitle" in data && data.localizedTitle != undefined) {
                    this.localizedTitle = data.localizedTitle;
                }
                if ("plainTextContent" in data && data.plainTextContent != undefined) {
                    this.plainTextContent = data.plainTextContent;
                }
                if ("localizedPlainTextContent" in data && data.localizedPlainTextContent != undefined) {
                    this.localizedPlainTextContent = data.localizedPlainTextContent;
                }
                if ("richTextContent" in data && data.richTextContent != undefined) {
                    this.richTextContent = data.richTextContent;
                }
                if ("localizedRichTextContent" in data && data.localizedRichTextContent != undefined) {
                    this.localizedRichTextContent = data.localizedRichTextContent;
                }
                if ("urls" in data && data.urls != undefined) {
                    this.urls = data.urls;
                }
                if ("images" in data && data.images != undefined) {
                    this.images = data.images;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("displayFrom" in data && data.displayFrom != undefined) {
                    this.displayFrom = data.displayFrom;
                }
                if ("displayUntil" in data && data.displayUntil != undefined) {
                    this.displayUntil = data.displayUntil;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get localizedTitle() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 3) as dependency_1.io.LocalizedString;
        }
        set localizedTitle(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocalizedTitle() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get plainTextContent() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set plainTextContent(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get localizedPlainTextContent() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 5) as dependency_1.io.LocalizedString;
        }
        set localizedPlainTextContent(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasLocalizedPlainTextContent() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get richTextContent() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set richTextContent(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get localizedRichTextContent() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 7) as dependency_1.io.LocalizedString;
        }
        set localizedRichTextContent(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasLocalizedRichTextContent() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get urls() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.io.Url, 8) as dependency_3.io.Url[];
        }
        set urls(value: dependency_3.io.Url[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get images() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.ImageIds, 9) as dependency_4.io.ImageIds;
        }
        set images(value: dependency_4.io.ImageIds) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasImages() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get displayFrom() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set displayFrom(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get displayUntil() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set displayUntil(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            localizedTitle?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            plainTextContent?: string;
            localizedPlainTextContent?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            richTextContent?: string;
            localizedRichTextContent?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            urls?: ReturnType<typeof dependency_3.io.Url.prototype.toObject>[];
            images?: ReturnType<typeof dependency_4.io.ImageIds.prototype.toObject>;
            priority?: number;
            displayFrom?: string;
            displayUntil?: string;
        }): Message {
            const message = new Message({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.localizedTitle != null) {
                message.localizedTitle = dependency_1.io.LocalizedString.fromObject(data.localizedTitle);
            }
            if (data.plainTextContent != null) {
                message.plainTextContent = data.plainTextContent;
            }
            if (data.localizedPlainTextContent != null) {
                message.localizedPlainTextContent = dependency_1.io.LocalizedString.fromObject(data.localizedPlainTextContent);
            }
            if (data.richTextContent != null) {
                message.richTextContent = data.richTextContent;
            }
            if (data.localizedRichTextContent != null) {
                message.localizedRichTextContent = dependency_1.io.LocalizedString.fromObject(data.localizedRichTextContent);
            }
            if (data.urls != null) {
                message.urls = data.urls.map(item => dependency_3.io.Url.fromObject(item));
            }
            if (data.images != null) {
                message.images = dependency_4.io.ImageIds.fromObject(data.images);
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.displayFrom != null) {
                message.displayFrom = data.displayFrom;
            }
            if (data.displayUntil != null) {
                message.displayUntil = data.displayUntil;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                localizedTitle?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                plainTextContent?: string;
                localizedPlainTextContent?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                richTextContent?: string;
                localizedRichTextContent?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                urls?: ReturnType<typeof dependency_3.io.Url.prototype.toObject>[];
                images?: ReturnType<typeof dependency_4.io.ImageIds.prototype.toObject>;
                priority?: number;
                displayFrom?: string;
                displayUntil?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.localizedTitle != null) {
                data.localizedTitle = this.localizedTitle.toObject();
            }
            if (this.plainTextContent != null) {
                data.plainTextContent = this.plainTextContent;
            }
            if (this.localizedPlainTextContent != null) {
                data.localizedPlainTextContent = this.localizedPlainTextContent.toObject();
            }
            if (this.richTextContent != null) {
                data.richTextContent = this.richTextContent;
            }
            if (this.localizedRichTextContent != null) {
                data.localizedRichTextContent = this.localizedRichTextContent.toObject();
            }
            if (this.urls != null) {
                data.urls = this.urls.map((item: dependency_3.io.Url) => item.toObject());
            }
            if (this.images != null) {
                data.images = this.images.toObject();
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.displayFrom != null) {
                data.displayFrom = this.displayFrom;
            }
            if (this.displayUntil != null) {
                data.displayUntil = this.displayUntil;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.hasLocalizedTitle)
                writer.writeMessage(3, this.localizedTitle, () => this.localizedTitle.serialize(writer));
            if (this.plainTextContent.length)
                writer.writeString(4, this.plainTextContent);
            if (this.hasLocalizedPlainTextContent)
                writer.writeMessage(5, this.localizedPlainTextContent, () => this.localizedPlainTextContent.serialize(writer));
            if (this.richTextContent.length)
                writer.writeString(6, this.richTextContent);
            if (this.hasLocalizedRichTextContent)
                writer.writeMessage(7, this.localizedRichTextContent, () => this.localizedRichTextContent.serialize(writer));
            if (this.urls.length)
                writer.writeRepeatedMessage(8, this.urls, (item: dependency_3.io.Url) => item.serialize(writer));
            if (this.hasImages)
                writer.writeMessage(9, this.images, () => this.images.serialize(writer));
            if (this.priority != 0)
                writer.writeUint32(10, this.priority);
            if (this.displayFrom.length)
                writer.writeString(11, this.displayFrom);
            if (this.displayUntil.length)
                writer.writeString(12, this.displayUntil);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.localizedTitle, () => message.localizedTitle = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 4:
                        message.plainTextContent = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.localizedPlainTextContent, () => message.localizedPlainTextContent = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 6:
                        message.richTextContent = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.localizedRichTextContent, () => message.localizedRichTextContent = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.urls, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_3.io.Url.deserialize(reader), dependency_3.io.Url));
                        break;
                    case 9:
                        reader.readMessage(message.images, () => message.images = dependency_4.io.ImageIds.deserialize(reader));
                        break;
                    case 10:
                        message.priority = reader.readUint32();
                        break;
                    case 11:
                        message.displayFrom = reader.readString();
                        break;
                    case 12:
                        message.displayUntil = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class GetMessagesForProtocolRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            protocol?: string;
            classId?: string;
            pagination?: dependency_2.io.Pagination;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("classId" in data && data.classId != undefined) {
                    this.classId = data.classId;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set protocol(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get classId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set classId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.Pagination, 3) as dependency_2.io.Pagination;
        }
        set pagination(value: dependency_2.io.Pagination) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasPagination() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            protocol?: string;
            classId?: string;
            pagination?: ReturnType<typeof dependency_2.io.Pagination.prototype.toObject>;
        }): GetMessagesForProtocolRequest {
            const message = new GetMessagesForProtocolRequest({});
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.classId != null) {
                message.classId = data.classId;
            }
            if (data.pagination != null) {
                message.pagination = dependency_2.io.Pagination.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                protocol?: string;
                classId?: string;
                pagination?: ReturnType<typeof dependency_2.io.Pagination.prototype.toObject>;
            } = {};
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.classId != null) {
                data.classId = this.classId;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.protocol.length)
                writer.writeString(1, this.protocol);
            if (this.classId.length)
                writer.writeString(2, this.classId);
            if (this.hasPagination)
                writer.writeMessage(3, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMessagesForProtocolRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMessagesForProtocolRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.protocol = reader.readString();
                        break;
                    case 2:
                        message.classId = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_2.io.Pagination.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMessagesForProtocolRequest {
            return GetMessagesForProtocolRequest.deserialize(bytes);
        }
    }
    export class GetMessageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: Message;
            status?: MessageStatus;
            recipients?: number;
            distributedAt?: dependency_5.google.protobuf.Timestamp;
            withdrawnAt?: dependency_5.google.protobuf.Timestamp;
            createdAt?: dependency_5.google.protobuf.Timestamp;
            updatedAt?: dependency_5.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("recipients" in data && data.recipients != undefined) {
                    this.recipients = data.recipients;
                }
                if ("distributedAt" in data && data.distributedAt != undefined) {
                    this.distributedAt = data.distributedAt;
                }
                if ("withdrawnAt" in data && data.withdrawnAt != undefined) {
                    this.withdrawnAt = data.withdrawnAt;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get message() {
            return pb_1.Message.getWrapperField(this, Message, 1) as Message;
        }
        set message(value: Message) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasMessage() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, MessageStatus.MESSAGE_STATUS_DO_NOT_USE) as MessageStatus;
        }
        set status(value: MessageStatus) {
            pb_1.Message.setField(this, 2, value);
        }
        get recipients() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set recipients(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get distributedAt() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 4) as dependency_5.google.protobuf.Timestamp;
        }
        set distributedAt(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasDistributedAt() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get withdrawnAt() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 5) as dependency_5.google.protobuf.Timestamp;
        }
        set withdrawnAt(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasWithdrawnAt() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get createdAt() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 6) as dependency_5.google.protobuf.Timestamp;
        }
        set createdAt(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasCreatedAt() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get updatedAt() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 7) as dependency_5.google.protobuf.Timestamp;
        }
        set updatedAt(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasUpdatedAt() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            message?: ReturnType<typeof Message.prototype.toObject>;
            status?: MessageStatus;
            recipients?: number;
            distributedAt?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            withdrawnAt?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            createdAt?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            updatedAt?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
        }): GetMessageResponse {
            const message = new GetMessageResponse({});
            if (data.message != null) {
                message.message = Message.fromObject(data.message);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.recipients != null) {
                message.recipients = data.recipients;
            }
            if (data.distributedAt != null) {
                message.distributedAt = dependency_5.google.protobuf.Timestamp.fromObject(data.distributedAt);
            }
            if (data.withdrawnAt != null) {
                message.withdrawnAt = dependency_5.google.protobuf.Timestamp.fromObject(data.withdrawnAt);
            }
            if (data.createdAt != null) {
                message.createdAt = dependency_5.google.protobuf.Timestamp.fromObject(data.createdAt);
            }
            if (data.updatedAt != null) {
                message.updatedAt = dependency_5.google.protobuf.Timestamp.fromObject(data.updatedAt);
            }
            return message;
        }
        toObject() {
            const data: {
                message?: ReturnType<typeof Message.prototype.toObject>;
                status?: MessageStatus;
                recipients?: number;
                distributedAt?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                withdrawnAt?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                createdAt?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                updatedAt?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.message != null) {
                data.message = this.message.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.recipients != null) {
                data.recipients = this.recipients;
            }
            if (this.distributedAt != null) {
                data.distributedAt = this.distributedAt.toObject();
            }
            if (this.withdrawnAt != null) {
                data.withdrawnAt = this.withdrawnAt.toObject();
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt.toObject();
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasMessage)
                writer.writeMessage(1, this.message, () => this.message.serialize(writer));
            if (this.status != MessageStatus.MESSAGE_STATUS_DO_NOT_USE)
                writer.writeEnum(2, this.status);
            if (this.recipients != 0)
                writer.writeUint32(3, this.recipients);
            if (this.hasDistributedAt)
                writer.writeMessage(4, this.distributedAt, () => this.distributedAt.serialize(writer));
            if (this.hasWithdrawnAt)
                writer.writeMessage(5, this.withdrawnAt, () => this.withdrawnAt.serialize(writer));
            if (this.hasCreatedAt)
                writer.writeMessage(6, this.createdAt, () => this.createdAt.serialize(writer));
            if (this.hasUpdatedAt)
                writer.writeMessage(7, this.updatedAt, () => this.updatedAt.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMessageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMessageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.message, () => message.message = Message.deserialize(reader));
                        break;
                    case 2:
                        message.status = reader.readEnum();
                        break;
                    case 3:
                        message.recipients = reader.readUint32();
                        break;
                    case 4:
                        reader.readMessage(message.distributedAt, () => message.distributedAt = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.withdrawnAt, () => message.withdrawnAt = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.createdAt, () => message.createdAt = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMessageResponse {
            return GetMessageResponse.deserialize(bytes);
        }
    }
    export class GetMessageHistoryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            messages?: GetMessageResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("messages" in data && data.messages != undefined) {
                    this.messages = data.messages;
                }
            }
        }
        get messages() {
            return pb_1.Message.getRepeatedWrapperField(this, GetMessageResponse, 1) as GetMessageResponse[];
        }
        set messages(value: GetMessageResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            messages?: ReturnType<typeof GetMessageResponse.prototype.toObject>[];
        }): GetMessageHistoryResponse {
            const message = new GetMessageHistoryResponse({});
            if (data.messages != null) {
                message.messages = data.messages.map(item => GetMessageResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                messages?: ReturnType<typeof GetMessageResponse.prototype.toObject>[];
            } = {};
            if (this.messages != null) {
                data.messages = this.messages.map((item: GetMessageResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.messages.length)
                writer.writeRepeatedMessage(1, this.messages, (item: GetMessageResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetMessageHistoryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetMessageHistoryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.messages, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GetMessageResponse.deserialize(reader), GetMessageResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetMessageHistoryResponse {
            return GetMessageHistoryResponse.deserialize(bytes);
        }
    }
    export class SendMessageRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            messageId?: string;
        } & (({
            passIds?: dependency_3.io.PassIds;
            protocol?: never;
        } | {
            passIds?: never;
            protocol?: dependency_3.io.Protocol;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("messageId" in data && data.messageId != undefined) {
                    this.messageId = data.messageId;
                }
                if ("passIds" in data && data.passIds != undefined) {
                    this.passIds = data.passIds;
                }
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
            }
        }
        get messageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set messageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get passIds() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.PassIds, 2) as dependency_3.io.PassIds;
        }
        set passIds(value: dependency_3.io.PassIds) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get hasPassIds() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get protocol() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.Protocol, 3) as dependency_3.io.Protocol;
        }
        set protocol(value: dependency_3.io.Protocol) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get hasProtocol() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get target() {
            const cases: {
                [index: number]: "none" | "passIds" | "protocol";
            } = {
                0: "none",
                2: "passIds",
                3: "protocol"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            messageId?: string;
            passIds?: ReturnType<typeof dependency_3.io.PassIds.prototype.toObject>;
            protocol?: ReturnType<typeof dependency_3.io.Protocol.prototype.toObject>;
        }): SendMessageRequest {
            const message = new SendMessageRequest({});
            if (data.messageId != null) {
                message.messageId = data.messageId;
            }
            if (data.passIds != null) {
                message.passIds = dependency_3.io.PassIds.fromObject(data.passIds);
            }
            if (data.protocol != null) {
                message.protocol = dependency_3.io.Protocol.fromObject(data.protocol);
            }
            return message;
        }
        toObject() {
            const data: {
                messageId?: string;
                passIds?: ReturnType<typeof dependency_3.io.PassIds.prototype.toObject>;
                protocol?: ReturnType<typeof dependency_3.io.Protocol.prototype.toObject>;
            } = {};
            if (this.messageId != null) {
                data.messageId = this.messageId;
            }
            if (this.passIds != null) {
                data.passIds = this.passIds.toObject();
            }
            if (this.protocol != null) {
                data.protocol = this.protocol.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.messageId.length)
                writer.writeString(1, this.messageId);
            if (this.hasPassIds)
                writer.writeMessage(2, this.passIds, () => this.passIds.serialize(writer));
            if (this.hasProtocol)
                writer.writeMessage(3, this.protocol, () => this.protocol.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendMessageRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendMessageRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.messageId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.passIds, () => message.passIds = dependency_3.io.PassIds.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.protocol, () => message.protocol = dependency_3.io.Protocol.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendMessageRequest {
            return SendMessageRequest.deserialize(bytes);
        }
    }
    export class SendMessageResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
            }
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            count?: number;
        }): SendMessageResponse {
            const message = new SendMessageResponse({});
            if (data.count != null) {
                message.count = data.count;
            }
            return message;
        }
        toObject() {
            const data: {
                count?: number;
            } = {};
            if (this.count != null) {
                data.count = this.count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.count != 0)
                writer.writeInt32(1, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendMessageResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendMessageResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.count = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendMessageResponse {
            return SendMessageResponse.deserialize(bytes);
        }
    }
}
