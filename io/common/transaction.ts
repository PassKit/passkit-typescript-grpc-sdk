/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/transaction.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../protoc-gen-openapiv2/options/annotations";
import * as dependency_2 from "./common_objects";
import * as dependency_3 from "./proximity";
import * as pb_1 from "google-protobuf";
export namespace io {
    export class Transaction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            referenceId?: string;
            totalPrice?: number;
            orderItems?: OrderItem[];
            discount?: number;
            discountItems?: DiscountItem[];
            serviceCharge?: number;
            totalTax?: number;
            finalPrice?: number;
            roundingDifference?: number;
            isRefunded?: boolean;
            timestamp?: dependency_2.io.Date;
            currency?: string;
            location?: dependency_3.io.GPSLocation;
            transactionSource?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("referenceId" in data && data.referenceId != undefined) {
                    this.referenceId = data.referenceId;
                }
                if ("totalPrice" in data && data.totalPrice != undefined) {
                    this.totalPrice = data.totalPrice;
                }
                if ("orderItems" in data && data.orderItems != undefined) {
                    this.orderItems = data.orderItems;
                }
                if ("discount" in data && data.discount != undefined) {
                    this.discount = data.discount;
                }
                if ("discountItems" in data && data.discountItems != undefined) {
                    this.discountItems = data.discountItems;
                }
                if ("serviceCharge" in data && data.serviceCharge != undefined) {
                    this.serviceCharge = data.serviceCharge;
                }
                if ("totalTax" in data && data.totalTax != undefined) {
                    this.totalTax = data.totalTax;
                }
                if ("finalPrice" in data && data.finalPrice != undefined) {
                    this.finalPrice = data.finalPrice;
                }
                if ("roundingDifference" in data && data.roundingDifference != undefined) {
                    this.roundingDifference = data.roundingDifference;
                }
                if ("isRefunded" in data && data.isRefunded != undefined) {
                    this.isRefunded = data.isRefunded;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("currency" in data && data.currency != undefined) {
                    this.currency = data.currency;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("transactionSource" in data && data.transactionSource != undefined) {
                    this.transactionSource = data.transactionSource;
                }
            }
        }
        get referenceId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set referenceId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get totalPrice() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set totalPrice(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get orderItems() {
            return pb_1.Message.getRepeatedWrapperField(this, OrderItem, 3) as OrderItem[];
        }
        set orderItems(value: OrderItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get discount() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set discount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get discountItems() {
            return pb_1.Message.getRepeatedWrapperField(this, DiscountItem, 5) as DiscountItem[];
        }
        set discountItems(value: DiscountItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get serviceCharge() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set serviceCharge(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get totalTax() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set totalTax(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get finalPrice() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set finalPrice(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get roundingDifference() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set roundingDifference(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get isRefunded() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set isRefunded(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.Date, 11) as dependency_2.io.Date;
        }
        set timestamp(value: dependency_2.io.Date) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasTimestamp() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get currency() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set currency(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get location() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.GPSLocation, 13) as dependency_3.io.GPSLocation;
        }
        set location(value: dependency_3.io.GPSLocation) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasLocation() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get transactionSource() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set transactionSource(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        static fromObject(data: {
            referenceId?: string;
            totalPrice?: number;
            orderItems?: ReturnType<typeof OrderItem.prototype.toObject>[];
            discount?: number;
            discountItems?: ReturnType<typeof DiscountItem.prototype.toObject>[];
            serviceCharge?: number;
            totalTax?: number;
            finalPrice?: number;
            roundingDifference?: number;
            isRefunded?: boolean;
            timestamp?: ReturnType<typeof dependency_2.io.Date.prototype.toObject>;
            currency?: string;
            location?: ReturnType<typeof dependency_3.io.GPSLocation.prototype.toObject>;
            transactionSource?: string;
        }): Transaction {
            const message = new Transaction({});
            if (data.referenceId != null) {
                message.referenceId = data.referenceId;
            }
            if (data.totalPrice != null) {
                message.totalPrice = data.totalPrice;
            }
            if (data.orderItems != null) {
                message.orderItems = data.orderItems.map(item => OrderItem.fromObject(item));
            }
            if (data.discount != null) {
                message.discount = data.discount;
            }
            if (data.discountItems != null) {
                message.discountItems = data.discountItems.map(item => DiscountItem.fromObject(item));
            }
            if (data.serviceCharge != null) {
                message.serviceCharge = data.serviceCharge;
            }
            if (data.totalTax != null) {
                message.totalTax = data.totalTax;
            }
            if (data.finalPrice != null) {
                message.finalPrice = data.finalPrice;
            }
            if (data.roundingDifference != null) {
                message.roundingDifference = data.roundingDifference;
            }
            if (data.isRefunded != null) {
                message.isRefunded = data.isRefunded;
            }
            if (data.timestamp != null) {
                message.timestamp = dependency_2.io.Date.fromObject(data.timestamp);
            }
            if (data.currency != null) {
                message.currency = data.currency;
            }
            if (data.location != null) {
                message.location = dependency_3.io.GPSLocation.fromObject(data.location);
            }
            if (data.transactionSource != null) {
                message.transactionSource = data.transactionSource;
            }
            return message;
        }
        toObject() {
            const data: {
                referenceId?: string;
                totalPrice?: number;
                orderItems?: ReturnType<typeof OrderItem.prototype.toObject>[];
                discount?: number;
                discountItems?: ReturnType<typeof DiscountItem.prototype.toObject>[];
                serviceCharge?: number;
                totalTax?: number;
                finalPrice?: number;
                roundingDifference?: number;
                isRefunded?: boolean;
                timestamp?: ReturnType<typeof dependency_2.io.Date.prototype.toObject>;
                currency?: string;
                location?: ReturnType<typeof dependency_3.io.GPSLocation.prototype.toObject>;
                transactionSource?: string;
            } = {};
            if (this.referenceId != null) {
                data.referenceId = this.referenceId;
            }
            if (this.totalPrice != null) {
                data.totalPrice = this.totalPrice;
            }
            if (this.orderItems != null) {
                data.orderItems = this.orderItems.map((item: OrderItem) => item.toObject());
            }
            if (this.discount != null) {
                data.discount = this.discount;
            }
            if (this.discountItems != null) {
                data.discountItems = this.discountItems.map((item: DiscountItem) => item.toObject());
            }
            if (this.serviceCharge != null) {
                data.serviceCharge = this.serviceCharge;
            }
            if (this.totalTax != null) {
                data.totalTax = this.totalTax;
            }
            if (this.finalPrice != null) {
                data.finalPrice = this.finalPrice;
            }
            if (this.roundingDifference != null) {
                data.roundingDifference = this.roundingDifference;
            }
            if (this.isRefunded != null) {
                data.isRefunded = this.isRefunded;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.currency != null) {
                data.currency = this.currency;
            }
            if (this.location != null) {
                data.location = this.location.toObject();
            }
            if (this.transactionSource != null) {
                data.transactionSource = this.transactionSource;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.referenceId.length)
                writer.writeString(1, this.referenceId);
            if (this.totalPrice != 0)
                writer.writeFloat(2, this.totalPrice);
            if (this.orderItems.length)
                writer.writeRepeatedMessage(3, this.orderItems, (item: OrderItem) => item.serialize(writer));
            if (this.discount != 0)
                writer.writeFloat(4, this.discount);
            if (this.discountItems.length)
                writer.writeRepeatedMessage(5, this.discountItems, (item: DiscountItem) => item.serialize(writer));
            if (this.serviceCharge != 0)
                writer.writeFloat(6, this.serviceCharge);
            if (this.totalTax != 0)
                writer.writeFloat(7, this.totalTax);
            if (this.finalPrice != 0)
                writer.writeFloat(8, this.finalPrice);
            if (this.roundingDifference != 0)
                writer.writeFloat(9, this.roundingDifference);
            if (this.isRefunded != false)
                writer.writeBool(10, this.isRefunded);
            if (this.hasTimestamp)
                writer.writeMessage(11, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.currency.length)
                writer.writeString(12, this.currency);
            if (this.hasLocation)
                writer.writeMessage(13, this.location, () => this.location.serialize(writer));
            if (this.transactionSource.length)
                writer.writeString(14, this.transactionSource);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.referenceId = reader.readString();
                        break;
                    case 2:
                        message.totalPrice = reader.readFloat();
                        break;
                    case 3:
                        reader.readMessage(message.orderItems, () => pb_1.Message.addToRepeatedWrapperField(message, 3, OrderItem.deserialize(reader), OrderItem));
                        break;
                    case 4:
                        message.discount = reader.readFloat();
                        break;
                    case 5:
                        reader.readMessage(message.discountItems, () => pb_1.Message.addToRepeatedWrapperField(message, 5, DiscountItem.deserialize(reader), DiscountItem));
                        break;
                    case 6:
                        message.serviceCharge = reader.readFloat();
                        break;
                    case 7:
                        message.totalTax = reader.readFloat();
                        break;
                    case 8:
                        message.finalPrice = reader.readFloat();
                        break;
                    case 9:
                        message.roundingDifference = reader.readFloat();
                        break;
                    case 10:
                        message.isRefunded = reader.readBool();
                        break;
                    case 11:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_2.io.Date.deserialize(reader));
                        break;
                    case 12:
                        message.currency = reader.readString();
                        break;
                    case 13:
                        reader.readMessage(message.location, () => message.location = dependency_3.io.GPSLocation.deserialize(reader));
                        break;
                    case 14:
                        message.transactionSource = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Transaction {
            return Transaction.deserialize(bytes);
        }
    }
    export class DiscountItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            discountCode?: string;
            voucherCode?: string;
            amount?: number;
            itemName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("discountCode" in data && data.discountCode != undefined) {
                    this.discountCode = data.discountCode;
                }
                if ("voucherCode" in data && data.voucherCode != undefined) {
                    this.voucherCode = data.voucherCode;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("itemName" in data && data.itemName != undefined) {
                    this.itemName = data.itemName;
                }
            }
        }
        get discountCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set discountCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get voucherCode() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set voucherCode(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get itemName() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set itemName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            discountCode?: string;
            voucherCode?: string;
            amount?: number;
            itemName?: string;
        }): DiscountItem {
            const message = new DiscountItem({});
            if (data.discountCode != null) {
                message.discountCode = data.discountCode;
            }
            if (data.voucherCode != null) {
                message.voucherCode = data.voucherCode;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.itemName != null) {
                message.itemName = data.itemName;
            }
            return message;
        }
        toObject() {
            const data: {
                discountCode?: string;
                voucherCode?: string;
                amount?: number;
                itemName?: string;
            } = {};
            if (this.discountCode != null) {
                data.discountCode = this.discountCode;
            }
            if (this.voucherCode != null) {
                data.voucherCode = this.voucherCode;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.itemName != null) {
                data.itemName = this.itemName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.discountCode.length)
                writer.writeString(1, this.discountCode);
            if (this.voucherCode.length)
                writer.writeString(2, this.voucherCode);
            if (this.amount != 0)
                writer.writeFloat(4, this.amount);
            if (this.itemName.length)
                writer.writeString(5, this.itemName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiscountItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiscountItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.discountCode = reader.readString();
                        break;
                    case 2:
                        message.voucherCode = reader.readString();
                        break;
                    case 4:
                        message.amount = reader.readFloat();
                        break;
                    case 5:
                        message.itemName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiscountItem {
            return DiscountItem.deserialize(bytes);
        }
    }
    export class OrderItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: number;
            tax?: number;
            itemName?: string;
            quantity?: number;
            sku?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("tax" in data && data.tax != undefined) {
                    this.tax = data.tax;
                }
                if ("itemName" in data && data.itemName != undefined) {
                    this.itemName = data.itemName;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
                if ("sku" in data && data.sku != undefined) {
                    this.sku = data.sku;
                }
            }
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tax() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tax(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get itemName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set itemName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set quantity(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get sku() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set sku(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            amount?: number;
            tax?: number;
            itemName?: string;
            quantity?: number;
            sku?: string;
        }): OrderItem {
            const message = new OrderItem({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.tax != null) {
                message.tax = data.tax;
            }
            if (data.itemName != null) {
                message.itemName = data.itemName;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            if (data.sku != null) {
                message.sku = data.sku;
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: number;
                tax?: number;
                itemName?: string;
                quantity?: number;
                sku?: string;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.tax != null) {
                data.tax = this.tax;
            }
            if (this.itemName != null) {
                data.itemName = this.itemName;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            if (this.sku != null) {
                data.sku = this.sku;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount != 0)
                writer.writeFloat(1, this.amount);
            if (this.tax != 0)
                writer.writeFloat(2, this.tax);
            if (this.itemName.length)
                writer.writeString(3, this.itemName);
            if (this.quantity != 0)
                writer.writeInt32(4, this.quantity);
            if (this.sku.length)
                writer.writeString(5, this.sku);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrderItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrderItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readFloat();
                        break;
                    case 2:
                        message.tax = reader.readFloat();
                        break;
                    case 3:
                        message.itemName = reader.readString();
                        break;
                    case 4:
                        message.quantity = reader.readInt32();
                        break;
                    case 5:
                        message.sku = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OrderItem {
            return OrderItem.deserialize(bytes);
        }
    }
}
