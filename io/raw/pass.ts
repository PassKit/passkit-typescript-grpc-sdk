/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/raw/pass.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./../common/metrics";
import * as dependency_3 from "./../common/filter";
import * as dependency_4 from "./../common/pass";
import * as dependency_5 from "./../common/personal";
import * as dependency_6 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace raw {
    export class Pass extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            externalId?: string;
            passProjectId?: string;
            passTemplateId?: string;
            personalDetails?: dependency_5.io.Person;
            dynamicData?: Map<string, string>;
            optOut?: boolean;
            isVoided?: boolean;
            invalidateDate?: dependency_1.google.protobuf.Timestamp;
            expiryDate?: dependency_1.google.protobuf.Timestamp;
            passOptions?: dependency_4.io.PassOptions;
            passOverrides?: dependency_4.io.PassOverrides;
            passMetaData?: dependency_2.io.Metadata;
            created?: dependency_1.google.protobuf.Timestamp;
            updated?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("passProjectId" in data && data.passProjectId != undefined) {
                    this.passProjectId = data.passProjectId;
                }
                if ("passTemplateId" in data && data.passTemplateId != undefined) {
                    this.passTemplateId = data.passTemplateId;
                }
                if ("personalDetails" in data && data.personalDetails != undefined) {
                    this.personalDetails = data.personalDetails;
                }
                if ("dynamicData" in data && data.dynamicData != undefined) {
                    this.dynamicData = data.dynamicData;
                }
                if ("optOut" in data && data.optOut != undefined) {
                    this.optOut = data.optOut;
                }
                if ("isVoided" in data && data.isVoided != undefined) {
                    this.isVoided = data.isVoided;
                }
                if ("invalidateDate" in data && data.invalidateDate != undefined) {
                    this.invalidateDate = data.invalidateDate;
                }
                if ("expiryDate" in data && data.expiryDate != undefined) {
                    this.expiryDate = data.expiryDate;
                }
                if ("passOptions" in data && data.passOptions != undefined) {
                    this.passOptions = data.passOptions;
                }
                if ("passOverrides" in data && data.passOverrides != undefined) {
                    this.passOverrides = data.passOverrides;
                }
                if ("passMetaData" in data && data.passMetaData != undefined) {
                    this.passMetaData = data.passMetaData;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
            }
            if (!this.dynamicData)
                this.dynamicData = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get passProjectId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set passProjectId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get passTemplateId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set passTemplateId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get personalDetails() {
            return pb_1.Message.getWrapperField(this, dependency_5.io.Person, 5) as dependency_5.io.Person;
        }
        set personalDetails(value: dependency_5.io.Person) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasPersonalDetails() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get dynamicData() {
            return pb_1.Message.getField(this, 6) as any as Map<string, string>;
        }
        set dynamicData(value: Map<string, string>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get optOut() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set optOut(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get isVoided() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set isVoided(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get invalidateDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 10) as dependency_1.google.protobuf.Timestamp;
        }
        set invalidateDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasInvalidateDate() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get expiryDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 11) as dependency_1.google.protobuf.Timestamp;
        }
        set expiryDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasExpiryDate() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get passOptions() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.PassOptions, 12) as dependency_4.io.PassOptions;
        }
        set passOptions(value: dependency_4.io.PassOptions) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get hasPassOptions() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get passOverrides() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.PassOverrides, 13) as dependency_4.io.PassOverrides;
        }
        set passOverrides(value: dependency_4.io.PassOverrides) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasPassOverrides() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get passMetaData() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.Metadata, 14) as dependency_2.io.Metadata;
        }
        set passMetaData(value: dependency_2.io.Metadata) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get hasPassMetaData() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 15) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 16) as dependency_1.google.protobuf.Timestamp;
        }
        set updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get hasUpdated() {
            return pb_1.Message.getField(this, 16) != null;
        }
        static fromObject(data: {
            id?: string;
            externalId?: string;
            passProjectId?: string;
            passTemplateId?: string;
            personalDetails?: ReturnType<typeof dependency_5.io.Person.prototype.toObject>;
            dynamicData?: {
                [key: string]: string;
            };
            optOut?: boolean;
            isVoided?: boolean;
            invalidateDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            expiryDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            passOptions?: ReturnType<typeof dependency_4.io.PassOptions.prototype.toObject>;
            passOverrides?: ReturnType<typeof dependency_4.io.PassOverrides.prototype.toObject>;
            passMetaData?: ReturnType<typeof dependency_2.io.Metadata.prototype.toObject>;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): Pass {
            const message = new Pass({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (data.passProjectId != null) {
                message.passProjectId = data.passProjectId;
            }
            if (data.passTemplateId != null) {
                message.passTemplateId = data.passTemplateId;
            }
            if (data.personalDetails != null) {
                message.personalDetails = dependency_5.io.Person.fromObject(data.personalDetails);
            }
            if (typeof data.dynamicData == "object") {
                message.dynamicData = new Map(Object.entries(data.dynamicData));
            }
            if (data.optOut != null) {
                message.optOut = data.optOut;
            }
            if (data.isVoided != null) {
                message.isVoided = data.isVoided;
            }
            if (data.invalidateDate != null) {
                message.invalidateDate = dependency_1.google.protobuf.Timestamp.fromObject(data.invalidateDate);
            }
            if (data.expiryDate != null) {
                message.expiryDate = dependency_1.google.protobuf.Timestamp.fromObject(data.expiryDate);
            }
            if (data.passOptions != null) {
                message.passOptions = dependency_4.io.PassOptions.fromObject(data.passOptions);
            }
            if (data.passOverrides != null) {
                message.passOverrides = dependency_4.io.PassOverrides.fromObject(data.passOverrides);
            }
            if (data.passMetaData != null) {
                message.passMetaData = dependency_2.io.Metadata.fromObject(data.passMetaData);
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_1.google.protobuf.Timestamp.fromObject(data.updated);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                externalId?: string;
                passProjectId?: string;
                passTemplateId?: string;
                personalDetails?: ReturnType<typeof dependency_5.io.Person.prototype.toObject>;
                dynamicData?: {
                    [key: string]: string;
                };
                optOut?: boolean;
                isVoided?: boolean;
                invalidateDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                expiryDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                passOptions?: ReturnType<typeof dependency_4.io.PassOptions.prototype.toObject>;
                passOverrides?: ReturnType<typeof dependency_4.io.PassOverrides.prototype.toObject>;
                passMetaData?: ReturnType<typeof dependency_2.io.Metadata.prototype.toObject>;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.passProjectId != null) {
                data.passProjectId = this.passProjectId;
            }
            if (this.passTemplateId != null) {
                data.passTemplateId = this.passTemplateId;
            }
            if (this.personalDetails != null) {
                data.personalDetails = this.personalDetails.toObject();
            }
            if (this.dynamicData != null) {
                data.dynamicData = (Object.fromEntries)(this.dynamicData);
            }
            if (this.optOut != null) {
                data.optOut = this.optOut;
            }
            if (this.isVoided != null) {
                data.isVoided = this.isVoided;
            }
            if (this.invalidateDate != null) {
                data.invalidateDate = this.invalidateDate.toObject();
            }
            if (this.expiryDate != null) {
                data.expiryDate = this.expiryDate.toObject();
            }
            if (this.passOptions != null) {
                data.passOptions = this.passOptions.toObject();
            }
            if (this.passOverrides != null) {
                data.passOverrides = this.passOverrides.toObject();
            }
            if (this.passMetaData != null) {
                data.passMetaData = this.passMetaData.toObject();
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.externalId.length)
                writer.writeString(2, this.externalId);
            if (this.passProjectId.length)
                writer.writeString(3, this.passProjectId);
            if (this.passTemplateId.length)
                writer.writeString(4, this.passTemplateId);
            if (this.hasPersonalDetails)
                writer.writeMessage(5, this.personalDetails, () => this.personalDetails.serialize(writer));
            for (const [key, value] of this.dynamicData) {
                writer.writeMessage(6, this.dynamicData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.optOut != false)
                writer.writeBool(8, this.optOut);
            if (this.isVoided != false)
                writer.writeBool(9, this.isVoided);
            if (this.hasInvalidateDate)
                writer.writeMessage(10, this.invalidateDate, () => this.invalidateDate.serialize(writer));
            if (this.hasExpiryDate)
                writer.writeMessage(11, this.expiryDate, () => this.expiryDate.serialize(writer));
            if (this.hasPassOptions)
                writer.writeMessage(12, this.passOptions, () => this.passOptions.serialize(writer));
            if (this.hasPassOverrides)
                writer.writeMessage(13, this.passOverrides, () => this.passOverrides.serialize(writer));
            if (this.hasPassMetaData)
                writer.writeMessage(14, this.passMetaData, () => this.passMetaData.serialize(writer));
            if (this.hasCreated)
                writer.writeMessage(15, this.created, () => this.created.serialize(writer));
            if (this.hasUpdated)
                writer.writeMessage(16, this.updated, () => this.updated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pass {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pass();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.externalId = reader.readString();
                        break;
                    case 3:
                        message.passProjectId = reader.readString();
                        break;
                    case 4:
                        message.passTemplateId = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.personalDetails, () => message.personalDetails = dependency_5.io.Person.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.dynamicData as any, reader, reader.readString, reader.readString));
                        break;
                    case 8:
                        message.optOut = reader.readBool();
                        break;
                    case 9:
                        message.isVoided = reader.readBool();
                        break;
                    case 10:
                        reader.readMessage(message.invalidateDate, () => message.invalidateDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.expiryDate, () => message.expiryDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.passOptions, () => message.passOptions = dependency_4.io.PassOptions.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.passOverrides, () => message.passOverrides = dependency_4.io.PassOverrides.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.passMetaData, () => message.passMetaData = dependency_2.io.Metadata.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.updated, () => message.updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Pass {
            return Pass.deserialize(bytes);
        }
    }
    export class PassRecordByExternalIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            passProjectId?: string;
            externalId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("passProjectId" in data && data.passProjectId != undefined) {
                    this.passProjectId = data.passProjectId;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
            }
        }
        get passProjectId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set passProjectId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            passProjectId?: string;
            externalId?: string;
        }): PassRecordByExternalIdRequest {
            const message = new PassRecordByExternalIdRequest({});
            if (data.passProjectId != null) {
                message.passProjectId = data.passProjectId;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            return message;
        }
        toObject() {
            const data: {
                passProjectId?: string;
                externalId?: string;
            } = {};
            if (this.passProjectId != null) {
                data.passProjectId = this.passProjectId;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.passProjectId.length)
                writer.writeString(1, this.passProjectId);
            if (this.externalId.length)
                writer.writeString(2, this.externalId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PassRecordByExternalIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PassRecordByExternalIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.passProjectId = reader.readString();
                        break;
                    case 2:
                        message.externalId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PassRecordByExternalIdRequest {
            return PassRecordByExternalIdRequest.deserialize(bytes);
        }
    }
    export class ListPassesByPassProjectRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            passProjectId?: string;
            filters?: dependency_3.io.Filters;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("passProjectId" in data && data.passProjectId != undefined) {
                    this.passProjectId = data.passProjectId;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
            }
        }
        get passProjectId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set passProjectId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.Filters, 2) as dependency_3.io.Filters;
        }
        set filters(value: dependency_3.io.Filters) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasFilters() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            passProjectId?: string;
            filters?: ReturnType<typeof dependency_3.io.Filters.prototype.toObject>;
        }): ListPassesByPassProjectRequest {
            const message = new ListPassesByPassProjectRequest({});
            if (data.passProjectId != null) {
                message.passProjectId = data.passProjectId;
            }
            if (data.filters != null) {
                message.filters = dependency_3.io.Filters.fromObject(data.filters);
            }
            return message;
        }
        toObject() {
            const data: {
                passProjectId?: string;
                filters?: ReturnType<typeof dependency_3.io.Filters.prototype.toObject>;
            } = {};
            if (this.passProjectId != null) {
                data.passProjectId = this.passProjectId;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.passProjectId.length)
                writer.writeString(1, this.passProjectId);
            if (this.hasFilters)
                writer.writeMessage(2, this.filters, () => this.filters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListPassesByPassProjectRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListPassesByPassProjectRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.passProjectId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.filters, () => message.filters = dependency_3.io.Filters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListPassesByPassProjectRequest {
            return ListPassesByPassProjectRequest.deserialize(bytes);
        }
    }
    export class ListPassesByPassTemplateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            passProjectId?: string;
            filters?: dependency_3.io.Filters;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("passProjectId" in data && data.passProjectId != undefined) {
                    this.passProjectId = data.passProjectId;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
            }
        }
        get passProjectId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set passProjectId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.Filters, 2) as dependency_3.io.Filters;
        }
        set filters(value: dependency_3.io.Filters) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasFilters() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            passProjectId?: string;
            filters?: ReturnType<typeof dependency_3.io.Filters.prototype.toObject>;
        }): ListPassesByPassTemplateRequest {
            const message = new ListPassesByPassTemplateRequest({});
            if (data.passProjectId != null) {
                message.passProjectId = data.passProjectId;
            }
            if (data.filters != null) {
                message.filters = dependency_3.io.Filters.fromObject(data.filters);
            }
            return message;
        }
        toObject() {
            const data: {
                passProjectId?: string;
                filters?: ReturnType<typeof dependency_3.io.Filters.prototype.toObject>;
            } = {};
            if (this.passProjectId != null) {
                data.passProjectId = this.passProjectId;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.passProjectId.length)
                writer.writeString(1, this.passProjectId);
            if (this.hasFilters)
                writer.writeMessage(2, this.filters, () => this.filters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListPassesByPassTemplateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListPassesByPassTemplateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.passProjectId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.filters, () => message.filters = dependency_3.io.Filters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListPassesByPassTemplateRequest {
            return ListPassesByPassTemplateRequest.deserialize(bytes);
        }
    }
}
