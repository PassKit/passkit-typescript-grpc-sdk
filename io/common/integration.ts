/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/integration.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./pass";
import * as dependency_2 from "./template";
import * as dependency_3 from "./../../protoc-gen-openapiv2/options/annotations";
import * as dependency_4 from "./protocols";
import * as dependency_5 from "./../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace io {
    export enum IntegrationStatus {
        INTEGRATION_STATUS_NONE = 0,
        INTEGRATION_DISABLED = 1,
        INTEGRATION_ACTIVE = 2,
        INTEGRATION_SUSPENDED = 3
    }
    export enum ConfigurationType {
        CONFIGURATION_NONE = 0,
        WEBHOOK = 1,
        DB_MYSQL = 2,
        ZOHO = 3,
        BRAZE = 4,
        CODEREADR = 5,
        ZAPIER = 6,
        MAILCHIMP = 7,
        SPROUT = 8,
        TESSITURA = 9,
        ITERABLE = 10,
        MOENGAGE = 11,
        ORACLE_RESPONSYS = 12,
        _CONFIG_TYPE_1 = 100
    }
    export enum IntegrationType {
        INTEGRATION_TYPE_NONE = 0,
        SOURCE_INTEGRATION = 1,
        HOOK_BEFORE_OBJECT_RECORD_CREATION = 4,
        HOOK_AFTER_OBJECT_RECORD_CREATION = 8,
        HOOK_BEFORE_PASS_ISSUE = 16,
        HOOK_AFTER_PASS_ISSUE = 32,
        HOOK_AFTER_PASS_INSTALL = 64,
        HOOK_AFTER_PASS_UNINSTALL = 128,
        HOOK_BEFORE_OBJECT_RECORD_UPDATE = 256,
        HOOK_AFTER_OBJECT_RECORD_UPDATE = 512,
        HOOK_BEFORE_PASS_RECORD_UPDATE = 1024,
        HOOK_AFTER_PASS_RECORD_UPDATE = 2048,
        HOOK_BEFORE_PASS_UPDATE = 4096,
        HOOK_AFTER_PASS_UPDATE = 8192,
        HOOK_BEFORE_PASS_RECORD_DELETE = 16384,
        HOOK_AFTER_PASS_RECORD_DELETE = 32768
    }
    export enum ProtocolIntgType {
        PROTOCOL_INTG_TYPE_NONE = 0,
        HOOK_BEFORE_MEMBER_UPDATE_POINTS = 1,
        HOOK_AFTER_MEMBER_UPDATE_POINTS = 4,
        HOOK_BEFORE_MEMBER_TIER_UPDATE = 8,
        HOOK_AFTER_MEMBER_TIER_UPDATE = 16,
        HOOK_BEFORE_MEMBER_CHECK_IN = 32,
        HOOK_AFTER_MEMBER_CHECK_IN = 64,
        HOOK_BEFORE_MEMBER_CHECK_OUT = 128,
        HOOK_AFTER_MEMBER_CHECK_OUT = 256,
        HOOK_BEFORE_COUPON_REDEEM = 2048,
        HOOK_AFTER_COUPON_REDEEM = 4096,
        HOOK_BEFORE_UPDATE_COUPON_OFFER = 8192,
        HOOK_AFTER_UPDATE_COUPON_OFFER = 16384,
        HOOK_BEFORE_CREATE_COUPON_OFFER = 32768,
        HOOK_AFTER_CREATE_COUPON_OFFER = 65536,
        HOOK_BEFORE_UPDATE_PII = 2097152,
        HOOK_AFTER_UPDATE_PII = 4194304
    }
    export enum PassEventId {
        PASS_EVENT_NONE = 0,
        PASS_EVENT_RECORD_CREATED = 1,
        PASS_EVENT_INSTALLED = 2,
        PASS_EVENT_RECORD_UPDATED = 4,
        PASS_EVENT_UNINSTALLED = 8,
        PASS_EVENT_INVALIDATED = 16,
        PASS_EVENT_RECORD_DELETED = 32
    }
    export enum MembershipEventId {
        MEMBER_EVENT_NONE = 0,
        MEMBER_EVENT_ENROLLED = 1,
        MEMBER_EVENT_UPDATED = 2
    }
    export enum CouponEventId {
        COUPON_EVENT_NONE = 0,
        COUPON_EVENT_CREATED = 1,
        COUPON_EVENT_REDEEMED = 2,
        COUPON_EVENT_UPDATED = 4,
        COUPON_EVENT_DELETED = 8
    }
    export enum ActionMethod {
        METHOD_NONE = 0,
        METHOD_POST = 1,
        METHOD_PUT = 2,
        METHOD_DELETE = 3
    }
    export class MembershipEventIds extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ids?: MembershipEventId[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ids" in data && data.ids != undefined) {
                    this.ids = data.ids;
                }
            }
        }
        get ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as MembershipEventId[];
        }
        set ids(value: MembershipEventId[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ids?: MembershipEventId[];
        }): MembershipEventIds {
            const message = new MembershipEventIds({});
            if (data.ids != null) {
                message.ids = data.ids;
            }
            return message;
        }
        toObject() {
            const data: {
                ids?: MembershipEventId[];
            } = {};
            if (this.ids != null) {
                data.ids = this.ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ids.length)
                writer.writePackedEnum(1, this.ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MembershipEventIds {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MembershipEventIds();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ids = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MembershipEventIds {
            return MembershipEventIds.deserialize(bytes);
        }
    }
    export class CouponEventIds extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ids?: CouponEventId[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ids" in data && data.ids != undefined) {
                    this.ids = data.ids;
                }
            }
        }
        get ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as CouponEventId[];
        }
        set ids(value: CouponEventId[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            ids?: CouponEventId[];
        }): CouponEventIds {
            const message = new CouponEventIds({});
            if (data.ids != null) {
                message.ids = data.ids;
            }
            return message;
        }
        toObject() {
            const data: {
                ids?: CouponEventId[];
            } = {};
            if (this.ids != null) {
                data.ids = this.ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ids.length)
                writer.writePackedEnum(1, this.ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CouponEventIds {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CouponEventIds();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ids = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CouponEventIds {
            return CouponEventIds.deserialize(bytes);
        }
    }
    export class IntegrationConfigs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            classId?: string;
            configurations?: Map<number, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("classId" in data && data.classId != undefined) {
                    this.classId = data.classId;
                }
                if ("configurations" in data && data.configurations != undefined) {
                    this.configurations = data.configurations;
                }
            }
            if (!this.configurations)
                this.configurations = new Map();
        }
        get classId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set classId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get configurations() {
            return pb_1.Message.getField(this, 2) as any as Map<number, string>;
        }
        set configurations(value: Map<number, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            classId?: string;
            configurations?: {
                [key: number]: string;
            };
        }): IntegrationConfigs {
            const message = new IntegrationConfigs({});
            if (data.classId != null) {
                message.classId = data.classId;
            }
            if (typeof data.configurations == "object") {
                message.configurations = new Map(Object.entries(data.configurations).map(([key, value]) => [Number(key), value]));
            }
            return message;
        }
        toObject() {
            const data: {
                classId?: string;
                configurations?: {
                    [key: number]: string;
                };
            } = {};
            if (this.classId != null) {
                data.classId = this.classId;
            }
            if (this.configurations != null) {
                data.configurations = (Object.fromEntries)(this.configurations);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.classId.length)
                writer.writeString(1, this.classId);
            for (const [key, value] of this.configurations) {
                writer.writeMessage(2, this.configurations, () => {
                    writer.writeInt32(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IntegrationConfigs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IntegrationConfigs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.classId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.configurations as any, reader, reader.readInt32, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IntegrationConfigs {
            return IntegrationConfigs.deserialize(bytes);
        }
    }
    export class ProtocolIdInput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            protocol?: dependency_4.io.PassProtocol;
            classId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("classId" in data && data.classId != undefined) {
                    this.classId = data.classId;
                }
            }
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE) as dependency_4.io.PassProtocol;
        }
        set protocol(value: dependency_4.io.PassProtocol) {
            pb_1.Message.setField(this, 1, value);
        }
        get classId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set classId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            protocol?: dependency_4.io.PassProtocol;
            classId?: string;
        }): ProtocolIdInput {
            const message = new ProtocolIdInput({});
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.classId != null) {
                message.classId = data.classId;
            }
            return message;
        }
        toObject() {
            const data: {
                protocol?: dependency_4.io.PassProtocol;
                classId?: string;
            } = {};
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.classId != null) {
                data.classId = this.classId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.protocol != dependency_4.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE)
                writer.writeEnum(1, this.protocol);
            if (this.classId.length)
                writer.writeString(2, this.classId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtocolIdInput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolIdInput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.protocol = reader.readEnum();
                        break;
                    case 2:
                        message.classId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtocolIdInput {
            return ProtocolIdInput.deserialize(bytes);
        }
    }
    export class SubscriptionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            protocol?: dependency_4.io.PassProtocol;
            subscriptionId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("subscriptionId" in data && data.subscriptionId != undefined) {
                    this.subscriptionId = data.subscriptionId;
                }
            }
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE) as dependency_4.io.PassProtocol;
        }
        set protocol(value: dependency_4.io.PassProtocol) {
            pb_1.Message.setField(this, 1, value);
        }
        get subscriptionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set subscriptionId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            protocol?: dependency_4.io.PassProtocol;
            subscriptionId?: string;
        }): SubscriptionRequest {
            const message = new SubscriptionRequest({});
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.subscriptionId != null) {
                message.subscriptionId = data.subscriptionId;
            }
            return message;
        }
        toObject() {
            const data: {
                protocol?: dependency_4.io.PassProtocol;
                subscriptionId?: string;
            } = {};
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.subscriptionId != null) {
                data.subscriptionId = this.subscriptionId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.protocol != dependency_4.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE)
                writer.writeEnum(1, this.protocol);
            if (this.subscriptionId.length)
                writer.writeString(2, this.subscriptionId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubscriptionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubscriptionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.protocol = reader.readEnum();
                        break;
                    case 2:
                        message.subscriptionId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubscriptionRequest {
            return SubscriptionRequest.deserialize(bytes);
        }
    }
    export class SubscriptionRequestByClassId extends pb_1.Message {
        #one_of_decls: number[][] = [[4, 5, 6]];
        constructor(data?: any[] | ({
            protocol?: dependency_4.io.PassProtocol;
            classId?: string;
            configType?: ConfigurationType;
        } & (({
            passEventId?: PassEventId;
            membershipEventId?: never;
            couponEventId?: never;
        } | {
            passEventId?: never;
            membershipEventId?: MembershipEventId;
            couponEventId?: never;
        } | {
            passEventId?: never;
            membershipEventId?: never;
            couponEventId?: CouponEventId;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("classId" in data && data.classId != undefined) {
                    this.classId = data.classId;
                }
                if ("configType" in data && data.configType != undefined) {
                    this.configType = data.configType;
                }
                if ("passEventId" in data && data.passEventId != undefined) {
                    this.passEventId = data.passEventId;
                }
                if ("membershipEventId" in data && data.membershipEventId != undefined) {
                    this.membershipEventId = data.membershipEventId;
                }
                if ("couponEventId" in data && data.couponEventId != undefined) {
                    this.couponEventId = data.couponEventId;
                }
            }
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE) as dependency_4.io.PassProtocol;
        }
        set protocol(value: dependency_4.io.PassProtocol) {
            pb_1.Message.setField(this, 1, value);
        }
        get classId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set classId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get configType() {
            return pb_1.Message.getFieldWithDefault(this, 3, ConfigurationType.CONFIGURATION_NONE) as ConfigurationType;
        }
        set configType(value: ConfigurationType) {
            pb_1.Message.setField(this, 3, value);
        }
        get passEventId() {
            return pb_1.Message.getFieldWithDefault(this, 4, PassEventId.PASS_EVENT_NONE) as PassEventId;
        }
        set passEventId(value: PassEventId) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get hasPassEventId() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get membershipEventId() {
            return pb_1.Message.getFieldWithDefault(this, 5, MembershipEventId.MEMBER_EVENT_NONE) as MembershipEventId;
        }
        set membershipEventId(value: MembershipEventId) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get hasMembershipEventId() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get couponEventId() {
            return pb_1.Message.getFieldWithDefault(this, 6, CouponEventId.COUPON_EVENT_NONE) as CouponEventId;
        }
        set couponEventId(value: CouponEventId) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
        }
        get hasCouponEventId() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get eventId() {
            const cases: {
                [index: number]: "none" | "passEventId" | "membershipEventId" | "couponEventId";
            } = {
                0: "none",
                4: "passEventId",
                5: "membershipEventId",
                6: "couponEventId"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4, 5, 6])];
        }
        static fromObject(data: {
            protocol?: dependency_4.io.PassProtocol;
            classId?: string;
            configType?: ConfigurationType;
            passEventId?: PassEventId;
            membershipEventId?: MembershipEventId;
            couponEventId?: CouponEventId;
        }): SubscriptionRequestByClassId {
            const message = new SubscriptionRequestByClassId({});
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.classId != null) {
                message.classId = data.classId;
            }
            if (data.configType != null) {
                message.configType = data.configType;
            }
            if (data.passEventId != null) {
                message.passEventId = data.passEventId;
            }
            if (data.membershipEventId != null) {
                message.membershipEventId = data.membershipEventId;
            }
            if (data.couponEventId != null) {
                message.couponEventId = data.couponEventId;
            }
            return message;
        }
        toObject() {
            const data: {
                protocol?: dependency_4.io.PassProtocol;
                classId?: string;
                configType?: ConfigurationType;
                passEventId?: PassEventId;
                membershipEventId?: MembershipEventId;
                couponEventId?: CouponEventId;
            } = {};
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.classId != null) {
                data.classId = this.classId;
            }
            if (this.configType != null) {
                data.configType = this.configType;
            }
            if (this.passEventId != null) {
                data.passEventId = this.passEventId;
            }
            if (this.membershipEventId != null) {
                data.membershipEventId = this.membershipEventId;
            }
            if (this.couponEventId != null) {
                data.couponEventId = this.couponEventId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.protocol != dependency_4.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE)
                writer.writeEnum(1, this.protocol);
            if (this.classId.length)
                writer.writeString(2, this.classId);
            if (this.configType != ConfigurationType.CONFIGURATION_NONE)
                writer.writeEnum(3, this.configType);
            if (this.hasPassEventId)
                writer.writeEnum(4, this.passEventId);
            if (this.hasMembershipEventId)
                writer.writeEnum(5, this.membershipEventId);
            if (this.hasCouponEventId)
                writer.writeEnum(6, this.couponEventId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubscriptionRequestByClassId {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubscriptionRequestByClassId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.protocol = reader.readEnum();
                        break;
                    case 2:
                        message.classId = reader.readString();
                        break;
                    case 3:
                        message.configType = reader.readEnum();
                        break;
                    case 4:
                        message.passEventId = reader.readEnum();
                        break;
                    case 5:
                        message.membershipEventId = reader.readEnum();
                        break;
                    case 6:
                        message.couponEventId = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubscriptionRequestByClassId {
            return SubscriptionRequestByClassId.deserialize(bytes);
        }
    }
    export class FieldMapping extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            destinationFieldKey?: string;
            destinationFieldDataType?: dependency_2.io.DataType;
            isRequired?: boolean;
            sourceFieldUniqueName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("destinationFieldKey" in data && data.destinationFieldKey != undefined) {
                    this.destinationFieldKey = data.destinationFieldKey;
                }
                if ("destinationFieldDataType" in data && data.destinationFieldDataType != undefined) {
                    this.destinationFieldDataType = data.destinationFieldDataType;
                }
                if ("isRequired" in data && data.isRequired != undefined) {
                    this.isRequired = data.isRequired;
                }
                if ("sourceFieldUniqueName" in data && data.sourceFieldUniqueName != undefined) {
                    this.sourceFieldUniqueName = data.sourceFieldUniqueName;
                }
            }
        }
        get destinationFieldKey() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set destinationFieldKey(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get destinationFieldDataType() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_2.io.DataType.DATA_TYPE_NONE) as dependency_2.io.DataType;
        }
        set destinationFieldDataType(value: dependency_2.io.DataType) {
            pb_1.Message.setField(this, 2, value);
        }
        get isRequired() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set isRequired(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get sourceFieldUniqueName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set sourceFieldUniqueName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            destinationFieldKey?: string;
            destinationFieldDataType?: dependency_2.io.DataType;
            isRequired?: boolean;
            sourceFieldUniqueName?: string;
        }): FieldMapping {
            const message = new FieldMapping({});
            if (data.destinationFieldKey != null) {
                message.destinationFieldKey = data.destinationFieldKey;
            }
            if (data.destinationFieldDataType != null) {
                message.destinationFieldDataType = data.destinationFieldDataType;
            }
            if (data.isRequired != null) {
                message.isRequired = data.isRequired;
            }
            if (data.sourceFieldUniqueName != null) {
                message.sourceFieldUniqueName = data.sourceFieldUniqueName;
            }
            return message;
        }
        toObject() {
            const data: {
                destinationFieldKey?: string;
                destinationFieldDataType?: dependency_2.io.DataType;
                isRequired?: boolean;
                sourceFieldUniqueName?: string;
            } = {};
            if (this.destinationFieldKey != null) {
                data.destinationFieldKey = this.destinationFieldKey;
            }
            if (this.destinationFieldDataType != null) {
                data.destinationFieldDataType = this.destinationFieldDataType;
            }
            if (this.isRequired != null) {
                data.isRequired = this.isRequired;
            }
            if (this.sourceFieldUniqueName != null) {
                data.sourceFieldUniqueName = this.sourceFieldUniqueName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.destinationFieldKey.length)
                writer.writeString(1, this.destinationFieldKey);
            if (this.destinationFieldDataType != dependency_2.io.DataType.DATA_TYPE_NONE)
                writer.writeEnum(2, this.destinationFieldDataType);
            if (this.isRequired != false)
                writer.writeBool(3, this.isRequired);
            if (this.sourceFieldUniqueName.length)
                writer.writeString(4, this.sourceFieldUniqueName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldMapping {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldMapping();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.destinationFieldKey = reader.readString();
                        break;
                    case 2:
                        message.destinationFieldDataType = reader.readEnum();
                        break;
                    case 3:
                        message.isRequired = reader.readBool();
                        break;
                    case 4:
                        message.sourceFieldUniqueName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FieldMapping {
            return FieldMapping.deserialize(bytes);
        }
    }
    export class WebhookConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            targetUrl?: string;
            actionMethod?: ActionMethod;
            fieldMapping?: FieldMapping;
            signingSecret?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("targetUrl" in data && data.targetUrl != undefined) {
                    this.targetUrl = data.targetUrl;
                }
                if ("actionMethod" in data && data.actionMethod != undefined) {
                    this.actionMethod = data.actionMethod;
                }
                if ("fieldMapping" in data && data.fieldMapping != undefined) {
                    this.fieldMapping = data.fieldMapping;
                }
                if ("signingSecret" in data && data.signingSecret != undefined) {
                    this.signingSecret = data.signingSecret;
                }
            }
        }
        get targetUrl() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set targetUrl(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get actionMethod() {
            return pb_1.Message.getFieldWithDefault(this, 2, ActionMethod.METHOD_NONE) as ActionMethod;
        }
        set actionMethod(value: ActionMethod) {
            pb_1.Message.setField(this, 2, value);
        }
        get fieldMapping() {
            return pb_1.Message.getWrapperField(this, FieldMapping, 3) as FieldMapping;
        }
        set fieldMapping(value: FieldMapping) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasFieldMapping() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get signingSecret() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set signingSecret(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            targetUrl?: string;
            actionMethod?: ActionMethod;
            fieldMapping?: ReturnType<typeof FieldMapping.prototype.toObject>;
            signingSecret?: string;
        }): WebhookConfig {
            const message = new WebhookConfig({});
            if (data.targetUrl != null) {
                message.targetUrl = data.targetUrl;
            }
            if (data.actionMethod != null) {
                message.actionMethod = data.actionMethod;
            }
            if (data.fieldMapping != null) {
                message.fieldMapping = FieldMapping.fromObject(data.fieldMapping);
            }
            if (data.signingSecret != null) {
                message.signingSecret = data.signingSecret;
            }
            return message;
        }
        toObject() {
            const data: {
                targetUrl?: string;
                actionMethod?: ActionMethod;
                fieldMapping?: ReturnType<typeof FieldMapping.prototype.toObject>;
                signingSecret?: string;
            } = {};
            if (this.targetUrl != null) {
                data.targetUrl = this.targetUrl;
            }
            if (this.actionMethod != null) {
                data.actionMethod = this.actionMethod;
            }
            if (this.fieldMapping != null) {
                data.fieldMapping = this.fieldMapping.toObject();
            }
            if (this.signingSecret != null) {
                data.signingSecret = this.signingSecret;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.targetUrl.length)
                writer.writeString(1, this.targetUrl);
            if (this.actionMethod != ActionMethod.METHOD_NONE)
                writer.writeEnum(2, this.actionMethod);
            if (this.hasFieldMapping)
                writer.writeMessage(3, this.fieldMapping, () => this.fieldMapping.serialize(writer));
            if (this.signingSecret.length)
                writer.writeString(4, this.signingSecret);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebhookConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebhookConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.targetUrl = reader.readString();
                        break;
                    case 2:
                        message.actionMethod = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.fieldMapping, () => message.fieldMapping = FieldMapping.deserialize(reader));
                        break;
                    case 4:
                        message.signingSecret = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebhookConfig {
            return WebhookConfig.deserialize(bytes);
        }
    }
    export class SinkSubscriptionPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event?: string;
            pass?: dependency_1.io.Pass;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event" in data && data.event != undefined) {
                    this.event = data.event;
                }
                if ("pass" in data && data.pass != undefined) {
                    this.pass = data.pass;
                }
            }
        }
        get event() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set event(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pass() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Pass, 2) as dependency_1.io.Pass;
        }
        set pass(value: dependency_1.io.Pass) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasPass() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            event?: string;
            pass?: ReturnType<typeof dependency_1.io.Pass.prototype.toObject>;
        }): SinkSubscriptionPayload {
            const message = new SinkSubscriptionPayload({});
            if (data.event != null) {
                message.event = data.event;
            }
            if (data.pass != null) {
                message.pass = dependency_1.io.Pass.fromObject(data.pass);
            }
            return message;
        }
        toObject() {
            const data: {
                event?: string;
                pass?: ReturnType<typeof dependency_1.io.Pass.prototype.toObject>;
            } = {};
            if (this.event != null) {
                data.event = this.event;
            }
            if (this.pass != null) {
                data.pass = this.pass.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.event.length)
                writer.writeString(1, this.event);
            if (this.hasPass)
                writer.writeMessage(2, this.pass, () => this.pass.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SinkSubscriptionPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SinkSubscriptionPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.pass, () => message.pass = dependency_1.io.Pass.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SinkSubscriptionPayload {
            return SinkSubscriptionPayload.deserialize(bytes);
        }
    }
    export class SinkSubscription extends pb_1.Message {
        #one_of_decls: number[][] = [[10, 11]];
        constructor(data?: any[] | ({
            id?: string;
            classId?: string;
            protocol?: dependency_4.io.PassProtocol;
            passEventId?: PassEventId[];
            status?: IntegrationStatus;
            configType?: ConfigurationType;
            configuration?: string;
            createdAt?: dependency_5.google.protobuf.Timestamp;
            updatedAt?: dependency_5.google.protobuf.Timestamp;
        } & (({
            membershipEvents?: MembershipEventIds;
            couponEvents?: never;
        } | {
            membershipEvents?: never;
            couponEvents?: CouponEventIds;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("classId" in data && data.classId != undefined) {
                    this.classId = data.classId;
                }
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("passEventId" in data && data.passEventId != undefined) {
                    this.passEventId = data.passEventId;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("configType" in data && data.configType != undefined) {
                    this.configType = data.configType;
                }
                if ("configuration" in data && data.configuration != undefined) {
                    this.configuration = data.configuration;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
                if ("membershipEvents" in data && data.membershipEvents != undefined) {
                    this.membershipEvents = data.membershipEvents;
                }
                if ("couponEvents" in data && data.couponEvents != undefined) {
                    this.couponEvents = data.couponEvents;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get classId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set classId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_4.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE) as dependency_4.io.PassProtocol;
        }
        set protocol(value: dependency_4.io.PassProtocol) {
            pb_1.Message.setField(this, 3, value);
        }
        get passEventId() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as PassEventId[];
        }
        set passEventId(value: PassEventId[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, IntegrationStatus.INTEGRATION_STATUS_NONE) as IntegrationStatus;
        }
        set status(value: IntegrationStatus) {
            pb_1.Message.setField(this, 5, value);
        }
        get configType() {
            return pb_1.Message.getFieldWithDefault(this, 6, ConfigurationType.CONFIGURATION_NONE) as ConfigurationType;
        }
        set configType(value: ConfigurationType) {
            pb_1.Message.setField(this, 6, value);
        }
        get configuration() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set configuration(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get createdAt() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 8) as dependency_5.google.protobuf.Timestamp;
        }
        set createdAt(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasCreatedAt() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get updatedAt() {
            return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Timestamp, 9) as dependency_5.google.protobuf.Timestamp;
        }
        set updatedAt(value: dependency_5.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasUpdatedAt() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get membershipEvents() {
            return pb_1.Message.getWrapperField(this, MembershipEventIds, 10) as MembershipEventIds;
        }
        set membershipEvents(value: MembershipEventIds) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get hasMembershipEvents() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get couponEvents() {
            return pb_1.Message.getWrapperField(this, CouponEventIds, 11) as CouponEventIds;
        }
        set couponEvents(value: CouponEventIds) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get hasCouponEvents() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get protocolEventId() {
            const cases: {
                [index: number]: "none" | "membershipEvents" | "couponEvents";
            } = {
                0: "none",
                10: "membershipEvents",
                11: "couponEvents"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10, 11])];
        }
        static fromObject(data: {
            id?: string;
            classId?: string;
            protocol?: dependency_4.io.PassProtocol;
            passEventId?: PassEventId[];
            status?: IntegrationStatus;
            configType?: ConfigurationType;
            configuration?: string;
            createdAt?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            updatedAt?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
            membershipEvents?: ReturnType<typeof MembershipEventIds.prototype.toObject>;
            couponEvents?: ReturnType<typeof CouponEventIds.prototype.toObject>;
        }): SinkSubscription {
            const message = new SinkSubscription({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.classId != null) {
                message.classId = data.classId;
            }
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.passEventId != null) {
                message.passEventId = data.passEventId;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.configType != null) {
                message.configType = data.configType;
            }
            if (data.configuration != null) {
                message.configuration = data.configuration;
            }
            if (data.createdAt != null) {
                message.createdAt = dependency_5.google.protobuf.Timestamp.fromObject(data.createdAt);
            }
            if (data.updatedAt != null) {
                message.updatedAt = dependency_5.google.protobuf.Timestamp.fromObject(data.updatedAt);
            }
            if (data.membershipEvents != null) {
                message.membershipEvents = MembershipEventIds.fromObject(data.membershipEvents);
            }
            if (data.couponEvents != null) {
                message.couponEvents = CouponEventIds.fromObject(data.couponEvents);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                classId?: string;
                protocol?: dependency_4.io.PassProtocol;
                passEventId?: PassEventId[];
                status?: IntegrationStatus;
                configType?: ConfigurationType;
                configuration?: string;
                createdAt?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                updatedAt?: ReturnType<typeof dependency_5.google.protobuf.Timestamp.prototype.toObject>;
                membershipEvents?: ReturnType<typeof MembershipEventIds.prototype.toObject>;
                couponEvents?: ReturnType<typeof CouponEventIds.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.classId != null) {
                data.classId = this.classId;
            }
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.passEventId != null) {
                data.passEventId = this.passEventId;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.configType != null) {
                data.configType = this.configType;
            }
            if (this.configuration != null) {
                data.configuration = this.configuration;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt.toObject();
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt.toObject();
            }
            if (this.membershipEvents != null) {
                data.membershipEvents = this.membershipEvents.toObject();
            }
            if (this.couponEvents != null) {
                data.couponEvents = this.couponEvents.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.classId.length)
                writer.writeString(2, this.classId);
            if (this.protocol != dependency_4.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE)
                writer.writeEnum(3, this.protocol);
            if (this.passEventId.length)
                writer.writePackedEnum(4, this.passEventId);
            if (this.status != IntegrationStatus.INTEGRATION_STATUS_NONE)
                writer.writeEnum(5, this.status);
            if (this.configType != ConfigurationType.CONFIGURATION_NONE)
                writer.writeEnum(6, this.configType);
            if (this.configuration.length)
                writer.writeString(7, this.configuration);
            if (this.hasCreatedAt)
                writer.writeMessage(8, this.createdAt, () => this.createdAt.serialize(writer));
            if (this.hasUpdatedAt)
                writer.writeMessage(9, this.updatedAt, () => this.updatedAt.serialize(writer));
            if (this.hasMembershipEvents)
                writer.writeMessage(10, this.membershipEvents, () => this.membershipEvents.serialize(writer));
            if (this.hasCouponEvents)
                writer.writeMessage(11, this.couponEvents, () => this.couponEvents.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SinkSubscription {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SinkSubscription();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.classId = reader.readString();
                        break;
                    case 3:
                        message.protocol = reader.readEnum();
                        break;
                    case 4:
                        message.passEventId = reader.readPackedEnum();
                        break;
                    case 5:
                        message.status = reader.readEnum();
                        break;
                    case 6:
                        message.configType = reader.readEnum();
                        break;
                    case 7:
                        message.configuration = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.createdAt, () => message.createdAt = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_5.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.membershipEvents, () => message.membershipEvents = MembershipEventIds.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.couponEvents, () => message.couponEvents = CouponEventIds.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SinkSubscription {
            return SinkSubscription.deserialize(bytes);
        }
    }
    export class DynamicApiInput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            classId?: string;
            request?: DynamicApiRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("classId" in data && data.classId != undefined) {
                    this.classId = data.classId;
                }
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
            }
        }
        get classId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set classId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get request() {
            return pb_1.Message.getWrapperField(this, DynamicApiRequest, 2) as DynamicApiRequest;
        }
        set request(value: DynamicApiRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasRequest() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            classId?: string;
            request?: ReturnType<typeof DynamicApiRequest.prototype.toObject>;
        }): DynamicApiInput {
            const message = new DynamicApiInput({});
            if (data.classId != null) {
                message.classId = data.classId;
            }
            if (data.request != null) {
                message.request = DynamicApiRequest.fromObject(data.request);
            }
            return message;
        }
        toObject() {
            const data: {
                classId?: string;
                request?: ReturnType<typeof DynamicApiRequest.prototype.toObject>;
            } = {};
            if (this.classId != null) {
                data.classId = this.classId;
            }
            if (this.request != null) {
                data.request = this.request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.classId.length)
                writer.writeString(1, this.classId);
            if (this.hasRequest)
                writer.writeMessage(2, this.request, () => this.request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DynamicApiInput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DynamicApiInput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.classId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.request, () => message.request = DynamicApiRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DynamicApiInput {
            return DynamicApiInput.deserialize(bytes);
        }
    }
    export class DynamicApiRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requestName?: string;
            params?: Map<string, string>;
            payload?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requestName" in data && data.requestName != undefined) {
                    this.requestName = data.requestName;
                }
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
            }
            if (!this.params)
                this.params = new Map();
        }
        get requestName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set requestName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get params() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set params(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        get payload() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set payload(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            requestName?: string;
            params?: {
                [key: string]: string;
            };
            payload?: string;
        }): DynamicApiRequest {
            const message = new DynamicApiRequest({});
            if (data.requestName != null) {
                message.requestName = data.requestName;
            }
            if (typeof data.params == "object") {
                message.params = new Map(Object.entries(data.params));
            }
            if (data.payload != null) {
                message.payload = data.payload;
            }
            return message;
        }
        toObject() {
            const data: {
                requestName?: string;
                params?: {
                    [key: string]: string;
                };
                payload?: string;
            } = {};
            if (this.requestName != null) {
                data.requestName = this.requestName;
            }
            if (this.params != null) {
                data.params = (Object.fromEntries)(this.params);
            }
            if (this.payload != null) {
                data.payload = this.payload;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requestName.length)
                writer.writeString(1, this.requestName);
            for (const [key, value] of this.params) {
                writer.writeMessage(2, this.params, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.payload.length)
                writer.writeString(3, this.payload);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DynamicApiRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DynamicApiRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.requestName = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.params as any, reader, reader.readString, reader.readString));
                        break;
                    case 3:
                        message.payload = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DynamicApiRequest {
            return DynamicApiRequest.deserialize(bytes);
        }
    }
    export class DynamicApiResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            responseBody?: Uint8Array;
            status?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("responseBody" in data && data.responseBody != undefined) {
                    this.responseBody = data.responseBody;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get responseBody() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set responseBody(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            responseBody?: Uint8Array;
            status?: number;
        }): DynamicApiResponse {
            const message = new DynamicApiResponse({});
            if (data.responseBody != null) {
                message.responseBody = data.responseBody;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                responseBody?: Uint8Array;
                status?: number;
            } = {};
            if (this.responseBody != null) {
                data.responseBody = this.responseBody;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.responseBody.length)
                writer.writeBytes(1, this.responseBody);
            if (this.status != 0)
                writer.writeInt32(2, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DynamicApiResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DynamicApiResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.responseBody = reader.readBytes();
                        break;
                    case 2:
                        message.status = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DynamicApiResponse {
            return DynamicApiResponse.deserialize(bytes);
        }
    }
}
