/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/flights/flight.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../common/common_objects";
import * as dependency_2 from "./../common/proximity";
import * as dependency_3 from "./../common/links";
import * as dependency_4 from "./../common/metrics";
import * as dependency_5 from "./flight_designator";
import * as dependency_6 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace flights {
    export enum FlightStatus {
        UNKNOWN = 0,
        SCHEDULED = 1,
        DEPARTED = 2,
        INAIR = 3,
        LANDED = 4,
        ARRIVED = 5,
        CANCELLED = 6,
        DELAYED = 7,
        DEPARTED_DIVERTED = 8,
        INAIR_DIVERTED = 9,
        ARRIVED_DIVERTED = 10,
        DEPARTED_RECOVERY = 11,
        INAIR_RECOVERY = 12,
        ARRIVED_RECOVERY = 13
    }
    export enum FlightCreateMode {
        DO_NOT_USE = 0,
        MANUAL = 1,
        AUTOMATIC = 2
    }
    export class Flight extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            carrierCode?: string;
            flightNumber?: string;
            boardingPoint?: string;
            deplaningPoint?: string;
            departureDate?: dependency_1.io.Date;
            departureTerminal?: string;
            arrivalTerminal?: string;
            departureGate?: string;
            arrivalGate?: string;
            scheduledDepartureTime?: dependency_1.io.LocalDateTime;
            estimatedDepartureTime?: dependency_1.io.LocalDateTime;
            boardingTime?: dependency_1.io.LocalDateTime;
            gateClosingTime?: dependency_1.io.LocalDateTime;
            scheduledArrivalTime?: dependency_1.io.LocalDateTime;
            estimatedArrivalTime?: dependency_1.io.LocalDateTime;
            operatingCarrierCode?: string;
            operatingFlightNumber?: string;
            codeShareFlightNumbers?: string[];
            passTemplateId?: string;
            baggageBelt?: string;
            autoInvalidateAfter?: number;
            /** @deprecated*/
            autoInvalidateCancelledPasses?: boolean;
            locationMessages?: dependency_2.io.GPSLocation[];
            beaconMessages?: dependency_2.io.Beacon[];
            links?: dependency_3.io.Link[];
            suspendAutomaticUpdates?: boolean;
            boardingPolicy?: dependency_5.flights.BoardingPolicy;
            seatingPolicy?: dependency_5.flights.SeatClassPolicy;
            status?: FlightStatus;
            ConditionalItems?: boolean;
            BarcodeAdditionalData?: string;
            metrics?: dependency_4.io.Metrics;
            createMethod?: FlightCreateMode;
            designatorId?: string;
            invalidateCancelledPasses?: dependency_1.io.Toggle;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [18, 24, 25, 26], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("carrierCode" in data && data.carrierCode != undefined) {
                    this.carrierCode = data.carrierCode;
                }
                if ("flightNumber" in data && data.flightNumber != undefined) {
                    this.flightNumber = data.flightNumber;
                }
                if ("boardingPoint" in data && data.boardingPoint != undefined) {
                    this.boardingPoint = data.boardingPoint;
                }
                if ("deplaningPoint" in data && data.deplaningPoint != undefined) {
                    this.deplaningPoint = data.deplaningPoint;
                }
                if ("departureDate" in data && data.departureDate != undefined) {
                    this.departureDate = data.departureDate;
                }
                if ("departureTerminal" in data && data.departureTerminal != undefined) {
                    this.departureTerminal = data.departureTerminal;
                }
                if ("arrivalTerminal" in data && data.arrivalTerminal != undefined) {
                    this.arrivalTerminal = data.arrivalTerminal;
                }
                if ("departureGate" in data && data.departureGate != undefined) {
                    this.departureGate = data.departureGate;
                }
                if ("arrivalGate" in data && data.arrivalGate != undefined) {
                    this.arrivalGate = data.arrivalGate;
                }
                if ("scheduledDepartureTime" in data && data.scheduledDepartureTime != undefined) {
                    this.scheduledDepartureTime = data.scheduledDepartureTime;
                }
                if ("estimatedDepartureTime" in data && data.estimatedDepartureTime != undefined) {
                    this.estimatedDepartureTime = data.estimatedDepartureTime;
                }
                if ("boardingTime" in data && data.boardingTime != undefined) {
                    this.boardingTime = data.boardingTime;
                }
                if ("gateClosingTime" in data && data.gateClosingTime != undefined) {
                    this.gateClosingTime = data.gateClosingTime;
                }
                if ("scheduledArrivalTime" in data && data.scheduledArrivalTime != undefined) {
                    this.scheduledArrivalTime = data.scheduledArrivalTime;
                }
                if ("estimatedArrivalTime" in data && data.estimatedArrivalTime != undefined) {
                    this.estimatedArrivalTime = data.estimatedArrivalTime;
                }
                if ("operatingCarrierCode" in data && data.operatingCarrierCode != undefined) {
                    this.operatingCarrierCode = data.operatingCarrierCode;
                }
                if ("operatingFlightNumber" in data && data.operatingFlightNumber != undefined) {
                    this.operatingFlightNumber = data.operatingFlightNumber;
                }
                if ("codeShareFlightNumbers" in data && data.codeShareFlightNumbers != undefined) {
                    this.codeShareFlightNumbers = data.codeShareFlightNumbers;
                }
                if ("passTemplateId" in data && data.passTemplateId != undefined) {
                    this.passTemplateId = data.passTemplateId;
                }
                if ("baggageBelt" in data && data.baggageBelt != undefined) {
                    this.baggageBelt = data.baggageBelt;
                }
                if ("autoInvalidateAfter" in data && data.autoInvalidateAfter != undefined) {
                    this.autoInvalidateAfter = data.autoInvalidateAfter;
                }
                if ("autoInvalidateCancelledPasses" in data && data.autoInvalidateCancelledPasses != undefined) {
                    this.autoInvalidateCancelledPasses = data.autoInvalidateCancelledPasses;
                }
                if ("locationMessages" in data && data.locationMessages != undefined) {
                    this.locationMessages = data.locationMessages;
                }
                if ("beaconMessages" in data && data.beaconMessages != undefined) {
                    this.beaconMessages = data.beaconMessages;
                }
                if ("links" in data && data.links != undefined) {
                    this.links = data.links;
                }
                if ("suspendAutomaticUpdates" in data && data.suspendAutomaticUpdates != undefined) {
                    this.suspendAutomaticUpdates = data.suspendAutomaticUpdates;
                }
                if ("boardingPolicy" in data && data.boardingPolicy != undefined) {
                    this.boardingPolicy = data.boardingPolicy;
                }
                if ("seatingPolicy" in data && data.seatingPolicy != undefined) {
                    this.seatingPolicy = data.seatingPolicy;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("ConditionalItems" in data && data.ConditionalItems != undefined) {
                    this.ConditionalItems = data.ConditionalItems;
                }
                if ("BarcodeAdditionalData" in data && data.BarcodeAdditionalData != undefined) {
                    this.BarcodeAdditionalData = data.BarcodeAdditionalData;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
                if ("createMethod" in data && data.createMethod != undefined) {
                    this.createMethod = data.createMethod;
                }
                if ("designatorId" in data && data.designatorId != undefined) {
                    this.designatorId = data.designatorId;
                }
                if ("invalidateCancelledPasses" in data && data.invalidateCancelledPasses != undefined) {
                    this.invalidateCancelledPasses = data.invalidateCancelledPasses;
                }
            }
        }
        get carrierCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set carrierCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get flightNumber() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set flightNumber(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get boardingPoint() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set boardingPoint(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get deplaningPoint() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set deplaningPoint(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get departureDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Date, 5) as dependency_1.io.Date;
        }
        set departureDate(value: dependency_1.io.Date) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasDepartureDate() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get departureTerminal() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set departureTerminal(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get arrivalTerminal() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set arrivalTerminal(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get departureGate() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set departureGate(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get arrivalGate() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set arrivalGate(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get scheduledDepartureTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalDateTime, 10) as dependency_1.io.LocalDateTime;
        }
        set scheduledDepartureTime(value: dependency_1.io.LocalDateTime) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasScheduledDepartureTime() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get estimatedDepartureTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalDateTime, 11) as dependency_1.io.LocalDateTime;
        }
        set estimatedDepartureTime(value: dependency_1.io.LocalDateTime) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasEstimatedDepartureTime() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get boardingTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalDateTime, 12) as dependency_1.io.LocalDateTime;
        }
        set boardingTime(value: dependency_1.io.LocalDateTime) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get hasBoardingTime() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get gateClosingTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalDateTime, 13) as dependency_1.io.LocalDateTime;
        }
        set gateClosingTime(value: dependency_1.io.LocalDateTime) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasGateClosingTime() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get scheduledArrivalTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalDateTime, 14) as dependency_1.io.LocalDateTime;
        }
        set scheduledArrivalTime(value: dependency_1.io.LocalDateTime) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get hasScheduledArrivalTime() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get estimatedArrivalTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalDateTime, 15) as dependency_1.io.LocalDateTime;
        }
        set estimatedArrivalTime(value: dependency_1.io.LocalDateTime) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get hasEstimatedArrivalTime() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get operatingCarrierCode() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set operatingCarrierCode(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get operatingFlightNumber() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set operatingFlightNumber(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get codeShareFlightNumbers() {
            return pb_1.Message.getFieldWithDefault(this, 18, []) as string[];
        }
        set codeShareFlightNumbers(value: string[]) {
            pb_1.Message.setField(this, 18, value);
        }
        get passTemplateId() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set passTemplateId(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get baggageBelt() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set baggageBelt(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get autoInvalidateAfter() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set autoInvalidateAfter(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        /** @deprecated*/
        get autoInvalidateCancelledPasses() {
            return pb_1.Message.getFieldWithDefault(this, 23, false) as boolean;
        }
        /** @deprecated*/
        set autoInvalidateCancelledPasses(value: boolean) {
            pb_1.Message.setField(this, 23, value);
        }
        get locationMessages() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.io.GPSLocation, 24) as dependency_2.io.GPSLocation[];
        }
        set locationMessages(value: dependency_2.io.GPSLocation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 24, value);
        }
        get beaconMessages() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.io.Beacon, 25) as dependency_2.io.Beacon[];
        }
        set beaconMessages(value: dependency_2.io.Beacon[]) {
            pb_1.Message.setRepeatedWrapperField(this, 25, value);
        }
        get links() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.io.Link, 26) as dependency_3.io.Link[];
        }
        set links(value: dependency_3.io.Link[]) {
            pb_1.Message.setRepeatedWrapperField(this, 26, value);
        }
        get suspendAutomaticUpdates() {
            return pb_1.Message.getFieldWithDefault(this, 27, false) as boolean;
        }
        set suspendAutomaticUpdates(value: boolean) {
            pb_1.Message.setField(this, 27, value);
        }
        get boardingPolicy() {
            return pb_1.Message.getFieldWithDefault(this, 28, dependency_5.flights.BoardingPolicy.BOARDING_POLICY_UNSPECIFIED) as dependency_5.flights.BoardingPolicy;
        }
        set boardingPolicy(value: dependency_5.flights.BoardingPolicy) {
            pb_1.Message.setField(this, 28, value);
        }
        get seatingPolicy() {
            return pb_1.Message.getFieldWithDefault(this, 29, dependency_5.flights.SeatClassPolicy.SEAT_CLASS_POLICY_UNSPECIFIED) as dependency_5.flights.SeatClassPolicy;
        }
        set seatingPolicy(value: dependency_5.flights.SeatClassPolicy) {
            pb_1.Message.setField(this, 29, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 30, FlightStatus.UNKNOWN) as FlightStatus;
        }
        set status(value: FlightStatus) {
            pb_1.Message.setField(this, 30, value);
        }
        get ConditionalItems() {
            return pb_1.Message.getFieldWithDefault(this, 31, false) as boolean;
        }
        set ConditionalItems(value: boolean) {
            pb_1.Message.setField(this, 31, value);
        }
        get BarcodeAdditionalData() {
            return pb_1.Message.getFieldWithDefault(this, 32, "") as string;
        }
        set BarcodeAdditionalData(value: string) {
            pb_1.Message.setField(this, 32, value);
        }
        get metrics() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.Metrics, 33) as dependency_4.io.Metrics;
        }
        set metrics(value: dependency_4.io.Metrics) {
            pb_1.Message.setWrapperField(this, 33, value);
        }
        get hasMetrics() {
            return pb_1.Message.getField(this, 33) != null;
        }
        get createMethod() {
            return pb_1.Message.getFieldWithDefault(this, 34, FlightCreateMode.DO_NOT_USE) as FlightCreateMode;
        }
        set createMethod(value: FlightCreateMode) {
            pb_1.Message.setField(this, 34, value);
        }
        get designatorId() {
            return pb_1.Message.getFieldWithDefault(this, 35, "") as string;
        }
        set designatorId(value: string) {
            pb_1.Message.setField(this, 35, value);
        }
        get invalidateCancelledPasses() {
            return pb_1.Message.getFieldWithDefault(this, 36, dependency_1.io.Toggle.DO_NOT_USE) as dependency_1.io.Toggle;
        }
        set invalidateCancelledPasses(value: dependency_1.io.Toggle) {
            pb_1.Message.setField(this, 36, value);
        }
        static fromObject(data: {
            carrierCode?: string;
            flightNumber?: string;
            boardingPoint?: string;
            deplaningPoint?: string;
            departureDate?: ReturnType<typeof dependency_1.io.Date.prototype.toObject>;
            departureTerminal?: string;
            arrivalTerminal?: string;
            departureGate?: string;
            arrivalGate?: string;
            scheduledDepartureTime?: ReturnType<typeof dependency_1.io.LocalDateTime.prototype.toObject>;
            estimatedDepartureTime?: ReturnType<typeof dependency_1.io.LocalDateTime.prototype.toObject>;
            boardingTime?: ReturnType<typeof dependency_1.io.LocalDateTime.prototype.toObject>;
            gateClosingTime?: ReturnType<typeof dependency_1.io.LocalDateTime.prototype.toObject>;
            scheduledArrivalTime?: ReturnType<typeof dependency_1.io.LocalDateTime.prototype.toObject>;
            estimatedArrivalTime?: ReturnType<typeof dependency_1.io.LocalDateTime.prototype.toObject>;
            operatingCarrierCode?: string;
            operatingFlightNumber?: string;
            codeShareFlightNumbers?: string[];
            passTemplateId?: string;
            baggageBelt?: string;
            autoInvalidateAfter?: number;
            autoInvalidateCancelledPasses?: boolean;
            locationMessages?: ReturnType<typeof dependency_2.io.GPSLocation.prototype.toObject>[];
            beaconMessages?: ReturnType<typeof dependency_2.io.Beacon.prototype.toObject>[];
            links?: ReturnType<typeof dependency_3.io.Link.prototype.toObject>[];
            suspendAutomaticUpdates?: boolean;
            boardingPolicy?: dependency_5.flights.BoardingPolicy;
            seatingPolicy?: dependency_5.flights.SeatClassPolicy;
            status?: FlightStatus;
            ConditionalItems?: boolean;
            BarcodeAdditionalData?: string;
            metrics?: ReturnType<typeof dependency_4.io.Metrics.prototype.toObject>;
            createMethod?: FlightCreateMode;
            designatorId?: string;
            invalidateCancelledPasses?: dependency_1.io.Toggle;
        }): Flight {
            const message = new Flight({});
            if (data.carrierCode != null) {
                message.carrierCode = data.carrierCode;
            }
            if (data.flightNumber != null) {
                message.flightNumber = data.flightNumber;
            }
            if (data.boardingPoint != null) {
                message.boardingPoint = data.boardingPoint;
            }
            if (data.deplaningPoint != null) {
                message.deplaningPoint = data.deplaningPoint;
            }
            if (data.departureDate != null) {
                message.departureDate = dependency_1.io.Date.fromObject(data.departureDate);
            }
            if (data.departureTerminal != null) {
                message.departureTerminal = data.departureTerminal;
            }
            if (data.arrivalTerminal != null) {
                message.arrivalTerminal = data.arrivalTerminal;
            }
            if (data.departureGate != null) {
                message.departureGate = data.departureGate;
            }
            if (data.arrivalGate != null) {
                message.arrivalGate = data.arrivalGate;
            }
            if (data.scheduledDepartureTime != null) {
                message.scheduledDepartureTime = dependency_1.io.LocalDateTime.fromObject(data.scheduledDepartureTime);
            }
            if (data.estimatedDepartureTime != null) {
                message.estimatedDepartureTime = dependency_1.io.LocalDateTime.fromObject(data.estimatedDepartureTime);
            }
            if (data.boardingTime != null) {
                message.boardingTime = dependency_1.io.LocalDateTime.fromObject(data.boardingTime);
            }
            if (data.gateClosingTime != null) {
                message.gateClosingTime = dependency_1.io.LocalDateTime.fromObject(data.gateClosingTime);
            }
            if (data.scheduledArrivalTime != null) {
                message.scheduledArrivalTime = dependency_1.io.LocalDateTime.fromObject(data.scheduledArrivalTime);
            }
            if (data.estimatedArrivalTime != null) {
                message.estimatedArrivalTime = dependency_1.io.LocalDateTime.fromObject(data.estimatedArrivalTime);
            }
            if (data.operatingCarrierCode != null) {
                message.operatingCarrierCode = data.operatingCarrierCode;
            }
            if (data.operatingFlightNumber != null) {
                message.operatingFlightNumber = data.operatingFlightNumber;
            }
            if (data.codeShareFlightNumbers != null) {
                message.codeShareFlightNumbers = data.codeShareFlightNumbers;
            }
            if (data.passTemplateId != null) {
                message.passTemplateId = data.passTemplateId;
            }
            if (data.baggageBelt != null) {
                message.baggageBelt = data.baggageBelt;
            }
            if (data.autoInvalidateAfter != null) {
                message.autoInvalidateAfter = data.autoInvalidateAfter;
            }
            if (data.autoInvalidateCancelledPasses != null) {
                message.autoInvalidateCancelledPasses = data.autoInvalidateCancelledPasses;
            }
            if (data.locationMessages != null) {
                message.locationMessages = data.locationMessages.map(item => dependency_2.io.GPSLocation.fromObject(item));
            }
            if (data.beaconMessages != null) {
                message.beaconMessages = data.beaconMessages.map(item => dependency_2.io.Beacon.fromObject(item));
            }
            if (data.links != null) {
                message.links = data.links.map(item => dependency_3.io.Link.fromObject(item));
            }
            if (data.suspendAutomaticUpdates != null) {
                message.suspendAutomaticUpdates = data.suspendAutomaticUpdates;
            }
            if (data.boardingPolicy != null) {
                message.boardingPolicy = data.boardingPolicy;
            }
            if (data.seatingPolicy != null) {
                message.seatingPolicy = data.seatingPolicy;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.ConditionalItems != null) {
                message.ConditionalItems = data.ConditionalItems;
            }
            if (data.BarcodeAdditionalData != null) {
                message.BarcodeAdditionalData = data.BarcodeAdditionalData;
            }
            if (data.metrics != null) {
                message.metrics = dependency_4.io.Metrics.fromObject(data.metrics);
            }
            if (data.createMethod != null) {
                message.createMethod = data.createMethod;
            }
            if (data.designatorId != null) {
                message.designatorId = data.designatorId;
            }
            if (data.invalidateCancelledPasses != null) {
                message.invalidateCancelledPasses = data.invalidateCancelledPasses;
            }
            return message;
        }
        toObject() {
            const data: {
                carrierCode?: string;
                flightNumber?: string;
                boardingPoint?: string;
                deplaningPoint?: string;
                departureDate?: ReturnType<typeof dependency_1.io.Date.prototype.toObject>;
                departureTerminal?: string;
                arrivalTerminal?: string;
                departureGate?: string;
                arrivalGate?: string;
                scheduledDepartureTime?: ReturnType<typeof dependency_1.io.LocalDateTime.prototype.toObject>;
                estimatedDepartureTime?: ReturnType<typeof dependency_1.io.LocalDateTime.prototype.toObject>;
                boardingTime?: ReturnType<typeof dependency_1.io.LocalDateTime.prototype.toObject>;
                gateClosingTime?: ReturnType<typeof dependency_1.io.LocalDateTime.prototype.toObject>;
                scheduledArrivalTime?: ReturnType<typeof dependency_1.io.LocalDateTime.prototype.toObject>;
                estimatedArrivalTime?: ReturnType<typeof dependency_1.io.LocalDateTime.prototype.toObject>;
                operatingCarrierCode?: string;
                operatingFlightNumber?: string;
                codeShareFlightNumbers?: string[];
                passTemplateId?: string;
                baggageBelt?: string;
                autoInvalidateAfter?: number;
                autoInvalidateCancelledPasses?: boolean;
                locationMessages?: ReturnType<typeof dependency_2.io.GPSLocation.prototype.toObject>[];
                beaconMessages?: ReturnType<typeof dependency_2.io.Beacon.prototype.toObject>[];
                links?: ReturnType<typeof dependency_3.io.Link.prototype.toObject>[];
                suspendAutomaticUpdates?: boolean;
                boardingPolicy?: dependency_5.flights.BoardingPolicy;
                seatingPolicy?: dependency_5.flights.SeatClassPolicy;
                status?: FlightStatus;
                ConditionalItems?: boolean;
                BarcodeAdditionalData?: string;
                metrics?: ReturnType<typeof dependency_4.io.Metrics.prototype.toObject>;
                createMethod?: FlightCreateMode;
                designatorId?: string;
                invalidateCancelledPasses?: dependency_1.io.Toggle;
            } = {};
            if (this.carrierCode != null) {
                data.carrierCode = this.carrierCode;
            }
            if (this.flightNumber != null) {
                data.flightNumber = this.flightNumber;
            }
            if (this.boardingPoint != null) {
                data.boardingPoint = this.boardingPoint;
            }
            if (this.deplaningPoint != null) {
                data.deplaningPoint = this.deplaningPoint;
            }
            if (this.departureDate != null) {
                data.departureDate = this.departureDate.toObject();
            }
            if (this.departureTerminal != null) {
                data.departureTerminal = this.departureTerminal;
            }
            if (this.arrivalTerminal != null) {
                data.arrivalTerminal = this.arrivalTerminal;
            }
            if (this.departureGate != null) {
                data.departureGate = this.departureGate;
            }
            if (this.arrivalGate != null) {
                data.arrivalGate = this.arrivalGate;
            }
            if (this.scheduledDepartureTime != null) {
                data.scheduledDepartureTime = this.scheduledDepartureTime.toObject();
            }
            if (this.estimatedDepartureTime != null) {
                data.estimatedDepartureTime = this.estimatedDepartureTime.toObject();
            }
            if (this.boardingTime != null) {
                data.boardingTime = this.boardingTime.toObject();
            }
            if (this.gateClosingTime != null) {
                data.gateClosingTime = this.gateClosingTime.toObject();
            }
            if (this.scheduledArrivalTime != null) {
                data.scheduledArrivalTime = this.scheduledArrivalTime.toObject();
            }
            if (this.estimatedArrivalTime != null) {
                data.estimatedArrivalTime = this.estimatedArrivalTime.toObject();
            }
            if (this.operatingCarrierCode != null) {
                data.operatingCarrierCode = this.operatingCarrierCode;
            }
            if (this.operatingFlightNumber != null) {
                data.operatingFlightNumber = this.operatingFlightNumber;
            }
            if (this.codeShareFlightNumbers != null) {
                data.codeShareFlightNumbers = this.codeShareFlightNumbers;
            }
            if (this.passTemplateId != null) {
                data.passTemplateId = this.passTemplateId;
            }
            if (this.baggageBelt != null) {
                data.baggageBelt = this.baggageBelt;
            }
            if (this.autoInvalidateAfter != null) {
                data.autoInvalidateAfter = this.autoInvalidateAfter;
            }
            if (this.autoInvalidateCancelledPasses != null) {
                data.autoInvalidateCancelledPasses = this.autoInvalidateCancelledPasses;
            }
            if (this.locationMessages != null) {
                data.locationMessages = this.locationMessages.map((item: dependency_2.io.GPSLocation) => item.toObject());
            }
            if (this.beaconMessages != null) {
                data.beaconMessages = this.beaconMessages.map((item: dependency_2.io.Beacon) => item.toObject());
            }
            if (this.links != null) {
                data.links = this.links.map((item: dependency_3.io.Link) => item.toObject());
            }
            if (this.suspendAutomaticUpdates != null) {
                data.suspendAutomaticUpdates = this.suspendAutomaticUpdates;
            }
            if (this.boardingPolicy != null) {
                data.boardingPolicy = this.boardingPolicy;
            }
            if (this.seatingPolicy != null) {
                data.seatingPolicy = this.seatingPolicy;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.ConditionalItems != null) {
                data.ConditionalItems = this.ConditionalItems;
            }
            if (this.BarcodeAdditionalData != null) {
                data.BarcodeAdditionalData = this.BarcodeAdditionalData;
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.toObject();
            }
            if (this.createMethod != null) {
                data.createMethod = this.createMethod;
            }
            if (this.designatorId != null) {
                data.designatorId = this.designatorId;
            }
            if (this.invalidateCancelledPasses != null) {
                data.invalidateCancelledPasses = this.invalidateCancelledPasses;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.carrierCode.length)
                writer.writeString(1, this.carrierCode);
            if (this.flightNumber.length)
                writer.writeString(2, this.flightNumber);
            if (this.boardingPoint.length)
                writer.writeString(3, this.boardingPoint);
            if (this.deplaningPoint.length)
                writer.writeString(4, this.deplaningPoint);
            if (this.hasDepartureDate)
                writer.writeMessage(5, this.departureDate, () => this.departureDate.serialize(writer));
            if (this.departureTerminal.length)
                writer.writeString(6, this.departureTerminal);
            if (this.arrivalTerminal.length)
                writer.writeString(7, this.arrivalTerminal);
            if (this.departureGate.length)
                writer.writeString(8, this.departureGate);
            if (this.arrivalGate.length)
                writer.writeString(9, this.arrivalGate);
            if (this.hasScheduledDepartureTime)
                writer.writeMessage(10, this.scheduledDepartureTime, () => this.scheduledDepartureTime.serialize(writer));
            if (this.hasEstimatedDepartureTime)
                writer.writeMessage(11, this.estimatedDepartureTime, () => this.estimatedDepartureTime.serialize(writer));
            if (this.hasBoardingTime)
                writer.writeMessage(12, this.boardingTime, () => this.boardingTime.serialize(writer));
            if (this.hasGateClosingTime)
                writer.writeMessage(13, this.gateClosingTime, () => this.gateClosingTime.serialize(writer));
            if (this.hasScheduledArrivalTime)
                writer.writeMessage(14, this.scheduledArrivalTime, () => this.scheduledArrivalTime.serialize(writer));
            if (this.hasEstimatedArrivalTime)
                writer.writeMessage(15, this.estimatedArrivalTime, () => this.estimatedArrivalTime.serialize(writer));
            if (this.operatingCarrierCode.length)
                writer.writeString(16, this.operatingCarrierCode);
            if (this.operatingFlightNumber.length)
                writer.writeString(17, this.operatingFlightNumber);
            if (this.codeShareFlightNumbers.length)
                writer.writeRepeatedString(18, this.codeShareFlightNumbers);
            if (this.passTemplateId.length)
                writer.writeString(19, this.passTemplateId);
            if (this.baggageBelt.length)
                writer.writeString(21, this.baggageBelt);
            if (this.autoInvalidateAfter != 0)
                writer.writeUint32(22, this.autoInvalidateAfter);
            if (this.autoInvalidateCancelledPasses != false)
                writer.writeBool(23, this.autoInvalidateCancelledPasses);
            if (this.locationMessages.length)
                writer.writeRepeatedMessage(24, this.locationMessages, (item: dependency_2.io.GPSLocation) => item.serialize(writer));
            if (this.beaconMessages.length)
                writer.writeRepeatedMessage(25, this.beaconMessages, (item: dependency_2.io.Beacon) => item.serialize(writer));
            if (this.links.length)
                writer.writeRepeatedMessage(26, this.links, (item: dependency_3.io.Link) => item.serialize(writer));
            if (this.suspendAutomaticUpdates != false)
                writer.writeBool(27, this.suspendAutomaticUpdates);
            if (this.boardingPolicy != dependency_5.flights.BoardingPolicy.BOARDING_POLICY_UNSPECIFIED)
                writer.writeEnum(28, this.boardingPolicy);
            if (this.seatingPolicy != dependency_5.flights.SeatClassPolicy.SEAT_CLASS_POLICY_UNSPECIFIED)
                writer.writeEnum(29, this.seatingPolicy);
            if (this.status != FlightStatus.UNKNOWN)
                writer.writeEnum(30, this.status);
            if (this.ConditionalItems != false)
                writer.writeBool(31, this.ConditionalItems);
            if (this.BarcodeAdditionalData.length)
                writer.writeString(32, this.BarcodeAdditionalData);
            if (this.hasMetrics)
                writer.writeMessage(33, this.metrics, () => this.metrics.serialize(writer));
            if (this.createMethod != FlightCreateMode.DO_NOT_USE)
                writer.writeEnum(34, this.createMethod);
            if (this.designatorId.length)
                writer.writeString(35, this.designatorId);
            if (this.invalidateCancelledPasses != dependency_1.io.Toggle.DO_NOT_USE)
                writer.writeEnum(36, this.invalidateCancelledPasses);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Flight {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Flight();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.carrierCode = reader.readString();
                        break;
                    case 2:
                        message.flightNumber = reader.readString();
                        break;
                    case 3:
                        message.boardingPoint = reader.readString();
                        break;
                    case 4:
                        message.deplaningPoint = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.departureDate, () => message.departureDate = dependency_1.io.Date.deserialize(reader));
                        break;
                    case 6:
                        message.departureTerminal = reader.readString();
                        break;
                    case 7:
                        message.arrivalTerminal = reader.readString();
                        break;
                    case 8:
                        message.departureGate = reader.readString();
                        break;
                    case 9:
                        message.arrivalGate = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.scheduledDepartureTime, () => message.scheduledDepartureTime = dependency_1.io.LocalDateTime.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.estimatedDepartureTime, () => message.estimatedDepartureTime = dependency_1.io.LocalDateTime.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.boardingTime, () => message.boardingTime = dependency_1.io.LocalDateTime.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.gateClosingTime, () => message.gateClosingTime = dependency_1.io.LocalDateTime.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.scheduledArrivalTime, () => message.scheduledArrivalTime = dependency_1.io.LocalDateTime.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.estimatedArrivalTime, () => message.estimatedArrivalTime = dependency_1.io.LocalDateTime.deserialize(reader));
                        break;
                    case 16:
                        message.operatingCarrierCode = reader.readString();
                        break;
                    case 17:
                        message.operatingFlightNumber = reader.readString();
                        break;
                    case 18:
                        pb_1.Message.addToRepeatedField(message, 18, reader.readString());
                        break;
                    case 19:
                        message.passTemplateId = reader.readString();
                        break;
                    case 21:
                        message.baggageBelt = reader.readString();
                        break;
                    case 22:
                        message.autoInvalidateAfter = reader.readUint32();
                        break;
                    case 23:
                        message.autoInvalidateCancelledPasses = reader.readBool();
                        break;
                    case 24:
                        reader.readMessage(message.locationMessages, () => pb_1.Message.addToRepeatedWrapperField(message, 24, dependency_2.io.GPSLocation.deserialize(reader), dependency_2.io.GPSLocation));
                        break;
                    case 25:
                        reader.readMessage(message.beaconMessages, () => pb_1.Message.addToRepeatedWrapperField(message, 25, dependency_2.io.Beacon.deserialize(reader), dependency_2.io.Beacon));
                        break;
                    case 26:
                        reader.readMessage(message.links, () => pb_1.Message.addToRepeatedWrapperField(message, 26, dependency_3.io.Link.deserialize(reader), dependency_3.io.Link));
                        break;
                    case 27:
                        message.suspendAutomaticUpdates = reader.readBool();
                        break;
                    case 28:
                        message.boardingPolicy = reader.readEnum();
                        break;
                    case 29:
                        message.seatingPolicy = reader.readEnum();
                        break;
                    case 30:
                        message.status = reader.readEnum();
                        break;
                    case 31:
                        message.ConditionalItems = reader.readBool();
                        break;
                    case 32:
                        message.BarcodeAdditionalData = reader.readString();
                        break;
                    case 33:
                        reader.readMessage(message.metrics, () => message.metrics = dependency_4.io.Metrics.deserialize(reader));
                        break;
                    case 34:
                        message.createMethod = reader.readEnum();
                        break;
                    case 35:
                        message.designatorId = reader.readString();
                        break;
                    case 36:
                        message.invalidateCancelledPasses = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Flight {
            return Flight.deserialize(bytes);
        }
    }
    export class FlightRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            carrierCode?: string;
            flightNumber?: string;
            departureDate?: dependency_1.io.Date;
            boardingPoint?: string;
            deplaningPoint?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("carrierCode" in data && data.carrierCode != undefined) {
                    this.carrierCode = data.carrierCode;
                }
                if ("flightNumber" in data && data.flightNumber != undefined) {
                    this.flightNumber = data.flightNumber;
                }
                if ("departureDate" in data && data.departureDate != undefined) {
                    this.departureDate = data.departureDate;
                }
                if ("boardingPoint" in data && data.boardingPoint != undefined) {
                    this.boardingPoint = data.boardingPoint;
                }
                if ("deplaningPoint" in data && data.deplaningPoint != undefined) {
                    this.deplaningPoint = data.deplaningPoint;
                }
            }
        }
        get carrierCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set carrierCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get flightNumber() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set flightNumber(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get departureDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Date, 3) as dependency_1.io.Date;
        }
        set departureDate(value: dependency_1.io.Date) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasDepartureDate() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get boardingPoint() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set boardingPoint(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get deplaningPoint() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set deplaningPoint(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            carrierCode?: string;
            flightNumber?: string;
            departureDate?: ReturnType<typeof dependency_1.io.Date.prototype.toObject>;
            boardingPoint?: string;
            deplaningPoint?: string;
        }): FlightRequest {
            const message = new FlightRequest({});
            if (data.carrierCode != null) {
                message.carrierCode = data.carrierCode;
            }
            if (data.flightNumber != null) {
                message.flightNumber = data.flightNumber;
            }
            if (data.departureDate != null) {
                message.departureDate = dependency_1.io.Date.fromObject(data.departureDate);
            }
            if (data.boardingPoint != null) {
                message.boardingPoint = data.boardingPoint;
            }
            if (data.deplaningPoint != null) {
                message.deplaningPoint = data.deplaningPoint;
            }
            return message;
        }
        toObject() {
            const data: {
                carrierCode?: string;
                flightNumber?: string;
                departureDate?: ReturnType<typeof dependency_1.io.Date.prototype.toObject>;
                boardingPoint?: string;
                deplaningPoint?: string;
            } = {};
            if (this.carrierCode != null) {
                data.carrierCode = this.carrierCode;
            }
            if (this.flightNumber != null) {
                data.flightNumber = this.flightNumber;
            }
            if (this.departureDate != null) {
                data.departureDate = this.departureDate.toObject();
            }
            if (this.boardingPoint != null) {
                data.boardingPoint = this.boardingPoint;
            }
            if (this.deplaningPoint != null) {
                data.deplaningPoint = this.deplaningPoint;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.carrierCode.length)
                writer.writeString(1, this.carrierCode);
            if (this.flightNumber.length)
                writer.writeString(2, this.flightNumber);
            if (this.hasDepartureDate)
                writer.writeMessage(3, this.departureDate, () => this.departureDate.serialize(writer));
            if (this.boardingPoint.length)
                writer.writeString(5, this.boardingPoint);
            if (this.deplaningPoint.length)
                writer.writeString(6, this.deplaningPoint);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlightRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlightRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.carrierCode = reader.readString();
                        break;
                    case 2:
                        message.flightNumber = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.departureDate, () => message.departureDate = dependency_1.io.Date.deserialize(reader));
                        break;
                    case 5:
                        message.boardingPoint = reader.readString();
                        break;
                    case 6:
                        message.deplaningPoint = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FlightRequest {
            return FlightRequest.deserialize(bytes);
        }
    }
}
