/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/event_tickets/ticket.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./../common/localization";
import * as dependency_3 from "./../common/metrics";
import * as dependency_4 from "./../common/common_objects";
import * as dependency_5 from "./../common/pass";
import * as dependency_6 from "./../common/personal";
import * as dependency_7 from "./../common/filter";
import * as dependency_8 from "./venue";
import * as dependency_9 from "./event";
import * as dependency_10 from "./ticket_type";
import * as dependency_11 from "./production";
import * as dependency_12 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace event_tickets {
    export enum TicketStatus {
        STATUS_NONE = 0,
        ISSUED = 1,
        REDEEMED = 2
    }
    export class TicketId extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            ticketId?: string;
            ticketNumber?: never;
        } | {
            ticketId?: never;
            ticketNumber?: TicketNumber;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ticketId" in data && data.ticketId != undefined) {
                    this.ticketId = data.ticketId;
                }
                if ("ticketNumber" in data && data.ticketNumber != undefined) {
                    this.ticketNumber = data.ticketNumber;
                }
            }
        }
        get ticketId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ticketId(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get hasTicketId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ticketNumber() {
            return pb_1.Message.getWrapperField(this, TicketNumber, 2) as TicketNumber;
        }
        set ticketNumber(value: TicketNumber) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get hasTicketNumber() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get id() {
            const cases: {
                [index: number]: "none" | "ticketId" | "ticketNumber";
            } = {
                0: "none",
                1: "ticketId",
                2: "ticketNumber"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            ticketId?: string;
            ticketNumber?: ReturnType<typeof TicketNumber.prototype.toObject>;
        }): TicketId {
            const message = new TicketId({});
            if (data.ticketId != null) {
                message.ticketId = data.ticketId;
            }
            if (data.ticketNumber != null) {
                message.ticketNumber = TicketNumber.fromObject(data.ticketNumber);
            }
            return message;
        }
        toObject() {
            const data: {
                ticketId?: string;
                ticketNumber?: ReturnType<typeof TicketNumber.prototype.toObject>;
            } = {};
            if (this.ticketId != null) {
                data.ticketId = this.ticketId;
            }
            if (this.ticketNumber != null) {
                data.ticketNumber = this.ticketNumber.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasTicketId)
                writer.writeString(1, this.ticketId);
            if (this.hasTicketNumber)
                writer.writeMessage(2, this.ticketNumber, () => this.ticketNumber.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TicketId {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TicketId();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ticketId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.ticketNumber, () => message.ticketNumber = TicketNumber.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TicketId {
            return TicketId.deserialize(bytes);
        }
    }
    export class TicketNumber extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            productionId?: string;
            ticketNumber?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productionId" in data && data.productionId != undefined) {
                    this.productionId = data.productionId;
                }
                if ("ticketNumber" in data && data.ticketNumber != undefined) {
                    this.ticketNumber = data.ticketNumber;
                }
            }
        }
        get productionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ticketNumber() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ticketNumber(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            productionId?: string;
            ticketNumber?: string;
        }): TicketNumber {
            const message = new TicketNumber({});
            if (data.productionId != null) {
                message.productionId = data.productionId;
            }
            if (data.ticketNumber != null) {
                message.ticketNumber = data.ticketNumber;
            }
            return message;
        }
        toObject() {
            const data: {
                productionId?: string;
                ticketNumber?: string;
            } = {};
            if (this.productionId != null) {
                data.productionId = this.productionId;
            }
            if (this.ticketNumber != null) {
                data.ticketNumber = this.ticketNumber;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.productionId.length)
                writer.writeString(1, this.productionId);
            if (this.ticketNumber.length)
                writer.writeString(2, this.ticketNumber);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TicketNumber {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TicketNumber();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productionId = reader.readString();
                        break;
                    case 2:
                        message.ticketNumber = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TicketNumber {
            return TicketNumber.deserialize(bytes);
        }
    }
    export class Ticket extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            ticketNumber?: string;
            event?: dependency_9.event_tickets.Event;
            ticketType?: dependency_10.event_tickets.TicketType;
            orderNumber?: string;
            groupingId?: string;
            barcodeContents?: string;
            seatInfo?: Seat;
            faceValue?: FaceValue;
            person?: dependency_6.io.Person;
            metaData?: Map<string, string>;
            optOut?: dependency_4.io.Toggle;
            status?: TicketStatus;
            expiryDate?: dependency_1.google.protobuf.Timestamp;
            redemptionDetails?: RedemptionDetails;
            validateDetails?: ValidateDetails[];
            passOverrides?: dependency_5.io.PassOverrides;
            passMetaData?: dependency_3.io.Metadata;
            created?: dependency_1.google.protobuf.Timestamp;
            updated?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [16], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("ticketNumber" in data && data.ticketNumber != undefined) {
                    this.ticketNumber = data.ticketNumber;
                }
                if ("event" in data && data.event != undefined) {
                    this.event = data.event;
                }
                if ("ticketType" in data && data.ticketType != undefined) {
                    this.ticketType = data.ticketType;
                }
                if ("orderNumber" in data && data.orderNumber != undefined) {
                    this.orderNumber = data.orderNumber;
                }
                if ("groupingId" in data && data.groupingId != undefined) {
                    this.groupingId = data.groupingId;
                }
                if ("barcodeContents" in data && data.barcodeContents != undefined) {
                    this.barcodeContents = data.barcodeContents;
                }
                if ("seatInfo" in data && data.seatInfo != undefined) {
                    this.seatInfo = data.seatInfo;
                }
                if ("faceValue" in data && data.faceValue != undefined) {
                    this.faceValue = data.faceValue;
                }
                if ("person" in data && data.person != undefined) {
                    this.person = data.person;
                }
                if ("metaData" in data && data.metaData != undefined) {
                    this.metaData = data.metaData;
                }
                if ("optOut" in data && data.optOut != undefined) {
                    this.optOut = data.optOut;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("expiryDate" in data && data.expiryDate != undefined) {
                    this.expiryDate = data.expiryDate;
                }
                if ("redemptionDetails" in data && data.redemptionDetails != undefined) {
                    this.redemptionDetails = data.redemptionDetails;
                }
                if ("validateDetails" in data && data.validateDetails != undefined) {
                    this.validateDetails = data.validateDetails;
                }
                if ("passOverrides" in data && data.passOverrides != undefined) {
                    this.passOverrides = data.passOverrides;
                }
                if ("passMetaData" in data && data.passMetaData != undefined) {
                    this.passMetaData = data.passMetaData;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
            }
            if (!this.metaData)
                this.metaData = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ticketNumber() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ticketNumber(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get event() {
            return pb_1.Message.getWrapperField(this, dependency_9.event_tickets.Event, 3) as dependency_9.event_tickets.Event;
        }
        set event(value: dependency_9.event_tickets.Event) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasEvent() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ticketType() {
            return pb_1.Message.getWrapperField(this, dependency_10.event_tickets.TicketType, 4) as dependency_10.event_tickets.TicketType;
        }
        set ticketType(value: dependency_10.event_tickets.TicketType) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasTicketType() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get orderNumber() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set orderNumber(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get groupingId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set groupingId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get barcodeContents() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set barcodeContents(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get seatInfo() {
            return pb_1.Message.getWrapperField(this, Seat, 8) as Seat;
        }
        set seatInfo(value: Seat) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasSeatInfo() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get faceValue() {
            return pb_1.Message.getWrapperField(this, FaceValue, 9) as FaceValue;
        }
        set faceValue(value: FaceValue) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasFaceValue() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get person() {
            return pb_1.Message.getWrapperField(this, dependency_6.io.Person, 10) as dependency_6.io.Person;
        }
        set person(value: dependency_6.io.Person) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasPerson() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get metaData() {
            return pb_1.Message.getField(this, 11) as any as Map<string, string>;
        }
        set metaData(value: Map<string, string>) {
            pb_1.Message.setField(this, 11, value as any);
        }
        get optOut() {
            return pb_1.Message.getFieldWithDefault(this, 12, dependency_4.io.Toggle.DO_NOT_USE) as dependency_4.io.Toggle;
        }
        set optOut(value: dependency_4.io.Toggle) {
            pb_1.Message.setField(this, 12, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 13, TicketStatus.STATUS_NONE) as TicketStatus;
        }
        set status(value: TicketStatus) {
            pb_1.Message.setField(this, 13, value);
        }
        get expiryDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 14) as dependency_1.google.protobuf.Timestamp;
        }
        set expiryDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get hasExpiryDate() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get redemptionDetails() {
            return pb_1.Message.getWrapperField(this, RedemptionDetails, 15) as RedemptionDetails;
        }
        set redemptionDetails(value: RedemptionDetails) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get hasRedemptionDetails() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get validateDetails() {
            return pb_1.Message.getRepeatedWrapperField(this, ValidateDetails, 16) as ValidateDetails[];
        }
        set validateDetails(value: ValidateDetails[]) {
            pb_1.Message.setRepeatedWrapperField(this, 16, value);
        }
        get passOverrides() {
            return pb_1.Message.getWrapperField(this, dependency_5.io.PassOverrides, 17) as dependency_5.io.PassOverrides;
        }
        set passOverrides(value: dependency_5.io.PassOverrides) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get hasPassOverrides() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get passMetaData() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.Metadata, 18) as dependency_3.io.Metadata;
        }
        set passMetaData(value: dependency_3.io.Metadata) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get hasPassMetaData() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 19) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 20) as dependency_1.google.protobuf.Timestamp;
        }
        set updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get hasUpdated() {
            return pb_1.Message.getField(this, 20) != null;
        }
        static fromObject(data: {
            id?: string;
            ticketNumber?: string;
            event?: ReturnType<typeof dependency_9.event_tickets.Event.prototype.toObject>;
            ticketType?: ReturnType<typeof dependency_10.event_tickets.TicketType.prototype.toObject>;
            orderNumber?: string;
            groupingId?: string;
            barcodeContents?: string;
            seatInfo?: ReturnType<typeof Seat.prototype.toObject>;
            faceValue?: ReturnType<typeof FaceValue.prototype.toObject>;
            person?: ReturnType<typeof dependency_6.io.Person.prototype.toObject>;
            metaData?: {
                [key: string]: string;
            };
            optOut?: dependency_4.io.Toggle;
            status?: TicketStatus;
            expiryDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            redemptionDetails?: ReturnType<typeof RedemptionDetails.prototype.toObject>;
            validateDetails?: ReturnType<typeof ValidateDetails.prototype.toObject>[];
            passOverrides?: ReturnType<typeof dependency_5.io.PassOverrides.prototype.toObject>;
            passMetaData?: ReturnType<typeof dependency_3.io.Metadata.prototype.toObject>;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): Ticket {
            const message = new Ticket({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.ticketNumber != null) {
                message.ticketNumber = data.ticketNumber;
            }
            if (data.event != null) {
                message.event = dependency_9.event_tickets.Event.fromObject(data.event);
            }
            if (data.ticketType != null) {
                message.ticketType = dependency_10.event_tickets.TicketType.fromObject(data.ticketType);
            }
            if (data.orderNumber != null) {
                message.orderNumber = data.orderNumber;
            }
            if (data.groupingId != null) {
                message.groupingId = data.groupingId;
            }
            if (data.barcodeContents != null) {
                message.barcodeContents = data.barcodeContents;
            }
            if (data.seatInfo != null) {
                message.seatInfo = Seat.fromObject(data.seatInfo);
            }
            if (data.faceValue != null) {
                message.faceValue = FaceValue.fromObject(data.faceValue);
            }
            if (data.person != null) {
                message.person = dependency_6.io.Person.fromObject(data.person);
            }
            if (typeof data.metaData == "object") {
                message.metaData = new Map(Object.entries(data.metaData));
            }
            if (data.optOut != null) {
                message.optOut = data.optOut;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.expiryDate != null) {
                message.expiryDate = dependency_1.google.protobuf.Timestamp.fromObject(data.expiryDate);
            }
            if (data.redemptionDetails != null) {
                message.redemptionDetails = RedemptionDetails.fromObject(data.redemptionDetails);
            }
            if (data.validateDetails != null) {
                message.validateDetails = data.validateDetails.map(item => ValidateDetails.fromObject(item));
            }
            if (data.passOverrides != null) {
                message.passOverrides = dependency_5.io.PassOverrides.fromObject(data.passOverrides);
            }
            if (data.passMetaData != null) {
                message.passMetaData = dependency_3.io.Metadata.fromObject(data.passMetaData);
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_1.google.protobuf.Timestamp.fromObject(data.updated);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                ticketNumber?: string;
                event?: ReturnType<typeof dependency_9.event_tickets.Event.prototype.toObject>;
                ticketType?: ReturnType<typeof dependency_10.event_tickets.TicketType.prototype.toObject>;
                orderNumber?: string;
                groupingId?: string;
                barcodeContents?: string;
                seatInfo?: ReturnType<typeof Seat.prototype.toObject>;
                faceValue?: ReturnType<typeof FaceValue.prototype.toObject>;
                person?: ReturnType<typeof dependency_6.io.Person.prototype.toObject>;
                metaData?: {
                    [key: string]: string;
                };
                optOut?: dependency_4.io.Toggle;
                status?: TicketStatus;
                expiryDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                redemptionDetails?: ReturnType<typeof RedemptionDetails.prototype.toObject>;
                validateDetails?: ReturnType<typeof ValidateDetails.prototype.toObject>[];
                passOverrides?: ReturnType<typeof dependency_5.io.PassOverrides.prototype.toObject>;
                passMetaData?: ReturnType<typeof dependency_3.io.Metadata.prototype.toObject>;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.ticketNumber != null) {
                data.ticketNumber = this.ticketNumber;
            }
            if (this.event != null) {
                data.event = this.event.toObject();
            }
            if (this.ticketType != null) {
                data.ticketType = this.ticketType.toObject();
            }
            if (this.orderNumber != null) {
                data.orderNumber = this.orderNumber;
            }
            if (this.groupingId != null) {
                data.groupingId = this.groupingId;
            }
            if (this.barcodeContents != null) {
                data.barcodeContents = this.barcodeContents;
            }
            if (this.seatInfo != null) {
                data.seatInfo = this.seatInfo.toObject();
            }
            if (this.faceValue != null) {
                data.faceValue = this.faceValue.toObject();
            }
            if (this.person != null) {
                data.person = this.person.toObject();
            }
            if (this.metaData != null) {
                data.metaData = (Object.fromEntries)(this.metaData);
            }
            if (this.optOut != null) {
                data.optOut = this.optOut;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.expiryDate != null) {
                data.expiryDate = this.expiryDate.toObject();
            }
            if (this.redemptionDetails != null) {
                data.redemptionDetails = this.redemptionDetails.toObject();
            }
            if (this.validateDetails != null) {
                data.validateDetails = this.validateDetails.map((item: ValidateDetails) => item.toObject());
            }
            if (this.passOverrides != null) {
                data.passOverrides = this.passOverrides.toObject();
            }
            if (this.passMetaData != null) {
                data.passMetaData = this.passMetaData.toObject();
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.ticketNumber.length)
                writer.writeString(2, this.ticketNumber);
            if (this.hasEvent)
                writer.writeMessage(3, this.event, () => this.event.serialize(writer));
            if (this.hasTicketType)
                writer.writeMessage(4, this.ticketType, () => this.ticketType.serialize(writer));
            if (this.orderNumber.length)
                writer.writeString(5, this.orderNumber);
            if (this.groupingId.length)
                writer.writeString(6, this.groupingId);
            if (this.barcodeContents.length)
                writer.writeString(7, this.barcodeContents);
            if (this.hasSeatInfo)
                writer.writeMessage(8, this.seatInfo, () => this.seatInfo.serialize(writer));
            if (this.hasFaceValue)
                writer.writeMessage(9, this.faceValue, () => this.faceValue.serialize(writer));
            if (this.hasPerson)
                writer.writeMessage(10, this.person, () => this.person.serialize(writer));
            for (const [key, value] of this.metaData) {
                writer.writeMessage(11, this.metaData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.optOut != dependency_4.io.Toggle.DO_NOT_USE)
                writer.writeEnum(12, this.optOut);
            if (this.status != TicketStatus.STATUS_NONE)
                writer.writeEnum(13, this.status);
            if (this.hasExpiryDate)
                writer.writeMessage(14, this.expiryDate, () => this.expiryDate.serialize(writer));
            if (this.hasRedemptionDetails)
                writer.writeMessage(15, this.redemptionDetails, () => this.redemptionDetails.serialize(writer));
            if (this.validateDetails.length)
                writer.writeRepeatedMessage(16, this.validateDetails, (item: ValidateDetails) => item.serialize(writer));
            if (this.hasPassOverrides)
                writer.writeMessage(17, this.passOverrides, () => this.passOverrides.serialize(writer));
            if (this.hasPassMetaData)
                writer.writeMessage(18, this.passMetaData, () => this.passMetaData.serialize(writer));
            if (this.hasCreated)
                writer.writeMessage(19, this.created, () => this.created.serialize(writer));
            if (this.hasUpdated)
                writer.writeMessage(20, this.updated, () => this.updated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Ticket {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Ticket();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.ticketNumber = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.event, () => message.event = dependency_9.event_tickets.Event.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.ticketType, () => message.ticketType = dependency_10.event_tickets.TicketType.deserialize(reader));
                        break;
                    case 5:
                        message.orderNumber = reader.readString();
                        break;
                    case 6:
                        message.groupingId = reader.readString();
                        break;
                    case 7:
                        message.barcodeContents = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.seatInfo, () => message.seatInfo = Seat.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.faceValue, () => message.faceValue = FaceValue.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.person, () => message.person = dependency_6.io.Person.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metaData as any, reader, reader.readString, reader.readString));
                        break;
                    case 12:
                        message.optOut = reader.readEnum();
                        break;
                    case 13:
                        message.status = reader.readEnum();
                        break;
                    case 14:
                        reader.readMessage(message.expiryDate, () => message.expiryDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.redemptionDetails, () => message.redemptionDetails = RedemptionDetails.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.validateDetails, () => pb_1.Message.addToRepeatedWrapperField(message, 16, ValidateDetails.deserialize(reader), ValidateDetails));
                        break;
                    case 17:
                        reader.readMessage(message.passOverrides, () => message.passOverrides = dependency_5.io.PassOverrides.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.passMetaData, () => message.passMetaData = dependency_3.io.Metadata.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.updated, () => message.updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Ticket {
            return Ticket.deserialize(bytes);
        }
    }
    export class ValidateDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validateDate?: dependency_1.google.protobuf.Timestamp;
            lat?: number;
            lon?: number;
            alt?: number;
            validateSource?: string;
            validateReference?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validateDate" in data && data.validateDate != undefined) {
                    this.validateDate = data.validateDate;
                }
                if ("lat" in data && data.lat != undefined) {
                    this.lat = data.lat;
                }
                if ("lon" in data && data.lon != undefined) {
                    this.lon = data.lon;
                }
                if ("alt" in data && data.alt != undefined) {
                    this.alt = data.alt;
                }
                if ("validateSource" in data && data.validateSource != undefined) {
                    this.validateSource = data.validateSource;
                }
                if ("validateReference" in data && data.validateReference != undefined) {
                    this.validateReference = data.validateReference;
                }
            }
        }
        get validateDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set validateDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasValidateDate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get lat() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lat(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get lon() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set lon(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get alt() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set alt(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get validateSource() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set validateSource(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get validateReference() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set validateReference(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            validateDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            lat?: number;
            lon?: number;
            alt?: number;
            validateSource?: string;
            validateReference?: string;
        }): ValidateDetails {
            const message = new ValidateDetails({});
            if (data.validateDate != null) {
                message.validateDate = dependency_1.google.protobuf.Timestamp.fromObject(data.validateDate);
            }
            if (data.lat != null) {
                message.lat = data.lat;
            }
            if (data.lon != null) {
                message.lon = data.lon;
            }
            if (data.alt != null) {
                message.alt = data.alt;
            }
            if (data.validateSource != null) {
                message.validateSource = data.validateSource;
            }
            if (data.validateReference != null) {
                message.validateReference = data.validateReference;
            }
            return message;
        }
        toObject() {
            const data: {
                validateDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                lat?: number;
                lon?: number;
                alt?: number;
                validateSource?: string;
                validateReference?: string;
            } = {};
            if (this.validateDate != null) {
                data.validateDate = this.validateDate.toObject();
            }
            if (this.lat != null) {
                data.lat = this.lat;
            }
            if (this.lon != null) {
                data.lon = this.lon;
            }
            if (this.alt != null) {
                data.alt = this.alt;
            }
            if (this.validateSource != null) {
                data.validateSource = this.validateSource;
            }
            if (this.validateReference != null) {
                data.validateReference = this.validateReference;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasValidateDate)
                writer.writeMessage(1, this.validateDate, () => this.validateDate.serialize(writer));
            if (this.lat != 0)
                writer.writeDouble(2, this.lat);
            if (this.lon != 0)
                writer.writeDouble(3, this.lon);
            if (this.alt != 0)
                writer.writeInt32(4, this.alt);
            if (this.validateSource.length)
                writer.writeString(6, this.validateSource);
            if (this.validateReference.length)
                writer.writeString(7, this.validateReference);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.validateDate, () => message.validateDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.lat = reader.readDouble();
                        break;
                    case 3:
                        message.lon = reader.readDouble();
                        break;
                    case 4:
                        message.alt = reader.readInt32();
                        break;
                    case 6:
                        message.validateSource = reader.readString();
                        break;
                    case 7:
                        message.validateReference = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateDetails {
            return ValidateDetails.deserialize(bytes);
        }
    }
    export class RedemptionDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            redemptionDate?: dependency_1.google.protobuf.Timestamp;
            lat?: number;
            lon?: number;
            alt?: number;
            redemptionSource?: string;
            redemptionReference?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("redemptionDate" in data && data.redemptionDate != undefined) {
                    this.redemptionDate = data.redemptionDate;
                }
                if ("lat" in data && data.lat != undefined) {
                    this.lat = data.lat;
                }
                if ("lon" in data && data.lon != undefined) {
                    this.lon = data.lon;
                }
                if ("alt" in data && data.alt != undefined) {
                    this.alt = data.alt;
                }
                if ("redemptionSource" in data && data.redemptionSource != undefined) {
                    this.redemptionSource = data.redemptionSource;
                }
                if ("redemptionReference" in data && data.redemptionReference != undefined) {
                    this.redemptionReference = data.redemptionReference;
                }
            }
        }
        get redemptionDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set redemptionDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasRedemptionDate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get lat() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lat(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get lon() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set lon(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get alt() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set alt(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get redemptionSource() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set redemptionSource(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get redemptionReference() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set redemptionReference(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            redemptionDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            lat?: number;
            lon?: number;
            alt?: number;
            redemptionSource?: string;
            redemptionReference?: string;
        }): RedemptionDetails {
            const message = new RedemptionDetails({});
            if (data.redemptionDate != null) {
                message.redemptionDate = dependency_1.google.protobuf.Timestamp.fromObject(data.redemptionDate);
            }
            if (data.lat != null) {
                message.lat = data.lat;
            }
            if (data.lon != null) {
                message.lon = data.lon;
            }
            if (data.alt != null) {
                message.alt = data.alt;
            }
            if (data.redemptionSource != null) {
                message.redemptionSource = data.redemptionSource;
            }
            if (data.redemptionReference != null) {
                message.redemptionReference = data.redemptionReference;
            }
            return message;
        }
        toObject() {
            const data: {
                redemptionDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                lat?: number;
                lon?: number;
                alt?: number;
                redemptionSource?: string;
                redemptionReference?: string;
            } = {};
            if (this.redemptionDate != null) {
                data.redemptionDate = this.redemptionDate.toObject();
            }
            if (this.lat != null) {
                data.lat = this.lat;
            }
            if (this.lon != null) {
                data.lon = this.lon;
            }
            if (this.alt != null) {
                data.alt = this.alt;
            }
            if (this.redemptionSource != null) {
                data.redemptionSource = this.redemptionSource;
            }
            if (this.redemptionReference != null) {
                data.redemptionReference = this.redemptionReference;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasRedemptionDate)
                writer.writeMessage(1, this.redemptionDate, () => this.redemptionDate.serialize(writer));
            if (this.lat != 0)
                writer.writeDouble(2, this.lat);
            if (this.lon != 0)
                writer.writeDouble(3, this.lon);
            if (this.alt != 0)
                writer.writeInt32(4, this.alt);
            if (this.redemptionSource.length)
                writer.writeString(6, this.redemptionSource);
            if (this.redemptionReference.length)
                writer.writeString(7, this.redemptionReference);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RedemptionDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RedemptionDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.redemptionDate, () => message.redemptionDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.lat = reader.readDouble();
                        break;
                    case 3:
                        message.lon = reader.readDouble();
                        break;
                    case 4:
                        message.alt = reader.readInt32();
                        break;
                    case 6:
                        message.redemptionSource = reader.readString();
                        break;
                    case 7:
                        message.redemptionReference = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RedemptionDetails {
            return RedemptionDetails.deserialize(bytes);
        }
    }
    export class FaceValue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: number;
            currency?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("currency" in data && data.currency != undefined) {
                    this.currency = data.currency;
                }
            }
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get currency() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set currency(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            amount?: number;
            currency?: string;
        }): FaceValue {
            const message = new FaceValue({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.currency != null) {
                message.currency = data.currency;
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: number;
                currency?: string;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.currency != null) {
                data.currency = this.currency;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount != 0)
                writer.writeFloat(1, this.amount);
            if (this.currency.length)
                writer.writeString(2, this.currency);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FaceValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FaceValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readFloat();
                        break;
                    case 2:
                        message.currency = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FaceValue {
            return FaceValue.deserialize(bytes);
        }
    }
    export class Seat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            seat?: string;
            localizedSeat?: dependency_2.io.LocalizedString;
            row?: string;
            localizedRow?: dependency_2.io.LocalizedString;
            section?: string;
            localizedSection?: dependency_2.io.LocalizedString;
            gate?: string;
            localizedGate?: dependency_2.io.LocalizedString;
            identifier?: string;
            localizedIdentifier?: dependency_2.io.LocalizedString;
            description?: string;
            localizedDescription?: dependency_2.io.LocalizedString;
            type?: string;
            localizedType?: dependency_2.io.LocalizedString;
            level?: string;
            localizedLevel?: dependency_2.io.LocalizedString;
            aisle?: string;
            localizedAisle?: dependency_2.io.LocalizedString;
            door?: string;
            localizedDoor?: dependency_2.io.LocalizedString;
            sectionColor?: string;
            portalURL?: string;
            localizedPortalURL?: dependency_2.io.LocalizedString;
            venueEntrance?: string;
            localizedVenueEntrance?: dependency_2.io.LocalizedString;
            admissionLevel?: string;
            localizedAdmissionLevel?: dependency_2.io.LocalizedString;
            admissionLevelAbbreviation?: string;
            localizedAdmissionLevelAbbreviation?: dependency_2.io.LocalizedString;
            entranceDescription?: string;
            localizedEntranceDescription?: dependency_2.io.LocalizedString;
            room?: string;
            localizedRoom?: dependency_2.io.LocalizedString;
            additionalTicketAttributes?: string;
            localizedAdditionalTicketAttributes?: dependency_2.io.LocalizedString;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("seat" in data && data.seat != undefined) {
                    this.seat = data.seat;
                }
                if ("localizedSeat" in data && data.localizedSeat != undefined) {
                    this.localizedSeat = data.localizedSeat;
                }
                if ("row" in data && data.row != undefined) {
                    this.row = data.row;
                }
                if ("localizedRow" in data && data.localizedRow != undefined) {
                    this.localizedRow = data.localizedRow;
                }
                if ("section" in data && data.section != undefined) {
                    this.section = data.section;
                }
                if ("localizedSection" in data && data.localizedSection != undefined) {
                    this.localizedSection = data.localizedSection;
                }
                if ("gate" in data && data.gate != undefined) {
                    this.gate = data.gate;
                }
                if ("localizedGate" in data && data.localizedGate != undefined) {
                    this.localizedGate = data.localizedGate;
                }
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
                if ("localizedIdentifier" in data && data.localizedIdentifier != undefined) {
                    this.localizedIdentifier = data.localizedIdentifier;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("localizedDescription" in data && data.localizedDescription != undefined) {
                    this.localizedDescription = data.localizedDescription;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("localizedType" in data && data.localizedType != undefined) {
                    this.localizedType = data.localizedType;
                }
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
                if ("localizedLevel" in data && data.localizedLevel != undefined) {
                    this.localizedLevel = data.localizedLevel;
                }
                if ("aisle" in data && data.aisle != undefined) {
                    this.aisle = data.aisle;
                }
                if ("localizedAisle" in data && data.localizedAisle != undefined) {
                    this.localizedAisle = data.localizedAisle;
                }
                if ("door" in data && data.door != undefined) {
                    this.door = data.door;
                }
                if ("localizedDoor" in data && data.localizedDoor != undefined) {
                    this.localizedDoor = data.localizedDoor;
                }
                if ("sectionColor" in data && data.sectionColor != undefined) {
                    this.sectionColor = data.sectionColor;
                }
                if ("portalURL" in data && data.portalURL != undefined) {
                    this.portalURL = data.portalURL;
                }
                if ("localizedPortalURL" in data && data.localizedPortalURL != undefined) {
                    this.localizedPortalURL = data.localizedPortalURL;
                }
                if ("venueEntrance" in data && data.venueEntrance != undefined) {
                    this.venueEntrance = data.venueEntrance;
                }
                if ("localizedVenueEntrance" in data && data.localizedVenueEntrance != undefined) {
                    this.localizedVenueEntrance = data.localizedVenueEntrance;
                }
                if ("admissionLevel" in data && data.admissionLevel != undefined) {
                    this.admissionLevel = data.admissionLevel;
                }
                if ("localizedAdmissionLevel" in data && data.localizedAdmissionLevel != undefined) {
                    this.localizedAdmissionLevel = data.localizedAdmissionLevel;
                }
                if ("admissionLevelAbbreviation" in data && data.admissionLevelAbbreviation != undefined) {
                    this.admissionLevelAbbreviation = data.admissionLevelAbbreviation;
                }
                if ("localizedAdmissionLevelAbbreviation" in data && data.localizedAdmissionLevelAbbreviation != undefined) {
                    this.localizedAdmissionLevelAbbreviation = data.localizedAdmissionLevelAbbreviation;
                }
                if ("entranceDescription" in data && data.entranceDescription != undefined) {
                    this.entranceDescription = data.entranceDescription;
                }
                if ("localizedEntranceDescription" in data && data.localizedEntranceDescription != undefined) {
                    this.localizedEntranceDescription = data.localizedEntranceDescription;
                }
                if ("room" in data && data.room != undefined) {
                    this.room = data.room;
                }
                if ("localizedRoom" in data && data.localizedRoom != undefined) {
                    this.localizedRoom = data.localizedRoom;
                }
                if ("additionalTicketAttributes" in data && data.additionalTicketAttributes != undefined) {
                    this.additionalTicketAttributes = data.additionalTicketAttributes;
                }
                if ("localizedAdditionalTicketAttributes" in data && data.localizedAdditionalTicketAttributes != undefined) {
                    this.localizedAdditionalTicketAttributes = data.localizedAdditionalTicketAttributes;
                }
            }
        }
        get seat() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set seat(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get localizedSeat() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 2) as dependency_2.io.LocalizedString;
        }
        set localizedSeat(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasLocalizedSeat() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get row() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set row(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get localizedRow() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 4) as dependency_2.io.LocalizedString;
        }
        set localizedRow(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasLocalizedRow() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get section() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set section(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get localizedSection() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 6) as dependency_2.io.LocalizedString;
        }
        set localizedSection(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasLocalizedSection() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get gate() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set gate(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get localizedGate() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 8) as dependency_2.io.LocalizedString;
        }
        set localizedGate(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasLocalizedGate() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get localizedIdentifier() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 10) as dependency_2.io.LocalizedString;
        }
        set localizedIdentifier(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasLocalizedIdentifier() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get localizedDescription() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 12) as dependency_2.io.LocalizedString;
        }
        set localizedDescription(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get hasLocalizedDescription() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get localizedType() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 14) as dependency_2.io.LocalizedString;
        }
        set localizedType(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get hasLocalizedType() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set level(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get localizedLevel() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 16) as dependency_2.io.LocalizedString;
        }
        set localizedLevel(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get hasLocalizedLevel() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get aisle() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set aisle(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get localizedAisle() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 18) as dependency_2.io.LocalizedString;
        }
        set localizedAisle(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get hasLocalizedAisle() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get door() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set door(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get localizedDoor() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 20) as dependency_2.io.LocalizedString;
        }
        set localizedDoor(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get hasLocalizedDoor() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get sectionColor() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set sectionColor(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get portalURL() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set portalURL(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get localizedPortalURL() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 23) as dependency_2.io.LocalizedString;
        }
        set localizedPortalURL(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 23, value);
        }
        get hasLocalizedPortalURL() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get venueEntrance() {
            return pb_1.Message.getFieldWithDefault(this, 24, "") as string;
        }
        set venueEntrance(value: string) {
            pb_1.Message.setField(this, 24, value);
        }
        get localizedVenueEntrance() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 25) as dependency_2.io.LocalizedString;
        }
        set localizedVenueEntrance(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 25, value);
        }
        get hasLocalizedVenueEntrance() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get admissionLevel() {
            return pb_1.Message.getFieldWithDefault(this, 26, "") as string;
        }
        set admissionLevel(value: string) {
            pb_1.Message.setField(this, 26, value);
        }
        get localizedAdmissionLevel() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 27) as dependency_2.io.LocalizedString;
        }
        set localizedAdmissionLevel(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 27, value);
        }
        get hasLocalizedAdmissionLevel() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get admissionLevelAbbreviation() {
            return pb_1.Message.getFieldWithDefault(this, 28, "") as string;
        }
        set admissionLevelAbbreviation(value: string) {
            pb_1.Message.setField(this, 28, value);
        }
        get localizedAdmissionLevelAbbreviation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 29) as dependency_2.io.LocalizedString;
        }
        set localizedAdmissionLevelAbbreviation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 29, value);
        }
        get hasLocalizedAdmissionLevelAbbreviation() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get entranceDescription() {
            return pb_1.Message.getFieldWithDefault(this, 30, "") as string;
        }
        set entranceDescription(value: string) {
            pb_1.Message.setField(this, 30, value);
        }
        get localizedEntranceDescription() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 31) as dependency_2.io.LocalizedString;
        }
        set localizedEntranceDescription(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 31, value);
        }
        get hasLocalizedEntranceDescription() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get room() {
            return pb_1.Message.getFieldWithDefault(this, 32, "") as string;
        }
        set room(value: string) {
            pb_1.Message.setField(this, 32, value);
        }
        get localizedRoom() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 33) as dependency_2.io.LocalizedString;
        }
        set localizedRoom(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 33, value);
        }
        get hasLocalizedRoom() {
            return pb_1.Message.getField(this, 33) != null;
        }
        get additionalTicketAttributes() {
            return pb_1.Message.getFieldWithDefault(this, 34, "") as string;
        }
        set additionalTicketAttributes(value: string) {
            pb_1.Message.setField(this, 34, value);
        }
        get localizedAdditionalTicketAttributes() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 35) as dependency_2.io.LocalizedString;
        }
        set localizedAdditionalTicketAttributes(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 35, value);
        }
        get hasLocalizedAdditionalTicketAttributes() {
            return pb_1.Message.getField(this, 35) != null;
        }
        static fromObject(data: {
            seat?: string;
            localizedSeat?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            row?: string;
            localizedRow?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            section?: string;
            localizedSection?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            gate?: string;
            localizedGate?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            identifier?: string;
            localizedIdentifier?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            description?: string;
            localizedDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            type?: string;
            localizedType?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            level?: string;
            localizedLevel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            aisle?: string;
            localizedAisle?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            door?: string;
            localizedDoor?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            sectionColor?: string;
            portalURL?: string;
            localizedPortalURL?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            venueEntrance?: string;
            localizedVenueEntrance?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            admissionLevel?: string;
            localizedAdmissionLevel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            admissionLevelAbbreviation?: string;
            localizedAdmissionLevelAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            entranceDescription?: string;
            localizedEntranceDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            room?: string;
            localizedRoom?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            additionalTicketAttributes?: string;
            localizedAdditionalTicketAttributes?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
        }): Seat {
            const message = new Seat({});
            if (data.seat != null) {
                message.seat = data.seat;
            }
            if (data.localizedSeat != null) {
                message.localizedSeat = dependency_2.io.LocalizedString.fromObject(data.localizedSeat);
            }
            if (data.row != null) {
                message.row = data.row;
            }
            if (data.localizedRow != null) {
                message.localizedRow = dependency_2.io.LocalizedString.fromObject(data.localizedRow);
            }
            if (data.section != null) {
                message.section = data.section;
            }
            if (data.localizedSection != null) {
                message.localizedSection = dependency_2.io.LocalizedString.fromObject(data.localizedSection);
            }
            if (data.gate != null) {
                message.gate = data.gate;
            }
            if (data.localizedGate != null) {
                message.localizedGate = dependency_2.io.LocalizedString.fromObject(data.localizedGate);
            }
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            if (data.localizedIdentifier != null) {
                message.localizedIdentifier = dependency_2.io.LocalizedString.fromObject(data.localizedIdentifier);
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.localizedDescription != null) {
                message.localizedDescription = dependency_2.io.LocalizedString.fromObject(data.localizedDescription);
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.localizedType != null) {
                message.localizedType = dependency_2.io.LocalizedString.fromObject(data.localizedType);
            }
            if (data.level != null) {
                message.level = data.level;
            }
            if (data.localizedLevel != null) {
                message.localizedLevel = dependency_2.io.LocalizedString.fromObject(data.localizedLevel);
            }
            if (data.aisle != null) {
                message.aisle = data.aisle;
            }
            if (data.localizedAisle != null) {
                message.localizedAisle = dependency_2.io.LocalizedString.fromObject(data.localizedAisle);
            }
            if (data.door != null) {
                message.door = data.door;
            }
            if (data.localizedDoor != null) {
                message.localizedDoor = dependency_2.io.LocalizedString.fromObject(data.localizedDoor);
            }
            if (data.sectionColor != null) {
                message.sectionColor = data.sectionColor;
            }
            if (data.portalURL != null) {
                message.portalURL = data.portalURL;
            }
            if (data.localizedPortalURL != null) {
                message.localizedPortalURL = dependency_2.io.LocalizedString.fromObject(data.localizedPortalURL);
            }
            if (data.venueEntrance != null) {
                message.venueEntrance = data.venueEntrance;
            }
            if (data.localizedVenueEntrance != null) {
                message.localizedVenueEntrance = dependency_2.io.LocalizedString.fromObject(data.localizedVenueEntrance);
            }
            if (data.admissionLevel != null) {
                message.admissionLevel = data.admissionLevel;
            }
            if (data.localizedAdmissionLevel != null) {
                message.localizedAdmissionLevel = dependency_2.io.LocalizedString.fromObject(data.localizedAdmissionLevel);
            }
            if (data.admissionLevelAbbreviation != null) {
                message.admissionLevelAbbreviation = data.admissionLevelAbbreviation;
            }
            if (data.localizedAdmissionLevelAbbreviation != null) {
                message.localizedAdmissionLevelAbbreviation = dependency_2.io.LocalizedString.fromObject(data.localizedAdmissionLevelAbbreviation);
            }
            if (data.entranceDescription != null) {
                message.entranceDescription = data.entranceDescription;
            }
            if (data.localizedEntranceDescription != null) {
                message.localizedEntranceDescription = dependency_2.io.LocalizedString.fromObject(data.localizedEntranceDescription);
            }
            if (data.room != null) {
                message.room = data.room;
            }
            if (data.localizedRoom != null) {
                message.localizedRoom = dependency_2.io.LocalizedString.fromObject(data.localizedRoom);
            }
            if (data.additionalTicketAttributes != null) {
                message.additionalTicketAttributes = data.additionalTicketAttributes;
            }
            if (data.localizedAdditionalTicketAttributes != null) {
                message.localizedAdditionalTicketAttributes = dependency_2.io.LocalizedString.fromObject(data.localizedAdditionalTicketAttributes);
            }
            return message;
        }
        toObject() {
            const data: {
                seat?: string;
                localizedSeat?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                row?: string;
                localizedRow?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                section?: string;
                localizedSection?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                gate?: string;
                localizedGate?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                identifier?: string;
                localizedIdentifier?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                description?: string;
                localizedDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                type?: string;
                localizedType?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                level?: string;
                localizedLevel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                aisle?: string;
                localizedAisle?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                door?: string;
                localizedDoor?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                sectionColor?: string;
                portalURL?: string;
                localizedPortalURL?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                venueEntrance?: string;
                localizedVenueEntrance?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                admissionLevel?: string;
                localizedAdmissionLevel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                admissionLevelAbbreviation?: string;
                localizedAdmissionLevelAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                entranceDescription?: string;
                localizedEntranceDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                room?: string;
                localizedRoom?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                additionalTicketAttributes?: string;
                localizedAdditionalTicketAttributes?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            } = {};
            if (this.seat != null) {
                data.seat = this.seat;
            }
            if (this.localizedSeat != null) {
                data.localizedSeat = this.localizedSeat.toObject();
            }
            if (this.row != null) {
                data.row = this.row;
            }
            if (this.localizedRow != null) {
                data.localizedRow = this.localizedRow.toObject();
            }
            if (this.section != null) {
                data.section = this.section;
            }
            if (this.localizedSection != null) {
                data.localizedSection = this.localizedSection.toObject();
            }
            if (this.gate != null) {
                data.gate = this.gate;
            }
            if (this.localizedGate != null) {
                data.localizedGate = this.localizedGate.toObject();
            }
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            if (this.localizedIdentifier != null) {
                data.localizedIdentifier = this.localizedIdentifier.toObject();
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.localizedDescription != null) {
                data.localizedDescription = this.localizedDescription.toObject();
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.localizedType != null) {
                data.localizedType = this.localizedType.toObject();
            }
            if (this.level != null) {
                data.level = this.level;
            }
            if (this.localizedLevel != null) {
                data.localizedLevel = this.localizedLevel.toObject();
            }
            if (this.aisle != null) {
                data.aisle = this.aisle;
            }
            if (this.localizedAisle != null) {
                data.localizedAisle = this.localizedAisle.toObject();
            }
            if (this.door != null) {
                data.door = this.door;
            }
            if (this.localizedDoor != null) {
                data.localizedDoor = this.localizedDoor.toObject();
            }
            if (this.sectionColor != null) {
                data.sectionColor = this.sectionColor;
            }
            if (this.portalURL != null) {
                data.portalURL = this.portalURL;
            }
            if (this.localizedPortalURL != null) {
                data.localizedPortalURL = this.localizedPortalURL.toObject();
            }
            if (this.venueEntrance != null) {
                data.venueEntrance = this.venueEntrance;
            }
            if (this.localizedVenueEntrance != null) {
                data.localizedVenueEntrance = this.localizedVenueEntrance.toObject();
            }
            if (this.admissionLevel != null) {
                data.admissionLevel = this.admissionLevel;
            }
            if (this.localizedAdmissionLevel != null) {
                data.localizedAdmissionLevel = this.localizedAdmissionLevel.toObject();
            }
            if (this.admissionLevelAbbreviation != null) {
                data.admissionLevelAbbreviation = this.admissionLevelAbbreviation;
            }
            if (this.localizedAdmissionLevelAbbreviation != null) {
                data.localizedAdmissionLevelAbbreviation = this.localizedAdmissionLevelAbbreviation.toObject();
            }
            if (this.entranceDescription != null) {
                data.entranceDescription = this.entranceDescription;
            }
            if (this.localizedEntranceDescription != null) {
                data.localizedEntranceDescription = this.localizedEntranceDescription.toObject();
            }
            if (this.room != null) {
                data.room = this.room;
            }
            if (this.localizedRoom != null) {
                data.localizedRoom = this.localizedRoom.toObject();
            }
            if (this.additionalTicketAttributes != null) {
                data.additionalTicketAttributes = this.additionalTicketAttributes;
            }
            if (this.localizedAdditionalTicketAttributes != null) {
                data.localizedAdditionalTicketAttributes = this.localizedAdditionalTicketAttributes.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.seat.length)
                writer.writeString(1, this.seat);
            if (this.hasLocalizedSeat)
                writer.writeMessage(2, this.localizedSeat, () => this.localizedSeat.serialize(writer));
            if (this.row.length)
                writer.writeString(3, this.row);
            if (this.hasLocalizedRow)
                writer.writeMessage(4, this.localizedRow, () => this.localizedRow.serialize(writer));
            if (this.section.length)
                writer.writeString(5, this.section);
            if (this.hasLocalizedSection)
                writer.writeMessage(6, this.localizedSection, () => this.localizedSection.serialize(writer));
            if (this.gate.length)
                writer.writeString(7, this.gate);
            if (this.hasLocalizedGate)
                writer.writeMessage(8, this.localizedGate, () => this.localizedGate.serialize(writer));
            if (this.identifier.length)
                writer.writeString(9, this.identifier);
            if (this.hasLocalizedIdentifier)
                writer.writeMessage(10, this.localizedIdentifier, () => this.localizedIdentifier.serialize(writer));
            if (this.description.length)
                writer.writeString(11, this.description);
            if (this.hasLocalizedDescription)
                writer.writeMessage(12, this.localizedDescription, () => this.localizedDescription.serialize(writer));
            if (this.type.length)
                writer.writeString(13, this.type);
            if (this.hasLocalizedType)
                writer.writeMessage(14, this.localizedType, () => this.localizedType.serialize(writer));
            if (this.level.length)
                writer.writeString(15, this.level);
            if (this.hasLocalizedLevel)
                writer.writeMessage(16, this.localizedLevel, () => this.localizedLevel.serialize(writer));
            if (this.aisle.length)
                writer.writeString(17, this.aisle);
            if (this.hasLocalizedAisle)
                writer.writeMessage(18, this.localizedAisle, () => this.localizedAisle.serialize(writer));
            if (this.door.length)
                writer.writeString(19, this.door);
            if (this.hasLocalizedDoor)
                writer.writeMessage(20, this.localizedDoor, () => this.localizedDoor.serialize(writer));
            if (this.sectionColor.length)
                writer.writeString(21, this.sectionColor);
            if (this.portalURL.length)
                writer.writeString(22, this.portalURL);
            if (this.hasLocalizedPortalURL)
                writer.writeMessage(23, this.localizedPortalURL, () => this.localizedPortalURL.serialize(writer));
            if (this.venueEntrance.length)
                writer.writeString(24, this.venueEntrance);
            if (this.hasLocalizedVenueEntrance)
                writer.writeMessage(25, this.localizedVenueEntrance, () => this.localizedVenueEntrance.serialize(writer));
            if (this.admissionLevel.length)
                writer.writeString(26, this.admissionLevel);
            if (this.hasLocalizedAdmissionLevel)
                writer.writeMessage(27, this.localizedAdmissionLevel, () => this.localizedAdmissionLevel.serialize(writer));
            if (this.admissionLevelAbbreviation.length)
                writer.writeString(28, this.admissionLevelAbbreviation);
            if (this.hasLocalizedAdmissionLevelAbbreviation)
                writer.writeMessage(29, this.localizedAdmissionLevelAbbreviation, () => this.localizedAdmissionLevelAbbreviation.serialize(writer));
            if (this.entranceDescription.length)
                writer.writeString(30, this.entranceDescription);
            if (this.hasLocalizedEntranceDescription)
                writer.writeMessage(31, this.localizedEntranceDescription, () => this.localizedEntranceDescription.serialize(writer));
            if (this.room.length)
                writer.writeString(32, this.room);
            if (this.hasLocalizedRoom)
                writer.writeMessage(33, this.localizedRoom, () => this.localizedRoom.serialize(writer));
            if (this.additionalTicketAttributes.length)
                writer.writeString(34, this.additionalTicketAttributes);
            if (this.hasLocalizedAdditionalTicketAttributes)
                writer.writeMessage(35, this.localizedAdditionalTicketAttributes, () => this.localizedAdditionalTicketAttributes.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Seat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Seat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.seat = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.localizedSeat, () => message.localizedSeat = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 3:
                        message.row = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.localizedRow, () => message.localizedRow = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 5:
                        message.section = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.localizedSection, () => message.localizedSection = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 7:
                        message.gate = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.localizedGate, () => message.localizedGate = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 9:
                        message.identifier = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.localizedIdentifier, () => message.localizedIdentifier = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 11:
                        message.description = reader.readString();
                        break;
                    case 12:
                        reader.readMessage(message.localizedDescription, () => message.localizedDescription = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 13:
                        message.type = reader.readString();
                        break;
                    case 14:
                        reader.readMessage(message.localizedType, () => message.localizedType = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 15:
                        message.level = reader.readString();
                        break;
                    case 16:
                        reader.readMessage(message.localizedLevel, () => message.localizedLevel = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 17:
                        message.aisle = reader.readString();
                        break;
                    case 18:
                        reader.readMessage(message.localizedAisle, () => message.localizedAisle = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 19:
                        message.door = reader.readString();
                        break;
                    case 20:
                        reader.readMessage(message.localizedDoor, () => message.localizedDoor = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 21:
                        message.sectionColor = reader.readString();
                        break;
                    case 22:
                        message.portalURL = reader.readString();
                        break;
                    case 23:
                        reader.readMessage(message.localizedPortalURL, () => message.localizedPortalURL = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 24:
                        message.venueEntrance = reader.readString();
                        break;
                    case 25:
                        reader.readMessage(message.localizedVenueEntrance, () => message.localizedVenueEntrance = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 26:
                        message.admissionLevel = reader.readString();
                        break;
                    case 27:
                        reader.readMessage(message.localizedAdmissionLevel, () => message.localizedAdmissionLevel = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 28:
                        message.admissionLevelAbbreviation = reader.readString();
                        break;
                    case 29:
                        reader.readMessage(message.localizedAdmissionLevelAbbreviation, () => message.localizedAdmissionLevelAbbreviation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 30:
                        message.entranceDescription = reader.readString();
                        break;
                    case 31:
                        reader.readMessage(message.localizedEntranceDescription, () => message.localizedEntranceDescription = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 32:
                        message.room = reader.readString();
                        break;
                    case 33:
                        reader.readMessage(message.localizedRoom, () => message.localizedRoom = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 34:
                        message.additionalTicketAttributes = reader.readString();
                        break;
                    case 35:
                        reader.readMessage(message.localizedAdditionalTicketAttributes, () => message.localizedAdditionalTicketAttributes = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Seat {
            return Seat.deserialize(bytes);
        }
    }
    export class TicketListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2], [3, 4], [5, 6]];
        constructor(data?: any[] | ({
            filters?: dependency_7.io.Filters;
        } & (({
            productionId?: string;
            productionUid?: never;
        } | {
            productionId?: never;
            productionUid?: string;
        }) | ({
            eventId?: string;
            eventFilterByVenueAndStart?: never;
        } | {
            eventId?: never;
            eventFilterByVenueAndStart?: EventFilterByVenueAndStart;
        }) | ({
            ticketTypeId?: string;
            ticketTypeUid?: never;
        } | {
            ticketTypeId?: never;
            ticketTypeUid?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productionId" in data && data.productionId != undefined) {
                    this.productionId = data.productionId;
                }
                if ("productionUid" in data && data.productionUid != undefined) {
                    this.productionUid = data.productionUid;
                }
                if ("eventId" in data && data.eventId != undefined) {
                    this.eventId = data.eventId;
                }
                if ("eventFilterByVenueAndStart" in data && data.eventFilterByVenueAndStart != undefined) {
                    this.eventFilterByVenueAndStart = data.eventFilterByVenueAndStart;
                }
                if ("ticketTypeId" in data && data.ticketTypeId != undefined) {
                    this.ticketTypeId = data.ticketTypeId;
                }
                if ("ticketTypeUid" in data && data.ticketTypeUid != undefined) {
                    this.ticketTypeUid = data.ticketTypeUid;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
            }
        }
        get productionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productionId(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get hasProductionId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get productionUid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set productionUid(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get hasProductionUid() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get eventId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set eventId(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get hasEventId() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get eventFilterByVenueAndStart() {
            return pb_1.Message.getWrapperField(this, EventFilterByVenueAndStart, 4) as EventFilterByVenueAndStart;
        }
        set eventFilterByVenueAndStart(value: EventFilterByVenueAndStart) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[1], value);
        }
        get hasEventFilterByVenueAndStart() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ticketTypeId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ticketTypeId(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[2], value);
        }
        get hasTicketTypeId() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get ticketTypeUid() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ticketTypeUid(value: string) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[2], value);
        }
        get hasTicketTypeUid() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_7.io.Filters, 7) as dependency_7.io.Filters;
        }
        set filters(value: dependency_7.io.Filters) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasFilters() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get production() {
            const cases: {
                [index: number]: "none" | "productionId" | "productionUid";
            } = {
                0: "none",
                1: "productionId",
                2: "productionUid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        get event() {
            const cases: {
                [index: number]: "none" | "eventId" | "eventFilterByVenueAndStart";
            } = {
                0: "none",
                3: "eventId",
                4: "eventFilterByVenueAndStart"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        get ticketType() {
            const cases: {
                [index: number]: "none" | "ticketTypeId" | "ticketTypeUid";
            } = {
                0: "none",
                5: "ticketTypeId",
                6: "ticketTypeUid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5, 6])];
        }
        static fromObject(data: {
            productionId?: string;
            productionUid?: string;
            eventId?: string;
            eventFilterByVenueAndStart?: ReturnType<typeof EventFilterByVenueAndStart.prototype.toObject>;
            ticketTypeId?: string;
            ticketTypeUid?: string;
            filters?: ReturnType<typeof dependency_7.io.Filters.prototype.toObject>;
        }): TicketListRequest {
            const message = new TicketListRequest({});
            if (data.productionId != null) {
                message.productionId = data.productionId;
            }
            if (data.productionUid != null) {
                message.productionUid = data.productionUid;
            }
            if (data.eventId != null) {
                message.eventId = data.eventId;
            }
            if (data.eventFilterByVenueAndStart != null) {
                message.eventFilterByVenueAndStart = EventFilterByVenueAndStart.fromObject(data.eventFilterByVenueAndStart);
            }
            if (data.ticketTypeId != null) {
                message.ticketTypeId = data.ticketTypeId;
            }
            if (data.ticketTypeUid != null) {
                message.ticketTypeUid = data.ticketTypeUid;
            }
            if (data.filters != null) {
                message.filters = dependency_7.io.Filters.fromObject(data.filters);
            }
            return message;
        }
        toObject() {
            const data: {
                productionId?: string;
                productionUid?: string;
                eventId?: string;
                eventFilterByVenueAndStart?: ReturnType<typeof EventFilterByVenueAndStart.prototype.toObject>;
                ticketTypeId?: string;
                ticketTypeUid?: string;
                filters?: ReturnType<typeof dependency_7.io.Filters.prototype.toObject>;
            } = {};
            if (this.productionId != null) {
                data.productionId = this.productionId;
            }
            if (this.productionUid != null) {
                data.productionUid = this.productionUid;
            }
            if (this.eventId != null) {
                data.eventId = this.eventId;
            }
            if (this.eventFilterByVenueAndStart != null) {
                data.eventFilterByVenueAndStart = this.eventFilterByVenueAndStart.toObject();
            }
            if (this.ticketTypeId != null) {
                data.ticketTypeId = this.ticketTypeId;
            }
            if (this.ticketTypeUid != null) {
                data.ticketTypeUid = this.ticketTypeUid;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasProductionId)
                writer.writeString(1, this.productionId);
            if (this.hasProductionUid)
                writer.writeString(2, this.productionUid);
            if (this.hasEventId)
                writer.writeString(3, this.eventId);
            if (this.hasEventFilterByVenueAndStart)
                writer.writeMessage(4, this.eventFilterByVenueAndStart, () => this.eventFilterByVenueAndStart.serialize(writer));
            if (this.hasTicketTypeId)
                writer.writeString(5, this.ticketTypeId);
            if (this.hasTicketTypeUid)
                writer.writeString(6, this.ticketTypeUid);
            if (this.hasFilters)
                writer.writeMessage(7, this.filters, () => this.filters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TicketListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TicketListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productionId = reader.readString();
                        break;
                    case 2:
                        message.productionUid = reader.readString();
                        break;
                    case 3:
                        message.eventId = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.eventFilterByVenueAndStart, () => message.eventFilterByVenueAndStart = EventFilterByVenueAndStart.deserialize(reader));
                        break;
                    case 5:
                        message.ticketTypeId = reader.readString();
                        break;
                    case 6:
                        message.ticketTypeUid = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.filters, () => message.filters = dependency_7.io.Filters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TicketListRequest {
            return TicketListRequest.deserialize(bytes);
        }
    }
    export class EventFilterByVenueAndStart extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            venueId?: string;
            venueUid?: string;
            scheduledStartDate?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("venueId" in data && data.venueId != undefined) {
                    this.venueId = data.venueId;
                }
                if ("venueUid" in data && data.venueUid != undefined) {
                    this.venueUid = data.venueUid;
                }
                if ("scheduledStartDate" in data && data.scheduledStartDate != undefined) {
                    this.scheduledStartDate = data.scheduledStartDate;
                }
            }
        }
        get venueId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set venueId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get venueUid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set venueUid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get scheduledStartDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set scheduledStartDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasScheduledStartDate() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            venueId?: string;
            venueUid?: string;
            scheduledStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): EventFilterByVenueAndStart {
            const message = new EventFilterByVenueAndStart({});
            if (data.venueId != null) {
                message.venueId = data.venueId;
            }
            if (data.venueUid != null) {
                message.venueUid = data.venueUid;
            }
            if (data.scheduledStartDate != null) {
                message.scheduledStartDate = dependency_1.google.protobuf.Timestamp.fromObject(data.scheduledStartDate);
            }
            return message;
        }
        toObject() {
            const data: {
                venueId?: string;
                venueUid?: string;
                scheduledStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.venueId != null) {
                data.venueId = this.venueId;
            }
            if (this.venueUid != null) {
                data.venueUid = this.venueUid;
            }
            if (this.scheduledStartDate != null) {
                data.scheduledStartDate = this.scheduledStartDate.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.venueId.length)
                writer.writeString(1, this.venueId);
            if (this.venueUid.length)
                writer.writeString(2, this.venueUid);
            if (this.hasScheduledStartDate)
                writer.writeMessage(3, this.scheduledStartDate, () => this.scheduledStartDate.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventFilterByVenueAndStart {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventFilterByVenueAndStart();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.venueId = reader.readString();
                        break;
                    case 2:
                        message.venueUid = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.scheduledStartDate, () => message.scheduledStartDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventFilterByVenueAndStart {
            return EventFilterByVenueAndStart.deserialize(bytes);
        }
    }
    export class TicketNumberRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            productionId?: string;
            productionUid?: string;
            ticketNumber?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productionId" in data && data.productionId != undefined) {
                    this.productionId = data.productionId;
                }
                if ("productionUid" in data && data.productionUid != undefined) {
                    this.productionUid = data.productionUid;
                }
                if ("ticketNumber" in data && data.ticketNumber != undefined) {
                    this.ticketNumber = data.ticketNumber;
                }
            }
        }
        get productionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get productionUid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set productionUid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ticketNumber() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ticketNumber(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            productionId?: string;
            productionUid?: string;
            ticketNumber?: string;
        }): TicketNumberRequest {
            const message = new TicketNumberRequest({});
            if (data.productionId != null) {
                message.productionId = data.productionId;
            }
            if (data.productionUid != null) {
                message.productionUid = data.productionUid;
            }
            if (data.ticketNumber != null) {
                message.ticketNumber = data.ticketNumber;
            }
            return message;
        }
        toObject() {
            const data: {
                productionId?: string;
                productionUid?: string;
                ticketNumber?: string;
            } = {};
            if (this.productionId != null) {
                data.productionId = this.productionId;
            }
            if (this.productionUid != null) {
                data.productionUid = this.productionUid;
            }
            if (this.ticketNumber != null) {
                data.ticketNumber = this.ticketNumber;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.productionId.length)
                writer.writeString(1, this.productionId);
            if (this.productionUid.length)
                writer.writeString(2, this.productionUid);
            if (this.ticketNumber.length)
                writer.writeString(3, this.ticketNumber);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TicketNumberRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TicketNumberRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productionId = reader.readString();
                        break;
                    case 2:
                        message.productionUid = reader.readString();
                        break;
                    case 3:
                        message.ticketNumber = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TicketNumberRequest {
            return TicketNumberRequest.deserialize(bytes);
        }
    }
    export class OrderNumberRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            productionId?: string;
            productionUid?: string;
            orderNumber?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productionId" in data && data.productionId != undefined) {
                    this.productionId = data.productionId;
                }
                if ("productionUid" in data && data.productionUid != undefined) {
                    this.productionUid = data.productionUid;
                }
                if ("orderNumber" in data && data.orderNumber != undefined) {
                    this.orderNumber = data.orderNumber;
                }
            }
        }
        get productionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get productionUid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set productionUid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get orderNumber() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set orderNumber(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            productionId?: string;
            productionUid?: string;
            orderNumber?: string;
        }): OrderNumberRequest {
            const message = new OrderNumberRequest({});
            if (data.productionId != null) {
                message.productionId = data.productionId;
            }
            if (data.productionUid != null) {
                message.productionUid = data.productionUid;
            }
            if (data.orderNumber != null) {
                message.orderNumber = data.orderNumber;
            }
            return message;
        }
        toObject() {
            const data: {
                productionId?: string;
                productionUid?: string;
                orderNumber?: string;
            } = {};
            if (this.productionId != null) {
                data.productionId = this.productionId;
            }
            if (this.productionUid != null) {
                data.productionUid = this.productionUid;
            }
            if (this.orderNumber != null) {
                data.orderNumber = this.orderNumber;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.productionId.length)
                writer.writeString(1, this.productionId);
            if (this.productionUid.length)
                writer.writeString(2, this.productionUid);
            if (this.orderNumber.length)
                writer.writeString(3, this.orderNumber);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OrderNumberRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OrderNumberRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productionId = reader.readString();
                        break;
                    case 2:
                        message.productionUid = reader.readString();
                        break;
                    case 3:
                        message.orderNumber = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OrderNumberRequest {
            return OrderNumberRequest.deserialize(bytes);
        }
    }
    export class RedeemByOrderNumber extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            productionId?: string;
            productionUid?: string;
            orderNumber?: string;
            redemptionDetails?: RedemptionDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productionId" in data && data.productionId != undefined) {
                    this.productionId = data.productionId;
                }
                if ("productionUid" in data && data.productionUid != undefined) {
                    this.productionUid = data.productionUid;
                }
                if ("orderNumber" in data && data.orderNumber != undefined) {
                    this.orderNumber = data.orderNumber;
                }
                if ("redemptionDetails" in data && data.redemptionDetails != undefined) {
                    this.redemptionDetails = data.redemptionDetails;
                }
            }
        }
        get productionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get productionUid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set productionUid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get orderNumber() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set orderNumber(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get redemptionDetails() {
            return pb_1.Message.getWrapperField(this, RedemptionDetails, 4) as RedemptionDetails;
        }
        set redemptionDetails(value: RedemptionDetails) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasRedemptionDetails() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            productionId?: string;
            productionUid?: string;
            orderNumber?: string;
            redemptionDetails?: ReturnType<typeof RedemptionDetails.prototype.toObject>;
        }): RedeemByOrderNumber {
            const message = new RedeemByOrderNumber({});
            if (data.productionId != null) {
                message.productionId = data.productionId;
            }
            if (data.productionUid != null) {
                message.productionUid = data.productionUid;
            }
            if (data.orderNumber != null) {
                message.orderNumber = data.orderNumber;
            }
            if (data.redemptionDetails != null) {
                message.redemptionDetails = RedemptionDetails.fromObject(data.redemptionDetails);
            }
            return message;
        }
        toObject() {
            const data: {
                productionId?: string;
                productionUid?: string;
                orderNumber?: string;
                redemptionDetails?: ReturnType<typeof RedemptionDetails.prototype.toObject>;
            } = {};
            if (this.productionId != null) {
                data.productionId = this.productionId;
            }
            if (this.productionUid != null) {
                data.productionUid = this.productionUid;
            }
            if (this.orderNumber != null) {
                data.orderNumber = this.orderNumber;
            }
            if (this.redemptionDetails != null) {
                data.redemptionDetails = this.redemptionDetails.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.productionId.length)
                writer.writeString(1, this.productionId);
            if (this.productionUid.length)
                writer.writeString(2, this.productionUid);
            if (this.orderNumber.length)
                writer.writeString(3, this.orderNumber);
            if (this.hasRedemptionDetails)
                writer.writeMessage(4, this.redemptionDetails, () => this.redemptionDetails.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RedeemByOrderNumber {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RedeemByOrderNumber();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productionId = reader.readString();
                        break;
                    case 2:
                        message.productionUid = reader.readString();
                        break;
                    case 3:
                        message.orderNumber = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.redemptionDetails, () => message.redemptionDetails = RedemptionDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RedeemByOrderNumber {
            return RedeemByOrderNumber.deserialize(bytes);
        }
    }
    export class Tickets extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tickets?: TicketLimitedFields[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tickets" in data && data.tickets != undefined) {
                    this.tickets = data.tickets;
                }
            }
        }
        get tickets() {
            return pb_1.Message.getRepeatedWrapperField(this, TicketLimitedFields, 1) as TicketLimitedFields[];
        }
        set tickets(value: TicketLimitedFields[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            tickets?: ReturnType<typeof TicketLimitedFields.prototype.toObject>[];
        }): Tickets {
            const message = new Tickets({});
            if (data.tickets != null) {
                message.tickets = data.tickets.map(item => TicketLimitedFields.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                tickets?: ReturnType<typeof TicketLimitedFields.prototype.toObject>[];
            } = {};
            if (this.tickets != null) {
                data.tickets = this.tickets.map((item: TicketLimitedFields) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tickets.length)
                writer.writeRepeatedMessage(1, this.tickets, (item: TicketLimitedFields) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Tickets {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Tickets();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tickets, () => pb_1.Message.addToRepeatedWrapperField(message, 1, TicketLimitedFields.deserialize(reader), TicketLimitedFields));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Tickets {
            return Tickets.deserialize(bytes);
        }
    }
    export class TicketPassBundles extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tickets?: dependency_4.io.PassBundle[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tickets" in data && data.tickets != undefined) {
                    this.tickets = data.tickets;
                }
            }
        }
        get tickets() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.io.PassBundle, 1) as dependency_4.io.PassBundle[];
        }
        set tickets(value: dependency_4.io.PassBundle[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            tickets?: ReturnType<typeof dependency_4.io.PassBundle.prototype.toObject>[];
        }): TicketPassBundles {
            const message = new TicketPassBundles({});
            if (data.tickets != null) {
                message.tickets = data.tickets.map(item => dependency_4.io.PassBundle.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                tickets?: ReturnType<typeof dependency_4.io.PassBundle.prototype.toObject>[];
            } = {};
            if (this.tickets != null) {
                data.tickets = this.tickets.map((item: dependency_4.io.PassBundle) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tickets.length)
                writer.writeRepeatedMessage(1, this.tickets, (item: dependency_4.io.PassBundle) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TicketPassBundles {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TicketPassBundles();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tickets, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.io.PassBundle.deserialize(reader), dependency_4.io.PassBundle));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TicketPassBundles {
            return TicketPassBundles.deserialize(bytes);
        }
    }
    export class ValidateTicketRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            maxNumberOfValidations?: number;
            ticket?: TicketId;
            validateDetails?: ValidateDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("maxNumberOfValidations" in data && data.maxNumberOfValidations != undefined) {
                    this.maxNumberOfValidations = data.maxNumberOfValidations;
                }
                if ("ticket" in data && data.ticket != undefined) {
                    this.ticket = data.ticket;
                }
                if ("validateDetails" in data && data.validateDetails != undefined) {
                    this.validateDetails = data.validateDetails;
                }
            }
        }
        get maxNumberOfValidations() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set maxNumberOfValidations(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get ticket() {
            return pb_1.Message.getWrapperField(this, TicketId, 2) as TicketId;
        }
        set ticket(value: TicketId) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasTicket() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get validateDetails() {
            return pb_1.Message.getWrapperField(this, ValidateDetails, 3) as ValidateDetails;
        }
        set validateDetails(value: ValidateDetails) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasValidateDetails() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            maxNumberOfValidations?: number;
            ticket?: ReturnType<typeof TicketId.prototype.toObject>;
            validateDetails?: ReturnType<typeof ValidateDetails.prototype.toObject>;
        }): ValidateTicketRequest {
            const message = new ValidateTicketRequest({});
            if (data.maxNumberOfValidations != null) {
                message.maxNumberOfValidations = data.maxNumberOfValidations;
            }
            if (data.ticket != null) {
                message.ticket = TicketId.fromObject(data.ticket);
            }
            if (data.validateDetails != null) {
                message.validateDetails = ValidateDetails.fromObject(data.validateDetails);
            }
            return message;
        }
        toObject() {
            const data: {
                maxNumberOfValidations?: number;
                ticket?: ReturnType<typeof TicketId.prototype.toObject>;
                validateDetails?: ReturnType<typeof ValidateDetails.prototype.toObject>;
            } = {};
            if (this.maxNumberOfValidations != null) {
                data.maxNumberOfValidations = this.maxNumberOfValidations;
            }
            if (this.ticket != null) {
                data.ticket = this.ticket.toObject();
            }
            if (this.validateDetails != null) {
                data.validateDetails = this.validateDetails.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.maxNumberOfValidations != 0)
                writer.writeUint32(1, this.maxNumberOfValidations);
            if (this.hasTicket)
                writer.writeMessage(2, this.ticket, () => this.ticket.serialize(writer));
            if (this.hasValidateDetails)
                writer.writeMessage(3, this.validateDetails, () => this.validateDetails.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateTicketRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateTicketRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.maxNumberOfValidations = reader.readUint32();
                        break;
                    case 2:
                        reader.readMessage(message.ticket, () => message.ticket = TicketId.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.validateDetails, () => message.validateDetails = ValidateDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateTicketRequest {
            return ValidateTicketRequest.deserialize(bytes);
        }
    }
    export class ValidateTicketResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            valid?: boolean;
            ticket?: Ticket;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("valid" in data && data.valid != undefined) {
                    this.valid = data.valid;
                }
                if ("ticket" in data && data.ticket != undefined) {
                    this.ticket = data.ticket;
                }
            }
        }
        get valid() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set valid(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get ticket() {
            return pb_1.Message.getWrapperField(this, Ticket, 2) as Ticket;
        }
        set ticket(value: Ticket) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasTicket() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            valid?: boolean;
            ticket?: ReturnType<typeof Ticket.prototype.toObject>;
        }): ValidateTicketResponse {
            const message = new ValidateTicketResponse({});
            if (data.valid != null) {
                message.valid = data.valid;
            }
            if (data.ticket != null) {
                message.ticket = Ticket.fromObject(data.ticket);
            }
            return message;
        }
        toObject() {
            const data: {
                valid?: boolean;
                ticket?: ReturnType<typeof Ticket.prototype.toObject>;
            } = {};
            if (this.valid != null) {
                data.valid = this.valid;
            }
            if (this.ticket != null) {
                data.ticket = this.ticket.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.valid != false)
                writer.writeBool(1, this.valid);
            if (this.hasTicket)
                writer.writeMessage(2, this.ticket, () => this.ticket.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateTicketResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateTicketResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.valid = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.ticket, () => message.ticket = Ticket.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ValidateTicketResponse {
            return ValidateTicketResponse.deserialize(bytes);
        }
    }
    export class RedeemTicketRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ticket?: TicketId;
            redemptionDetails?: RedemptionDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ticket" in data && data.ticket != undefined) {
                    this.ticket = data.ticket;
                }
                if ("redemptionDetails" in data && data.redemptionDetails != undefined) {
                    this.redemptionDetails = data.redemptionDetails;
                }
            }
        }
        get ticket() {
            return pb_1.Message.getWrapperField(this, TicketId, 1) as TicketId;
        }
        set ticket(value: TicketId) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasTicket() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get redemptionDetails() {
            return pb_1.Message.getWrapperField(this, RedemptionDetails, 3) as RedemptionDetails;
        }
        set redemptionDetails(value: RedemptionDetails) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasRedemptionDetails() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            ticket?: ReturnType<typeof TicketId.prototype.toObject>;
            redemptionDetails?: ReturnType<typeof RedemptionDetails.prototype.toObject>;
        }): RedeemTicketRequest {
            const message = new RedeemTicketRequest({});
            if (data.ticket != null) {
                message.ticket = TicketId.fromObject(data.ticket);
            }
            if (data.redemptionDetails != null) {
                message.redemptionDetails = RedemptionDetails.fromObject(data.redemptionDetails);
            }
            return message;
        }
        toObject() {
            const data: {
                ticket?: ReturnType<typeof TicketId.prototype.toObject>;
                redemptionDetails?: ReturnType<typeof RedemptionDetails.prototype.toObject>;
            } = {};
            if (this.ticket != null) {
                data.ticket = this.ticket.toObject();
            }
            if (this.redemptionDetails != null) {
                data.redemptionDetails = this.redemptionDetails.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasTicket)
                writer.writeMessage(1, this.ticket, () => this.ticket.serialize(writer));
            if (this.hasRedemptionDetails)
                writer.writeMessage(3, this.redemptionDetails, () => this.redemptionDetails.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RedeemTicketRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RedeemTicketRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ticket, () => message.ticket = TicketId.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.redemptionDetails, () => message.redemptionDetails = RedemptionDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RedeemTicketRequest {
            return RedeemTicketRequest.deserialize(bytes);
        }
    }
    export class TicketLimitedFields extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            ticketNumber?: string;
            production?: dependency_11.event_tickets.ProductionLimitedFieldsResponse;
            event?: dependency_9.event_tickets.EventLimitedFieldsResponse;
            venue?: dependency_8.event_tickets.VenueLimitedFieldsResponse;
            ticketType?: dependency_10.event_tickets.TicketTypeLimitedFields;
            orderNumber?: string;
            groupingId?: string;
            barcodeContents?: string;
            seatInfo?: Seat;
            faceValue?: FaceValue;
            person?: dependency_6.io.Person;
            metaData?: Map<string, string>;
            optOut?: boolean;
            status?: TicketStatus;
            expiryDate?: dependency_1.google.protobuf.Timestamp;
            redemptionDetails?: RedemptionDetails;
            validateDetails?: ValidateDetails[];
            passOverrides?: dependency_5.io.PassOverrides;
            passMetaData?: dependency_3.io.Metadata;
            created?: dependency_1.google.protobuf.Timestamp;
            updated?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [18], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("ticketNumber" in data && data.ticketNumber != undefined) {
                    this.ticketNumber = data.ticketNumber;
                }
                if ("production" in data && data.production != undefined) {
                    this.production = data.production;
                }
                if ("event" in data && data.event != undefined) {
                    this.event = data.event;
                }
                if ("venue" in data && data.venue != undefined) {
                    this.venue = data.venue;
                }
                if ("ticketType" in data && data.ticketType != undefined) {
                    this.ticketType = data.ticketType;
                }
                if ("orderNumber" in data && data.orderNumber != undefined) {
                    this.orderNumber = data.orderNumber;
                }
                if ("groupingId" in data && data.groupingId != undefined) {
                    this.groupingId = data.groupingId;
                }
                if ("barcodeContents" in data && data.barcodeContents != undefined) {
                    this.barcodeContents = data.barcodeContents;
                }
                if ("seatInfo" in data && data.seatInfo != undefined) {
                    this.seatInfo = data.seatInfo;
                }
                if ("faceValue" in data && data.faceValue != undefined) {
                    this.faceValue = data.faceValue;
                }
                if ("person" in data && data.person != undefined) {
                    this.person = data.person;
                }
                if ("metaData" in data && data.metaData != undefined) {
                    this.metaData = data.metaData;
                }
                if ("optOut" in data && data.optOut != undefined) {
                    this.optOut = data.optOut;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("expiryDate" in data && data.expiryDate != undefined) {
                    this.expiryDate = data.expiryDate;
                }
                if ("redemptionDetails" in data && data.redemptionDetails != undefined) {
                    this.redemptionDetails = data.redemptionDetails;
                }
                if ("validateDetails" in data && data.validateDetails != undefined) {
                    this.validateDetails = data.validateDetails;
                }
                if ("passOverrides" in data && data.passOverrides != undefined) {
                    this.passOverrides = data.passOverrides;
                }
                if ("passMetaData" in data && data.passMetaData != undefined) {
                    this.passMetaData = data.passMetaData;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
            }
            if (!this.metaData)
                this.metaData = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ticketNumber() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ticketNumber(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get production() {
            return pb_1.Message.getWrapperField(this, dependency_11.event_tickets.ProductionLimitedFieldsResponse, 3) as dependency_11.event_tickets.ProductionLimitedFieldsResponse;
        }
        set production(value: dependency_11.event_tickets.ProductionLimitedFieldsResponse) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasProduction() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get event() {
            return pb_1.Message.getWrapperField(this, dependency_9.event_tickets.EventLimitedFieldsResponse, 4) as dependency_9.event_tickets.EventLimitedFieldsResponse;
        }
        set event(value: dependency_9.event_tickets.EventLimitedFieldsResponse) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasEvent() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get venue() {
            return pb_1.Message.getWrapperField(this, dependency_8.event_tickets.VenueLimitedFieldsResponse, 5) as dependency_8.event_tickets.VenueLimitedFieldsResponse;
        }
        set venue(value: dependency_8.event_tickets.VenueLimitedFieldsResponse) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasVenue() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get ticketType() {
            return pb_1.Message.getWrapperField(this, dependency_10.event_tickets.TicketTypeLimitedFields, 6) as dependency_10.event_tickets.TicketTypeLimitedFields;
        }
        set ticketType(value: dependency_10.event_tickets.TicketTypeLimitedFields) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasTicketType() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get orderNumber() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set orderNumber(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get groupingId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set groupingId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get barcodeContents() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set barcodeContents(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get seatInfo() {
            return pb_1.Message.getWrapperField(this, Seat, 10) as Seat;
        }
        set seatInfo(value: Seat) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasSeatInfo() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get faceValue() {
            return pb_1.Message.getWrapperField(this, FaceValue, 11) as FaceValue;
        }
        set faceValue(value: FaceValue) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasFaceValue() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get person() {
            return pb_1.Message.getWrapperField(this, dependency_6.io.Person, 12) as dependency_6.io.Person;
        }
        set person(value: dependency_6.io.Person) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get hasPerson() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get metaData() {
            return pb_1.Message.getField(this, 13) as any as Map<string, string>;
        }
        set metaData(value: Map<string, string>) {
            pb_1.Message.setField(this, 13, value as any);
        }
        get optOut() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set optOut(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 15, TicketStatus.STATUS_NONE) as TicketStatus;
        }
        set status(value: TicketStatus) {
            pb_1.Message.setField(this, 15, value);
        }
        get expiryDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 16) as dependency_1.google.protobuf.Timestamp;
        }
        set expiryDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get hasExpiryDate() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get redemptionDetails() {
            return pb_1.Message.getWrapperField(this, RedemptionDetails, 17) as RedemptionDetails;
        }
        set redemptionDetails(value: RedemptionDetails) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get hasRedemptionDetails() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get validateDetails() {
            return pb_1.Message.getRepeatedWrapperField(this, ValidateDetails, 18) as ValidateDetails[];
        }
        set validateDetails(value: ValidateDetails[]) {
            pb_1.Message.setRepeatedWrapperField(this, 18, value);
        }
        get passOverrides() {
            return pb_1.Message.getWrapperField(this, dependency_5.io.PassOverrides, 19) as dependency_5.io.PassOverrides;
        }
        set passOverrides(value: dependency_5.io.PassOverrides) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get hasPassOverrides() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get passMetaData() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.Metadata, 20) as dependency_3.io.Metadata;
        }
        set passMetaData(value: dependency_3.io.Metadata) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get hasPassMetaData() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 21) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 21, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 22) as dependency_1.google.protobuf.Timestamp;
        }
        set updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 22, value);
        }
        get hasUpdated() {
            return pb_1.Message.getField(this, 22) != null;
        }
        static fromObject(data: {
            id?: string;
            ticketNumber?: string;
            production?: ReturnType<typeof dependency_11.event_tickets.ProductionLimitedFieldsResponse.prototype.toObject>;
            event?: ReturnType<typeof dependency_9.event_tickets.EventLimitedFieldsResponse.prototype.toObject>;
            venue?: ReturnType<typeof dependency_8.event_tickets.VenueLimitedFieldsResponse.prototype.toObject>;
            ticketType?: ReturnType<typeof dependency_10.event_tickets.TicketTypeLimitedFields.prototype.toObject>;
            orderNumber?: string;
            groupingId?: string;
            barcodeContents?: string;
            seatInfo?: ReturnType<typeof Seat.prototype.toObject>;
            faceValue?: ReturnType<typeof FaceValue.prototype.toObject>;
            person?: ReturnType<typeof dependency_6.io.Person.prototype.toObject>;
            metaData?: {
                [key: string]: string;
            };
            optOut?: boolean;
            status?: TicketStatus;
            expiryDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            redemptionDetails?: ReturnType<typeof RedemptionDetails.prototype.toObject>;
            validateDetails?: ReturnType<typeof ValidateDetails.prototype.toObject>[];
            passOverrides?: ReturnType<typeof dependency_5.io.PassOverrides.prototype.toObject>;
            passMetaData?: ReturnType<typeof dependency_3.io.Metadata.prototype.toObject>;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): TicketLimitedFields {
            const message = new TicketLimitedFields({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.ticketNumber != null) {
                message.ticketNumber = data.ticketNumber;
            }
            if (data.production != null) {
                message.production = dependency_11.event_tickets.ProductionLimitedFieldsResponse.fromObject(data.production);
            }
            if (data.event != null) {
                message.event = dependency_9.event_tickets.EventLimitedFieldsResponse.fromObject(data.event);
            }
            if (data.venue != null) {
                message.venue = dependency_8.event_tickets.VenueLimitedFieldsResponse.fromObject(data.venue);
            }
            if (data.ticketType != null) {
                message.ticketType = dependency_10.event_tickets.TicketTypeLimitedFields.fromObject(data.ticketType);
            }
            if (data.orderNumber != null) {
                message.orderNumber = data.orderNumber;
            }
            if (data.groupingId != null) {
                message.groupingId = data.groupingId;
            }
            if (data.barcodeContents != null) {
                message.barcodeContents = data.barcodeContents;
            }
            if (data.seatInfo != null) {
                message.seatInfo = Seat.fromObject(data.seatInfo);
            }
            if (data.faceValue != null) {
                message.faceValue = FaceValue.fromObject(data.faceValue);
            }
            if (data.person != null) {
                message.person = dependency_6.io.Person.fromObject(data.person);
            }
            if (typeof data.metaData == "object") {
                message.metaData = new Map(Object.entries(data.metaData));
            }
            if (data.optOut != null) {
                message.optOut = data.optOut;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.expiryDate != null) {
                message.expiryDate = dependency_1.google.protobuf.Timestamp.fromObject(data.expiryDate);
            }
            if (data.redemptionDetails != null) {
                message.redemptionDetails = RedemptionDetails.fromObject(data.redemptionDetails);
            }
            if (data.validateDetails != null) {
                message.validateDetails = data.validateDetails.map(item => ValidateDetails.fromObject(item));
            }
            if (data.passOverrides != null) {
                message.passOverrides = dependency_5.io.PassOverrides.fromObject(data.passOverrides);
            }
            if (data.passMetaData != null) {
                message.passMetaData = dependency_3.io.Metadata.fromObject(data.passMetaData);
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_1.google.protobuf.Timestamp.fromObject(data.updated);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                ticketNumber?: string;
                production?: ReturnType<typeof dependency_11.event_tickets.ProductionLimitedFieldsResponse.prototype.toObject>;
                event?: ReturnType<typeof dependency_9.event_tickets.EventLimitedFieldsResponse.prototype.toObject>;
                venue?: ReturnType<typeof dependency_8.event_tickets.VenueLimitedFieldsResponse.prototype.toObject>;
                ticketType?: ReturnType<typeof dependency_10.event_tickets.TicketTypeLimitedFields.prototype.toObject>;
                orderNumber?: string;
                groupingId?: string;
                barcodeContents?: string;
                seatInfo?: ReturnType<typeof Seat.prototype.toObject>;
                faceValue?: ReturnType<typeof FaceValue.prototype.toObject>;
                person?: ReturnType<typeof dependency_6.io.Person.prototype.toObject>;
                metaData?: {
                    [key: string]: string;
                };
                optOut?: boolean;
                status?: TicketStatus;
                expiryDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                redemptionDetails?: ReturnType<typeof RedemptionDetails.prototype.toObject>;
                validateDetails?: ReturnType<typeof ValidateDetails.prototype.toObject>[];
                passOverrides?: ReturnType<typeof dependency_5.io.PassOverrides.prototype.toObject>;
                passMetaData?: ReturnType<typeof dependency_3.io.Metadata.prototype.toObject>;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.ticketNumber != null) {
                data.ticketNumber = this.ticketNumber;
            }
            if (this.production != null) {
                data.production = this.production.toObject();
            }
            if (this.event != null) {
                data.event = this.event.toObject();
            }
            if (this.venue != null) {
                data.venue = this.venue.toObject();
            }
            if (this.ticketType != null) {
                data.ticketType = this.ticketType.toObject();
            }
            if (this.orderNumber != null) {
                data.orderNumber = this.orderNumber;
            }
            if (this.groupingId != null) {
                data.groupingId = this.groupingId;
            }
            if (this.barcodeContents != null) {
                data.barcodeContents = this.barcodeContents;
            }
            if (this.seatInfo != null) {
                data.seatInfo = this.seatInfo.toObject();
            }
            if (this.faceValue != null) {
                data.faceValue = this.faceValue.toObject();
            }
            if (this.person != null) {
                data.person = this.person.toObject();
            }
            if (this.metaData != null) {
                data.metaData = (Object.fromEntries)(this.metaData);
            }
            if (this.optOut != null) {
                data.optOut = this.optOut;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.expiryDate != null) {
                data.expiryDate = this.expiryDate.toObject();
            }
            if (this.redemptionDetails != null) {
                data.redemptionDetails = this.redemptionDetails.toObject();
            }
            if (this.validateDetails != null) {
                data.validateDetails = this.validateDetails.map((item: ValidateDetails) => item.toObject());
            }
            if (this.passOverrides != null) {
                data.passOverrides = this.passOverrides.toObject();
            }
            if (this.passMetaData != null) {
                data.passMetaData = this.passMetaData.toObject();
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.ticketNumber.length)
                writer.writeString(2, this.ticketNumber);
            if (this.hasProduction)
                writer.writeMessage(3, this.production, () => this.production.serialize(writer));
            if (this.hasEvent)
                writer.writeMessage(4, this.event, () => this.event.serialize(writer));
            if (this.hasVenue)
                writer.writeMessage(5, this.venue, () => this.venue.serialize(writer));
            if (this.hasTicketType)
                writer.writeMessage(6, this.ticketType, () => this.ticketType.serialize(writer));
            if (this.orderNumber.length)
                writer.writeString(7, this.orderNumber);
            if (this.groupingId.length)
                writer.writeString(8, this.groupingId);
            if (this.barcodeContents.length)
                writer.writeString(9, this.barcodeContents);
            if (this.hasSeatInfo)
                writer.writeMessage(10, this.seatInfo, () => this.seatInfo.serialize(writer));
            if (this.hasFaceValue)
                writer.writeMessage(11, this.faceValue, () => this.faceValue.serialize(writer));
            if (this.hasPerson)
                writer.writeMessage(12, this.person, () => this.person.serialize(writer));
            for (const [key, value] of this.metaData) {
                writer.writeMessage(13, this.metaData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.optOut != false)
                writer.writeBool(14, this.optOut);
            if (this.status != TicketStatus.STATUS_NONE)
                writer.writeEnum(15, this.status);
            if (this.hasExpiryDate)
                writer.writeMessage(16, this.expiryDate, () => this.expiryDate.serialize(writer));
            if (this.hasRedemptionDetails)
                writer.writeMessage(17, this.redemptionDetails, () => this.redemptionDetails.serialize(writer));
            if (this.validateDetails.length)
                writer.writeRepeatedMessage(18, this.validateDetails, (item: ValidateDetails) => item.serialize(writer));
            if (this.hasPassOverrides)
                writer.writeMessage(19, this.passOverrides, () => this.passOverrides.serialize(writer));
            if (this.hasPassMetaData)
                writer.writeMessage(20, this.passMetaData, () => this.passMetaData.serialize(writer));
            if (this.hasCreated)
                writer.writeMessage(21, this.created, () => this.created.serialize(writer));
            if (this.hasUpdated)
                writer.writeMessage(22, this.updated, () => this.updated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TicketLimitedFields {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TicketLimitedFields();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.ticketNumber = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.production, () => message.production = dependency_11.event_tickets.ProductionLimitedFieldsResponse.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.event, () => message.event = dependency_9.event_tickets.EventLimitedFieldsResponse.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.venue, () => message.venue = dependency_8.event_tickets.VenueLimitedFieldsResponse.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.ticketType, () => message.ticketType = dependency_10.event_tickets.TicketTypeLimitedFields.deserialize(reader));
                        break;
                    case 7:
                        message.orderNumber = reader.readString();
                        break;
                    case 8:
                        message.groupingId = reader.readString();
                        break;
                    case 9:
                        message.barcodeContents = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.seatInfo, () => message.seatInfo = Seat.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.faceValue, () => message.faceValue = FaceValue.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.person, () => message.person = dependency_6.io.Person.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metaData as any, reader, reader.readString, reader.readString));
                        break;
                    case 14:
                        message.optOut = reader.readBool();
                        break;
                    case 15:
                        message.status = reader.readEnum();
                        break;
                    case 16:
                        reader.readMessage(message.expiryDate, () => message.expiryDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.redemptionDetails, () => message.redemptionDetails = RedemptionDetails.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.validateDetails, () => pb_1.Message.addToRepeatedWrapperField(message, 18, ValidateDetails.deserialize(reader), ValidateDetails));
                        break;
                    case 19:
                        reader.readMessage(message.passOverrides, () => message.passOverrides = dependency_5.io.PassOverrides.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.passMetaData, () => message.passMetaData = dependency_3.io.Metadata.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 22:
                        reader.readMessage(message.updated, () => message.updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TicketLimitedFields {
            return TicketLimitedFields.deserialize(bytes);
        }
    }
    export class IssueTicketRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            ticketTypeId?: string;
            ticketNumber?: string;
            orderNumber?: string;
            groupingId?: string;
            barcodeContents?: string;
            seatInfo?: Seat;
            faceValue?: FaceValue;
            person?: dependency_6.io.Person;
            metaData?: Map<string, string>;
            optOut?: boolean;
            status?: TicketStatus;
            expiryDate?: dependency_1.google.protobuf.Timestamp;
            redemptionDetails?: RedemptionDetails;
            validateDetails?: ValidateDetails[];
            passOverrides?: dependency_5.io.PassOverrides;
            passMetaData?: dependency_3.io.Metadata;
            created?: dependency_1.google.protobuf.Timestamp;
            updated?: dependency_1.google.protobuf.Timestamp;
        } & (({
            eventId?: string;
            event?: never;
        } | {
            eventId?: never;
            event?: dependency_9.event_tickets.EventLimitedFieldsRequest;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [16], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("eventId" in data && data.eventId != undefined) {
                    this.eventId = data.eventId;
                }
                if ("event" in data && data.event != undefined) {
                    this.event = data.event;
                }
                if ("ticketTypeId" in data && data.ticketTypeId != undefined) {
                    this.ticketTypeId = data.ticketTypeId;
                }
                if ("ticketNumber" in data && data.ticketNumber != undefined) {
                    this.ticketNumber = data.ticketNumber;
                }
                if ("orderNumber" in data && data.orderNumber != undefined) {
                    this.orderNumber = data.orderNumber;
                }
                if ("groupingId" in data && data.groupingId != undefined) {
                    this.groupingId = data.groupingId;
                }
                if ("barcodeContents" in data && data.barcodeContents != undefined) {
                    this.barcodeContents = data.barcodeContents;
                }
                if ("seatInfo" in data && data.seatInfo != undefined) {
                    this.seatInfo = data.seatInfo;
                }
                if ("faceValue" in data && data.faceValue != undefined) {
                    this.faceValue = data.faceValue;
                }
                if ("person" in data && data.person != undefined) {
                    this.person = data.person;
                }
                if ("metaData" in data && data.metaData != undefined) {
                    this.metaData = data.metaData;
                }
                if ("optOut" in data && data.optOut != undefined) {
                    this.optOut = data.optOut;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("expiryDate" in data && data.expiryDate != undefined) {
                    this.expiryDate = data.expiryDate;
                }
                if ("redemptionDetails" in data && data.redemptionDetails != undefined) {
                    this.redemptionDetails = data.redemptionDetails;
                }
                if ("validateDetails" in data && data.validateDetails != undefined) {
                    this.validateDetails = data.validateDetails;
                }
                if ("passOverrides" in data && data.passOverrides != undefined) {
                    this.passOverrides = data.passOverrides;
                }
                if ("passMetaData" in data && data.passMetaData != undefined) {
                    this.passMetaData = data.passMetaData;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
            }
            if (!this.metaData)
                this.metaData = new Map();
        }
        get eventId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set eventId(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get hasEventId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get event() {
            return pb_1.Message.getWrapperField(this, dependency_9.event_tickets.EventLimitedFieldsRequest, 2) as dependency_9.event_tickets.EventLimitedFieldsRequest;
        }
        set event(value: dependency_9.event_tickets.EventLimitedFieldsRequest) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get hasEvent() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get ticketTypeId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ticketTypeId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ticketNumber() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ticketNumber(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get orderNumber() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set orderNumber(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get groupingId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set groupingId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get barcodeContents() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set barcodeContents(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get seatInfo() {
            return pb_1.Message.getWrapperField(this, Seat, 8) as Seat;
        }
        set seatInfo(value: Seat) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasSeatInfo() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get faceValue() {
            return pb_1.Message.getWrapperField(this, FaceValue, 9) as FaceValue;
        }
        set faceValue(value: FaceValue) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasFaceValue() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get person() {
            return pb_1.Message.getWrapperField(this, dependency_6.io.Person, 10) as dependency_6.io.Person;
        }
        set person(value: dependency_6.io.Person) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasPerson() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get metaData() {
            return pb_1.Message.getField(this, 11) as any as Map<string, string>;
        }
        set metaData(value: Map<string, string>) {
            pb_1.Message.setField(this, 11, value as any);
        }
        get optOut() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set optOut(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 13, TicketStatus.STATUS_NONE) as TicketStatus;
        }
        set status(value: TicketStatus) {
            pb_1.Message.setField(this, 13, value);
        }
        get expiryDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 14) as dependency_1.google.protobuf.Timestamp;
        }
        set expiryDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get hasExpiryDate() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get redemptionDetails() {
            return pb_1.Message.getWrapperField(this, RedemptionDetails, 15) as RedemptionDetails;
        }
        set redemptionDetails(value: RedemptionDetails) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get hasRedemptionDetails() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get validateDetails() {
            return pb_1.Message.getRepeatedWrapperField(this, ValidateDetails, 16) as ValidateDetails[];
        }
        set validateDetails(value: ValidateDetails[]) {
            pb_1.Message.setRepeatedWrapperField(this, 16, value);
        }
        get passOverrides() {
            return pb_1.Message.getWrapperField(this, dependency_5.io.PassOverrides, 17) as dependency_5.io.PassOverrides;
        }
        set passOverrides(value: dependency_5.io.PassOverrides) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get hasPassOverrides() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get passMetaData() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.Metadata, 18) as dependency_3.io.Metadata;
        }
        set passMetaData(value: dependency_3.io.Metadata) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get hasPassMetaData() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 19) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 20) as dependency_1.google.protobuf.Timestamp;
        }
        set updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get hasUpdated() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get eventInfo() {
            const cases: {
                [index: number]: "none" | "eventId" | "event";
            } = {
                0: "none",
                1: "eventId",
                2: "event"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            eventId?: string;
            event?: ReturnType<typeof dependency_9.event_tickets.EventLimitedFieldsRequest.prototype.toObject>;
            ticketTypeId?: string;
            ticketNumber?: string;
            orderNumber?: string;
            groupingId?: string;
            barcodeContents?: string;
            seatInfo?: ReturnType<typeof Seat.prototype.toObject>;
            faceValue?: ReturnType<typeof FaceValue.prototype.toObject>;
            person?: ReturnType<typeof dependency_6.io.Person.prototype.toObject>;
            metaData?: {
                [key: string]: string;
            };
            optOut?: boolean;
            status?: TicketStatus;
            expiryDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            redemptionDetails?: ReturnType<typeof RedemptionDetails.prototype.toObject>;
            validateDetails?: ReturnType<typeof ValidateDetails.prototype.toObject>[];
            passOverrides?: ReturnType<typeof dependency_5.io.PassOverrides.prototype.toObject>;
            passMetaData?: ReturnType<typeof dependency_3.io.Metadata.prototype.toObject>;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): IssueTicketRequest {
            const message = new IssueTicketRequest({});
            if (data.eventId != null) {
                message.eventId = data.eventId;
            }
            if (data.event != null) {
                message.event = dependency_9.event_tickets.EventLimitedFieldsRequest.fromObject(data.event);
            }
            if (data.ticketTypeId != null) {
                message.ticketTypeId = data.ticketTypeId;
            }
            if (data.ticketNumber != null) {
                message.ticketNumber = data.ticketNumber;
            }
            if (data.orderNumber != null) {
                message.orderNumber = data.orderNumber;
            }
            if (data.groupingId != null) {
                message.groupingId = data.groupingId;
            }
            if (data.barcodeContents != null) {
                message.barcodeContents = data.barcodeContents;
            }
            if (data.seatInfo != null) {
                message.seatInfo = Seat.fromObject(data.seatInfo);
            }
            if (data.faceValue != null) {
                message.faceValue = FaceValue.fromObject(data.faceValue);
            }
            if (data.person != null) {
                message.person = dependency_6.io.Person.fromObject(data.person);
            }
            if (typeof data.metaData == "object") {
                message.metaData = new Map(Object.entries(data.metaData));
            }
            if (data.optOut != null) {
                message.optOut = data.optOut;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.expiryDate != null) {
                message.expiryDate = dependency_1.google.protobuf.Timestamp.fromObject(data.expiryDate);
            }
            if (data.redemptionDetails != null) {
                message.redemptionDetails = RedemptionDetails.fromObject(data.redemptionDetails);
            }
            if (data.validateDetails != null) {
                message.validateDetails = data.validateDetails.map(item => ValidateDetails.fromObject(item));
            }
            if (data.passOverrides != null) {
                message.passOverrides = dependency_5.io.PassOverrides.fromObject(data.passOverrides);
            }
            if (data.passMetaData != null) {
                message.passMetaData = dependency_3.io.Metadata.fromObject(data.passMetaData);
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_1.google.protobuf.Timestamp.fromObject(data.updated);
            }
            return message;
        }
        toObject() {
            const data: {
                eventId?: string;
                event?: ReturnType<typeof dependency_9.event_tickets.EventLimitedFieldsRequest.prototype.toObject>;
                ticketTypeId?: string;
                ticketNumber?: string;
                orderNumber?: string;
                groupingId?: string;
                barcodeContents?: string;
                seatInfo?: ReturnType<typeof Seat.prototype.toObject>;
                faceValue?: ReturnType<typeof FaceValue.prototype.toObject>;
                person?: ReturnType<typeof dependency_6.io.Person.prototype.toObject>;
                metaData?: {
                    [key: string]: string;
                };
                optOut?: boolean;
                status?: TicketStatus;
                expiryDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                redemptionDetails?: ReturnType<typeof RedemptionDetails.prototype.toObject>;
                validateDetails?: ReturnType<typeof ValidateDetails.prototype.toObject>[];
                passOverrides?: ReturnType<typeof dependency_5.io.PassOverrides.prototype.toObject>;
                passMetaData?: ReturnType<typeof dependency_3.io.Metadata.prototype.toObject>;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.eventId != null) {
                data.eventId = this.eventId;
            }
            if (this.event != null) {
                data.event = this.event.toObject();
            }
            if (this.ticketTypeId != null) {
                data.ticketTypeId = this.ticketTypeId;
            }
            if (this.ticketNumber != null) {
                data.ticketNumber = this.ticketNumber;
            }
            if (this.orderNumber != null) {
                data.orderNumber = this.orderNumber;
            }
            if (this.groupingId != null) {
                data.groupingId = this.groupingId;
            }
            if (this.barcodeContents != null) {
                data.barcodeContents = this.barcodeContents;
            }
            if (this.seatInfo != null) {
                data.seatInfo = this.seatInfo.toObject();
            }
            if (this.faceValue != null) {
                data.faceValue = this.faceValue.toObject();
            }
            if (this.person != null) {
                data.person = this.person.toObject();
            }
            if (this.metaData != null) {
                data.metaData = (Object.fromEntries)(this.metaData);
            }
            if (this.optOut != null) {
                data.optOut = this.optOut;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.expiryDate != null) {
                data.expiryDate = this.expiryDate.toObject();
            }
            if (this.redemptionDetails != null) {
                data.redemptionDetails = this.redemptionDetails.toObject();
            }
            if (this.validateDetails != null) {
                data.validateDetails = this.validateDetails.map((item: ValidateDetails) => item.toObject());
            }
            if (this.passOverrides != null) {
                data.passOverrides = this.passOverrides.toObject();
            }
            if (this.passMetaData != null) {
                data.passMetaData = this.passMetaData.toObject();
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasEventId)
                writer.writeString(1, this.eventId);
            if (this.hasEvent)
                writer.writeMessage(2, this.event, () => this.event.serialize(writer));
            if (this.ticketTypeId.length)
                writer.writeString(3, this.ticketTypeId);
            if (this.ticketNumber.length)
                writer.writeString(4, this.ticketNumber);
            if (this.orderNumber.length)
                writer.writeString(5, this.orderNumber);
            if (this.groupingId.length)
                writer.writeString(6, this.groupingId);
            if (this.barcodeContents.length)
                writer.writeString(7, this.barcodeContents);
            if (this.hasSeatInfo)
                writer.writeMessage(8, this.seatInfo, () => this.seatInfo.serialize(writer));
            if (this.hasFaceValue)
                writer.writeMessage(9, this.faceValue, () => this.faceValue.serialize(writer));
            if (this.hasPerson)
                writer.writeMessage(10, this.person, () => this.person.serialize(writer));
            for (const [key, value] of this.metaData) {
                writer.writeMessage(11, this.metaData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.optOut != false)
                writer.writeBool(12, this.optOut);
            if (this.status != TicketStatus.STATUS_NONE)
                writer.writeEnum(13, this.status);
            if (this.hasExpiryDate)
                writer.writeMessage(14, this.expiryDate, () => this.expiryDate.serialize(writer));
            if (this.hasRedemptionDetails)
                writer.writeMessage(15, this.redemptionDetails, () => this.redemptionDetails.serialize(writer));
            if (this.validateDetails.length)
                writer.writeRepeatedMessage(16, this.validateDetails, (item: ValidateDetails) => item.serialize(writer));
            if (this.hasPassOverrides)
                writer.writeMessage(17, this.passOverrides, () => this.passOverrides.serialize(writer));
            if (this.hasPassMetaData)
                writer.writeMessage(18, this.passMetaData, () => this.passMetaData.serialize(writer));
            if (this.hasCreated)
                writer.writeMessage(19, this.created, () => this.created.serialize(writer));
            if (this.hasUpdated)
                writer.writeMessage(20, this.updated, () => this.updated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IssueTicketRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IssueTicketRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.eventId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.event, () => message.event = dependency_9.event_tickets.EventLimitedFieldsRequest.deserialize(reader));
                        break;
                    case 3:
                        message.ticketTypeId = reader.readString();
                        break;
                    case 4:
                        message.ticketNumber = reader.readString();
                        break;
                    case 5:
                        message.orderNumber = reader.readString();
                        break;
                    case 6:
                        message.groupingId = reader.readString();
                        break;
                    case 7:
                        message.barcodeContents = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.seatInfo, () => message.seatInfo = Seat.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.faceValue, () => message.faceValue = FaceValue.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.person, () => message.person = dependency_6.io.Person.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metaData as any, reader, reader.readString, reader.readString));
                        break;
                    case 12:
                        message.optOut = reader.readBool();
                        break;
                    case 13:
                        message.status = reader.readEnum();
                        break;
                    case 14:
                        reader.readMessage(message.expiryDate, () => message.expiryDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.redemptionDetails, () => message.redemptionDetails = RedemptionDetails.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.validateDetails, () => pb_1.Message.addToRepeatedWrapperField(message, 16, ValidateDetails.deserialize(reader), ValidateDetails));
                        break;
                    case 17:
                        reader.readMessage(message.passOverrides, () => message.passOverrides = dependency_5.io.PassOverrides.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.passMetaData, () => message.passMetaData = dependency_3.io.Metadata.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.updated, () => message.updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IssueTicketRequest {
            return IssueTicketRequest.deserialize(bytes);
        }
    }
    export class IssueTicketResponseIds extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ticketId?: string;
            productionId?: string;
            venueId?: string;
            ticketTypeId?: string;
            eventId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ticketId" in data && data.ticketId != undefined) {
                    this.ticketId = data.ticketId;
                }
                if ("productionId" in data && data.productionId != undefined) {
                    this.productionId = data.productionId;
                }
                if ("venueId" in data && data.venueId != undefined) {
                    this.venueId = data.venueId;
                }
                if ("ticketTypeId" in data && data.ticketTypeId != undefined) {
                    this.ticketTypeId = data.ticketTypeId;
                }
                if ("eventId" in data && data.eventId != undefined) {
                    this.eventId = data.eventId;
                }
            }
        }
        get ticketId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ticketId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get productionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set productionId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get venueId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set venueId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get ticketTypeId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ticketTypeId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get eventId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set eventId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            ticketId?: string;
            productionId?: string;
            venueId?: string;
            ticketTypeId?: string;
            eventId?: string;
        }): IssueTicketResponseIds {
            const message = new IssueTicketResponseIds({});
            if (data.ticketId != null) {
                message.ticketId = data.ticketId;
            }
            if (data.productionId != null) {
                message.productionId = data.productionId;
            }
            if (data.venueId != null) {
                message.venueId = data.venueId;
            }
            if (data.ticketTypeId != null) {
                message.ticketTypeId = data.ticketTypeId;
            }
            if (data.eventId != null) {
                message.eventId = data.eventId;
            }
            return message;
        }
        toObject() {
            const data: {
                ticketId?: string;
                productionId?: string;
                venueId?: string;
                ticketTypeId?: string;
                eventId?: string;
            } = {};
            if (this.ticketId != null) {
                data.ticketId = this.ticketId;
            }
            if (this.productionId != null) {
                data.productionId = this.productionId;
            }
            if (this.venueId != null) {
                data.venueId = this.venueId;
            }
            if (this.ticketTypeId != null) {
                data.ticketTypeId = this.ticketTypeId;
            }
            if (this.eventId != null) {
                data.eventId = this.eventId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ticketId.length)
                writer.writeString(1, this.ticketId);
            if (this.productionId.length)
                writer.writeString(2, this.productionId);
            if (this.venueId.length)
                writer.writeString(3, this.venueId);
            if (this.ticketTypeId.length)
                writer.writeString(4, this.ticketTypeId);
            if (this.eventId.length)
                writer.writeString(5, this.eventId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IssueTicketResponseIds {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IssueTicketResponseIds();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ticketId = reader.readString();
                        break;
                    case 2:
                        message.productionId = reader.readString();
                        break;
                    case 3:
                        message.venueId = reader.readString();
                        break;
                    case 4:
                        message.ticketTypeId = reader.readString();
                        break;
                    case 5:
                        message.eventId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IssueTicketResponseIds {
            return IssueTicketResponseIds.deserialize(bytes);
        }
    }
    export class EventTicketPassRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({
            format?: dependency_4.io.PassBundleFormat[];
        } & (({
            ticketId?: dependency_4.io.Id;
            ticketNumber?: never;
            orderNumber?: never;
        } | {
            ticketId?: never;
            ticketNumber?: TicketNumberRequest;
            orderNumber?: never;
        } | {
            ticketId?: never;
            ticketNumber?: never;
            orderNumber?: OrderNumberRequest;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ticketId" in data && data.ticketId != undefined) {
                    this.ticketId = data.ticketId;
                }
                if ("ticketNumber" in data && data.ticketNumber != undefined) {
                    this.ticketNumber = data.ticketNumber;
                }
                if ("orderNumber" in data && data.orderNumber != undefined) {
                    this.orderNumber = data.orderNumber;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
            }
        }
        get ticketId() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.Id, 1) as dependency_4.io.Id;
        }
        set ticketId(value: dependency_4.io.Id) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get hasTicketId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ticketNumber() {
            return pb_1.Message.getWrapperField(this, TicketNumberRequest, 2) as TicketNumberRequest;
        }
        set ticketNumber(value: TicketNumberRequest) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get hasTicketNumber() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get orderNumber() {
            return pb_1.Message.getWrapperField(this, OrderNumberRequest, 3) as OrderNumberRequest;
        }
        set orderNumber(value: OrderNumberRequest) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get hasOrderNumber() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as dependency_4.io.PassBundleFormat[];
        }
        set format(value: dependency_4.io.PassBundleFormat[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get request() {
            const cases: {
                [index: number]: "none" | "ticketId" | "ticketNumber" | "orderNumber";
            } = {
                0: "none",
                1: "ticketId",
                2: "ticketNumber",
                3: "orderNumber"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            ticketId?: ReturnType<typeof dependency_4.io.Id.prototype.toObject>;
            ticketNumber?: ReturnType<typeof TicketNumberRequest.prototype.toObject>;
            orderNumber?: ReturnType<typeof OrderNumberRequest.prototype.toObject>;
            format?: dependency_4.io.PassBundleFormat[];
        }): EventTicketPassRequest {
            const message = new EventTicketPassRequest({});
            if (data.ticketId != null) {
                message.ticketId = dependency_4.io.Id.fromObject(data.ticketId);
            }
            if (data.ticketNumber != null) {
                message.ticketNumber = TicketNumberRequest.fromObject(data.ticketNumber);
            }
            if (data.orderNumber != null) {
                message.orderNumber = OrderNumberRequest.fromObject(data.orderNumber);
            }
            if (data.format != null) {
                message.format = data.format;
            }
            return message;
        }
        toObject() {
            const data: {
                ticketId?: ReturnType<typeof dependency_4.io.Id.prototype.toObject>;
                ticketNumber?: ReturnType<typeof TicketNumberRequest.prototype.toObject>;
                orderNumber?: ReturnType<typeof OrderNumberRequest.prototype.toObject>;
                format?: dependency_4.io.PassBundleFormat[];
            } = {};
            if (this.ticketId != null) {
                data.ticketId = this.ticketId.toObject();
            }
            if (this.ticketNumber != null) {
                data.ticketNumber = this.ticketNumber.toObject();
            }
            if (this.orderNumber != null) {
                data.orderNumber = this.orderNumber.toObject();
            }
            if (this.format != null) {
                data.format = this.format;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasTicketId)
                writer.writeMessage(1, this.ticketId, () => this.ticketId.serialize(writer));
            if (this.hasTicketNumber)
                writer.writeMessage(2, this.ticketNumber, () => this.ticketNumber.serialize(writer));
            if (this.hasOrderNumber)
                writer.writeMessage(3, this.orderNumber, () => this.orderNumber.serialize(writer));
            if (this.format.length)
                writer.writePackedEnum(4, this.format);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTicketPassRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTicketPassRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ticketId, () => message.ticketId = dependency_4.io.Id.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.ticketNumber, () => message.ticketNumber = TicketNumberRequest.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.orderNumber, () => message.orderNumber = OrderNumberRequest.deserialize(reader));
                        break;
                    case 4:
                        message.format = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventTicketPassRequest {
            return EventTicketPassRequest.deserialize(bytes);
        }
    }
    export class EventTicketPerson extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            person?: dependency_6.io.Person;
        } & (({
            ticketId?: dependency_4.io.Id;
            ticketNumber?: never;
        } | {
            ticketId?: never;
            ticketNumber?: TicketNumberRequest;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ticketId" in data && data.ticketId != undefined) {
                    this.ticketId = data.ticketId;
                }
                if ("ticketNumber" in data && data.ticketNumber != undefined) {
                    this.ticketNumber = data.ticketNumber;
                }
                if ("person" in data && data.person != undefined) {
                    this.person = data.person;
                }
            }
        }
        get ticketId() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.Id, 1) as dependency_4.io.Id;
        }
        set ticketId(value: dependency_4.io.Id) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get hasTicketId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ticketNumber() {
            return pb_1.Message.getWrapperField(this, TicketNumberRequest, 2) as TicketNumberRequest;
        }
        set ticketNumber(value: TicketNumberRequest) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get hasTicketNumber() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get person() {
            return pb_1.Message.getWrapperField(this, dependency_6.io.Person, 5) as dependency_6.io.Person;
        }
        set person(value: dependency_6.io.Person) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasPerson() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get request() {
            const cases: {
                [index: number]: "none" | "ticketId" | "ticketNumber";
            } = {
                0: "none",
                1: "ticketId",
                2: "ticketNumber"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            ticketId?: ReturnType<typeof dependency_4.io.Id.prototype.toObject>;
            ticketNumber?: ReturnType<typeof TicketNumberRequest.prototype.toObject>;
            person?: ReturnType<typeof dependency_6.io.Person.prototype.toObject>;
        }): EventTicketPerson {
            const message = new EventTicketPerson({});
            if (data.ticketId != null) {
                message.ticketId = dependency_4.io.Id.fromObject(data.ticketId);
            }
            if (data.ticketNumber != null) {
                message.ticketNumber = TicketNumberRequest.fromObject(data.ticketNumber);
            }
            if (data.person != null) {
                message.person = dependency_6.io.Person.fromObject(data.person);
            }
            return message;
        }
        toObject() {
            const data: {
                ticketId?: ReturnType<typeof dependency_4.io.Id.prototype.toObject>;
                ticketNumber?: ReturnType<typeof TicketNumberRequest.prototype.toObject>;
                person?: ReturnType<typeof dependency_6.io.Person.prototype.toObject>;
            } = {};
            if (this.ticketId != null) {
                data.ticketId = this.ticketId.toObject();
            }
            if (this.ticketNumber != null) {
                data.ticketNumber = this.ticketNumber.toObject();
            }
            if (this.person != null) {
                data.person = this.person.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasTicketId)
                writer.writeMessage(1, this.ticketId, () => this.ticketId.serialize(writer));
            if (this.hasTicketNumber)
                writer.writeMessage(2, this.ticketNumber, () => this.ticketNumber.serialize(writer));
            if (this.hasPerson)
                writer.writeMessage(5, this.person, () => this.person.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTicketPerson {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTicketPerson();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ticketId, () => message.ticketId = dependency_4.io.Id.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.ticketNumber, () => message.ticketNumber = TicketNumberRequest.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.person, () => message.person = dependency_6.io.Person.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventTicketPerson {
            return EventTicketPerson.deserialize(bytes);
        }
    }
}
