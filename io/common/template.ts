/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/template.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common_objects";
import * as dependency_2 from "./localization";
import * as dependency_3 from "./protocols";
import * as dependency_4 from "./proximity";
import * as dependency_5 from "./links";
import * as dependency_6 from "./tracking";
import * as dependency_7 from "./../image/image";
import * as dependency_8 from "./../../protoc-gen-openapiv2/options/annotations";
import * as dependency_9 from "./../../google/protobuf/timestamp";
import * as dependency_10 from "./expiry";
import * as pb_1 from "google-protobuf";
export namespace io {
    export enum ApplePassType {
        APPLE_NOT_SUPPORTED = 0,
        BOARDING_PASS = 1,
        COUPON = 2,
        EVENT_TICKET = 3,
        GENERIC = 4,
        STORE_CARD = 5
    }
    export enum GooglePayPassType {
        GOOGLE_PAY_NOT_SUPPORTED = 0,
        EVENT = 1,
        FLIGHT = 2,
        GIFT = 3,
        LOYALTY = 4,
        OFFER = 5,
        TRANSIT = 6
    }
    export enum BarcodeType {
        BARCODE_TYPE_DO_NOT_USE = 0,
        QR = 1,
        AZTEC = 2,
        PDF417 = 3,
        CODE128 = 4,
        NONE = 5
    }
    export enum FieldType {
        FIELD_TYPE_NONE = 0,
        META = 1,
        PII = 2,
        UNIVERSAL_FIELDS = 3,
        PROTOCOL_FIELDS = 4,
        CUSTOM_FIELDS = 5
    }
    export enum StandardFields {
        STANDARD_FIELDS_DO_NOT_USE = 0,
        STANDARD_MESSAGES = 1,
        STANDARD_LEGAL = 2,
        STANDARD_EXPIRY_DATE = 3,
        STANDARD_USEFUL_LINKS = 4,
        STANDARD_OPT_OUT = 5,
        STANDARD_LOCATIONS = 6
    }
    export enum TextAlignment {
        TEXT_ALIGNMENT_DO_NOT_USE = 0,
        LEFT = 1,
        CENTER = 2,
        RIGHT = 3,
        NATURAL = 4
    }
    export enum DateTimeStyle {
        DATE_TIME_STYLE_DO_NOT_USE = 0,
        DATE_TIME_STYLE_SHORT = 1,
        DATE_TIME_STYLE_MEDIUM = 2,
        DATE_TIME_STYLE_LONG = 3,
        DATE_TIME_STYLE_FULL = 4
    }
    export enum LinkDetector {
        LINK_DETECTOR_DO_NOT_USE = 0,
        LINK_DETECTOR_ADDRESS = 1,
        LINK_DETECTOR_DATE = 2,
        LINK_DETECTOR_URL = 3,
        LINK_DETECTOR_PHONE = 4
    }
    export enum NumberStyle {
        NUMBER_STYLE_DO_NOT_USE = 0,
        NUMBER_STYLE_DECIMAL = 1,
        NUMBER_STYLE_PERCENT = 2,
        NUMBER_STYLE_SCIENTIFIC = 3,
        NUMBER_STYLE_SPELL = 4
    }
    export enum TransitType {
        TRANSIT_TYPE_DO_NOT_USE = 0,
        TRANSIT_TYPE_AIR = 1,
        TRANSIT_TYPE_BOAT = 2,
        TRANSIT_TYPE_BUS = 3,
        TRANSIT_TYPE_GENERIC = 4,
        TRANSIT_TYPE_TRAIN = 5,
        TRANSIT_TYPE_TRAM = 6
    }
    export enum DataType {
        DATA_TYPE_NONE = 0,
        TEXT = 1,
        TEXT_LONG = 2,
        DATE_YYYYMMDD = 3,
        DATE_YYYYMM = 4,
        DATE_MMDD = 5,
        TIME = 6,
        DATE_TIME = 7,
        INT = 8,
        NUMBER = 9,
        EMAIL = 10,
        URL = 11,
        TEL = 12,
        ADDRESS = 13,
        IMAGE = 15,
        CURRENCY = 16,
        BOOLEAN = 17,
        OPTIONS = 18,
        DATE_MM = 19
    }
    export enum DataStyle {
        NO_STYLE = 0,
        DATE_SHORT = 1,
        DATE_MEDIUM = 2,
        DATE_LONG = 3,
        DATE_FULL = 4,
        TIME_SHORT = 5,
        TIME_MEDIUM = 6,
        TIME_LONG = 7,
        TIME_FULL = 8,
        DATE_TIME_SHORT = 9,
        DATE_TIME_MEDIUM = 10,
        DATE_TIME_LONG = 11,
        DATE_TIME_FULL = 12,
        NUMBER_DECIMAL = 13
    }
    export enum FieldSection {
        FIELD_SECTION_DO_NOT_USE = 0,
        BACK_FIELDS = 1,
        PRIMARY_FIELDS = 2,
        SECONDARY_FIELDS = 3,
        AUXILIARY_FIELDS = 4,
        HEADER_FIELDS = 5,
        ADDITIONAL_FIELDS = 6
    }
    export enum GooglePayField {
        GOOGLE_PAY_FIELD_DO_NOT_USE = 0,
        GOOGLE_PAY_BOARDING_AIRLINE_NAME = 1,
        GOOGLE_PAY_BOARDING_AIRLINE_CODE = 2,
        GOOGLE_PAY_BOARDING_ORIGIN = 3,
        GOOGLE_PAY_BOARDING_DESTINATION = 4,
        GOOGLE_PAY_BOARDING_ORIGIN_TERMINAL = 5,
        GOOGLE_PAY_BOARDING_ORIGIN_GATE = 6,
        GOOGLE_PAY_BOARDING_BOARDING_TIME = 7,
        GOOGLE_PAY_BOARDING_PASSENGER_NAME = 8,
        GOOGLE_PAY_BOARDING_ZONE_GROUP = 9,
        GOOGLE_PAY_BOARDING_SEAT = 10,
        GOOGLE_PAY_BOARDING_BOARDING_POSITION = 11,
        GOOGLE_PAY_BOARDING_BOARDING_SEQUENCE = 12,
        GOOGLE_PAY_BOARDING_BOARDING_DOOR = 13,
        GOOGLE_PAY_BOARDING_FLIGHT_NUMBER = 14,
        GOOGLE_PAY_BOARDING_CONFIRMATION_NUMBER = 15,
        GOOGLE_PAY_BOARDING_TICKET_NUMBER = 16,
        GOOGLE_PAY_BOARDING_FREQUENT_FLYER_NUMBER = 17,
        GOOGLE_PAY_BOARDING_GATE_CLOSES = 18,
        GOOGLE_PAY_BOARDING_DEPARTURE_TIME = 19,
        GOOGLE_PAY_BOARDING_ARRIVAL_TIME = 20,
        GOOGLE_PAY_BOARDING_ARRIVAL_TERMINAL = 21,
        GOOGLE_PAY_BOARDING_ARRIVAL_GATE = 22,
        GOOGLE_PAY_EVENT_NAME = 100,
        GOOGLE_PAY_EVENT_VENUE_NAME = 101,
        GOOGLE_PAY_EVENT_VENUE_ADDRESS = 102,
        GOOGLE_PAY_EVENT_GATE = 103,
        GOOGLE_PAY_EVENT_SECTION = 104,
        GOOGLE_PAY_EVENT_ROW = 105,
        GOOGLE_PAY_EVENT_SEAT = 106,
        GOOGLE_PAY_EVENT_TICKET_HOLDER = 107,
        GOOGLE_PAY_EVENT_DOORS_OPEN = 108,
        GOOGLE_PAY_EVENT_START = 109,
        GOOGLE_PAY_EVENT_END = 110,
        GOOGLE_PAY_EVENT_TICKET_TYPE = 111,
        GOOGLE_PAY_EVENT_TICKET_NUMBER = 112,
        GOOGLE_PAY_EVENT_CONFIRMATION_NUMBER = 113,
        GOOGLE_PAY_EVENT_FACE_VALUE = 114,
        GOOGLE_PAY_EVENT_FINE_PRINT = 115,
        GOOGLE_PAY_GIFT_MERCHANT_NAME = 200,
        GOOGLE_PAY_GIFT_BALANCE = 201,
        GOOGLE_PAY_GIFT_CARD_NUMBER = 202,
        GOOGLE_PAY_GIFT_BALANCE_UPDATE_TIME = 203,
        GOOGLE_PAY_GIFT_PIN = 204,
        GOOGLE_PAY_GIFT_EVENT_NUMBER = 205,
        GOOGLE_PAY_LOYALTY_PROGRAM_NAME = 300,
        GOOGLE_PAY_LOYALTY_POINTS = 301,
        GOOGLE_PAY_LOYALTY_SECONDARY_POINTS = 302,
        GOOGLE_PAY_LOYALTY_ACCOUNT_NAME = 303,
        GOOGLE_PAY_LOYALTY_ACCOUNT_ID = 304,
        GOOGLE_PAY_LOYALTY_REWARDS_TIER = 305,
        GOOGLE_PAY_LOYALTY_SECONDARY_REWARDS_TIER = 306,
        GOOGLE_PAY_OFFER_TITLE = 400,
        GOOGLE_PAY_OFFER_PROVIDER = 401,
        GOOGLE_PAY_OFFER_DETAILS = 402,
        GOOGLE_PAY_OFFER_FINE_PRINT = 403,
        GOOGLE_PAY_OFFER_SHORT_TITLE = 404,
        GOOGLE_PAY_TRANSIT_ISSUER_NAME = 500,
        GOOGLE_PAY_TRANSIT_DEPARTURE = 501,
        GOOGLE_PAY_TRANSIT_DEPARTURE_TIME = 502,
        GOOGLE_PAY_TRANSIT_VALID_FROM = 503,
        GOOGLE_PAY_TRANSIT_VALID_UNTIL = 504,
        GOOGLE_PAY_TRANSIT_ARRIVAL = 505,
        GOOGLE_PAY_TRANSIT_PASSENGER_NAMES = 506,
        GOOGLE_PAY_TRANSIT_CARRIAGE = 507,
        GOOGLE_PAY_TRANSIT_COACH = 508,
        GOOGLE_PAY_TRANSIT_SEAT = 509,
        GOOGLE_PAY_TRANSIT_TICKET_NUMBER = 510,
        GOOGLE_PAY_TRANSIT_TICKET_STATUS = 511,
        GOOGLE_PAY_TRANSIT_FARE_NAME = 512,
        GOOGLE_PAY_TRANSIT_PLATFORM = 513,
        GOOGLE_PAY_TRANSIT_ZONE = 514,
        GOOGLE_PAY_TRANSIT_FARE_CLASS = 515,
        GOOGLE_PAY_TRANSIT_CONCESSION_CATEGORY = 516,
        GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTIONS = 517,
        GOOGLE_PAY_TRANSIT_ROUTE_RESTRICTION_DETAILS = 518,
        GOOGLE_PAY_TRANSIT_TIME_RESTRICTIONS = 519,
        GOOGLE_PAY_TRANSIT_OTHER_RESTRICTIONS = 520,
        GOOGLE_PAY_TRANSIT_RECEIPT_NUMBER = 521,
        GOOGLE_PAY_TRANSIT_PURCHASE_DATE = 522,
        GOOGLE_PAY_TRANSIT_ACCOUNT_ID = 523,
        GOOGLE_PAY_TRANSIT_CONFIRMATION_CODE = 524,
        GOOGLE_PAY_TRANSIT_FACE_VALUE = 525,
        GOOGLE_PAY_TRANSIT_PURCHASE_PRICE = 526,
        GOOGLE_PAY_TRANSIT_DISCOUNT_MESSAGE = 527,
        GOOGLE_PAY_TEXT_MODULE = 1000,
        GOOGLE_PAY_ISSUER_NAME = 1001,
        GOOGLE_PAY_STATIC_TEXT_MODULE = 1002
    }
    export enum PasswordType {
        PASSWORD_TYPE_DO_NOT_USE = 0,
        PASSWORD_TYPE_NO_PASSWORD = 1,
        PASSWORD_TYPE_PASSWORD_ONLY = 2
    }
    export enum SupportedAndroidWallet {
        ANDROID_WALLET_DO_NOT_USE = 0,
        ANDROID_WALLET_PASSWALLET = 1,
        ANDROID_WALLET_WALLETPASSES = 2
    }
    export enum PersonalizedDataField {
        PERSONALIZE_DO_NOT_USE = 0,
        PERSONALIZE_NAME = 1,
        PERSONALIZE_EMAIL_ADDRESS = 2,
        PERSONALIZE_PHONE_NUMBER = 4,
        PERSONALIZE_POSTAL_CODE = 8
    }
    export enum ScreenshotEligibility {
        SCREENSHOT_ELIGIBILITY_UNSPECIFIED = 0,
        ELIGIBLE = 1,
        INELIGIBLE = 2
    }
    export class SelectOption extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            listPriority?: number;
            textLabel?: string;
            localizedTextLabel?: dependency_2.io.LocalizedString;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("listPriority" in data && data.listPriority != undefined) {
                    this.listPriority = data.listPriority;
                }
                if ("textLabel" in data && data.textLabel != undefined) {
                    this.textLabel = data.textLabel;
                }
                if ("localizedTextLabel" in data && data.localizedTextLabel != undefined) {
                    this.localizedTextLabel = data.localizedTextLabel;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get listPriority() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set listPriority(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get textLabel() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set textLabel(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get localizedTextLabel() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 3) as dependency_2.io.LocalizedString;
        }
        set localizedTextLabel(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocalizedTextLabel() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            listPriority?: number;
            textLabel?: string;
            localizedTextLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            value?: string;
        }): SelectOption {
            const message = new SelectOption({});
            if (data.listPriority != null) {
                message.listPriority = data.listPriority;
            }
            if (data.textLabel != null) {
                message.textLabel = data.textLabel;
            }
            if (data.localizedTextLabel != null) {
                message.localizedTextLabel = dependency_2.io.LocalizedString.fromObject(data.localizedTextLabel);
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                listPriority?: number;
                textLabel?: string;
                localizedTextLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                value?: string;
            } = {};
            if (this.listPriority != null) {
                data.listPriority = this.listPriority;
            }
            if (this.textLabel != null) {
                data.textLabel = this.textLabel;
            }
            if (this.localizedTextLabel != null) {
                data.localizedTextLabel = this.localizedTextLabel.toObject();
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.listPriority != 0)
                writer.writeUint32(1, this.listPriority);
            if (this.textLabel.length)
                writer.writeString(2, this.textLabel);
            if (this.hasLocalizedTextLabel)
                writer.writeMessage(3, this.localizedTextLabel, () => this.localizedTextLabel.serialize(writer));
            if (this.value.length)
                writer.writeString(4, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SelectOption {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SelectOption();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.listPriority = reader.readUint32();
                        break;
                    case 2:
                        message.textLabel = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.localizedTextLabel, () => message.localizedTextLabel = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 4:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SelectOption {
            return SelectOption.deserialize(bytes);
        }
    }
    export class TOPTParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: string;
            milliseconds?: number;
            valueString?: string;
            digits?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("milliseconds" in data && data.milliseconds != undefined) {
                    this.milliseconds = data.milliseconds;
                }
                if ("valueString" in data && data.valueString != undefined) {
                    this.valueString = data.valueString;
                }
                if ("digits" in data && data.digits != undefined) {
                    this.digits = data.digits;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get milliseconds() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set milliseconds(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get valueString() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set valueString(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get digits() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set digits(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            key?: string;
            milliseconds?: number;
            valueString?: string;
            digits?: number;
        }): TOPTParameters {
            const message = new TOPTParameters({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.milliseconds != null) {
                message.milliseconds = data.milliseconds;
            }
            if (data.valueString != null) {
                message.valueString = data.valueString;
            }
            if (data.digits != null) {
                message.digits = data.digits;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                milliseconds?: number;
                valueString?: string;
                digits?: number;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.milliseconds != null) {
                data.milliseconds = this.milliseconds;
            }
            if (this.valueString != null) {
                data.valueString = this.valueString;
            }
            if (this.digits != null) {
                data.digits = this.digits;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeString(1, this.key);
            if (this.milliseconds != 0)
                writer.writeUint32(2, this.milliseconds);
            if (this.valueString.length)
                writer.writeString(3, this.valueString);
            if (this.digits != 0)
                writer.writeUint32(4, this.digits);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TOPTParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TOPTParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.milliseconds = reader.readUint32();
                        break;
                    case 3:
                        message.valueString = reader.readString();
                        break;
                    case 4:
                        message.digits = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TOPTParameters {
            return TOPTParameters.deserialize(bytes);
        }
    }
    export class Barcode extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            payload?: string;
            format?: BarcodeType;
            altText?: string;
            localizedAltText?: dependency_2.io.LocalizedString;
            messageEncoding?: string;
            suppressSecurity?: boolean;
            rotatingBarcode?: boolean;
            totpParameters?: TOPTParameters;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
                if ("altText" in data && data.altText != undefined) {
                    this.altText = data.altText;
                }
                if ("localizedAltText" in data && data.localizedAltText != undefined) {
                    this.localizedAltText = data.localizedAltText;
                }
                if ("messageEncoding" in data && data.messageEncoding != undefined) {
                    this.messageEncoding = data.messageEncoding;
                }
                if ("suppressSecurity" in data && data.suppressSecurity != undefined) {
                    this.suppressSecurity = data.suppressSecurity;
                }
                if ("rotatingBarcode" in data && data.rotatingBarcode != undefined) {
                    this.rotatingBarcode = data.rotatingBarcode;
                }
                if ("totpParameters" in data && data.totpParameters != undefined) {
                    this.totpParameters = data.totpParameters;
                }
            }
        }
        get payload() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set payload(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 2, BarcodeType.BARCODE_TYPE_DO_NOT_USE) as BarcodeType;
        }
        set format(value: BarcodeType) {
            pb_1.Message.setField(this, 2, value);
        }
        get altText() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set altText(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get localizedAltText() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 4) as dependency_2.io.LocalizedString;
        }
        set localizedAltText(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasLocalizedAltText() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get messageEncoding() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set messageEncoding(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get suppressSecurity() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set suppressSecurity(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get rotatingBarcode() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set rotatingBarcode(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get totpParameters() {
            return pb_1.Message.getWrapperField(this, TOPTParameters, 8) as TOPTParameters;
        }
        set totpParameters(value: TOPTParameters) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasTotpParameters() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            payload?: string;
            format?: BarcodeType;
            altText?: string;
            localizedAltText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            messageEncoding?: string;
            suppressSecurity?: boolean;
            rotatingBarcode?: boolean;
            totpParameters?: ReturnType<typeof TOPTParameters.prototype.toObject>;
        }): Barcode {
            const message = new Barcode({});
            if (data.payload != null) {
                message.payload = data.payload;
            }
            if (data.format != null) {
                message.format = data.format;
            }
            if (data.altText != null) {
                message.altText = data.altText;
            }
            if (data.localizedAltText != null) {
                message.localizedAltText = dependency_2.io.LocalizedString.fromObject(data.localizedAltText);
            }
            if (data.messageEncoding != null) {
                message.messageEncoding = data.messageEncoding;
            }
            if (data.suppressSecurity != null) {
                message.suppressSecurity = data.suppressSecurity;
            }
            if (data.rotatingBarcode != null) {
                message.rotatingBarcode = data.rotatingBarcode;
            }
            if (data.totpParameters != null) {
                message.totpParameters = TOPTParameters.fromObject(data.totpParameters);
            }
            return message;
        }
        toObject() {
            const data: {
                payload?: string;
                format?: BarcodeType;
                altText?: string;
                localizedAltText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                messageEncoding?: string;
                suppressSecurity?: boolean;
                rotatingBarcode?: boolean;
                totpParameters?: ReturnType<typeof TOPTParameters.prototype.toObject>;
            } = {};
            if (this.payload != null) {
                data.payload = this.payload;
            }
            if (this.format != null) {
                data.format = this.format;
            }
            if (this.altText != null) {
                data.altText = this.altText;
            }
            if (this.localizedAltText != null) {
                data.localizedAltText = this.localizedAltText.toObject();
            }
            if (this.messageEncoding != null) {
                data.messageEncoding = this.messageEncoding;
            }
            if (this.suppressSecurity != null) {
                data.suppressSecurity = this.suppressSecurity;
            }
            if (this.rotatingBarcode != null) {
                data.rotatingBarcode = this.rotatingBarcode;
            }
            if (this.totpParameters != null) {
                data.totpParameters = this.totpParameters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.payload.length)
                writer.writeString(1, this.payload);
            if (this.format != BarcodeType.BARCODE_TYPE_DO_NOT_USE)
                writer.writeEnum(2, this.format);
            if (this.altText.length)
                writer.writeString(3, this.altText);
            if (this.hasLocalizedAltText)
                writer.writeMessage(4, this.localizedAltText, () => this.localizedAltText.serialize(writer));
            if (this.messageEncoding.length)
                writer.writeString(5, this.messageEncoding);
            if (this.suppressSecurity != false)
                writer.writeBool(6, this.suppressSecurity);
            if (this.rotatingBarcode != false)
                writer.writeBool(7, this.rotatingBarcode);
            if (this.hasTotpParameters)
                writer.writeMessage(8, this.totpParameters, () => this.totpParameters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Barcode {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Barcode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.payload = reader.readString();
                        break;
                    case 2:
                        message.format = reader.readEnum();
                        break;
                    case 3:
                        message.altText = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.localizedAltText, () => message.localizedAltText = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 5:
                        message.messageEncoding = reader.readString();
                        break;
                    case 6:
                        message.suppressSecurity = reader.readBool();
                        break;
                    case 7:
                        message.rotatingBarcode = reader.readBool();
                        break;
                    case 8:
                        reader.readMessage(message.totpParameters, () => message.totpParameters = TOPTParameters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Barcode {
            return Barcode.deserialize(bytes);
        }
    }
    export class PassTemplate extends pb_1.Message {
        #one_of_decls: number[][] = [[11, 12]];
        constructor(data?: any[] | ({
            id?: string;
            name?: string;
            protocol?: dependency_3.io.PassProtocol;
            revision?: number;
            defaultLanguage?: dependency_2.io.LanguageCode;
            organizationName?: string;
            localizedOrganizationName?: dependency_2.io.LocalizedString;
            description?: string;
            localizedDescription?: dependency_2.io.LocalizedString;
            data?: Data;
            colors?: Colors;
            barcode?: Barcode;
            nfcEnabled?: NFC;
            sharing?: Sharing;
            appleWalletSettings?: AppleWalletSettings;
            googlePaySettings?: GooglePaySettings;
            locations?: dependency_4.io.GPSLocation[];
            beacons?: dependency_4.io.Beacon[];
            links?: dependency_5.io.Link[];
            timezone?: string;
            expirySettings?: dependency_10.io.ExpirySettings;
            landingPageSettings?: LandingPageSettings;
        } & (({
            imageIds?: dependency_7.io.ImageIds;
            images?: never;
        } | {
            imageIds?: never;
            images?: dependency_7.io.ImageData;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [19, 20, 21], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("revision" in data && data.revision != undefined) {
                    this.revision = data.revision;
                }
                if ("defaultLanguage" in data && data.defaultLanguage != undefined) {
                    this.defaultLanguage = data.defaultLanguage;
                }
                if ("organizationName" in data && data.organizationName != undefined) {
                    this.organizationName = data.organizationName;
                }
                if ("localizedOrganizationName" in data && data.localizedOrganizationName != undefined) {
                    this.localizedOrganizationName = data.localizedOrganizationName;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("localizedDescription" in data && data.localizedDescription != undefined) {
                    this.localizedDescription = data.localizedDescription;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("imageIds" in data && data.imageIds != undefined) {
                    this.imageIds = data.imageIds;
                }
                if ("images" in data && data.images != undefined) {
                    this.images = data.images;
                }
                if ("colors" in data && data.colors != undefined) {
                    this.colors = data.colors;
                }
                if ("barcode" in data && data.barcode != undefined) {
                    this.barcode = data.barcode;
                }
                if ("nfcEnabled" in data && data.nfcEnabled != undefined) {
                    this.nfcEnabled = data.nfcEnabled;
                }
                if ("sharing" in data && data.sharing != undefined) {
                    this.sharing = data.sharing;
                }
                if ("appleWalletSettings" in data && data.appleWalletSettings != undefined) {
                    this.appleWalletSettings = data.appleWalletSettings;
                }
                if ("googlePaySettings" in data && data.googlePaySettings != undefined) {
                    this.googlePaySettings = data.googlePaySettings;
                }
                if ("locations" in data && data.locations != undefined) {
                    this.locations = data.locations;
                }
                if ("beacons" in data && data.beacons != undefined) {
                    this.beacons = data.beacons;
                }
                if ("links" in data && data.links != undefined) {
                    this.links = data.links;
                }
                if ("timezone" in data && data.timezone != undefined) {
                    this.timezone = data.timezone;
                }
                if ("expirySettings" in data && data.expirySettings != undefined) {
                    this.expirySettings = data.expirySettings;
                }
                if ("landingPageSettings" in data && data.landingPageSettings != undefined) {
                    this.landingPageSettings = data.landingPageSettings;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_3.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE) as dependency_3.io.PassProtocol;
        }
        set protocol(value: dependency_3.io.PassProtocol) {
            pb_1.Message.setField(this, 3, value);
        }
        get revision() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set revision(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get defaultLanguage() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_2.io.LanguageCode.EN) as dependency_2.io.LanguageCode;
        }
        set defaultLanguage(value: dependency_2.io.LanguageCode) {
            pb_1.Message.setField(this, 5, value);
        }
        get organizationName() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set organizationName(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get localizedOrganizationName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 7) as dependency_2.io.LocalizedString;
        }
        set localizedOrganizationName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasLocalizedOrganizationName() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get localizedDescription() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 9) as dependency_2.io.LocalizedString;
        }
        set localizedDescription(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasLocalizedDescription() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get data() {
            return pb_1.Message.getWrapperField(this, Data, 10) as Data;
        }
        set data(value: Data) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasData() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get imageIds() {
            return pb_1.Message.getWrapperField(this, dependency_7.io.ImageIds, 11) as dependency_7.io.ImageIds;
        }
        set imageIds(value: dependency_7.io.ImageIds) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get hasImageIds() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get images() {
            return pb_1.Message.getWrapperField(this, dependency_7.io.ImageData, 12) as dependency_7.io.ImageData;
        }
        set images(value: dependency_7.io.ImageData) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get hasImages() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get colors() {
            return pb_1.Message.getWrapperField(this, Colors, 13) as Colors;
        }
        set colors(value: Colors) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasColors() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get barcode() {
            return pb_1.Message.getWrapperField(this, Barcode, 14) as Barcode;
        }
        set barcode(value: Barcode) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get hasBarcode() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get nfcEnabled() {
            return pb_1.Message.getWrapperField(this, NFC, 15) as NFC;
        }
        set nfcEnabled(value: NFC) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get hasNfcEnabled() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get sharing() {
            return pb_1.Message.getWrapperField(this, Sharing, 16) as Sharing;
        }
        set sharing(value: Sharing) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get hasSharing() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get appleWalletSettings() {
            return pb_1.Message.getWrapperField(this, AppleWalletSettings, 17) as AppleWalletSettings;
        }
        set appleWalletSettings(value: AppleWalletSettings) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get hasAppleWalletSettings() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get googlePaySettings() {
            return pb_1.Message.getWrapperField(this, GooglePaySettings, 18) as GooglePaySettings;
        }
        set googlePaySettings(value: GooglePaySettings) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get hasGooglePaySettings() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get locations() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.io.GPSLocation, 19) as dependency_4.io.GPSLocation[];
        }
        set locations(value: dependency_4.io.GPSLocation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 19, value);
        }
        get beacons() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.io.Beacon, 20) as dependency_4.io.Beacon[];
        }
        set beacons(value: dependency_4.io.Beacon[]) {
            pb_1.Message.setRepeatedWrapperField(this, 20, value);
        }
        get links() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.io.Link, 21) as dependency_5.io.Link[];
        }
        set links(value: dependency_5.io.Link[]) {
            pb_1.Message.setRepeatedWrapperField(this, 21, value);
        }
        get timezone() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set timezone(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get expirySettings() {
            return pb_1.Message.getWrapperField(this, dependency_10.io.ExpirySettings, 23) as dependency_10.io.ExpirySettings;
        }
        set expirySettings(value: dependency_10.io.ExpirySettings) {
            pb_1.Message.setWrapperField(this, 23, value);
        }
        get hasExpirySettings() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get landingPageSettings() {
            return pb_1.Message.getWrapperField(this, LandingPageSettings, 24) as LandingPageSettings;
        }
        set landingPageSettings(value: LandingPageSettings) {
            pb_1.Message.setWrapperField(this, 24, value);
        }
        get hasLandingPageSettings() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get ImageAssets() {
            const cases: {
                [index: number]: "none" | "imageIds" | "images";
            } = {
                0: "none",
                11: "imageIds",
                12: "images"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11, 12])];
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            protocol?: dependency_3.io.PassProtocol;
            revision?: number;
            defaultLanguage?: dependency_2.io.LanguageCode;
            organizationName?: string;
            localizedOrganizationName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            description?: string;
            localizedDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            data?: ReturnType<typeof Data.prototype.toObject>;
            imageIds?: ReturnType<typeof dependency_7.io.ImageIds.prototype.toObject>;
            images?: ReturnType<typeof dependency_7.io.ImageData.prototype.toObject>;
            colors?: ReturnType<typeof Colors.prototype.toObject>;
            barcode?: ReturnType<typeof Barcode.prototype.toObject>;
            nfcEnabled?: ReturnType<typeof NFC.prototype.toObject>;
            sharing?: ReturnType<typeof Sharing.prototype.toObject>;
            appleWalletSettings?: ReturnType<typeof AppleWalletSettings.prototype.toObject>;
            googlePaySettings?: ReturnType<typeof GooglePaySettings.prototype.toObject>;
            locations?: ReturnType<typeof dependency_4.io.GPSLocation.prototype.toObject>[];
            beacons?: ReturnType<typeof dependency_4.io.Beacon.prototype.toObject>[];
            links?: ReturnType<typeof dependency_5.io.Link.prototype.toObject>[];
            timezone?: string;
            expirySettings?: ReturnType<typeof dependency_10.io.ExpirySettings.prototype.toObject>;
            landingPageSettings?: ReturnType<typeof LandingPageSettings.prototype.toObject>;
        }): PassTemplate {
            const message = new PassTemplate({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.revision != null) {
                message.revision = data.revision;
            }
            if (data.defaultLanguage != null) {
                message.defaultLanguage = data.defaultLanguage;
            }
            if (data.organizationName != null) {
                message.organizationName = data.organizationName;
            }
            if (data.localizedOrganizationName != null) {
                message.localizedOrganizationName = dependency_2.io.LocalizedString.fromObject(data.localizedOrganizationName);
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.localizedDescription != null) {
                message.localizedDescription = dependency_2.io.LocalizedString.fromObject(data.localizedDescription);
            }
            if (data.data != null) {
                message.data = Data.fromObject(data.data);
            }
            if (data.imageIds != null) {
                message.imageIds = dependency_7.io.ImageIds.fromObject(data.imageIds);
            }
            if (data.images != null) {
                message.images = dependency_7.io.ImageData.fromObject(data.images);
            }
            if (data.colors != null) {
                message.colors = Colors.fromObject(data.colors);
            }
            if (data.barcode != null) {
                message.barcode = Barcode.fromObject(data.barcode);
            }
            if (data.nfcEnabled != null) {
                message.nfcEnabled = NFC.fromObject(data.nfcEnabled);
            }
            if (data.sharing != null) {
                message.sharing = Sharing.fromObject(data.sharing);
            }
            if (data.appleWalletSettings != null) {
                message.appleWalletSettings = AppleWalletSettings.fromObject(data.appleWalletSettings);
            }
            if (data.googlePaySettings != null) {
                message.googlePaySettings = GooglePaySettings.fromObject(data.googlePaySettings);
            }
            if (data.locations != null) {
                message.locations = data.locations.map(item => dependency_4.io.GPSLocation.fromObject(item));
            }
            if (data.beacons != null) {
                message.beacons = data.beacons.map(item => dependency_4.io.Beacon.fromObject(item));
            }
            if (data.links != null) {
                message.links = data.links.map(item => dependency_5.io.Link.fromObject(item));
            }
            if (data.timezone != null) {
                message.timezone = data.timezone;
            }
            if (data.expirySettings != null) {
                message.expirySettings = dependency_10.io.ExpirySettings.fromObject(data.expirySettings);
            }
            if (data.landingPageSettings != null) {
                message.landingPageSettings = LandingPageSettings.fromObject(data.landingPageSettings);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                protocol?: dependency_3.io.PassProtocol;
                revision?: number;
                defaultLanguage?: dependency_2.io.LanguageCode;
                organizationName?: string;
                localizedOrganizationName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                description?: string;
                localizedDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                data?: ReturnType<typeof Data.prototype.toObject>;
                imageIds?: ReturnType<typeof dependency_7.io.ImageIds.prototype.toObject>;
                images?: ReturnType<typeof dependency_7.io.ImageData.prototype.toObject>;
                colors?: ReturnType<typeof Colors.prototype.toObject>;
                barcode?: ReturnType<typeof Barcode.prototype.toObject>;
                nfcEnabled?: ReturnType<typeof NFC.prototype.toObject>;
                sharing?: ReturnType<typeof Sharing.prototype.toObject>;
                appleWalletSettings?: ReturnType<typeof AppleWalletSettings.prototype.toObject>;
                googlePaySettings?: ReturnType<typeof GooglePaySettings.prototype.toObject>;
                locations?: ReturnType<typeof dependency_4.io.GPSLocation.prototype.toObject>[];
                beacons?: ReturnType<typeof dependency_4.io.Beacon.prototype.toObject>[];
                links?: ReturnType<typeof dependency_5.io.Link.prototype.toObject>[];
                timezone?: string;
                expirySettings?: ReturnType<typeof dependency_10.io.ExpirySettings.prototype.toObject>;
                landingPageSettings?: ReturnType<typeof LandingPageSettings.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.revision != null) {
                data.revision = this.revision;
            }
            if (this.defaultLanguage != null) {
                data.defaultLanguage = this.defaultLanguage;
            }
            if (this.organizationName != null) {
                data.organizationName = this.organizationName;
            }
            if (this.localizedOrganizationName != null) {
                data.localizedOrganizationName = this.localizedOrganizationName.toObject();
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.localizedDescription != null) {
                data.localizedDescription = this.localizedDescription.toObject();
            }
            if (this.data != null) {
                data.data = this.data.toObject();
            }
            if (this.imageIds != null) {
                data.imageIds = this.imageIds.toObject();
            }
            if (this.images != null) {
                data.images = this.images.toObject();
            }
            if (this.colors != null) {
                data.colors = this.colors.toObject();
            }
            if (this.barcode != null) {
                data.barcode = this.barcode.toObject();
            }
            if (this.nfcEnabled != null) {
                data.nfcEnabled = this.nfcEnabled.toObject();
            }
            if (this.sharing != null) {
                data.sharing = this.sharing.toObject();
            }
            if (this.appleWalletSettings != null) {
                data.appleWalletSettings = this.appleWalletSettings.toObject();
            }
            if (this.googlePaySettings != null) {
                data.googlePaySettings = this.googlePaySettings.toObject();
            }
            if (this.locations != null) {
                data.locations = this.locations.map((item: dependency_4.io.GPSLocation) => item.toObject());
            }
            if (this.beacons != null) {
                data.beacons = this.beacons.map((item: dependency_4.io.Beacon) => item.toObject());
            }
            if (this.links != null) {
                data.links = this.links.map((item: dependency_5.io.Link) => item.toObject());
            }
            if (this.timezone != null) {
                data.timezone = this.timezone;
            }
            if (this.expirySettings != null) {
                data.expirySettings = this.expirySettings.toObject();
            }
            if (this.landingPageSettings != null) {
                data.landingPageSettings = this.landingPageSettings.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.protocol != dependency_3.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE)
                writer.writeEnum(3, this.protocol);
            if (this.revision != 0)
                writer.writeUint32(4, this.revision);
            if (this.defaultLanguage != dependency_2.io.LanguageCode.EN)
                writer.writeEnum(5, this.defaultLanguage);
            if (this.organizationName.length)
                writer.writeString(6, this.organizationName);
            if (this.hasLocalizedOrganizationName)
                writer.writeMessage(7, this.localizedOrganizationName, () => this.localizedOrganizationName.serialize(writer));
            if (this.description.length)
                writer.writeString(8, this.description);
            if (this.hasLocalizedDescription)
                writer.writeMessage(9, this.localizedDescription, () => this.localizedDescription.serialize(writer));
            if (this.hasData)
                writer.writeMessage(10, this.data, () => this.data.serialize(writer));
            if (this.hasImageIds)
                writer.writeMessage(11, this.imageIds, () => this.imageIds.serialize(writer));
            if (this.hasImages)
                writer.writeMessage(12, this.images, () => this.images.serialize(writer));
            if (this.hasColors)
                writer.writeMessage(13, this.colors, () => this.colors.serialize(writer));
            if (this.hasBarcode)
                writer.writeMessage(14, this.barcode, () => this.barcode.serialize(writer));
            if (this.hasNfcEnabled)
                writer.writeMessage(15, this.nfcEnabled, () => this.nfcEnabled.serialize(writer));
            if (this.hasSharing)
                writer.writeMessage(16, this.sharing, () => this.sharing.serialize(writer));
            if (this.hasAppleWalletSettings)
                writer.writeMessage(17, this.appleWalletSettings, () => this.appleWalletSettings.serialize(writer));
            if (this.hasGooglePaySettings)
                writer.writeMessage(18, this.googlePaySettings, () => this.googlePaySettings.serialize(writer));
            if (this.locations.length)
                writer.writeRepeatedMessage(19, this.locations, (item: dependency_4.io.GPSLocation) => item.serialize(writer));
            if (this.beacons.length)
                writer.writeRepeatedMessage(20, this.beacons, (item: dependency_4.io.Beacon) => item.serialize(writer));
            if (this.links.length)
                writer.writeRepeatedMessage(21, this.links, (item: dependency_5.io.Link) => item.serialize(writer));
            if (this.timezone.length)
                writer.writeString(22, this.timezone);
            if (this.hasExpirySettings)
                writer.writeMessage(23, this.expirySettings, () => this.expirySettings.serialize(writer));
            if (this.hasLandingPageSettings)
                writer.writeMessage(24, this.landingPageSettings, () => this.landingPageSettings.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PassTemplate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PassTemplate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.protocol = reader.readEnum();
                        break;
                    case 4:
                        message.revision = reader.readUint32();
                        break;
                    case 5:
                        message.defaultLanguage = reader.readEnum();
                        break;
                    case 6:
                        message.organizationName = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.localizedOrganizationName, () => message.localizedOrganizationName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 8:
                        message.description = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.localizedDescription, () => message.localizedDescription = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.data, () => message.data = Data.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.imageIds, () => message.imageIds = dependency_7.io.ImageIds.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.images, () => message.images = dependency_7.io.ImageData.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.colors, () => message.colors = Colors.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.barcode, () => message.barcode = Barcode.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.nfcEnabled, () => message.nfcEnabled = NFC.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.sharing, () => message.sharing = Sharing.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.appleWalletSettings, () => message.appleWalletSettings = AppleWalletSettings.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.googlePaySettings, () => message.googlePaySettings = GooglePaySettings.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.locations, () => pb_1.Message.addToRepeatedWrapperField(message, 19, dependency_4.io.GPSLocation.deserialize(reader), dependency_4.io.GPSLocation));
                        break;
                    case 20:
                        reader.readMessage(message.beacons, () => pb_1.Message.addToRepeatedWrapperField(message, 20, dependency_4.io.Beacon.deserialize(reader), dependency_4.io.Beacon));
                        break;
                    case 21:
                        reader.readMessage(message.links, () => pb_1.Message.addToRepeatedWrapperField(message, 21, dependency_5.io.Link.deserialize(reader), dependency_5.io.Link));
                        break;
                    case 22:
                        message.timezone = reader.readString();
                        break;
                    case 23:
                        reader.readMessage(message.expirySettings, () => message.expirySettings = dependency_10.io.ExpirySettings.deserialize(reader));
                        break;
                    case 24:
                        reader.readMessage(message.landingPageSettings, () => message.landingPageSettings = LandingPageSettings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PassTemplate {
            return PassTemplate.deserialize(bytes);
        }
    }
    export class AppleWalletSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            passType?: ApplePassType;
            userInfo?: string;
            appLaunchUrl?: string;
            associatedStoreIdentifiers?: number[];
            maxDistance?: number;
            appStoreCountries?: string[];
            transitType?: TransitType;
            groupingIdentifier?: string;
            personalizationDetails?: PersonalizationDetails;
            appStoreIdentifiers?: number[];
            posterTicketStyle?: boolean;
            suppressHeaderDarkening?: boolean;
            useAutomaticColors?: boolean;
            logoText?: string;
            ignoreTimeComponents?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 6, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("passType" in data && data.passType != undefined) {
                    this.passType = data.passType;
                }
                if ("userInfo" in data && data.userInfo != undefined) {
                    this.userInfo = data.userInfo;
                }
                if ("appLaunchUrl" in data && data.appLaunchUrl != undefined) {
                    this.appLaunchUrl = data.appLaunchUrl;
                }
                if ("associatedStoreIdentifiers" in data && data.associatedStoreIdentifiers != undefined) {
                    this.associatedStoreIdentifiers = data.associatedStoreIdentifiers;
                }
                if ("maxDistance" in data && data.maxDistance != undefined) {
                    this.maxDistance = data.maxDistance;
                }
                if ("appStoreCountries" in data && data.appStoreCountries != undefined) {
                    this.appStoreCountries = data.appStoreCountries;
                }
                if ("transitType" in data && data.transitType != undefined) {
                    this.transitType = data.transitType;
                }
                if ("groupingIdentifier" in data && data.groupingIdentifier != undefined) {
                    this.groupingIdentifier = data.groupingIdentifier;
                }
                if ("personalizationDetails" in data && data.personalizationDetails != undefined) {
                    this.personalizationDetails = data.personalizationDetails;
                }
                if ("appStoreIdentifiers" in data && data.appStoreIdentifiers != undefined) {
                    this.appStoreIdentifiers = data.appStoreIdentifiers;
                }
                if ("posterTicketStyle" in data && data.posterTicketStyle != undefined) {
                    this.posterTicketStyle = data.posterTicketStyle;
                }
                if ("suppressHeaderDarkening" in data && data.suppressHeaderDarkening != undefined) {
                    this.suppressHeaderDarkening = data.suppressHeaderDarkening;
                }
                if ("useAutomaticColors" in data && data.useAutomaticColors != undefined) {
                    this.useAutomaticColors = data.useAutomaticColors;
                }
                if ("logoText" in data && data.logoText != undefined) {
                    this.logoText = data.logoText;
                }
                if ("ignoreTimeComponents" in data && data.ignoreTimeComponents != undefined) {
                    this.ignoreTimeComponents = data.ignoreTimeComponents;
                }
            }
        }
        get passType() {
            return pb_1.Message.getFieldWithDefault(this, 1, ApplePassType.APPLE_NOT_SUPPORTED) as ApplePassType;
        }
        set passType(value: ApplePassType) {
            pb_1.Message.setField(this, 1, value);
        }
        get userInfo() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userInfo(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get appLaunchUrl() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set appLaunchUrl(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get associatedStoreIdentifiers() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set associatedStoreIdentifiers(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get maxDistance() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set maxDistance(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get appStoreCountries() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set appStoreCountries(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get transitType() {
            return pb_1.Message.getFieldWithDefault(this, 7, TransitType.TRANSIT_TYPE_DO_NOT_USE) as TransitType;
        }
        set transitType(value: TransitType) {
            pb_1.Message.setField(this, 7, value);
        }
        get groupingIdentifier() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set groupingIdentifier(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get personalizationDetails() {
            return pb_1.Message.getWrapperField(this, PersonalizationDetails, 9) as PersonalizationDetails;
        }
        set personalizationDetails(value: PersonalizationDetails) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasPersonalizationDetails() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get appStoreIdentifiers() {
            return pb_1.Message.getFieldWithDefault(this, 10, []) as number[];
        }
        set appStoreIdentifiers(value: number[]) {
            pb_1.Message.setField(this, 10, value);
        }
        get posterTicketStyle() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set posterTicketStyle(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get suppressHeaderDarkening() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set suppressHeaderDarkening(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get useAutomaticColors() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set useAutomaticColors(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get logoText() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set logoText(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get ignoreTimeComponents() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set ignoreTimeComponents(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        static fromObject(data: {
            passType?: ApplePassType;
            userInfo?: string;
            appLaunchUrl?: string;
            associatedStoreIdentifiers?: number[];
            maxDistance?: number;
            appStoreCountries?: string[];
            transitType?: TransitType;
            groupingIdentifier?: string;
            personalizationDetails?: ReturnType<typeof PersonalizationDetails.prototype.toObject>;
            appStoreIdentifiers?: number[];
            posterTicketStyle?: boolean;
            suppressHeaderDarkening?: boolean;
            useAutomaticColors?: boolean;
            logoText?: string;
            ignoreTimeComponents?: boolean;
        }): AppleWalletSettings {
            const message = new AppleWalletSettings({});
            if (data.passType != null) {
                message.passType = data.passType;
            }
            if (data.userInfo != null) {
                message.userInfo = data.userInfo;
            }
            if (data.appLaunchUrl != null) {
                message.appLaunchUrl = data.appLaunchUrl;
            }
            if (data.associatedStoreIdentifiers != null) {
                message.associatedStoreIdentifiers = data.associatedStoreIdentifiers;
            }
            if (data.maxDistance != null) {
                message.maxDistance = data.maxDistance;
            }
            if (data.appStoreCountries != null) {
                message.appStoreCountries = data.appStoreCountries;
            }
            if (data.transitType != null) {
                message.transitType = data.transitType;
            }
            if (data.groupingIdentifier != null) {
                message.groupingIdentifier = data.groupingIdentifier;
            }
            if (data.personalizationDetails != null) {
                message.personalizationDetails = PersonalizationDetails.fromObject(data.personalizationDetails);
            }
            if (data.appStoreIdentifiers != null) {
                message.appStoreIdentifiers = data.appStoreIdentifiers;
            }
            if (data.posterTicketStyle != null) {
                message.posterTicketStyle = data.posterTicketStyle;
            }
            if (data.suppressHeaderDarkening != null) {
                message.suppressHeaderDarkening = data.suppressHeaderDarkening;
            }
            if (data.useAutomaticColors != null) {
                message.useAutomaticColors = data.useAutomaticColors;
            }
            if (data.logoText != null) {
                message.logoText = data.logoText;
            }
            if (data.ignoreTimeComponents != null) {
                message.ignoreTimeComponents = data.ignoreTimeComponents;
            }
            return message;
        }
        toObject() {
            const data: {
                passType?: ApplePassType;
                userInfo?: string;
                appLaunchUrl?: string;
                associatedStoreIdentifiers?: number[];
                maxDistance?: number;
                appStoreCountries?: string[];
                transitType?: TransitType;
                groupingIdentifier?: string;
                personalizationDetails?: ReturnType<typeof PersonalizationDetails.prototype.toObject>;
                appStoreIdentifiers?: number[];
                posterTicketStyle?: boolean;
                suppressHeaderDarkening?: boolean;
                useAutomaticColors?: boolean;
                logoText?: string;
                ignoreTimeComponents?: boolean;
            } = {};
            if (this.passType != null) {
                data.passType = this.passType;
            }
            if (this.userInfo != null) {
                data.userInfo = this.userInfo;
            }
            if (this.appLaunchUrl != null) {
                data.appLaunchUrl = this.appLaunchUrl;
            }
            if (this.associatedStoreIdentifiers != null) {
                data.associatedStoreIdentifiers = this.associatedStoreIdentifiers;
            }
            if (this.maxDistance != null) {
                data.maxDistance = this.maxDistance;
            }
            if (this.appStoreCountries != null) {
                data.appStoreCountries = this.appStoreCountries;
            }
            if (this.transitType != null) {
                data.transitType = this.transitType;
            }
            if (this.groupingIdentifier != null) {
                data.groupingIdentifier = this.groupingIdentifier;
            }
            if (this.personalizationDetails != null) {
                data.personalizationDetails = this.personalizationDetails.toObject();
            }
            if (this.appStoreIdentifiers != null) {
                data.appStoreIdentifiers = this.appStoreIdentifiers;
            }
            if (this.posterTicketStyle != null) {
                data.posterTicketStyle = this.posterTicketStyle;
            }
            if (this.suppressHeaderDarkening != null) {
                data.suppressHeaderDarkening = this.suppressHeaderDarkening;
            }
            if (this.useAutomaticColors != null) {
                data.useAutomaticColors = this.useAutomaticColors;
            }
            if (this.logoText != null) {
                data.logoText = this.logoText;
            }
            if (this.ignoreTimeComponents != null) {
                data.ignoreTimeComponents = this.ignoreTimeComponents;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.passType != ApplePassType.APPLE_NOT_SUPPORTED)
                writer.writeEnum(1, this.passType);
            if (this.userInfo.length)
                writer.writeString(2, this.userInfo);
            if (this.appLaunchUrl.length)
                writer.writeString(3, this.appLaunchUrl);
            if (this.associatedStoreIdentifiers.length)
                writer.writePackedUint32(4, this.associatedStoreIdentifiers);
            if (this.maxDistance != 0)
                writer.writeUint32(5, this.maxDistance);
            if (this.appStoreCountries.length)
                writer.writeRepeatedString(6, this.appStoreCountries);
            if (this.transitType != TransitType.TRANSIT_TYPE_DO_NOT_USE)
                writer.writeEnum(7, this.transitType);
            if (this.groupingIdentifier.length)
                writer.writeString(8, this.groupingIdentifier);
            if (this.hasPersonalizationDetails)
                writer.writeMessage(9, this.personalizationDetails, () => this.personalizationDetails.serialize(writer));
            if (this.appStoreIdentifiers.length)
                writer.writePackedUint64(10, this.appStoreIdentifiers);
            if (this.posterTicketStyle != false)
                writer.writeBool(11, this.posterTicketStyle);
            if (this.suppressHeaderDarkening != false)
                writer.writeBool(12, this.suppressHeaderDarkening);
            if (this.useAutomaticColors != false)
                writer.writeBool(13, this.useAutomaticColors);
            if (this.logoText.length)
                writer.writeString(14, this.logoText);
            if (this.ignoreTimeComponents != false)
                writer.writeBool(15, this.ignoreTimeComponents);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppleWalletSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppleWalletSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.passType = reader.readEnum();
                        break;
                    case 2:
                        message.userInfo = reader.readString();
                        break;
                    case 3:
                        message.appLaunchUrl = reader.readString();
                        break;
                    case 4:
                        message.associatedStoreIdentifiers = reader.readPackedUint32();
                        break;
                    case 5:
                        message.maxDistance = reader.readUint32();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.transitType = reader.readEnum();
                        break;
                    case 8:
                        message.groupingIdentifier = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.personalizationDetails, () => message.personalizationDetails = PersonalizationDetails.deserialize(reader));
                        break;
                    case 10:
                        message.appStoreIdentifiers = reader.readPackedUint64();
                        break;
                    case 11:
                        message.posterTicketStyle = reader.readBool();
                        break;
                    case 12:
                        message.suppressHeaderDarkening = reader.readBool();
                        break;
                    case 13:
                        message.useAutomaticColors = reader.readBool();
                        break;
                    case 14:
                        message.logoText = reader.readString();
                        break;
                    case 15:
                        message.ignoreTimeComponents = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AppleWalletSettings {
            return AppleWalletSettings.deserialize(bytes);
        }
    }
    export class PersonalizationDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            description?: string;
            requiredPersonalizationData?: PersonalizedDataField[];
            termsAndConditions?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("requiredPersonalizationData" in data && data.requiredPersonalizationData != undefined) {
                    this.requiredPersonalizationData = data.requiredPersonalizationData;
                }
                if ("termsAndConditions" in data && data.termsAndConditions != undefined) {
                    this.termsAndConditions = data.termsAndConditions;
                }
            }
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get requiredPersonalizationData() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as PersonalizedDataField[];
        }
        set requiredPersonalizationData(value: PersonalizedDataField[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get termsAndConditions() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set termsAndConditions(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            description?: string;
            requiredPersonalizationData?: PersonalizedDataField[];
            termsAndConditions?: string;
        }): PersonalizationDetails {
            const message = new PersonalizationDetails({});
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.requiredPersonalizationData != null) {
                message.requiredPersonalizationData = data.requiredPersonalizationData;
            }
            if (data.termsAndConditions != null) {
                message.termsAndConditions = data.termsAndConditions;
            }
            return message;
        }
        toObject() {
            const data: {
                description?: string;
                requiredPersonalizationData?: PersonalizedDataField[];
                termsAndConditions?: string;
            } = {};
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.requiredPersonalizationData != null) {
                data.requiredPersonalizationData = this.requiredPersonalizationData;
            }
            if (this.termsAndConditions != null) {
                data.termsAndConditions = this.termsAndConditions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.description.length)
                writer.writeString(1, this.description);
            if (this.requiredPersonalizationData.length)
                writer.writePackedEnum(2, this.requiredPersonalizationData);
            if (this.termsAndConditions.length)
                writer.writeString(3, this.termsAndConditions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PersonalizationDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PersonalizationDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.description = reader.readString();
                        break;
                    case 2:
                        message.requiredPersonalizationData = reader.readPackedEnum();
                        break;
                    case 3:
                        message.termsAndConditions = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PersonalizationDetails {
            return PersonalizationDetails.deserialize(bytes);
        }
    }
    export class GooglePaySettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            passType?: GooglePayPassType;
            androidApp?: GooglePayApp;
            iosApp?: GooglePayApp;
            webApp?: GooglePayApp;
            classTemplateInfo?: string;
            backgroundColor?: string;
            languageOverrides?: dependency_2.io.LanguageCode[];
            screenshotEligibility?: ScreenshotEligibility;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("passType" in data && data.passType != undefined) {
                    this.passType = data.passType;
                }
                if ("androidApp" in data && data.androidApp != undefined) {
                    this.androidApp = data.androidApp;
                }
                if ("iosApp" in data && data.iosApp != undefined) {
                    this.iosApp = data.iosApp;
                }
                if ("webApp" in data && data.webApp != undefined) {
                    this.webApp = data.webApp;
                }
                if ("classTemplateInfo" in data && data.classTemplateInfo != undefined) {
                    this.classTemplateInfo = data.classTemplateInfo;
                }
                if ("backgroundColor" in data && data.backgroundColor != undefined) {
                    this.backgroundColor = data.backgroundColor;
                }
                if ("languageOverrides" in data && data.languageOverrides != undefined) {
                    this.languageOverrides = data.languageOverrides;
                }
                if ("screenshotEligibility" in data && data.screenshotEligibility != undefined) {
                    this.screenshotEligibility = data.screenshotEligibility;
                }
            }
        }
        get passType() {
            return pb_1.Message.getFieldWithDefault(this, 1, GooglePayPassType.GOOGLE_PAY_NOT_SUPPORTED) as GooglePayPassType;
        }
        set passType(value: GooglePayPassType) {
            pb_1.Message.setField(this, 1, value);
        }
        get androidApp() {
            return pb_1.Message.getWrapperField(this, GooglePayApp, 2) as GooglePayApp;
        }
        set androidApp(value: GooglePayApp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasAndroidApp() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get iosApp() {
            return pb_1.Message.getWrapperField(this, GooglePayApp, 3) as GooglePayApp;
        }
        set iosApp(value: GooglePayApp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasIosApp() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get webApp() {
            return pb_1.Message.getWrapperField(this, GooglePayApp, 4) as GooglePayApp;
        }
        set webApp(value: GooglePayApp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasWebApp() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get classTemplateInfo() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set classTemplateInfo(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get backgroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set backgroundColor(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get languageOverrides() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as dependency_2.io.LanguageCode[];
        }
        set languageOverrides(value: dependency_2.io.LanguageCode[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get screenshotEligibility() {
            return pb_1.Message.getFieldWithDefault(this, 8, ScreenshotEligibility.SCREENSHOT_ELIGIBILITY_UNSPECIFIED) as ScreenshotEligibility;
        }
        set screenshotEligibility(value: ScreenshotEligibility) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            passType?: GooglePayPassType;
            androidApp?: ReturnType<typeof GooglePayApp.prototype.toObject>;
            iosApp?: ReturnType<typeof GooglePayApp.prototype.toObject>;
            webApp?: ReturnType<typeof GooglePayApp.prototype.toObject>;
            classTemplateInfo?: string;
            backgroundColor?: string;
            languageOverrides?: dependency_2.io.LanguageCode[];
            screenshotEligibility?: ScreenshotEligibility;
        }): GooglePaySettings {
            const message = new GooglePaySettings({});
            if (data.passType != null) {
                message.passType = data.passType;
            }
            if (data.androidApp != null) {
                message.androidApp = GooglePayApp.fromObject(data.androidApp);
            }
            if (data.iosApp != null) {
                message.iosApp = GooglePayApp.fromObject(data.iosApp);
            }
            if (data.webApp != null) {
                message.webApp = GooglePayApp.fromObject(data.webApp);
            }
            if (data.classTemplateInfo != null) {
                message.classTemplateInfo = data.classTemplateInfo;
            }
            if (data.backgroundColor != null) {
                message.backgroundColor = data.backgroundColor;
            }
            if (data.languageOverrides != null) {
                message.languageOverrides = data.languageOverrides;
            }
            if (data.screenshotEligibility != null) {
                message.screenshotEligibility = data.screenshotEligibility;
            }
            return message;
        }
        toObject() {
            const data: {
                passType?: GooglePayPassType;
                androidApp?: ReturnType<typeof GooglePayApp.prototype.toObject>;
                iosApp?: ReturnType<typeof GooglePayApp.prototype.toObject>;
                webApp?: ReturnType<typeof GooglePayApp.prototype.toObject>;
                classTemplateInfo?: string;
                backgroundColor?: string;
                languageOverrides?: dependency_2.io.LanguageCode[];
                screenshotEligibility?: ScreenshotEligibility;
            } = {};
            if (this.passType != null) {
                data.passType = this.passType;
            }
            if (this.androidApp != null) {
                data.androidApp = this.androidApp.toObject();
            }
            if (this.iosApp != null) {
                data.iosApp = this.iosApp.toObject();
            }
            if (this.webApp != null) {
                data.webApp = this.webApp.toObject();
            }
            if (this.classTemplateInfo != null) {
                data.classTemplateInfo = this.classTemplateInfo;
            }
            if (this.backgroundColor != null) {
                data.backgroundColor = this.backgroundColor;
            }
            if (this.languageOverrides != null) {
                data.languageOverrides = this.languageOverrides;
            }
            if (this.screenshotEligibility != null) {
                data.screenshotEligibility = this.screenshotEligibility;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.passType != GooglePayPassType.GOOGLE_PAY_NOT_SUPPORTED)
                writer.writeEnum(1, this.passType);
            if (this.hasAndroidApp)
                writer.writeMessage(2, this.androidApp, () => this.androidApp.serialize(writer));
            if (this.hasIosApp)
                writer.writeMessage(3, this.iosApp, () => this.iosApp.serialize(writer));
            if (this.hasWebApp)
                writer.writeMessage(4, this.webApp, () => this.webApp.serialize(writer));
            if (this.classTemplateInfo.length)
                writer.writeString(5, this.classTemplateInfo);
            if (this.backgroundColor.length)
                writer.writeString(6, this.backgroundColor);
            if (this.languageOverrides.length)
                writer.writePackedEnum(7, this.languageOverrides);
            if (this.screenshotEligibility != ScreenshotEligibility.SCREENSHOT_ELIGIBILITY_UNSPECIFIED)
                writer.writeEnum(8, this.screenshotEligibility);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GooglePaySettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GooglePaySettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.passType = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.androidApp, () => message.androidApp = GooglePayApp.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.iosApp, () => message.iosApp = GooglePayApp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.webApp, () => message.webApp = GooglePayApp.deserialize(reader));
                        break;
                    case 5:
                        message.classTemplateInfo = reader.readString();
                        break;
                    case 6:
                        message.backgroundColor = reader.readString();
                        break;
                    case 7:
                        message.languageOverrides = reader.readPackedEnum();
                        break;
                    case 8:
                        message.screenshotEligibility = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GooglePaySettings {
            return GooglePaySettings.deserialize(bytes);
        }
    }
    export class GooglePayApp extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: dependency_1.io.Url;
            title?: string;
            localizedTitle?: dependency_2.io.LocalizedString;
            description?: string;
            localizedDescription?: dependency_2.io.LocalizedString;
            urlDescription?: string;
            localizedUrlDescription?: dependency_2.io.LocalizedString;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("localizedTitle" in data && data.localizedTitle != undefined) {
                    this.localizedTitle = data.localizedTitle;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("localizedDescription" in data && data.localizedDescription != undefined) {
                    this.localizedDescription = data.localizedDescription;
                }
                if ("urlDescription" in data && data.urlDescription != undefined) {
                    this.urlDescription = data.urlDescription;
                }
                if ("localizedUrlDescription" in data && data.localizedUrlDescription != undefined) {
                    this.localizedUrlDescription = data.localizedUrlDescription;
                }
            }
        }
        get url() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Url, 1) as dependency_1.io.Url;
        }
        set url(value: dependency_1.io.Url) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasUrl() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get localizedTitle() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 3) as dependency_2.io.LocalizedString;
        }
        set localizedTitle(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocalizedTitle() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get localizedDescription() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 5) as dependency_2.io.LocalizedString;
        }
        set localizedDescription(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasLocalizedDescription() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get urlDescription() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set urlDescription(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get localizedUrlDescription() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 7) as dependency_2.io.LocalizedString;
        }
        set localizedUrlDescription(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasLocalizedUrlDescription() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            url?: ReturnType<typeof dependency_1.io.Url.prototype.toObject>;
            title?: string;
            localizedTitle?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            description?: string;
            localizedDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            urlDescription?: string;
            localizedUrlDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
        }): GooglePayApp {
            const message = new GooglePayApp({});
            if (data.url != null) {
                message.url = dependency_1.io.Url.fromObject(data.url);
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.localizedTitle != null) {
                message.localizedTitle = dependency_2.io.LocalizedString.fromObject(data.localizedTitle);
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.localizedDescription != null) {
                message.localizedDescription = dependency_2.io.LocalizedString.fromObject(data.localizedDescription);
            }
            if (data.urlDescription != null) {
                message.urlDescription = data.urlDescription;
            }
            if (data.localizedUrlDescription != null) {
                message.localizedUrlDescription = dependency_2.io.LocalizedString.fromObject(data.localizedUrlDescription);
            }
            return message;
        }
        toObject() {
            const data: {
                url?: ReturnType<typeof dependency_1.io.Url.prototype.toObject>;
                title?: string;
                localizedTitle?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                description?: string;
                localizedDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                urlDescription?: string;
                localizedUrlDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            } = {};
            if (this.url != null) {
                data.url = this.url.toObject();
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.localizedTitle != null) {
                data.localizedTitle = this.localizedTitle.toObject();
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.localizedDescription != null) {
                data.localizedDescription = this.localizedDescription.toObject();
            }
            if (this.urlDescription != null) {
                data.urlDescription = this.urlDescription;
            }
            if (this.localizedUrlDescription != null) {
                data.localizedUrlDescription = this.localizedUrlDescription.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasUrl)
                writer.writeMessage(1, this.url, () => this.url.serialize(writer));
            if (this.title.length)
                writer.writeString(2, this.title);
            if (this.hasLocalizedTitle)
                writer.writeMessage(3, this.localizedTitle, () => this.localizedTitle.serialize(writer));
            if (this.description.length)
                writer.writeString(4, this.description);
            if (this.hasLocalizedDescription)
                writer.writeMessage(5, this.localizedDescription, () => this.localizedDescription.serialize(writer));
            if (this.urlDescription.length)
                writer.writeString(6, this.urlDescription);
            if (this.hasLocalizedUrlDescription)
                writer.writeMessage(7, this.localizedUrlDescription, () => this.localizedUrlDescription.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GooglePayApp {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GooglePayApp();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.url, () => message.url = dependency_1.io.Url.deserialize(reader));
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.localizedTitle, () => message.localizedTitle = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 4:
                        message.description = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.localizedDescription, () => message.localizedDescription = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 6:
                        message.urlDescription = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.localizedUrlDescription, () => message.localizedUrlDescription = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GooglePayApp {
            return GooglePayApp.deserialize(bytes);
        }
    }
    export class Data extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            dataFields?: DataField[];
            dataCollectionPageSettings?: DataCollectionPageSettings;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dataFields" in data && data.dataFields != undefined) {
                    this.dataFields = data.dataFields;
                }
                if ("dataCollectionPageSettings" in data && data.dataCollectionPageSettings != undefined) {
                    this.dataCollectionPageSettings = data.dataCollectionPageSettings;
                }
            }
        }
        get dataFields() {
            return pb_1.Message.getRepeatedWrapperField(this, DataField, 1) as DataField[];
        }
        set dataFields(value: DataField[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get dataCollectionPageSettings() {
            return pb_1.Message.getWrapperField(this, DataCollectionPageSettings, 2) as DataCollectionPageSettings;
        }
        set dataCollectionPageSettings(value: DataCollectionPageSettings) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasDataCollectionPageSettings() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            dataFields?: ReturnType<typeof DataField.prototype.toObject>[];
            dataCollectionPageSettings?: ReturnType<typeof DataCollectionPageSettings.prototype.toObject>;
        }): Data {
            const message = new Data({});
            if (data.dataFields != null) {
                message.dataFields = data.dataFields.map(item => DataField.fromObject(item));
            }
            if (data.dataCollectionPageSettings != null) {
                message.dataCollectionPageSettings = DataCollectionPageSettings.fromObject(data.dataCollectionPageSettings);
            }
            return message;
        }
        toObject() {
            const data: {
                dataFields?: ReturnType<typeof DataField.prototype.toObject>[];
                dataCollectionPageSettings?: ReturnType<typeof DataCollectionPageSettings.prototype.toObject>;
            } = {};
            if (this.dataFields != null) {
                data.dataFields = this.dataFields.map((item: DataField) => item.toObject());
            }
            if (this.dataCollectionPageSettings != null) {
                data.dataCollectionPageSettings = this.dataCollectionPageSettings.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.dataFields.length)
                writer.writeRepeatedMessage(1, this.dataFields, (item: DataField) => item.serialize(writer));
            if (this.hasDataCollectionPageSettings)
                writer.writeMessage(2, this.dataCollectionPageSettings, () => this.dataCollectionPageSettings.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Data {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Data();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.dataFields, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DataField.deserialize(reader), DataField));
                        break;
                    case 2:
                        reader.readMessage(message.dataCollectionPageSettings, () => message.dataCollectionPageSettings = DataCollectionPageSettings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Data {
            return Data.deserialize(bytes);
        }
    }
    export class LandingPageSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            landingLocalizationOverride?: dependency_2.io.LanguageCode[];
            preferThirdPartyAndroidWallet?: dependency_1.io.Toggle;
            preferredAndroidWallet?: SupportedAndroidWallet;
            localizedTextOverrides?: Map<string, dependency_2.io.LocalizedString>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("landingLocalizationOverride" in data && data.landingLocalizationOverride != undefined) {
                    this.landingLocalizationOverride = data.landingLocalizationOverride;
                }
                if ("preferThirdPartyAndroidWallet" in data && data.preferThirdPartyAndroidWallet != undefined) {
                    this.preferThirdPartyAndroidWallet = data.preferThirdPartyAndroidWallet;
                }
                if ("preferredAndroidWallet" in data && data.preferredAndroidWallet != undefined) {
                    this.preferredAndroidWallet = data.preferredAndroidWallet;
                }
                if ("localizedTextOverrides" in data && data.localizedTextOverrides != undefined) {
                    this.localizedTextOverrides = data.localizedTextOverrides;
                }
            }
            if (!this.localizedTextOverrides)
                this.localizedTextOverrides = new Map();
        }
        get landingLocalizationOverride() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as dependency_2.io.LanguageCode[];
        }
        set landingLocalizationOverride(value: dependency_2.io.LanguageCode[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get preferThirdPartyAndroidWallet() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.io.Toggle.DO_NOT_USE) as dependency_1.io.Toggle;
        }
        set preferThirdPartyAndroidWallet(value: dependency_1.io.Toggle) {
            pb_1.Message.setField(this, 2, value);
        }
        get preferredAndroidWallet() {
            return pb_1.Message.getFieldWithDefault(this, 3, SupportedAndroidWallet.ANDROID_WALLET_DO_NOT_USE) as SupportedAndroidWallet;
        }
        set preferredAndroidWallet(value: SupportedAndroidWallet) {
            pb_1.Message.setField(this, 3, value);
        }
        get localizedTextOverrides() {
            return pb_1.Message.getField(this, 4) as any as Map<string, dependency_2.io.LocalizedString>;
        }
        set localizedTextOverrides(value: Map<string, dependency_2.io.LocalizedString>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        static fromObject(data: {
            landingLocalizationOverride?: dependency_2.io.LanguageCode[];
            preferThirdPartyAndroidWallet?: dependency_1.io.Toggle;
            preferredAndroidWallet?: SupportedAndroidWallet;
            localizedTextOverrides?: {
                [key: string]: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            };
        }): LandingPageSettings {
            const message = new LandingPageSettings({});
            if (data.landingLocalizationOverride != null) {
                message.landingLocalizationOverride = data.landingLocalizationOverride;
            }
            if (data.preferThirdPartyAndroidWallet != null) {
                message.preferThirdPartyAndroidWallet = data.preferThirdPartyAndroidWallet;
            }
            if (data.preferredAndroidWallet != null) {
                message.preferredAndroidWallet = data.preferredAndroidWallet;
            }
            if (typeof data.localizedTextOverrides == "object") {
                message.localizedTextOverrides = new Map(Object.entries(data.localizedTextOverrides).map(([key, value]) => [key, dependency_2.io.LocalizedString.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                landingLocalizationOverride?: dependency_2.io.LanguageCode[];
                preferThirdPartyAndroidWallet?: dependency_1.io.Toggle;
                preferredAndroidWallet?: SupportedAndroidWallet;
                localizedTextOverrides?: {
                    [key: string]: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                };
            } = {};
            if (this.landingLocalizationOverride != null) {
                data.landingLocalizationOverride = this.landingLocalizationOverride;
            }
            if (this.preferThirdPartyAndroidWallet != null) {
                data.preferThirdPartyAndroidWallet = this.preferThirdPartyAndroidWallet;
            }
            if (this.preferredAndroidWallet != null) {
                data.preferredAndroidWallet = this.preferredAndroidWallet;
            }
            if (this.localizedTextOverrides != null) {
                data.localizedTextOverrides = (Object.fromEntries)((Array.from)(this.localizedTextOverrides).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.landingLocalizationOverride.length)
                writer.writePackedEnum(1, this.landingLocalizationOverride);
            if (this.preferThirdPartyAndroidWallet != dependency_1.io.Toggle.DO_NOT_USE)
                writer.writeEnum(2, this.preferThirdPartyAndroidWallet);
            if (this.preferredAndroidWallet != SupportedAndroidWallet.ANDROID_WALLET_DO_NOT_USE)
                writer.writeEnum(3, this.preferredAndroidWallet);
            for (const [key, value] of this.localizedTextOverrides) {
                writer.writeMessage(4, this.localizedTextOverrides, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LandingPageSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LandingPageSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.landingLocalizationOverride = reader.readPackedEnum();
                        break;
                    case 2:
                        message.preferThirdPartyAndroidWallet = reader.readEnum();
                        break;
                    case 3:
                        message.preferredAndroidWallet = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.localizedTextOverrides as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_2.io.LocalizedString.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LandingPageSettings {
            return LandingPageSettings.deserialize(bytes);
        }
    }
    export class DataCollectionPageSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            title?: string;
            localizedTitle?: dependency_2.io.LocalizedString;
            description?: string;
            localizedDescription?: dependency_2.io.LocalizedString;
            submitButtonText?: string;
            localizedSubmitButtonText?: dependency_2.io.LocalizedString;
            loadingText?: string;
            localizedLoadingText?: dependency_2.io.LocalizedString;
            thankYouText?: string;
            localizedThankYouText?: dependency_2.io.LocalizedString;
            pageBackgroundColor?: string;
            localizedPageBackgroundColor?: dependency_2.io.LocalizedString;
            trackingSettings?: dependency_6.io.TrackingSettings;
            submitButtonTextColor?: string;
            submitButtonBackgroundColor?: string;
            footerText?: string;
            localizedFooterText?: dependency_2.io.LocalizedString;
            cssOverrides?: string;
            passwordSettings?: PasswordSettings;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("localizedTitle" in data && data.localizedTitle != undefined) {
                    this.localizedTitle = data.localizedTitle;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("localizedDescription" in data && data.localizedDescription != undefined) {
                    this.localizedDescription = data.localizedDescription;
                }
                if ("submitButtonText" in data && data.submitButtonText != undefined) {
                    this.submitButtonText = data.submitButtonText;
                }
                if ("localizedSubmitButtonText" in data && data.localizedSubmitButtonText != undefined) {
                    this.localizedSubmitButtonText = data.localizedSubmitButtonText;
                }
                if ("loadingText" in data && data.loadingText != undefined) {
                    this.loadingText = data.loadingText;
                }
                if ("localizedLoadingText" in data && data.localizedLoadingText != undefined) {
                    this.localizedLoadingText = data.localizedLoadingText;
                }
                if ("thankYouText" in data && data.thankYouText != undefined) {
                    this.thankYouText = data.thankYouText;
                }
                if ("localizedThankYouText" in data && data.localizedThankYouText != undefined) {
                    this.localizedThankYouText = data.localizedThankYouText;
                }
                if ("pageBackgroundColor" in data && data.pageBackgroundColor != undefined) {
                    this.pageBackgroundColor = data.pageBackgroundColor;
                }
                if ("localizedPageBackgroundColor" in data && data.localizedPageBackgroundColor != undefined) {
                    this.localizedPageBackgroundColor = data.localizedPageBackgroundColor;
                }
                if ("trackingSettings" in data && data.trackingSettings != undefined) {
                    this.trackingSettings = data.trackingSettings;
                }
                if ("submitButtonTextColor" in data && data.submitButtonTextColor != undefined) {
                    this.submitButtonTextColor = data.submitButtonTextColor;
                }
                if ("submitButtonBackgroundColor" in data && data.submitButtonBackgroundColor != undefined) {
                    this.submitButtonBackgroundColor = data.submitButtonBackgroundColor;
                }
                if ("footerText" in data && data.footerText != undefined) {
                    this.footerText = data.footerText;
                }
                if ("localizedFooterText" in data && data.localizedFooterText != undefined) {
                    this.localizedFooterText = data.localizedFooterText;
                }
                if ("cssOverrides" in data && data.cssOverrides != undefined) {
                    this.cssOverrides = data.cssOverrides;
                }
                if ("passwordSettings" in data && data.passwordSettings != undefined) {
                    this.passwordSettings = data.passwordSettings;
                }
            }
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get localizedTitle() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 2) as dependency_2.io.LocalizedString;
        }
        set localizedTitle(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasLocalizedTitle() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get localizedDescription() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 4) as dependency_2.io.LocalizedString;
        }
        set localizedDescription(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasLocalizedDescription() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get submitButtonText() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set submitButtonText(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get localizedSubmitButtonText() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 6) as dependency_2.io.LocalizedString;
        }
        set localizedSubmitButtonText(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasLocalizedSubmitButtonText() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get loadingText() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set loadingText(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get localizedLoadingText() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 8) as dependency_2.io.LocalizedString;
        }
        set localizedLoadingText(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasLocalizedLoadingText() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get thankYouText() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set thankYouText(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get localizedThankYouText() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 10) as dependency_2.io.LocalizedString;
        }
        set localizedThankYouText(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasLocalizedThankYouText() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get pageBackgroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set pageBackgroundColor(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get localizedPageBackgroundColor() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 12) as dependency_2.io.LocalizedString;
        }
        set localizedPageBackgroundColor(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get hasLocalizedPageBackgroundColor() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get trackingSettings() {
            return pb_1.Message.getWrapperField(this, dependency_6.io.TrackingSettings, 13) as dependency_6.io.TrackingSettings;
        }
        set trackingSettings(value: dependency_6.io.TrackingSettings) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasTrackingSettings() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get submitButtonTextColor() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set submitButtonTextColor(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get submitButtonBackgroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set submitButtonBackgroundColor(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get footerText() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set footerText(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get localizedFooterText() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 17) as dependency_2.io.LocalizedString;
        }
        set localizedFooterText(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get hasLocalizedFooterText() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get cssOverrides() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set cssOverrides(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get passwordSettings() {
            return pb_1.Message.getWrapperField(this, PasswordSettings, 19) as PasswordSettings;
        }
        set passwordSettings(value: PasswordSettings) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get hasPasswordSettings() {
            return pb_1.Message.getField(this, 19) != null;
        }
        static fromObject(data: {
            title?: string;
            localizedTitle?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            description?: string;
            localizedDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            submitButtonText?: string;
            localizedSubmitButtonText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            loadingText?: string;
            localizedLoadingText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            thankYouText?: string;
            localizedThankYouText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            pageBackgroundColor?: string;
            localizedPageBackgroundColor?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            trackingSettings?: ReturnType<typeof dependency_6.io.TrackingSettings.prototype.toObject>;
            submitButtonTextColor?: string;
            submitButtonBackgroundColor?: string;
            footerText?: string;
            localizedFooterText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            cssOverrides?: string;
            passwordSettings?: ReturnType<typeof PasswordSettings.prototype.toObject>;
        }): DataCollectionPageSettings {
            const message = new DataCollectionPageSettings({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.localizedTitle != null) {
                message.localizedTitle = dependency_2.io.LocalizedString.fromObject(data.localizedTitle);
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.localizedDescription != null) {
                message.localizedDescription = dependency_2.io.LocalizedString.fromObject(data.localizedDescription);
            }
            if (data.submitButtonText != null) {
                message.submitButtonText = data.submitButtonText;
            }
            if (data.localizedSubmitButtonText != null) {
                message.localizedSubmitButtonText = dependency_2.io.LocalizedString.fromObject(data.localizedSubmitButtonText);
            }
            if (data.loadingText != null) {
                message.loadingText = data.loadingText;
            }
            if (data.localizedLoadingText != null) {
                message.localizedLoadingText = dependency_2.io.LocalizedString.fromObject(data.localizedLoadingText);
            }
            if (data.thankYouText != null) {
                message.thankYouText = data.thankYouText;
            }
            if (data.localizedThankYouText != null) {
                message.localizedThankYouText = dependency_2.io.LocalizedString.fromObject(data.localizedThankYouText);
            }
            if (data.pageBackgroundColor != null) {
                message.pageBackgroundColor = data.pageBackgroundColor;
            }
            if (data.localizedPageBackgroundColor != null) {
                message.localizedPageBackgroundColor = dependency_2.io.LocalizedString.fromObject(data.localizedPageBackgroundColor);
            }
            if (data.trackingSettings != null) {
                message.trackingSettings = dependency_6.io.TrackingSettings.fromObject(data.trackingSettings);
            }
            if (data.submitButtonTextColor != null) {
                message.submitButtonTextColor = data.submitButtonTextColor;
            }
            if (data.submitButtonBackgroundColor != null) {
                message.submitButtonBackgroundColor = data.submitButtonBackgroundColor;
            }
            if (data.footerText != null) {
                message.footerText = data.footerText;
            }
            if (data.localizedFooterText != null) {
                message.localizedFooterText = dependency_2.io.LocalizedString.fromObject(data.localizedFooterText);
            }
            if (data.cssOverrides != null) {
                message.cssOverrides = data.cssOverrides;
            }
            if (data.passwordSettings != null) {
                message.passwordSettings = PasswordSettings.fromObject(data.passwordSettings);
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                localizedTitle?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                description?: string;
                localizedDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                submitButtonText?: string;
                localizedSubmitButtonText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                loadingText?: string;
                localizedLoadingText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                thankYouText?: string;
                localizedThankYouText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                pageBackgroundColor?: string;
                localizedPageBackgroundColor?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                trackingSettings?: ReturnType<typeof dependency_6.io.TrackingSettings.prototype.toObject>;
                submitButtonTextColor?: string;
                submitButtonBackgroundColor?: string;
                footerText?: string;
                localizedFooterText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                cssOverrides?: string;
                passwordSettings?: ReturnType<typeof PasswordSettings.prototype.toObject>;
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.localizedTitle != null) {
                data.localizedTitle = this.localizedTitle.toObject();
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.localizedDescription != null) {
                data.localizedDescription = this.localizedDescription.toObject();
            }
            if (this.submitButtonText != null) {
                data.submitButtonText = this.submitButtonText;
            }
            if (this.localizedSubmitButtonText != null) {
                data.localizedSubmitButtonText = this.localizedSubmitButtonText.toObject();
            }
            if (this.loadingText != null) {
                data.loadingText = this.loadingText;
            }
            if (this.localizedLoadingText != null) {
                data.localizedLoadingText = this.localizedLoadingText.toObject();
            }
            if (this.thankYouText != null) {
                data.thankYouText = this.thankYouText;
            }
            if (this.localizedThankYouText != null) {
                data.localizedThankYouText = this.localizedThankYouText.toObject();
            }
            if (this.pageBackgroundColor != null) {
                data.pageBackgroundColor = this.pageBackgroundColor;
            }
            if (this.localizedPageBackgroundColor != null) {
                data.localizedPageBackgroundColor = this.localizedPageBackgroundColor.toObject();
            }
            if (this.trackingSettings != null) {
                data.trackingSettings = this.trackingSettings.toObject();
            }
            if (this.submitButtonTextColor != null) {
                data.submitButtonTextColor = this.submitButtonTextColor;
            }
            if (this.submitButtonBackgroundColor != null) {
                data.submitButtonBackgroundColor = this.submitButtonBackgroundColor;
            }
            if (this.footerText != null) {
                data.footerText = this.footerText;
            }
            if (this.localizedFooterText != null) {
                data.localizedFooterText = this.localizedFooterText.toObject();
            }
            if (this.cssOverrides != null) {
                data.cssOverrides = this.cssOverrides;
            }
            if (this.passwordSettings != null) {
                data.passwordSettings = this.passwordSettings.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(1, this.title);
            if (this.hasLocalizedTitle)
                writer.writeMessage(2, this.localizedTitle, () => this.localizedTitle.serialize(writer));
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.hasLocalizedDescription)
                writer.writeMessage(4, this.localizedDescription, () => this.localizedDescription.serialize(writer));
            if (this.submitButtonText.length)
                writer.writeString(5, this.submitButtonText);
            if (this.hasLocalizedSubmitButtonText)
                writer.writeMessage(6, this.localizedSubmitButtonText, () => this.localizedSubmitButtonText.serialize(writer));
            if (this.loadingText.length)
                writer.writeString(7, this.loadingText);
            if (this.hasLocalizedLoadingText)
                writer.writeMessage(8, this.localizedLoadingText, () => this.localizedLoadingText.serialize(writer));
            if (this.thankYouText.length)
                writer.writeString(9, this.thankYouText);
            if (this.hasLocalizedThankYouText)
                writer.writeMessage(10, this.localizedThankYouText, () => this.localizedThankYouText.serialize(writer));
            if (this.pageBackgroundColor.length)
                writer.writeString(11, this.pageBackgroundColor);
            if (this.hasLocalizedPageBackgroundColor)
                writer.writeMessage(12, this.localizedPageBackgroundColor, () => this.localizedPageBackgroundColor.serialize(writer));
            if (this.hasTrackingSettings)
                writer.writeMessage(13, this.trackingSettings, () => this.trackingSettings.serialize(writer));
            if (this.submitButtonTextColor.length)
                writer.writeString(14, this.submitButtonTextColor);
            if (this.submitButtonBackgroundColor.length)
                writer.writeString(15, this.submitButtonBackgroundColor);
            if (this.footerText.length)
                writer.writeString(16, this.footerText);
            if (this.hasLocalizedFooterText)
                writer.writeMessage(17, this.localizedFooterText, () => this.localizedFooterText.serialize(writer));
            if (this.cssOverrides.length)
                writer.writeString(18, this.cssOverrides);
            if (this.hasPasswordSettings)
                writer.writeMessage(19, this.passwordSettings, () => this.passwordSettings.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataCollectionPageSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataCollectionPageSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.localizedTitle, () => message.localizedTitle = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.localizedDescription, () => message.localizedDescription = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 5:
                        message.submitButtonText = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.localizedSubmitButtonText, () => message.localizedSubmitButtonText = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 7:
                        message.loadingText = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.localizedLoadingText, () => message.localizedLoadingText = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 9:
                        message.thankYouText = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.localizedThankYouText, () => message.localizedThankYouText = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 11:
                        message.pageBackgroundColor = reader.readString();
                        break;
                    case 12:
                        reader.readMessage(message.localizedPageBackgroundColor, () => message.localizedPageBackgroundColor = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.trackingSettings, () => message.trackingSettings = dependency_6.io.TrackingSettings.deserialize(reader));
                        break;
                    case 14:
                        message.submitButtonTextColor = reader.readString();
                        break;
                    case 15:
                        message.submitButtonBackgroundColor = reader.readString();
                        break;
                    case 16:
                        message.footerText = reader.readString();
                        break;
                    case 17:
                        reader.readMessage(message.localizedFooterText, () => message.localizedFooterText = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 18:
                        message.cssOverrides = reader.readString();
                        break;
                    case 19:
                        reader.readMessage(message.passwordSettings, () => message.passwordSettings = PasswordSettings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataCollectionPageSettings {
            return DataCollectionPageSettings.deserialize(bytes);
        }
    }
    export class PasswordSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            passwordType?: PasswordType;
            password?: string;
            inputLabelText?: string;
            localizedInputLabelText?: dependency_2.io.LocalizedString;
            errorText?: string;
            localizedErrorText?: dependency_2.io.LocalizedString;
            headerText?: string;
            localizedHeaderText?: dependency_2.io.LocalizedString;
            buttonText?: string;
            localizedButtonText?: dependency_2.io.LocalizedString;
            titleText?: string;
            localizedTitleText?: dependency_2.io.LocalizedString;
            autoLogoutOnSubmit?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("passwordType" in data && data.passwordType != undefined) {
                    this.passwordType = data.passwordType;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("inputLabelText" in data && data.inputLabelText != undefined) {
                    this.inputLabelText = data.inputLabelText;
                }
                if ("localizedInputLabelText" in data && data.localizedInputLabelText != undefined) {
                    this.localizedInputLabelText = data.localizedInputLabelText;
                }
                if ("errorText" in data && data.errorText != undefined) {
                    this.errorText = data.errorText;
                }
                if ("localizedErrorText" in data && data.localizedErrorText != undefined) {
                    this.localizedErrorText = data.localizedErrorText;
                }
                if ("headerText" in data && data.headerText != undefined) {
                    this.headerText = data.headerText;
                }
                if ("localizedHeaderText" in data && data.localizedHeaderText != undefined) {
                    this.localizedHeaderText = data.localizedHeaderText;
                }
                if ("buttonText" in data && data.buttonText != undefined) {
                    this.buttonText = data.buttonText;
                }
                if ("localizedButtonText" in data && data.localizedButtonText != undefined) {
                    this.localizedButtonText = data.localizedButtonText;
                }
                if ("titleText" in data && data.titleText != undefined) {
                    this.titleText = data.titleText;
                }
                if ("localizedTitleText" in data && data.localizedTitleText != undefined) {
                    this.localizedTitleText = data.localizedTitleText;
                }
                if ("autoLogoutOnSubmit" in data && data.autoLogoutOnSubmit != undefined) {
                    this.autoLogoutOnSubmit = data.autoLogoutOnSubmit;
                }
            }
        }
        get passwordType() {
            return pb_1.Message.getFieldWithDefault(this, 1, PasswordType.PASSWORD_TYPE_DO_NOT_USE) as PasswordType;
        }
        set passwordType(value: PasswordType) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get inputLabelText() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set inputLabelText(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get localizedInputLabelText() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 4) as dependency_2.io.LocalizedString;
        }
        set localizedInputLabelText(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasLocalizedInputLabelText() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get errorText() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set errorText(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get localizedErrorText() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 6) as dependency_2.io.LocalizedString;
        }
        set localizedErrorText(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasLocalizedErrorText() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get headerText() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set headerText(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get localizedHeaderText() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 8) as dependency_2.io.LocalizedString;
        }
        set localizedHeaderText(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasLocalizedHeaderText() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get buttonText() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set buttonText(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get localizedButtonText() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 10) as dependency_2.io.LocalizedString;
        }
        set localizedButtonText(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasLocalizedButtonText() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get titleText() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set titleText(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get localizedTitleText() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 12) as dependency_2.io.LocalizedString;
        }
        set localizedTitleText(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get hasLocalizedTitleText() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get autoLogoutOnSubmit() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set autoLogoutOnSubmit(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            passwordType?: PasswordType;
            password?: string;
            inputLabelText?: string;
            localizedInputLabelText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            errorText?: string;
            localizedErrorText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            headerText?: string;
            localizedHeaderText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            buttonText?: string;
            localizedButtonText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            titleText?: string;
            localizedTitleText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            autoLogoutOnSubmit?: boolean;
        }): PasswordSettings {
            const message = new PasswordSettings({});
            if (data.passwordType != null) {
                message.passwordType = data.passwordType;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.inputLabelText != null) {
                message.inputLabelText = data.inputLabelText;
            }
            if (data.localizedInputLabelText != null) {
                message.localizedInputLabelText = dependency_2.io.LocalizedString.fromObject(data.localizedInputLabelText);
            }
            if (data.errorText != null) {
                message.errorText = data.errorText;
            }
            if (data.localizedErrorText != null) {
                message.localizedErrorText = dependency_2.io.LocalizedString.fromObject(data.localizedErrorText);
            }
            if (data.headerText != null) {
                message.headerText = data.headerText;
            }
            if (data.localizedHeaderText != null) {
                message.localizedHeaderText = dependency_2.io.LocalizedString.fromObject(data.localizedHeaderText);
            }
            if (data.buttonText != null) {
                message.buttonText = data.buttonText;
            }
            if (data.localizedButtonText != null) {
                message.localizedButtonText = dependency_2.io.LocalizedString.fromObject(data.localizedButtonText);
            }
            if (data.titleText != null) {
                message.titleText = data.titleText;
            }
            if (data.localizedTitleText != null) {
                message.localizedTitleText = dependency_2.io.LocalizedString.fromObject(data.localizedTitleText);
            }
            if (data.autoLogoutOnSubmit != null) {
                message.autoLogoutOnSubmit = data.autoLogoutOnSubmit;
            }
            return message;
        }
        toObject() {
            const data: {
                passwordType?: PasswordType;
                password?: string;
                inputLabelText?: string;
                localizedInputLabelText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                errorText?: string;
                localizedErrorText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                headerText?: string;
                localizedHeaderText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                buttonText?: string;
                localizedButtonText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                titleText?: string;
                localizedTitleText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                autoLogoutOnSubmit?: boolean;
            } = {};
            if (this.passwordType != null) {
                data.passwordType = this.passwordType;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.inputLabelText != null) {
                data.inputLabelText = this.inputLabelText;
            }
            if (this.localizedInputLabelText != null) {
                data.localizedInputLabelText = this.localizedInputLabelText.toObject();
            }
            if (this.errorText != null) {
                data.errorText = this.errorText;
            }
            if (this.localizedErrorText != null) {
                data.localizedErrorText = this.localizedErrorText.toObject();
            }
            if (this.headerText != null) {
                data.headerText = this.headerText;
            }
            if (this.localizedHeaderText != null) {
                data.localizedHeaderText = this.localizedHeaderText.toObject();
            }
            if (this.buttonText != null) {
                data.buttonText = this.buttonText;
            }
            if (this.localizedButtonText != null) {
                data.localizedButtonText = this.localizedButtonText.toObject();
            }
            if (this.titleText != null) {
                data.titleText = this.titleText;
            }
            if (this.localizedTitleText != null) {
                data.localizedTitleText = this.localizedTitleText.toObject();
            }
            if (this.autoLogoutOnSubmit != null) {
                data.autoLogoutOnSubmit = this.autoLogoutOnSubmit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.passwordType != PasswordType.PASSWORD_TYPE_DO_NOT_USE)
                writer.writeEnum(1, this.passwordType);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.inputLabelText.length)
                writer.writeString(3, this.inputLabelText);
            if (this.hasLocalizedInputLabelText)
                writer.writeMessage(4, this.localizedInputLabelText, () => this.localizedInputLabelText.serialize(writer));
            if (this.errorText.length)
                writer.writeString(5, this.errorText);
            if (this.hasLocalizedErrorText)
                writer.writeMessage(6, this.localizedErrorText, () => this.localizedErrorText.serialize(writer));
            if (this.headerText.length)
                writer.writeString(7, this.headerText);
            if (this.hasLocalizedHeaderText)
                writer.writeMessage(8, this.localizedHeaderText, () => this.localizedHeaderText.serialize(writer));
            if (this.buttonText.length)
                writer.writeString(9, this.buttonText);
            if (this.hasLocalizedButtonText)
                writer.writeMessage(10, this.localizedButtonText, () => this.localizedButtonText.serialize(writer));
            if (this.titleText.length)
                writer.writeString(11, this.titleText);
            if (this.hasLocalizedTitleText)
                writer.writeMessage(12, this.localizedTitleText, () => this.localizedTitleText.serialize(writer));
            if (this.autoLogoutOnSubmit != false)
                writer.writeBool(13, this.autoLogoutOnSubmit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PasswordSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PasswordSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.passwordType = reader.readEnum();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.inputLabelText = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.localizedInputLabelText, () => message.localizedInputLabelText = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 5:
                        message.errorText = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.localizedErrorText, () => message.localizedErrorText = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 7:
                        message.headerText = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.localizedHeaderText, () => message.localizedHeaderText = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 9:
                        message.buttonText = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.localizedButtonText, () => message.localizedButtonText = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 11:
                        message.titleText = reader.readString();
                        break;
                    case 12:
                        reader.readMessage(message.localizedTitleText, () => message.localizedTitleText = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 13:
                        message.autoLogoutOnSubmit = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PasswordSettings {
            return PasswordSettings.deserialize(bytes);
        }
    }
    export class PassTemplateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            template?: PassTemplate;
            Name?: string;
            ownerUsername?: string;
            protocol?: dependency_3.io.PassProtocol;
            revision?: number;
            createdAt?: dependency_9.google.protobuf.Timestamp;
            updatedAt?: dependency_9.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("template" in data && data.template != undefined) {
                    this.template = data.template;
                }
                if ("Name" in data && data.Name != undefined) {
                    this.Name = data.Name;
                }
                if ("ownerUsername" in data && data.ownerUsername != undefined) {
                    this.ownerUsername = data.ownerUsername;
                }
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("revision" in data && data.revision != undefined) {
                    this.revision = data.revision;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("updatedAt" in data && data.updatedAt != undefined) {
                    this.updatedAt = data.updatedAt;
                }
            }
        }
        get template() {
            return pb_1.Message.getWrapperField(this, PassTemplate, 1) as PassTemplate;
        }
        set template(value: PassTemplate) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasTemplate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get Name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set Name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get ownerUsername() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ownerUsername(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_3.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE) as dependency_3.io.PassProtocol;
        }
        set protocol(value: dependency_3.io.PassProtocol) {
            pb_1.Message.setField(this, 4, value);
        }
        get revision() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set revision(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get createdAt() {
            return pb_1.Message.getWrapperField(this, dependency_9.google.protobuf.Timestamp, 6) as dependency_9.google.protobuf.Timestamp;
        }
        set createdAt(value: dependency_9.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasCreatedAt() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get updatedAt() {
            return pb_1.Message.getWrapperField(this, dependency_9.google.protobuf.Timestamp, 7) as dependency_9.google.protobuf.Timestamp;
        }
        set updatedAt(value: dependency_9.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasUpdatedAt() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            template?: ReturnType<typeof PassTemplate.prototype.toObject>;
            Name?: string;
            ownerUsername?: string;
            protocol?: dependency_3.io.PassProtocol;
            revision?: number;
            createdAt?: ReturnType<typeof dependency_9.google.protobuf.Timestamp.prototype.toObject>;
            updatedAt?: ReturnType<typeof dependency_9.google.protobuf.Timestamp.prototype.toObject>;
        }): PassTemplateResponse {
            const message = new PassTemplateResponse({});
            if (data.template != null) {
                message.template = PassTemplate.fromObject(data.template);
            }
            if (data.Name != null) {
                message.Name = data.Name;
            }
            if (data.ownerUsername != null) {
                message.ownerUsername = data.ownerUsername;
            }
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.revision != null) {
                message.revision = data.revision;
            }
            if (data.createdAt != null) {
                message.createdAt = dependency_9.google.protobuf.Timestamp.fromObject(data.createdAt);
            }
            if (data.updatedAt != null) {
                message.updatedAt = dependency_9.google.protobuf.Timestamp.fromObject(data.updatedAt);
            }
            return message;
        }
        toObject() {
            const data: {
                template?: ReturnType<typeof PassTemplate.prototype.toObject>;
                Name?: string;
                ownerUsername?: string;
                protocol?: dependency_3.io.PassProtocol;
                revision?: number;
                createdAt?: ReturnType<typeof dependency_9.google.protobuf.Timestamp.prototype.toObject>;
                updatedAt?: ReturnType<typeof dependency_9.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.template != null) {
                data.template = this.template.toObject();
            }
            if (this.Name != null) {
                data.Name = this.Name;
            }
            if (this.ownerUsername != null) {
                data.ownerUsername = this.ownerUsername;
            }
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.revision != null) {
                data.revision = this.revision;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt.toObject();
            }
            if (this.updatedAt != null) {
                data.updatedAt = this.updatedAt.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasTemplate)
                writer.writeMessage(1, this.template, () => this.template.serialize(writer));
            if (this.Name.length)
                writer.writeString(2, this.Name);
            if (this.ownerUsername.length)
                writer.writeString(3, this.ownerUsername);
            if (this.protocol != dependency_3.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE)
                writer.writeEnum(4, this.protocol);
            if (this.revision != 0)
                writer.writeUint32(5, this.revision);
            if (this.hasCreatedAt)
                writer.writeMessage(6, this.createdAt, () => this.createdAt.serialize(writer));
            if (this.hasUpdatedAt)
                writer.writeMessage(7, this.updatedAt, () => this.updatedAt.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PassTemplateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PassTemplateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.template, () => message.template = PassTemplate.deserialize(reader));
                        break;
                    case 2:
                        message.Name = reader.readString();
                        break;
                    case 3:
                        message.ownerUsername = reader.readString();
                        break;
                    case 4:
                        message.protocol = reader.readEnum();
                        break;
                    case 5:
                        message.revision = reader.readUint32();
                        break;
                    case 6:
                        reader.readMessage(message.createdAt, () => message.createdAt = dependency_9.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_9.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PassTemplateResponse {
            return PassTemplateResponse.deserialize(bytes);
        }
    }
    export class Colors extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            backgroundColor?: string;
            labelColor?: string;
            textColor?: string;
            stripColor?: string;
            foregroundColor?: string;
            footerBackgroundColor?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("backgroundColor" in data && data.backgroundColor != undefined) {
                    this.backgroundColor = data.backgroundColor;
                }
                if ("labelColor" in data && data.labelColor != undefined) {
                    this.labelColor = data.labelColor;
                }
                if ("textColor" in data && data.textColor != undefined) {
                    this.textColor = data.textColor;
                }
                if ("stripColor" in data && data.stripColor != undefined) {
                    this.stripColor = data.stripColor;
                }
                if ("foregroundColor" in data && data.foregroundColor != undefined) {
                    this.foregroundColor = data.foregroundColor;
                }
                if ("footerBackgroundColor" in data && data.footerBackgroundColor != undefined) {
                    this.footerBackgroundColor = data.footerBackgroundColor;
                }
            }
        }
        get backgroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set backgroundColor(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get labelColor() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set labelColor(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get textColor() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set textColor(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get stripColor() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set stripColor(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get foregroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set foregroundColor(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get footerBackgroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set footerBackgroundColor(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            backgroundColor?: string;
            labelColor?: string;
            textColor?: string;
            stripColor?: string;
            foregroundColor?: string;
            footerBackgroundColor?: string;
        }): Colors {
            const message = new Colors({});
            if (data.backgroundColor != null) {
                message.backgroundColor = data.backgroundColor;
            }
            if (data.labelColor != null) {
                message.labelColor = data.labelColor;
            }
            if (data.textColor != null) {
                message.textColor = data.textColor;
            }
            if (data.stripColor != null) {
                message.stripColor = data.stripColor;
            }
            if (data.foregroundColor != null) {
                message.foregroundColor = data.foregroundColor;
            }
            if (data.footerBackgroundColor != null) {
                message.footerBackgroundColor = data.footerBackgroundColor;
            }
            return message;
        }
        toObject() {
            const data: {
                backgroundColor?: string;
                labelColor?: string;
                textColor?: string;
                stripColor?: string;
                foregroundColor?: string;
                footerBackgroundColor?: string;
            } = {};
            if (this.backgroundColor != null) {
                data.backgroundColor = this.backgroundColor;
            }
            if (this.labelColor != null) {
                data.labelColor = this.labelColor;
            }
            if (this.textColor != null) {
                data.textColor = this.textColor;
            }
            if (this.stripColor != null) {
                data.stripColor = this.stripColor;
            }
            if (this.foregroundColor != null) {
                data.foregroundColor = this.foregroundColor;
            }
            if (this.footerBackgroundColor != null) {
                data.footerBackgroundColor = this.footerBackgroundColor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.backgroundColor.length)
                writer.writeString(1, this.backgroundColor);
            if (this.labelColor.length)
                writer.writeString(2, this.labelColor);
            if (this.textColor.length)
                writer.writeString(3, this.textColor);
            if (this.stripColor.length)
                writer.writeString(4, this.stripColor);
            if (this.foregroundColor.length)
                writer.writeString(5, this.foregroundColor);
            if (this.footerBackgroundColor.length)
                writer.writeString(6, this.footerBackgroundColor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Colors {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Colors();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.backgroundColor = reader.readString();
                        break;
                    case 2:
                        message.labelColor = reader.readString();
                        break;
                    case 3:
                        message.textColor = reader.readString();
                        break;
                    case 4:
                        message.stripColor = reader.readString();
                        break;
                    case 5:
                        message.foregroundColor = reader.readString();
                        break;
                    case 6:
                        message.footerBackgroundColor = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Colors {
            return Colors.deserialize(bytes);
        }
    }
    export class CopyObjectInput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            newName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("newName" in data && data.newName != undefined) {
                    this.newName = data.newName;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get newName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set newName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            id?: string;
            newName?: string;
        }): CopyObjectInput {
            const message = new CopyObjectInput({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.newName != null) {
                message.newName = data.newName;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                newName?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.newName != null) {
                data.newName = this.newName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.newName.length)
                writer.writeString(2, this.newName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CopyObjectInput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CopyObjectInput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.newName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CopyObjectInput {
            return CopyObjectInput.deserialize(bytes);
        }
    }
    export class NFC extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            enabled?: boolean;
            certificateId?: string;
            payload?: string;
            iCloudBound?: boolean;
            bindingInfo?: BindingInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("enabled" in data && data.enabled != undefined) {
                    this.enabled = data.enabled;
                }
                if ("certificateId" in data && data.certificateId != undefined) {
                    this.certificateId = data.certificateId;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("iCloudBound" in data && data.iCloudBound != undefined) {
                    this.iCloudBound = data.iCloudBound;
                }
                if ("bindingInfo" in data && data.bindingInfo != undefined) {
                    this.bindingInfo = data.bindingInfo;
                }
            }
        }
        get enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get certificateId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set certificateId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get payload() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set payload(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get iCloudBound() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set iCloudBound(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get bindingInfo() {
            return pb_1.Message.getWrapperField(this, BindingInfo, 5) as BindingInfo;
        }
        set bindingInfo(value: BindingInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasBindingInfo() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            enabled?: boolean;
            certificateId?: string;
            payload?: string;
            iCloudBound?: boolean;
            bindingInfo?: ReturnType<typeof BindingInfo.prototype.toObject>;
        }): NFC {
            const message = new NFC({});
            if (data.enabled != null) {
                message.enabled = data.enabled;
            }
            if (data.certificateId != null) {
                message.certificateId = data.certificateId;
            }
            if (data.payload != null) {
                message.payload = data.payload;
            }
            if (data.iCloudBound != null) {
                message.iCloudBound = data.iCloudBound;
            }
            if (data.bindingInfo != null) {
                message.bindingInfo = BindingInfo.fromObject(data.bindingInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                enabled?: boolean;
                certificateId?: string;
                payload?: string;
                iCloudBound?: boolean;
                bindingInfo?: ReturnType<typeof BindingInfo.prototype.toObject>;
            } = {};
            if (this.enabled != null) {
                data.enabled = this.enabled;
            }
            if (this.certificateId != null) {
                data.certificateId = this.certificateId;
            }
            if (this.payload != null) {
                data.payload = this.payload;
            }
            if (this.iCloudBound != null) {
                data.iCloudBound = this.iCloudBound;
            }
            if (this.bindingInfo != null) {
                data.bindingInfo = this.bindingInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.enabled != false)
                writer.writeBool(1, this.enabled);
            if (this.certificateId.length)
                writer.writeString(2, this.certificateId);
            if (this.payload.length)
                writer.writeString(3, this.payload);
            if (this.iCloudBound != false)
                writer.writeBool(4, this.iCloudBound);
            if (this.hasBindingInfo)
                writer.writeMessage(5, this.bindingInfo, () => this.bindingInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NFC {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NFC();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.enabled = reader.readBool();
                        break;
                    case 2:
                        message.certificateId = reader.readString();
                        break;
                    case 3:
                        message.payload = reader.readString();
                        break;
                    case 4:
                        message.iCloudBound = reader.readBool();
                        break;
                    case 5:
                        reader.readMessage(message.bindingInfo, () => message.bindingInfo = BindingInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NFC {
            return NFC.deserialize(bytes);
        }
    }
    export class BindingInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            displayableName?: string;
            learnMoreUrl?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("displayableName" in data && data.displayableName != undefined) {
                    this.displayableName = data.displayableName;
                }
                if ("learnMoreUrl" in data && data.learnMoreUrl != undefined) {
                    this.learnMoreUrl = data.learnMoreUrl;
                }
            }
        }
        get displayableName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set displayableName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get learnMoreUrl() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set learnMoreUrl(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            displayableName?: string;
            learnMoreUrl?: string;
        }): BindingInfo {
            const message = new BindingInfo({});
            if (data.displayableName != null) {
                message.displayableName = data.displayableName;
            }
            if (data.learnMoreUrl != null) {
                message.learnMoreUrl = data.learnMoreUrl;
            }
            return message;
        }
        toObject() {
            const data: {
                displayableName?: string;
                learnMoreUrl?: string;
            } = {};
            if (this.displayableName != null) {
                data.displayableName = this.displayableName;
            }
            if (this.learnMoreUrl != null) {
                data.learnMoreUrl = this.learnMoreUrl;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.displayableName.length)
                writer.writeString(1, this.displayableName);
            if (this.learnMoreUrl.length)
                writer.writeString(2, this.learnMoreUrl);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BindingInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BindingInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.displayableName = reader.readString();
                        break;
                    case 2:
                        message.learnMoreUrl = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BindingInfo {
            return BindingInfo.deserialize(bytes);
        }
    }
    export class DataField extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uniqueName?: string;
            templateId?: string;
            fieldType?: FieldType;
            isRequired?: boolean;
            label?: string;
            localizedLabel?: dependency_2.io.LocalizedString;
            dataType?: DataType;
            defaultValue?: string;
            localizedDefaultValue?: dependency_2.io.LocalizedString;
            validation?: string;
            userCanSetValue?: boolean;
            currencyCode?: string;
            appleWalletFieldRenderOptions?: AppleWalletFieldRenderOptions;
            dataCollectionFieldRenderOptions?: DataCollectionFieldRenderOptions;
            usage?: dependency_1.io.UsageType[];
            googlePayFieldRenderOptions?: GooglePayFieldRenderOptions;
            defaultTelCountryCode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [15], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uniqueName" in data && data.uniqueName != undefined) {
                    this.uniqueName = data.uniqueName;
                }
                if ("templateId" in data && data.templateId != undefined) {
                    this.templateId = data.templateId;
                }
                if ("fieldType" in data && data.fieldType != undefined) {
                    this.fieldType = data.fieldType;
                }
                if ("isRequired" in data && data.isRequired != undefined) {
                    this.isRequired = data.isRequired;
                }
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
                if ("localizedLabel" in data && data.localizedLabel != undefined) {
                    this.localizedLabel = data.localizedLabel;
                }
                if ("dataType" in data && data.dataType != undefined) {
                    this.dataType = data.dataType;
                }
                if ("defaultValue" in data && data.defaultValue != undefined) {
                    this.defaultValue = data.defaultValue;
                }
                if ("localizedDefaultValue" in data && data.localizedDefaultValue != undefined) {
                    this.localizedDefaultValue = data.localizedDefaultValue;
                }
                if ("validation" in data && data.validation != undefined) {
                    this.validation = data.validation;
                }
                if ("userCanSetValue" in data && data.userCanSetValue != undefined) {
                    this.userCanSetValue = data.userCanSetValue;
                }
                if ("currencyCode" in data && data.currencyCode != undefined) {
                    this.currencyCode = data.currencyCode;
                }
                if ("appleWalletFieldRenderOptions" in data && data.appleWalletFieldRenderOptions != undefined) {
                    this.appleWalletFieldRenderOptions = data.appleWalletFieldRenderOptions;
                }
                if ("dataCollectionFieldRenderOptions" in data && data.dataCollectionFieldRenderOptions != undefined) {
                    this.dataCollectionFieldRenderOptions = data.dataCollectionFieldRenderOptions;
                }
                if ("usage" in data && data.usage != undefined) {
                    this.usage = data.usage;
                }
                if ("googlePayFieldRenderOptions" in data && data.googlePayFieldRenderOptions != undefined) {
                    this.googlePayFieldRenderOptions = data.googlePayFieldRenderOptions;
                }
                if ("defaultTelCountryCode" in data && data.defaultTelCountryCode != undefined) {
                    this.defaultTelCountryCode = data.defaultTelCountryCode;
                }
            }
        }
        get uniqueName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uniqueName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get templateId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set templateId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get fieldType() {
            return pb_1.Message.getFieldWithDefault(this, 3, FieldType.FIELD_TYPE_NONE) as FieldType;
        }
        set fieldType(value: FieldType) {
            pb_1.Message.setField(this, 3, value);
        }
        get isRequired() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set isRequired(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get localizedLabel() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 6) as dependency_2.io.LocalizedString;
        }
        set localizedLabel(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasLocalizedLabel() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get dataType() {
            return pb_1.Message.getFieldWithDefault(this, 7, DataType.DATA_TYPE_NONE) as DataType;
        }
        set dataType(value: DataType) {
            pb_1.Message.setField(this, 7, value);
        }
        get defaultValue() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set defaultValue(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get localizedDefaultValue() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 9) as dependency_2.io.LocalizedString;
        }
        set localizedDefaultValue(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasLocalizedDefaultValue() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get validation() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set validation(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get userCanSetValue() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set userCanSetValue(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get currencyCode() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set currencyCode(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get appleWalletFieldRenderOptions() {
            return pb_1.Message.getWrapperField(this, AppleWalletFieldRenderOptions, 13) as AppleWalletFieldRenderOptions;
        }
        set appleWalletFieldRenderOptions(value: AppleWalletFieldRenderOptions) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasAppleWalletFieldRenderOptions() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get dataCollectionFieldRenderOptions() {
            return pb_1.Message.getWrapperField(this, DataCollectionFieldRenderOptions, 14) as DataCollectionFieldRenderOptions;
        }
        set dataCollectionFieldRenderOptions(value: DataCollectionFieldRenderOptions) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get hasDataCollectionFieldRenderOptions() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get usage() {
            return pb_1.Message.getFieldWithDefault(this, 15, []) as dependency_1.io.UsageType[];
        }
        set usage(value: dependency_1.io.UsageType[]) {
            pb_1.Message.setField(this, 15, value);
        }
        get googlePayFieldRenderOptions() {
            return pb_1.Message.getWrapperField(this, GooglePayFieldRenderOptions, 16) as GooglePayFieldRenderOptions;
        }
        set googlePayFieldRenderOptions(value: GooglePayFieldRenderOptions) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get hasGooglePayFieldRenderOptions() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get defaultTelCountryCode() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set defaultTelCountryCode(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        static fromObject(data: {
            uniqueName?: string;
            templateId?: string;
            fieldType?: FieldType;
            isRequired?: boolean;
            label?: string;
            localizedLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            dataType?: DataType;
            defaultValue?: string;
            localizedDefaultValue?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            validation?: string;
            userCanSetValue?: boolean;
            currencyCode?: string;
            appleWalletFieldRenderOptions?: ReturnType<typeof AppleWalletFieldRenderOptions.prototype.toObject>;
            dataCollectionFieldRenderOptions?: ReturnType<typeof DataCollectionFieldRenderOptions.prototype.toObject>;
            usage?: dependency_1.io.UsageType[];
            googlePayFieldRenderOptions?: ReturnType<typeof GooglePayFieldRenderOptions.prototype.toObject>;
            defaultTelCountryCode?: string;
        }): DataField {
            const message = new DataField({});
            if (data.uniqueName != null) {
                message.uniqueName = data.uniqueName;
            }
            if (data.templateId != null) {
                message.templateId = data.templateId;
            }
            if (data.fieldType != null) {
                message.fieldType = data.fieldType;
            }
            if (data.isRequired != null) {
                message.isRequired = data.isRequired;
            }
            if (data.label != null) {
                message.label = data.label;
            }
            if (data.localizedLabel != null) {
                message.localizedLabel = dependency_2.io.LocalizedString.fromObject(data.localizedLabel);
            }
            if (data.dataType != null) {
                message.dataType = data.dataType;
            }
            if (data.defaultValue != null) {
                message.defaultValue = data.defaultValue;
            }
            if (data.localizedDefaultValue != null) {
                message.localizedDefaultValue = dependency_2.io.LocalizedString.fromObject(data.localizedDefaultValue);
            }
            if (data.validation != null) {
                message.validation = data.validation;
            }
            if (data.userCanSetValue != null) {
                message.userCanSetValue = data.userCanSetValue;
            }
            if (data.currencyCode != null) {
                message.currencyCode = data.currencyCode;
            }
            if (data.appleWalletFieldRenderOptions != null) {
                message.appleWalletFieldRenderOptions = AppleWalletFieldRenderOptions.fromObject(data.appleWalletFieldRenderOptions);
            }
            if (data.dataCollectionFieldRenderOptions != null) {
                message.dataCollectionFieldRenderOptions = DataCollectionFieldRenderOptions.fromObject(data.dataCollectionFieldRenderOptions);
            }
            if (data.usage != null) {
                message.usage = data.usage;
            }
            if (data.googlePayFieldRenderOptions != null) {
                message.googlePayFieldRenderOptions = GooglePayFieldRenderOptions.fromObject(data.googlePayFieldRenderOptions);
            }
            if (data.defaultTelCountryCode != null) {
                message.defaultTelCountryCode = data.defaultTelCountryCode;
            }
            return message;
        }
        toObject() {
            const data: {
                uniqueName?: string;
                templateId?: string;
                fieldType?: FieldType;
                isRequired?: boolean;
                label?: string;
                localizedLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                dataType?: DataType;
                defaultValue?: string;
                localizedDefaultValue?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                validation?: string;
                userCanSetValue?: boolean;
                currencyCode?: string;
                appleWalletFieldRenderOptions?: ReturnType<typeof AppleWalletFieldRenderOptions.prototype.toObject>;
                dataCollectionFieldRenderOptions?: ReturnType<typeof DataCollectionFieldRenderOptions.prototype.toObject>;
                usage?: dependency_1.io.UsageType[];
                googlePayFieldRenderOptions?: ReturnType<typeof GooglePayFieldRenderOptions.prototype.toObject>;
                defaultTelCountryCode?: string;
            } = {};
            if (this.uniqueName != null) {
                data.uniqueName = this.uniqueName;
            }
            if (this.templateId != null) {
                data.templateId = this.templateId;
            }
            if (this.fieldType != null) {
                data.fieldType = this.fieldType;
            }
            if (this.isRequired != null) {
                data.isRequired = this.isRequired;
            }
            if (this.label != null) {
                data.label = this.label;
            }
            if (this.localizedLabel != null) {
                data.localizedLabel = this.localizedLabel.toObject();
            }
            if (this.dataType != null) {
                data.dataType = this.dataType;
            }
            if (this.defaultValue != null) {
                data.defaultValue = this.defaultValue;
            }
            if (this.localizedDefaultValue != null) {
                data.localizedDefaultValue = this.localizedDefaultValue.toObject();
            }
            if (this.validation != null) {
                data.validation = this.validation;
            }
            if (this.userCanSetValue != null) {
                data.userCanSetValue = this.userCanSetValue;
            }
            if (this.currencyCode != null) {
                data.currencyCode = this.currencyCode;
            }
            if (this.appleWalletFieldRenderOptions != null) {
                data.appleWalletFieldRenderOptions = this.appleWalletFieldRenderOptions.toObject();
            }
            if (this.dataCollectionFieldRenderOptions != null) {
                data.dataCollectionFieldRenderOptions = this.dataCollectionFieldRenderOptions.toObject();
            }
            if (this.usage != null) {
                data.usage = this.usage;
            }
            if (this.googlePayFieldRenderOptions != null) {
                data.googlePayFieldRenderOptions = this.googlePayFieldRenderOptions.toObject();
            }
            if (this.defaultTelCountryCode != null) {
                data.defaultTelCountryCode = this.defaultTelCountryCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uniqueName.length)
                writer.writeString(1, this.uniqueName);
            if (this.templateId.length)
                writer.writeString(2, this.templateId);
            if (this.fieldType != FieldType.FIELD_TYPE_NONE)
                writer.writeEnum(3, this.fieldType);
            if (this.isRequired != false)
                writer.writeBool(4, this.isRequired);
            if (this.label.length)
                writer.writeString(5, this.label);
            if (this.hasLocalizedLabel)
                writer.writeMessage(6, this.localizedLabel, () => this.localizedLabel.serialize(writer));
            if (this.dataType != DataType.DATA_TYPE_NONE)
                writer.writeEnum(7, this.dataType);
            if (this.defaultValue.length)
                writer.writeString(8, this.defaultValue);
            if (this.hasLocalizedDefaultValue)
                writer.writeMessage(9, this.localizedDefaultValue, () => this.localizedDefaultValue.serialize(writer));
            if (this.validation.length)
                writer.writeString(10, this.validation);
            if (this.userCanSetValue != false)
                writer.writeBool(11, this.userCanSetValue);
            if (this.currencyCode.length)
                writer.writeString(12, this.currencyCode);
            if (this.hasAppleWalletFieldRenderOptions)
                writer.writeMessage(13, this.appleWalletFieldRenderOptions, () => this.appleWalletFieldRenderOptions.serialize(writer));
            if (this.hasDataCollectionFieldRenderOptions)
                writer.writeMessage(14, this.dataCollectionFieldRenderOptions, () => this.dataCollectionFieldRenderOptions.serialize(writer));
            if (this.usage.length)
                writer.writePackedEnum(15, this.usage);
            if (this.hasGooglePayFieldRenderOptions)
                writer.writeMessage(16, this.googlePayFieldRenderOptions, () => this.googlePayFieldRenderOptions.serialize(writer));
            if (this.defaultTelCountryCode.length)
                writer.writeString(17, this.defaultTelCountryCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataField {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataField();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uniqueName = reader.readString();
                        break;
                    case 2:
                        message.templateId = reader.readString();
                        break;
                    case 3:
                        message.fieldType = reader.readEnum();
                        break;
                    case 4:
                        message.isRequired = reader.readBool();
                        break;
                    case 5:
                        message.label = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.localizedLabel, () => message.localizedLabel = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 7:
                        message.dataType = reader.readEnum();
                        break;
                    case 8:
                        message.defaultValue = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.localizedDefaultValue, () => message.localizedDefaultValue = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 10:
                        message.validation = reader.readString();
                        break;
                    case 11:
                        message.userCanSetValue = reader.readBool();
                        break;
                    case 12:
                        message.currencyCode = reader.readString();
                        break;
                    case 13:
                        reader.readMessage(message.appleWalletFieldRenderOptions, () => message.appleWalletFieldRenderOptions = AppleWalletFieldRenderOptions.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.dataCollectionFieldRenderOptions, () => message.dataCollectionFieldRenderOptions = DataCollectionFieldRenderOptions.deserialize(reader));
                        break;
                    case 15:
                        message.usage = reader.readPackedEnum();
                        break;
                    case 16:
                        reader.readMessage(message.googlePayFieldRenderOptions, () => message.googlePayFieldRenderOptions = GooglePayFieldRenderOptions.deserialize(reader));
                        break;
                    case 17:
                        message.defaultTelCountryCode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataField {
            return DataField.deserialize(bytes);
        }
    }
    export class AppleWalletFieldRenderOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            textAlignment?: TextAlignment;
            positionSettings?: PositionSettings;
            changeMessage?: string;
            localizedChangeMessage?: dependency_2.io.LocalizedString;
            dateStyle?: DateTimeStyle;
            timeStyle?: DateTimeStyle;
            numberStyle?: NumberStyle;
            suppressLinkDetection?: LinkDetector[];
            ignoreTimezone?: boolean;
            isRelativeDate?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("textAlignment" in data && data.textAlignment != undefined) {
                    this.textAlignment = data.textAlignment;
                }
                if ("positionSettings" in data && data.positionSettings != undefined) {
                    this.positionSettings = data.positionSettings;
                }
                if ("changeMessage" in data && data.changeMessage != undefined) {
                    this.changeMessage = data.changeMessage;
                }
                if ("localizedChangeMessage" in data && data.localizedChangeMessage != undefined) {
                    this.localizedChangeMessage = data.localizedChangeMessage;
                }
                if ("dateStyle" in data && data.dateStyle != undefined) {
                    this.dateStyle = data.dateStyle;
                }
                if ("timeStyle" in data && data.timeStyle != undefined) {
                    this.timeStyle = data.timeStyle;
                }
                if ("numberStyle" in data && data.numberStyle != undefined) {
                    this.numberStyle = data.numberStyle;
                }
                if ("suppressLinkDetection" in data && data.suppressLinkDetection != undefined) {
                    this.suppressLinkDetection = data.suppressLinkDetection;
                }
                if ("ignoreTimezone" in data && data.ignoreTimezone != undefined) {
                    this.ignoreTimezone = data.ignoreTimezone;
                }
                if ("isRelativeDate" in data && data.isRelativeDate != undefined) {
                    this.isRelativeDate = data.isRelativeDate;
                }
            }
        }
        get textAlignment() {
            return pb_1.Message.getFieldWithDefault(this, 2, TextAlignment.TEXT_ALIGNMENT_DO_NOT_USE) as TextAlignment;
        }
        set textAlignment(value: TextAlignment) {
            pb_1.Message.setField(this, 2, value);
        }
        get positionSettings() {
            return pb_1.Message.getWrapperField(this, PositionSettings, 3) as PositionSettings;
        }
        set positionSettings(value: PositionSettings) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasPositionSettings() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get changeMessage() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set changeMessage(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get localizedChangeMessage() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 5) as dependency_2.io.LocalizedString;
        }
        set localizedChangeMessage(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasLocalizedChangeMessage() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get dateStyle() {
            return pb_1.Message.getFieldWithDefault(this, 6, DateTimeStyle.DATE_TIME_STYLE_DO_NOT_USE) as DateTimeStyle;
        }
        set dateStyle(value: DateTimeStyle) {
            pb_1.Message.setField(this, 6, value);
        }
        get timeStyle() {
            return pb_1.Message.getFieldWithDefault(this, 7, DateTimeStyle.DATE_TIME_STYLE_DO_NOT_USE) as DateTimeStyle;
        }
        set timeStyle(value: DateTimeStyle) {
            pb_1.Message.setField(this, 7, value);
        }
        get numberStyle() {
            return pb_1.Message.getFieldWithDefault(this, 8, NumberStyle.NUMBER_STYLE_DO_NOT_USE) as NumberStyle;
        }
        set numberStyle(value: NumberStyle) {
            pb_1.Message.setField(this, 8, value);
        }
        get suppressLinkDetection() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as LinkDetector[];
        }
        set suppressLinkDetection(value: LinkDetector[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get ignoreTimezone() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set ignoreTimezone(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get isRelativeDate() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set isRelativeDate(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            textAlignment?: TextAlignment;
            positionSettings?: ReturnType<typeof PositionSettings.prototype.toObject>;
            changeMessage?: string;
            localizedChangeMessage?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            dateStyle?: DateTimeStyle;
            timeStyle?: DateTimeStyle;
            numberStyle?: NumberStyle;
            suppressLinkDetection?: LinkDetector[];
            ignoreTimezone?: boolean;
            isRelativeDate?: boolean;
        }): AppleWalletFieldRenderOptions {
            const message = new AppleWalletFieldRenderOptions({});
            if (data.textAlignment != null) {
                message.textAlignment = data.textAlignment;
            }
            if (data.positionSettings != null) {
                message.positionSettings = PositionSettings.fromObject(data.positionSettings);
            }
            if (data.changeMessage != null) {
                message.changeMessage = data.changeMessage;
            }
            if (data.localizedChangeMessage != null) {
                message.localizedChangeMessage = dependency_2.io.LocalizedString.fromObject(data.localizedChangeMessage);
            }
            if (data.dateStyle != null) {
                message.dateStyle = data.dateStyle;
            }
            if (data.timeStyle != null) {
                message.timeStyle = data.timeStyle;
            }
            if (data.numberStyle != null) {
                message.numberStyle = data.numberStyle;
            }
            if (data.suppressLinkDetection != null) {
                message.suppressLinkDetection = data.suppressLinkDetection;
            }
            if (data.ignoreTimezone != null) {
                message.ignoreTimezone = data.ignoreTimezone;
            }
            if (data.isRelativeDate != null) {
                message.isRelativeDate = data.isRelativeDate;
            }
            return message;
        }
        toObject() {
            const data: {
                textAlignment?: TextAlignment;
                positionSettings?: ReturnType<typeof PositionSettings.prototype.toObject>;
                changeMessage?: string;
                localizedChangeMessage?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                dateStyle?: DateTimeStyle;
                timeStyle?: DateTimeStyle;
                numberStyle?: NumberStyle;
                suppressLinkDetection?: LinkDetector[];
                ignoreTimezone?: boolean;
                isRelativeDate?: boolean;
            } = {};
            if (this.textAlignment != null) {
                data.textAlignment = this.textAlignment;
            }
            if (this.positionSettings != null) {
                data.positionSettings = this.positionSettings.toObject();
            }
            if (this.changeMessage != null) {
                data.changeMessage = this.changeMessage;
            }
            if (this.localizedChangeMessage != null) {
                data.localizedChangeMessage = this.localizedChangeMessage.toObject();
            }
            if (this.dateStyle != null) {
                data.dateStyle = this.dateStyle;
            }
            if (this.timeStyle != null) {
                data.timeStyle = this.timeStyle;
            }
            if (this.numberStyle != null) {
                data.numberStyle = this.numberStyle;
            }
            if (this.suppressLinkDetection != null) {
                data.suppressLinkDetection = this.suppressLinkDetection;
            }
            if (this.ignoreTimezone != null) {
                data.ignoreTimezone = this.ignoreTimezone;
            }
            if (this.isRelativeDate != null) {
                data.isRelativeDate = this.isRelativeDate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.textAlignment != TextAlignment.TEXT_ALIGNMENT_DO_NOT_USE)
                writer.writeEnum(2, this.textAlignment);
            if (this.hasPositionSettings)
                writer.writeMessage(3, this.positionSettings, () => this.positionSettings.serialize(writer));
            if (this.changeMessage.length)
                writer.writeString(4, this.changeMessage);
            if (this.hasLocalizedChangeMessage)
                writer.writeMessage(5, this.localizedChangeMessage, () => this.localizedChangeMessage.serialize(writer));
            if (this.dateStyle != DateTimeStyle.DATE_TIME_STYLE_DO_NOT_USE)
                writer.writeEnum(6, this.dateStyle);
            if (this.timeStyle != DateTimeStyle.DATE_TIME_STYLE_DO_NOT_USE)
                writer.writeEnum(7, this.timeStyle);
            if (this.numberStyle != NumberStyle.NUMBER_STYLE_DO_NOT_USE)
                writer.writeEnum(8, this.numberStyle);
            if (this.suppressLinkDetection.length)
                writer.writePackedEnum(9, this.suppressLinkDetection);
            if (this.ignoreTimezone != false)
                writer.writeBool(10, this.ignoreTimezone);
            if (this.isRelativeDate != false)
                writer.writeBool(11, this.isRelativeDate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppleWalletFieldRenderOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppleWalletFieldRenderOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.textAlignment = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.positionSettings, () => message.positionSettings = PositionSettings.deserialize(reader));
                        break;
                    case 4:
                        message.changeMessage = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.localizedChangeMessage, () => message.localizedChangeMessage = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 6:
                        message.dateStyle = reader.readEnum();
                        break;
                    case 7:
                        message.timeStyle = reader.readEnum();
                        break;
                    case 8:
                        message.numberStyle = reader.readEnum();
                        break;
                    case 9:
                        message.suppressLinkDetection = reader.readPackedEnum();
                        break;
                    case 10:
                        message.ignoreTimezone = reader.readBool();
                        break;
                    case 11:
                        message.isRelativeDate = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AppleWalletFieldRenderOptions {
            return AppleWalletFieldRenderOptions.deserialize(bytes);
        }
    }
    export class GooglePayFieldRenderOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            googlePayPosition?: GooglePayField;
            textModulePriority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("googlePayPosition" in data && data.googlePayPosition != undefined) {
                    this.googlePayPosition = data.googlePayPosition;
                }
                if ("textModulePriority" in data && data.textModulePriority != undefined) {
                    this.textModulePriority = data.textModulePriority;
                }
            }
        }
        get googlePayPosition() {
            return pb_1.Message.getFieldWithDefault(this, 1, GooglePayField.GOOGLE_PAY_FIELD_DO_NOT_USE) as GooglePayField;
        }
        set googlePayPosition(value: GooglePayField) {
            pb_1.Message.setField(this, 1, value);
        }
        get textModulePriority() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set textModulePriority(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            googlePayPosition?: GooglePayField;
            textModulePriority?: number;
        }): GooglePayFieldRenderOptions {
            const message = new GooglePayFieldRenderOptions({});
            if (data.googlePayPosition != null) {
                message.googlePayPosition = data.googlePayPosition;
            }
            if (data.textModulePriority != null) {
                message.textModulePriority = data.textModulePriority;
            }
            return message;
        }
        toObject() {
            const data: {
                googlePayPosition?: GooglePayField;
                textModulePriority?: number;
            } = {};
            if (this.googlePayPosition != null) {
                data.googlePayPosition = this.googlePayPosition;
            }
            if (this.textModulePriority != null) {
                data.textModulePriority = this.textModulePriority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.googlePayPosition != GooglePayField.GOOGLE_PAY_FIELD_DO_NOT_USE)
                writer.writeEnum(1, this.googlePayPosition);
            if (this.textModulePriority != 0)
                writer.writeUint32(2, this.textModulePriority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GooglePayFieldRenderOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GooglePayFieldRenderOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.googlePayPosition = reader.readEnum();
                        break;
                    case 2:
                        message.textModulePriority = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GooglePayFieldRenderOptions {
            return GooglePayFieldRenderOptions.deserialize(bytes);
        }
    }
    export class PositionSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            section?: FieldSection;
            priority?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("section" in data && data.section != undefined) {
                    this.section = data.section;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
            }
        }
        get section() {
            return pb_1.Message.getFieldWithDefault(this, 1, FieldSection.FIELD_SECTION_DO_NOT_USE) as FieldSection;
        }
        set section(value: FieldSection) {
            pb_1.Message.setField(this, 1, value);
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            section?: FieldSection;
            priority?: number;
        }): PositionSettings {
            const message = new PositionSettings({});
            if (data.section != null) {
                message.section = data.section;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            return message;
        }
        toObject() {
            const data: {
                section?: FieldSection;
                priority?: number;
            } = {};
            if (this.section != null) {
                data.section = this.section;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.section != FieldSection.FIELD_SECTION_DO_NOT_USE)
                writer.writeEnum(1, this.section);
            if (this.priority != 0)
                writer.writeUint32(2, this.priority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PositionSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PositionSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.section = reader.readEnum();
                        break;
                    case 2:
                        message.priority = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PositionSettings {
            return PositionSettings.deserialize(bytes);
        }
    }
    export class DataCollectionFieldRenderOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            helpText?: string;
            localizedHelpText?: dependency_2.io.LocalizedString;
            displayOrder?: number;
            placeholder?: string;
            selectOptions?: SelectOption[];
            localizedPlaceholder?: dependency_2.io.LocalizedString;
            autocomplete?: boolean;
            addressRenderOptions?: AddressRenderOptions;
            localizedYearPlaceholder?: string;
            localizedMonthPlaceholder?: string;
            localizedDayPlaceholder?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("helpText" in data && data.helpText != undefined) {
                    this.helpText = data.helpText;
                }
                if ("localizedHelpText" in data && data.localizedHelpText != undefined) {
                    this.localizedHelpText = data.localizedHelpText;
                }
                if ("displayOrder" in data && data.displayOrder != undefined) {
                    this.displayOrder = data.displayOrder;
                }
                if ("placeholder" in data && data.placeholder != undefined) {
                    this.placeholder = data.placeholder;
                }
                if ("selectOptions" in data && data.selectOptions != undefined) {
                    this.selectOptions = data.selectOptions;
                }
                if ("localizedPlaceholder" in data && data.localizedPlaceholder != undefined) {
                    this.localizedPlaceholder = data.localizedPlaceholder;
                }
                if ("autocomplete" in data && data.autocomplete != undefined) {
                    this.autocomplete = data.autocomplete;
                }
                if ("addressRenderOptions" in data && data.addressRenderOptions != undefined) {
                    this.addressRenderOptions = data.addressRenderOptions;
                }
                if ("localizedYearPlaceholder" in data && data.localizedYearPlaceholder != undefined) {
                    this.localizedYearPlaceholder = data.localizedYearPlaceholder;
                }
                if ("localizedMonthPlaceholder" in data && data.localizedMonthPlaceholder != undefined) {
                    this.localizedMonthPlaceholder = data.localizedMonthPlaceholder;
                }
                if ("localizedDayPlaceholder" in data && data.localizedDayPlaceholder != undefined) {
                    this.localizedDayPlaceholder = data.localizedDayPlaceholder;
                }
            }
        }
        get helpText() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set helpText(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get localizedHelpText() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 2) as dependency_2.io.LocalizedString;
        }
        set localizedHelpText(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasLocalizedHelpText() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get displayOrder() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set displayOrder(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get placeholder() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set placeholder(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get selectOptions() {
            return pb_1.Message.getRepeatedWrapperField(this, SelectOption, 6) as SelectOption[];
        }
        set selectOptions(value: SelectOption[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get localizedPlaceholder() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 7) as dependency_2.io.LocalizedString;
        }
        set localizedPlaceholder(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasLocalizedPlaceholder() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get autocomplete() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set autocomplete(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get addressRenderOptions() {
            return pb_1.Message.getWrapperField(this, AddressRenderOptions, 9) as AddressRenderOptions;
        }
        set addressRenderOptions(value: AddressRenderOptions) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasAddressRenderOptions() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get localizedYearPlaceholder() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set localizedYearPlaceholder(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get localizedMonthPlaceholder() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set localizedMonthPlaceholder(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get localizedDayPlaceholder() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set localizedDayPlaceholder(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            helpText?: string;
            localizedHelpText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            displayOrder?: number;
            placeholder?: string;
            selectOptions?: ReturnType<typeof SelectOption.prototype.toObject>[];
            localizedPlaceholder?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            autocomplete?: boolean;
            addressRenderOptions?: ReturnType<typeof AddressRenderOptions.prototype.toObject>;
            localizedYearPlaceholder?: string;
            localizedMonthPlaceholder?: string;
            localizedDayPlaceholder?: string;
        }): DataCollectionFieldRenderOptions {
            const message = new DataCollectionFieldRenderOptions({});
            if (data.helpText != null) {
                message.helpText = data.helpText;
            }
            if (data.localizedHelpText != null) {
                message.localizedHelpText = dependency_2.io.LocalizedString.fromObject(data.localizedHelpText);
            }
            if (data.displayOrder != null) {
                message.displayOrder = data.displayOrder;
            }
            if (data.placeholder != null) {
                message.placeholder = data.placeholder;
            }
            if (data.selectOptions != null) {
                message.selectOptions = data.selectOptions.map(item => SelectOption.fromObject(item));
            }
            if (data.localizedPlaceholder != null) {
                message.localizedPlaceholder = dependency_2.io.LocalizedString.fromObject(data.localizedPlaceholder);
            }
            if (data.autocomplete != null) {
                message.autocomplete = data.autocomplete;
            }
            if (data.addressRenderOptions != null) {
                message.addressRenderOptions = AddressRenderOptions.fromObject(data.addressRenderOptions);
            }
            if (data.localizedYearPlaceholder != null) {
                message.localizedYearPlaceholder = data.localizedYearPlaceholder;
            }
            if (data.localizedMonthPlaceholder != null) {
                message.localizedMonthPlaceholder = data.localizedMonthPlaceholder;
            }
            if (data.localizedDayPlaceholder != null) {
                message.localizedDayPlaceholder = data.localizedDayPlaceholder;
            }
            return message;
        }
        toObject() {
            const data: {
                helpText?: string;
                localizedHelpText?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                displayOrder?: number;
                placeholder?: string;
                selectOptions?: ReturnType<typeof SelectOption.prototype.toObject>[];
                localizedPlaceholder?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                autocomplete?: boolean;
                addressRenderOptions?: ReturnType<typeof AddressRenderOptions.prototype.toObject>;
                localizedYearPlaceholder?: string;
                localizedMonthPlaceholder?: string;
                localizedDayPlaceholder?: string;
            } = {};
            if (this.helpText != null) {
                data.helpText = this.helpText;
            }
            if (this.localizedHelpText != null) {
                data.localizedHelpText = this.localizedHelpText.toObject();
            }
            if (this.displayOrder != null) {
                data.displayOrder = this.displayOrder;
            }
            if (this.placeholder != null) {
                data.placeholder = this.placeholder;
            }
            if (this.selectOptions != null) {
                data.selectOptions = this.selectOptions.map((item: SelectOption) => item.toObject());
            }
            if (this.localizedPlaceholder != null) {
                data.localizedPlaceholder = this.localizedPlaceholder.toObject();
            }
            if (this.autocomplete != null) {
                data.autocomplete = this.autocomplete;
            }
            if (this.addressRenderOptions != null) {
                data.addressRenderOptions = this.addressRenderOptions.toObject();
            }
            if (this.localizedYearPlaceholder != null) {
                data.localizedYearPlaceholder = this.localizedYearPlaceholder;
            }
            if (this.localizedMonthPlaceholder != null) {
                data.localizedMonthPlaceholder = this.localizedMonthPlaceholder;
            }
            if (this.localizedDayPlaceholder != null) {
                data.localizedDayPlaceholder = this.localizedDayPlaceholder;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.helpText.length)
                writer.writeString(1, this.helpText);
            if (this.hasLocalizedHelpText)
                writer.writeMessage(2, this.localizedHelpText, () => this.localizedHelpText.serialize(writer));
            if (this.displayOrder != 0)
                writer.writeInt32(3, this.displayOrder);
            if (this.placeholder.length)
                writer.writeString(5, this.placeholder);
            if (this.selectOptions.length)
                writer.writeRepeatedMessage(6, this.selectOptions, (item: SelectOption) => item.serialize(writer));
            if (this.hasLocalizedPlaceholder)
                writer.writeMessage(7, this.localizedPlaceholder, () => this.localizedPlaceholder.serialize(writer));
            if (this.autocomplete != false)
                writer.writeBool(8, this.autocomplete);
            if (this.hasAddressRenderOptions)
                writer.writeMessage(9, this.addressRenderOptions, () => this.addressRenderOptions.serialize(writer));
            if (this.localizedYearPlaceholder.length)
                writer.writeString(10, this.localizedYearPlaceholder);
            if (this.localizedMonthPlaceholder.length)
                writer.writeString(11, this.localizedMonthPlaceholder);
            if (this.localizedDayPlaceholder.length)
                writer.writeString(12, this.localizedDayPlaceholder);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataCollectionFieldRenderOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataCollectionFieldRenderOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.helpText = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.localizedHelpText, () => message.localizedHelpText = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 3:
                        message.displayOrder = reader.readInt32();
                        break;
                    case 5:
                        message.placeholder = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.selectOptions, () => pb_1.Message.addToRepeatedWrapperField(message, 6, SelectOption.deserialize(reader), SelectOption));
                        break;
                    case 7:
                        reader.readMessage(message.localizedPlaceholder, () => message.localizedPlaceholder = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 8:
                        message.autocomplete = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.addressRenderOptions, () => message.addressRenderOptions = AddressRenderOptions.deserialize(reader));
                        break;
                    case 10:
                        message.localizedYearPlaceholder = reader.readString();
                        break;
                    case 11:
                        message.localizedMonthPlaceholder = reader.readString();
                        break;
                    case 12:
                        message.localizedDayPlaceholder = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataCollectionFieldRenderOptions {
            return DataCollectionFieldRenderOptions.deserialize(bytes);
        }
    }
    export class AddressRenderOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address1Label?: string;
            address2Label?: string;
            cityLabel?: string;
            countryLabel?: string;
            zipLabel?: string;
            address1Placeholder?: string;
            address2Placeholder?: string;
            cityPlaceholder?: string;
            countryPlaceholder?: string;
            zipPlaceholder?: string;
            localizedAddress1Label?: dependency_2.io.LocalizedString;
            localizedAddress2Label?: dependency_2.io.LocalizedString;
            localizedCityLabel?: dependency_2.io.LocalizedString;
            localizedCountryLabel?: dependency_2.io.LocalizedString;
            localizedZipLabel?: dependency_2.io.LocalizedString;
            localizedAddress1Placeholder?: dependency_2.io.LocalizedString;
            localizedAddress2Placeholder?: dependency_2.io.LocalizedString;
            localizedCityPlaceholder?: dependency_2.io.LocalizedString;
            localizedCountryPlaceholder?: dependency_2.io.LocalizedString;
            localizedZipPlaceholder?: dependency_2.io.LocalizedString;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address1Label" in data && data.address1Label != undefined) {
                    this.address1Label = data.address1Label;
                }
                if ("address2Label" in data && data.address2Label != undefined) {
                    this.address2Label = data.address2Label;
                }
                if ("cityLabel" in data && data.cityLabel != undefined) {
                    this.cityLabel = data.cityLabel;
                }
                if ("countryLabel" in data && data.countryLabel != undefined) {
                    this.countryLabel = data.countryLabel;
                }
                if ("zipLabel" in data && data.zipLabel != undefined) {
                    this.zipLabel = data.zipLabel;
                }
                if ("address1Placeholder" in data && data.address1Placeholder != undefined) {
                    this.address1Placeholder = data.address1Placeholder;
                }
                if ("address2Placeholder" in data && data.address2Placeholder != undefined) {
                    this.address2Placeholder = data.address2Placeholder;
                }
                if ("cityPlaceholder" in data && data.cityPlaceholder != undefined) {
                    this.cityPlaceholder = data.cityPlaceholder;
                }
                if ("countryPlaceholder" in data && data.countryPlaceholder != undefined) {
                    this.countryPlaceholder = data.countryPlaceholder;
                }
                if ("zipPlaceholder" in data && data.zipPlaceholder != undefined) {
                    this.zipPlaceholder = data.zipPlaceholder;
                }
                if ("localizedAddress1Label" in data && data.localizedAddress1Label != undefined) {
                    this.localizedAddress1Label = data.localizedAddress1Label;
                }
                if ("localizedAddress2Label" in data && data.localizedAddress2Label != undefined) {
                    this.localizedAddress2Label = data.localizedAddress2Label;
                }
                if ("localizedCityLabel" in data && data.localizedCityLabel != undefined) {
                    this.localizedCityLabel = data.localizedCityLabel;
                }
                if ("localizedCountryLabel" in data && data.localizedCountryLabel != undefined) {
                    this.localizedCountryLabel = data.localizedCountryLabel;
                }
                if ("localizedZipLabel" in data && data.localizedZipLabel != undefined) {
                    this.localizedZipLabel = data.localizedZipLabel;
                }
                if ("localizedAddress1Placeholder" in data && data.localizedAddress1Placeholder != undefined) {
                    this.localizedAddress1Placeholder = data.localizedAddress1Placeholder;
                }
                if ("localizedAddress2Placeholder" in data && data.localizedAddress2Placeholder != undefined) {
                    this.localizedAddress2Placeholder = data.localizedAddress2Placeholder;
                }
                if ("localizedCityPlaceholder" in data && data.localizedCityPlaceholder != undefined) {
                    this.localizedCityPlaceholder = data.localizedCityPlaceholder;
                }
                if ("localizedCountryPlaceholder" in data && data.localizedCountryPlaceholder != undefined) {
                    this.localizedCountryPlaceholder = data.localizedCountryPlaceholder;
                }
                if ("localizedZipPlaceholder" in data && data.localizedZipPlaceholder != undefined) {
                    this.localizedZipPlaceholder = data.localizedZipPlaceholder;
                }
            }
        }
        get address1Label() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address1Label(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get address2Label() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set address2Label(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get cityLabel() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set cityLabel(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get countryLabel() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set countryLabel(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get zipLabel() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set zipLabel(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get address1Placeholder() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set address1Placeholder(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get address2Placeholder() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set address2Placeholder(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get cityPlaceholder() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set cityPlaceholder(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get countryPlaceholder() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set countryPlaceholder(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get zipPlaceholder() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set zipPlaceholder(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get localizedAddress1Label() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 11) as dependency_2.io.LocalizedString;
        }
        set localizedAddress1Label(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasLocalizedAddress1Label() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get localizedAddress2Label() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 12) as dependency_2.io.LocalizedString;
        }
        set localizedAddress2Label(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get hasLocalizedAddress2Label() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get localizedCityLabel() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 13) as dependency_2.io.LocalizedString;
        }
        set localizedCityLabel(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasLocalizedCityLabel() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get localizedCountryLabel() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 14) as dependency_2.io.LocalizedString;
        }
        set localizedCountryLabel(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get hasLocalizedCountryLabel() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get localizedZipLabel() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 15) as dependency_2.io.LocalizedString;
        }
        set localizedZipLabel(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get hasLocalizedZipLabel() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get localizedAddress1Placeholder() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 16) as dependency_2.io.LocalizedString;
        }
        set localizedAddress1Placeholder(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get hasLocalizedAddress1Placeholder() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get localizedAddress2Placeholder() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 17) as dependency_2.io.LocalizedString;
        }
        set localizedAddress2Placeholder(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get hasLocalizedAddress2Placeholder() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get localizedCityPlaceholder() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 18) as dependency_2.io.LocalizedString;
        }
        set localizedCityPlaceholder(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get hasLocalizedCityPlaceholder() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get localizedCountryPlaceholder() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 19) as dependency_2.io.LocalizedString;
        }
        set localizedCountryPlaceholder(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get hasLocalizedCountryPlaceholder() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get localizedZipPlaceholder() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 20) as dependency_2.io.LocalizedString;
        }
        set localizedZipPlaceholder(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get hasLocalizedZipPlaceholder() {
            return pb_1.Message.getField(this, 20) != null;
        }
        static fromObject(data: {
            address1Label?: string;
            address2Label?: string;
            cityLabel?: string;
            countryLabel?: string;
            zipLabel?: string;
            address1Placeholder?: string;
            address2Placeholder?: string;
            cityPlaceholder?: string;
            countryPlaceholder?: string;
            zipPlaceholder?: string;
            localizedAddress1Label?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            localizedAddress2Label?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            localizedCityLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            localizedCountryLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            localizedZipLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            localizedAddress1Placeholder?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            localizedAddress2Placeholder?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            localizedCityPlaceholder?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            localizedCountryPlaceholder?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            localizedZipPlaceholder?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
        }): AddressRenderOptions {
            const message = new AddressRenderOptions({});
            if (data.address1Label != null) {
                message.address1Label = data.address1Label;
            }
            if (data.address2Label != null) {
                message.address2Label = data.address2Label;
            }
            if (data.cityLabel != null) {
                message.cityLabel = data.cityLabel;
            }
            if (data.countryLabel != null) {
                message.countryLabel = data.countryLabel;
            }
            if (data.zipLabel != null) {
                message.zipLabel = data.zipLabel;
            }
            if (data.address1Placeholder != null) {
                message.address1Placeholder = data.address1Placeholder;
            }
            if (data.address2Placeholder != null) {
                message.address2Placeholder = data.address2Placeholder;
            }
            if (data.cityPlaceholder != null) {
                message.cityPlaceholder = data.cityPlaceholder;
            }
            if (data.countryPlaceholder != null) {
                message.countryPlaceholder = data.countryPlaceholder;
            }
            if (data.zipPlaceholder != null) {
                message.zipPlaceholder = data.zipPlaceholder;
            }
            if (data.localizedAddress1Label != null) {
                message.localizedAddress1Label = dependency_2.io.LocalizedString.fromObject(data.localizedAddress1Label);
            }
            if (data.localizedAddress2Label != null) {
                message.localizedAddress2Label = dependency_2.io.LocalizedString.fromObject(data.localizedAddress2Label);
            }
            if (data.localizedCityLabel != null) {
                message.localizedCityLabel = dependency_2.io.LocalizedString.fromObject(data.localizedCityLabel);
            }
            if (data.localizedCountryLabel != null) {
                message.localizedCountryLabel = dependency_2.io.LocalizedString.fromObject(data.localizedCountryLabel);
            }
            if (data.localizedZipLabel != null) {
                message.localizedZipLabel = dependency_2.io.LocalizedString.fromObject(data.localizedZipLabel);
            }
            if (data.localizedAddress1Placeholder != null) {
                message.localizedAddress1Placeholder = dependency_2.io.LocalizedString.fromObject(data.localizedAddress1Placeholder);
            }
            if (data.localizedAddress2Placeholder != null) {
                message.localizedAddress2Placeholder = dependency_2.io.LocalizedString.fromObject(data.localizedAddress2Placeholder);
            }
            if (data.localizedCityPlaceholder != null) {
                message.localizedCityPlaceholder = dependency_2.io.LocalizedString.fromObject(data.localizedCityPlaceholder);
            }
            if (data.localizedCountryPlaceholder != null) {
                message.localizedCountryPlaceholder = dependency_2.io.LocalizedString.fromObject(data.localizedCountryPlaceholder);
            }
            if (data.localizedZipPlaceholder != null) {
                message.localizedZipPlaceholder = dependency_2.io.LocalizedString.fromObject(data.localizedZipPlaceholder);
            }
            return message;
        }
        toObject() {
            const data: {
                address1Label?: string;
                address2Label?: string;
                cityLabel?: string;
                countryLabel?: string;
                zipLabel?: string;
                address1Placeholder?: string;
                address2Placeholder?: string;
                cityPlaceholder?: string;
                countryPlaceholder?: string;
                zipPlaceholder?: string;
                localizedAddress1Label?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                localizedAddress2Label?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                localizedCityLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                localizedCountryLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                localizedZipLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                localizedAddress1Placeholder?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                localizedAddress2Placeholder?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                localizedCityPlaceholder?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                localizedCountryPlaceholder?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                localizedZipPlaceholder?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            } = {};
            if (this.address1Label != null) {
                data.address1Label = this.address1Label;
            }
            if (this.address2Label != null) {
                data.address2Label = this.address2Label;
            }
            if (this.cityLabel != null) {
                data.cityLabel = this.cityLabel;
            }
            if (this.countryLabel != null) {
                data.countryLabel = this.countryLabel;
            }
            if (this.zipLabel != null) {
                data.zipLabel = this.zipLabel;
            }
            if (this.address1Placeholder != null) {
                data.address1Placeholder = this.address1Placeholder;
            }
            if (this.address2Placeholder != null) {
                data.address2Placeholder = this.address2Placeholder;
            }
            if (this.cityPlaceholder != null) {
                data.cityPlaceholder = this.cityPlaceholder;
            }
            if (this.countryPlaceholder != null) {
                data.countryPlaceholder = this.countryPlaceholder;
            }
            if (this.zipPlaceholder != null) {
                data.zipPlaceholder = this.zipPlaceholder;
            }
            if (this.localizedAddress1Label != null) {
                data.localizedAddress1Label = this.localizedAddress1Label.toObject();
            }
            if (this.localizedAddress2Label != null) {
                data.localizedAddress2Label = this.localizedAddress2Label.toObject();
            }
            if (this.localizedCityLabel != null) {
                data.localizedCityLabel = this.localizedCityLabel.toObject();
            }
            if (this.localizedCountryLabel != null) {
                data.localizedCountryLabel = this.localizedCountryLabel.toObject();
            }
            if (this.localizedZipLabel != null) {
                data.localizedZipLabel = this.localizedZipLabel.toObject();
            }
            if (this.localizedAddress1Placeholder != null) {
                data.localizedAddress1Placeholder = this.localizedAddress1Placeholder.toObject();
            }
            if (this.localizedAddress2Placeholder != null) {
                data.localizedAddress2Placeholder = this.localizedAddress2Placeholder.toObject();
            }
            if (this.localizedCityPlaceholder != null) {
                data.localizedCityPlaceholder = this.localizedCityPlaceholder.toObject();
            }
            if (this.localizedCountryPlaceholder != null) {
                data.localizedCountryPlaceholder = this.localizedCountryPlaceholder.toObject();
            }
            if (this.localizedZipPlaceholder != null) {
                data.localizedZipPlaceholder = this.localizedZipPlaceholder.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address1Label.length)
                writer.writeString(1, this.address1Label);
            if (this.address2Label.length)
                writer.writeString(2, this.address2Label);
            if (this.cityLabel.length)
                writer.writeString(3, this.cityLabel);
            if (this.countryLabel.length)
                writer.writeString(4, this.countryLabel);
            if (this.zipLabel.length)
                writer.writeString(5, this.zipLabel);
            if (this.address1Placeholder.length)
                writer.writeString(6, this.address1Placeholder);
            if (this.address2Placeholder.length)
                writer.writeString(7, this.address2Placeholder);
            if (this.cityPlaceholder.length)
                writer.writeString(8, this.cityPlaceholder);
            if (this.countryPlaceholder.length)
                writer.writeString(9, this.countryPlaceholder);
            if (this.zipPlaceholder.length)
                writer.writeString(10, this.zipPlaceholder);
            if (this.hasLocalizedAddress1Label)
                writer.writeMessage(11, this.localizedAddress1Label, () => this.localizedAddress1Label.serialize(writer));
            if (this.hasLocalizedAddress2Label)
                writer.writeMessage(12, this.localizedAddress2Label, () => this.localizedAddress2Label.serialize(writer));
            if (this.hasLocalizedCityLabel)
                writer.writeMessage(13, this.localizedCityLabel, () => this.localizedCityLabel.serialize(writer));
            if (this.hasLocalizedCountryLabel)
                writer.writeMessage(14, this.localizedCountryLabel, () => this.localizedCountryLabel.serialize(writer));
            if (this.hasLocalizedZipLabel)
                writer.writeMessage(15, this.localizedZipLabel, () => this.localizedZipLabel.serialize(writer));
            if (this.hasLocalizedAddress1Placeholder)
                writer.writeMessage(16, this.localizedAddress1Placeholder, () => this.localizedAddress1Placeholder.serialize(writer));
            if (this.hasLocalizedAddress2Placeholder)
                writer.writeMessage(17, this.localizedAddress2Placeholder, () => this.localizedAddress2Placeholder.serialize(writer));
            if (this.hasLocalizedCityPlaceholder)
                writer.writeMessage(18, this.localizedCityPlaceholder, () => this.localizedCityPlaceholder.serialize(writer));
            if (this.hasLocalizedCountryPlaceholder)
                writer.writeMessage(19, this.localizedCountryPlaceholder, () => this.localizedCountryPlaceholder.serialize(writer));
            if (this.hasLocalizedZipPlaceholder)
                writer.writeMessage(20, this.localizedZipPlaceholder, () => this.localizedZipPlaceholder.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddressRenderOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddressRenderOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address1Label = reader.readString();
                        break;
                    case 2:
                        message.address2Label = reader.readString();
                        break;
                    case 3:
                        message.cityLabel = reader.readString();
                        break;
                    case 4:
                        message.countryLabel = reader.readString();
                        break;
                    case 5:
                        message.zipLabel = reader.readString();
                        break;
                    case 6:
                        message.address1Placeholder = reader.readString();
                        break;
                    case 7:
                        message.address2Placeholder = reader.readString();
                        break;
                    case 8:
                        message.cityPlaceholder = reader.readString();
                        break;
                    case 9:
                        message.countryPlaceholder = reader.readString();
                        break;
                    case 10:
                        message.zipPlaceholder = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message.localizedAddress1Label, () => message.localizedAddress1Label = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.localizedAddress2Label, () => message.localizedAddress2Label = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.localizedCityLabel, () => message.localizedCityLabel = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.localizedCountryLabel, () => message.localizedCountryLabel = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.localizedZipLabel, () => message.localizedZipLabel = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.localizedAddress1Placeholder, () => message.localizedAddress1Placeholder = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.localizedAddress2Placeholder, () => message.localizedAddress2Placeholder = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.localizedCityPlaceholder, () => message.localizedCityPlaceholder = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.localizedCountryPlaceholder, () => message.localizedCountryPlaceholder = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.localizedZipPlaceholder, () => message.localizedZipPlaceholder = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddressRenderOptions {
            return AddressRenderOptions.deserialize(bytes);
        }
    }
    export class Sharing extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            prohibitSharing?: boolean;
            url?: string;
            description?: string;
            localizedDescription?: dependency_2.io.LocalizedString;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("prohibitSharing" in data && data.prohibitSharing != undefined) {
                    this.prohibitSharing = data.prohibitSharing;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("localizedDescription" in data && data.localizedDescription != undefined) {
                    this.localizedDescription = data.localizedDescription;
                }
            }
        }
        get prohibitSharing() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set prohibitSharing(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get localizedDescription() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 4) as dependency_2.io.LocalizedString;
        }
        set localizedDescription(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasLocalizedDescription() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            prohibitSharing?: boolean;
            url?: string;
            description?: string;
            localizedDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
        }): Sharing {
            const message = new Sharing({});
            if (data.prohibitSharing != null) {
                message.prohibitSharing = data.prohibitSharing;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.localizedDescription != null) {
                message.localizedDescription = dependency_2.io.LocalizedString.fromObject(data.localizedDescription);
            }
            return message;
        }
        toObject() {
            const data: {
                prohibitSharing?: boolean;
                url?: string;
                description?: string;
                localizedDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            } = {};
            if (this.prohibitSharing != null) {
                data.prohibitSharing = this.prohibitSharing;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.localizedDescription != null) {
                data.localizedDescription = this.localizedDescription.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.prohibitSharing != false)
                writer.writeBool(1, this.prohibitSharing);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.hasLocalizedDescription)
                writer.writeMessage(4, this.localizedDescription, () => this.localizedDescription.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Sharing {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Sharing();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.prohibitSharing = reader.readBool();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.localizedDescription, () => message.localizedDescription = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Sharing {
            return Sharing.deserialize(bytes);
        }
    }
    export class DefaultTemplateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            protocol?: dependency_3.io.PassProtocol;
            revision?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("revision" in data && data.revision != undefined) {
                    this.revision = data.revision;
                }
            }
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_3.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE) as dependency_3.io.PassProtocol;
        }
        set protocol(value: dependency_3.io.PassProtocol) {
            pb_1.Message.setField(this, 1, value);
        }
        get revision() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set revision(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            protocol?: dependency_3.io.PassProtocol;
            revision?: number;
        }): DefaultTemplateRequest {
            const message = new DefaultTemplateRequest({});
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.revision != null) {
                message.revision = data.revision;
            }
            return message;
        }
        toObject() {
            const data: {
                protocol?: dependency_3.io.PassProtocol;
                revision?: number;
            } = {};
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.revision != null) {
                data.revision = this.revision;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.protocol != dependency_3.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE)
                writer.writeEnum(1, this.protocol);
            if (this.revision != 0)
                writer.writeUint32(2, this.revision);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DefaultTemplateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DefaultTemplateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.protocol = reader.readEnum();
                        break;
                    case 2:
                        message.revision = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DefaultTemplateRequest {
            return DefaultTemplateRequest.deserialize(bytes);
        }
    }
}
