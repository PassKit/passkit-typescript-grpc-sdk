/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/core/a_rpc_certificates.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/api/annotations";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../common/common_objects";
import * as dependency_4 from "./../certificate/certificate";
import * as dependency_5 from "./../common/pagination";
import * as dependency_6 from "./../common/filter";
import * as dependency_7 from "./../../protoc-gen-openapiv2/options/annotations";
import * as grpc_1 from "@grpc/grpc-js";
export namespace io {
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedCertificatesService {
        static definition = {
            getAppleCertificateData: {
                path: "/io.Certificates/getAppleCertificateData",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_4.io.PassTypeIdentifier) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_4.io.PassTypeIdentifier.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.io.CertificateData) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.io.CertificateData.deserialize(new Uint8Array(bytes))
            },
            getCertificateSigningRequest: {
                path: "/io.Certificates/getCertificateSigningRequest",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.io.CertificateSigningRequest) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.io.CertificateSigningRequest.deserialize(new Uint8Array(bytes))
            },
            addAppleCertificate: {
                path: "/io.Certificates/addAppleCertificate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.io.FileBytes) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.io.FileBytes.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.io.CertificateData) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.io.CertificateData.deserialize(new Uint8Array(bytes))
            },
            updateAppleCertificate: {
                path: "/io.Certificates/updateAppleCertificate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.io.FileBytes) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.io.FileBytes.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.io.CertificateData) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.io.CertificateData.deserialize(new Uint8Array(bytes))
            },
            listAppleCertificatesDeprecated: {
                path: "/io.Certificates/listAppleCertificatesDeprecated",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: dependency_5.io.Pagination) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.io.Pagination.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.io.CertificateData) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.io.CertificateData.deserialize(new Uint8Array(bytes))
            },
            listAppleCertificates: {
                path: "/io.Certificates/listAppleCertificates",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: dependency_6.io.Filters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_6.io.Filters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.io.CertificateData) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.io.CertificateData.deserialize(new Uint8Array(bytes))
            },
            countAppleCertificatesDeprecated: {
                path: "/io.Certificates/countAppleCertificatesDeprecated",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.io.Pagination) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.io.Pagination.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.Count) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.Count.deserialize(new Uint8Array(bytes))
            },
            countAppleCertificates: {
                path: "/io.Certificates/countAppleCertificates",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_6.io.Filters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_6.io.Filters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.Count) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.Count.deserialize(new Uint8Array(bytes))
            },
            sendNFCSigningCredentials: {
                path: "/io.Certificates/sendNFCSigningCredentials",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_4.io.NFCSigningCredentialsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_4.io.NFCSigningCredentialsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract getAppleCertificateData(call: grpc_1.ServerUnaryCall<dependency_4.io.PassTypeIdentifier, dependency_4.io.CertificateData>, callback: grpc_1.sendUnaryData<dependency_4.io.CertificateData>): void;
        abstract getCertificateSigningRequest(call: grpc_1.ServerUnaryCall<dependency_2.google.protobuf.Empty, dependency_4.io.CertificateSigningRequest>, callback: grpc_1.sendUnaryData<dependency_4.io.CertificateSigningRequest>): void;
        abstract addAppleCertificate(call: grpc_1.ServerUnaryCall<dependency_3.io.FileBytes, dependency_4.io.CertificateData>, callback: grpc_1.sendUnaryData<dependency_4.io.CertificateData>): void;
        abstract updateAppleCertificate(call: grpc_1.ServerUnaryCall<dependency_3.io.FileBytes, dependency_4.io.CertificateData>, callback: grpc_1.sendUnaryData<dependency_4.io.CertificateData>): void;
        abstract listAppleCertificatesDeprecated(call: grpc_1.ServerWritableStream<dependency_5.io.Pagination, dependency_4.io.CertificateData>): void;
        abstract listAppleCertificates(call: grpc_1.ServerWritableStream<dependency_6.io.Filters, dependency_4.io.CertificateData>): void;
        abstract countAppleCertificatesDeprecated(call: grpc_1.ServerUnaryCall<dependency_5.io.Pagination, dependency_3.io.Count>, callback: grpc_1.sendUnaryData<dependency_3.io.Count>): void;
        abstract countAppleCertificates(call: grpc_1.ServerUnaryCall<dependency_6.io.Filters, dependency_3.io.Count>, callback: grpc_1.sendUnaryData<dependency_3.io.Count>): void;
        abstract sendNFCSigningCredentials(call: grpc_1.ServerUnaryCall<dependency_4.io.NFCSigningCredentialsRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
    }
    export class CertificatesClient extends grpc_1.makeGenericClientConstructor(UnimplementedCertificatesService.definition, "Certificates", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        getAppleCertificateData: GrpcPromiseServiceInterface<dependency_4.io.PassTypeIdentifier, dependency_4.io.CertificateData> = (message: dependency_4.io.PassTypeIdentifier, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_4.io.CertificateData> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getAppleCertificateData(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_4.io.CertificateData) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        getCertificateSigningRequest: GrpcPromiseServiceInterface<dependency_2.google.protobuf.Empty, dependency_4.io.CertificateSigningRequest> = (message: dependency_2.google.protobuf.Empty, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_4.io.CertificateSigningRequest> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getCertificateSigningRequest(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_4.io.CertificateSigningRequest) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        addAppleCertificate: GrpcPromiseServiceInterface<dependency_3.io.FileBytes, dependency_4.io.CertificateData> = (message: dependency_3.io.FileBytes, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_4.io.CertificateData> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.addAppleCertificate(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_4.io.CertificateData) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        updateAppleCertificate: GrpcPromiseServiceInterface<dependency_3.io.FileBytes, dependency_4.io.CertificateData> = (message: dependency_3.io.FileBytes, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_4.io.CertificateData> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.updateAppleCertificate(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_4.io.CertificateData) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        listAppleCertificatesDeprecated: GrpcStreamServiceInterface<dependency_5.io.Pagination, dependency_4.io.CertificateData> = (message: dependency_5.io.Pagination, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_4.io.CertificateData> => {
            return super.listAppleCertificatesDeprecated(message, metadata, options);
        };
        listAppleCertificates: GrpcStreamServiceInterface<dependency_6.io.Filters, dependency_4.io.CertificateData> = (message: dependency_6.io.Filters, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_4.io.CertificateData> => {
            return super.listAppleCertificates(message, metadata, options);
        };
        countAppleCertificatesDeprecated: GrpcPromiseServiceInterface<dependency_5.io.Pagination, dependency_3.io.Count> = (message: dependency_5.io.Pagination, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.Count> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.countAppleCertificatesDeprecated(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.Count) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        countAppleCertificates: GrpcPromiseServiceInterface<dependency_6.io.Filters, dependency_3.io.Count> = (message: dependency_6.io.Filters, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.Count> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.countAppleCertificates(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.Count) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        sendNFCSigningCredentials: GrpcPromiseServiceInterface<dependency_4.io.NFCSigningCredentialsRequest, dependency_2.google.protobuf.Empty> = (message: dependency_4.io.NFCSigningCredentialsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_2.google.protobuf.Empty> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.sendNFCSigningCredentials(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_2.google.protobuf.Empty) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
    }
}
