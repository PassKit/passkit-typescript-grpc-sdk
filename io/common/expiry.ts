/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/expiry.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common_objects";
import * as pb_1 from "google-protobuf";
export namespace io {
    export enum ExpiryType {
        EXPIRE_NONE = 0,
        EXPIRE_ON_FIXED_DATE = 1,
        EXPIRE_AFTER_X_DAYS = 2,
        EXPIRE_ON_VARIABLE_DATE_TIME = 3,
        EXPIRE_SET_TO_NULL = 4
    }
    export class ExpirySettings extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            expiryType?: ExpiryType;
        } & (({
            fixedExpiryDate?: dependency_1.io.Date;
            expireAfterXDays?: never;
        } | {
            fixedExpiryDate?: never;
            expireAfterXDays?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("expiryType" in data && data.expiryType != undefined) {
                    this.expiryType = data.expiryType;
                }
                if ("fixedExpiryDate" in data && data.fixedExpiryDate != undefined) {
                    this.fixedExpiryDate = data.fixedExpiryDate;
                }
                if ("expireAfterXDays" in data && data.expireAfterXDays != undefined) {
                    this.expireAfterXDays = data.expireAfterXDays;
                }
            }
        }
        get expiryType() {
            return pb_1.Message.getFieldWithDefault(this, 1, ExpiryType.EXPIRE_NONE) as ExpiryType;
        }
        set expiryType(value: ExpiryType) {
            pb_1.Message.setField(this, 1, value);
        }
        get fixedExpiryDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Date, 2) as dependency_1.io.Date;
        }
        set fixedExpiryDate(value: dependency_1.io.Date) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get hasFixedExpiryDate() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get expireAfterXDays() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set expireAfterXDays(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get hasExpireAfterXDays() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get expiryOneof() {
            const cases: {
                [index: number]: "none" | "fixedExpiryDate" | "expireAfterXDays";
            } = {
                0: "none",
                2: "fixedExpiryDate",
                3: "expireAfterXDays"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            expiryType?: ExpiryType;
            fixedExpiryDate?: ReturnType<typeof dependency_1.io.Date.prototype.toObject>;
            expireAfterXDays?: number;
        }): ExpirySettings {
            const message = new ExpirySettings({});
            if (data.expiryType != null) {
                message.expiryType = data.expiryType;
            }
            if (data.fixedExpiryDate != null) {
                message.fixedExpiryDate = dependency_1.io.Date.fromObject(data.fixedExpiryDate);
            }
            if (data.expireAfterXDays != null) {
                message.expireAfterXDays = data.expireAfterXDays;
            }
            return message;
        }
        toObject() {
            const data: {
                expiryType?: ExpiryType;
                fixedExpiryDate?: ReturnType<typeof dependency_1.io.Date.prototype.toObject>;
                expireAfterXDays?: number;
            } = {};
            if (this.expiryType != null) {
                data.expiryType = this.expiryType;
            }
            if (this.fixedExpiryDate != null) {
                data.fixedExpiryDate = this.fixedExpiryDate.toObject();
            }
            if (this.expireAfterXDays != null) {
                data.expireAfterXDays = this.expireAfterXDays;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.expiryType != ExpiryType.EXPIRE_NONE)
                writer.writeEnum(1, this.expiryType);
            if (this.hasFixedExpiryDate)
                writer.writeMessage(2, this.fixedExpiryDate, () => this.fixedExpiryDate.serialize(writer));
            if (this.hasExpireAfterXDays)
                writer.writeUint32(3, this.expireAfterXDays);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExpirySettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExpirySettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.expiryType = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.fixedExpiryDate, () => message.fixedExpiryDate = dependency_1.io.Date.deserialize(reader));
                        break;
                    case 3:
                        message.expireAfterXDays = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExpirySettings {
            return ExpirySettings.deserialize(bytes);
        }
    }
}
