/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/reporting.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./protocols";
import * as dependency_2 from "./common_objects";
import * as dependency_3 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace io {
    export enum Period {
        DAY = 0,
        MONTH = 1,
        YEAR = 2
    }
    export class AnalyticsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            period?: Period;
            created?: number;
            installed?: number;
            deleted?: number;
            invalidated?: number;
            deviceBreakdown?: DeviceBreakdown;
            utmSourceBreakdown?: Map<string, number>;
            data?: ChartDataPoints[];
            utmMediumBreakdown?: Map<string, number>;
            utmNameBreakdown?: Map<string, number>;
            utmTermBreakdown?: Map<string, number>;
            utmContentBreakdown?: Map<string, number>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("period" in data && data.period != undefined) {
                    this.period = data.period;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("installed" in data && data.installed != undefined) {
                    this.installed = data.installed;
                }
                if ("deleted" in data && data.deleted != undefined) {
                    this.deleted = data.deleted;
                }
                if ("invalidated" in data && data.invalidated != undefined) {
                    this.invalidated = data.invalidated;
                }
                if ("deviceBreakdown" in data && data.deviceBreakdown != undefined) {
                    this.deviceBreakdown = data.deviceBreakdown;
                }
                if ("utmSourceBreakdown" in data && data.utmSourceBreakdown != undefined) {
                    this.utmSourceBreakdown = data.utmSourceBreakdown;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("utmMediumBreakdown" in data && data.utmMediumBreakdown != undefined) {
                    this.utmMediumBreakdown = data.utmMediumBreakdown;
                }
                if ("utmNameBreakdown" in data && data.utmNameBreakdown != undefined) {
                    this.utmNameBreakdown = data.utmNameBreakdown;
                }
                if ("utmTermBreakdown" in data && data.utmTermBreakdown != undefined) {
                    this.utmTermBreakdown = data.utmTermBreakdown;
                }
                if ("utmContentBreakdown" in data && data.utmContentBreakdown != undefined) {
                    this.utmContentBreakdown = data.utmContentBreakdown;
                }
            }
            if (!this.utmSourceBreakdown)
                this.utmSourceBreakdown = new Map();
            if (!this.utmMediumBreakdown)
                this.utmMediumBreakdown = new Map();
            if (!this.utmNameBreakdown)
                this.utmNameBreakdown = new Map();
            if (!this.utmTermBreakdown)
                this.utmTermBreakdown = new Map();
            if (!this.utmContentBreakdown)
                this.utmContentBreakdown = new Map();
        }
        get period() {
            return pb_1.Message.getFieldWithDefault(this, 1, Period.DAY) as Period;
        }
        set period(value: Period) {
            pb_1.Message.setField(this, 1, value);
        }
        get created() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set created(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get installed() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set installed(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get deleted() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set deleted(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get invalidated() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set invalidated(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get deviceBreakdown() {
            return pb_1.Message.getWrapperField(this, DeviceBreakdown, 6) as DeviceBreakdown;
        }
        set deviceBreakdown(value: DeviceBreakdown) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasDeviceBreakdown() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get utmSourceBreakdown() {
            return pb_1.Message.getField(this, 7) as any as Map<string, number>;
        }
        set utmSourceBreakdown(value: Map<string, number>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, ChartDataPoints, 8) as ChartDataPoints[];
        }
        set data(value: ChartDataPoints[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get utmMediumBreakdown() {
            return pb_1.Message.getField(this, 9) as any as Map<string, number>;
        }
        set utmMediumBreakdown(value: Map<string, number>) {
            pb_1.Message.setField(this, 9, value as any);
        }
        get utmNameBreakdown() {
            return pb_1.Message.getField(this, 10) as any as Map<string, number>;
        }
        set utmNameBreakdown(value: Map<string, number>) {
            pb_1.Message.setField(this, 10, value as any);
        }
        get utmTermBreakdown() {
            return pb_1.Message.getField(this, 11) as any as Map<string, number>;
        }
        set utmTermBreakdown(value: Map<string, number>) {
            pb_1.Message.setField(this, 11, value as any);
        }
        get utmContentBreakdown() {
            return pb_1.Message.getField(this, 12) as any as Map<string, number>;
        }
        set utmContentBreakdown(value: Map<string, number>) {
            pb_1.Message.setField(this, 12, value as any);
        }
        static fromObject(data: {
            period?: Period;
            created?: number;
            installed?: number;
            deleted?: number;
            invalidated?: number;
            deviceBreakdown?: ReturnType<typeof DeviceBreakdown.prototype.toObject>;
            utmSourceBreakdown?: {
                [key: string]: number;
            };
            data?: ReturnType<typeof ChartDataPoints.prototype.toObject>[];
            utmMediumBreakdown?: {
                [key: string]: number;
            };
            utmNameBreakdown?: {
                [key: string]: number;
            };
            utmTermBreakdown?: {
                [key: string]: number;
            };
            utmContentBreakdown?: {
                [key: string]: number;
            };
        }): AnalyticsResponse {
            const message = new AnalyticsResponse({});
            if (data.period != null) {
                message.period = data.period;
            }
            if (data.created != null) {
                message.created = data.created;
            }
            if (data.installed != null) {
                message.installed = data.installed;
            }
            if (data.deleted != null) {
                message.deleted = data.deleted;
            }
            if (data.invalidated != null) {
                message.invalidated = data.invalidated;
            }
            if (data.deviceBreakdown != null) {
                message.deviceBreakdown = DeviceBreakdown.fromObject(data.deviceBreakdown);
            }
            if (typeof data.utmSourceBreakdown == "object") {
                message.utmSourceBreakdown = new Map(Object.entries(data.utmSourceBreakdown));
            }
            if (data.data != null) {
                message.data = data.data.map(item => ChartDataPoints.fromObject(item));
            }
            if (typeof data.utmMediumBreakdown == "object") {
                message.utmMediumBreakdown = new Map(Object.entries(data.utmMediumBreakdown));
            }
            if (typeof data.utmNameBreakdown == "object") {
                message.utmNameBreakdown = new Map(Object.entries(data.utmNameBreakdown));
            }
            if (typeof data.utmTermBreakdown == "object") {
                message.utmTermBreakdown = new Map(Object.entries(data.utmTermBreakdown));
            }
            if (typeof data.utmContentBreakdown == "object") {
                message.utmContentBreakdown = new Map(Object.entries(data.utmContentBreakdown));
            }
            return message;
        }
        toObject() {
            const data: {
                period?: Period;
                created?: number;
                installed?: number;
                deleted?: number;
                invalidated?: number;
                deviceBreakdown?: ReturnType<typeof DeviceBreakdown.prototype.toObject>;
                utmSourceBreakdown?: {
                    [key: string]: number;
                };
                data?: ReturnType<typeof ChartDataPoints.prototype.toObject>[];
                utmMediumBreakdown?: {
                    [key: string]: number;
                };
                utmNameBreakdown?: {
                    [key: string]: number;
                };
                utmTermBreakdown?: {
                    [key: string]: number;
                };
                utmContentBreakdown?: {
                    [key: string]: number;
                };
            } = {};
            if (this.period != null) {
                data.period = this.period;
            }
            if (this.created != null) {
                data.created = this.created;
            }
            if (this.installed != null) {
                data.installed = this.installed;
            }
            if (this.deleted != null) {
                data.deleted = this.deleted;
            }
            if (this.invalidated != null) {
                data.invalidated = this.invalidated;
            }
            if (this.deviceBreakdown != null) {
                data.deviceBreakdown = this.deviceBreakdown.toObject();
            }
            if (this.utmSourceBreakdown != null) {
                data.utmSourceBreakdown = (Object.fromEntries)(this.utmSourceBreakdown);
            }
            if (this.data != null) {
                data.data = this.data.map((item: ChartDataPoints) => item.toObject());
            }
            if (this.utmMediumBreakdown != null) {
                data.utmMediumBreakdown = (Object.fromEntries)(this.utmMediumBreakdown);
            }
            if (this.utmNameBreakdown != null) {
                data.utmNameBreakdown = (Object.fromEntries)(this.utmNameBreakdown);
            }
            if (this.utmTermBreakdown != null) {
                data.utmTermBreakdown = (Object.fromEntries)(this.utmTermBreakdown);
            }
            if (this.utmContentBreakdown != null) {
                data.utmContentBreakdown = (Object.fromEntries)(this.utmContentBreakdown);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.period != Period.DAY)
                writer.writeEnum(1, this.period);
            if (this.created != 0)
                writer.writeUint32(2, this.created);
            if (this.installed != 0)
                writer.writeUint32(3, this.installed);
            if (this.deleted != 0)
                writer.writeUint32(4, this.deleted);
            if (this.invalidated != 0)
                writer.writeUint32(5, this.invalidated);
            if (this.hasDeviceBreakdown)
                writer.writeMessage(6, this.deviceBreakdown, () => this.deviceBreakdown.serialize(writer));
            for (const [key, value] of this.utmSourceBreakdown) {
                writer.writeMessage(7, this.utmSourceBreakdown, () => {
                    writer.writeString(1, key);
                    writer.writeUint32(2, value);
                });
            }
            if (this.data.length)
                writer.writeRepeatedMessage(8, this.data, (item: ChartDataPoints) => item.serialize(writer));
            for (const [key, value] of this.utmMediumBreakdown) {
                writer.writeMessage(9, this.utmMediumBreakdown, () => {
                    writer.writeString(1, key);
                    writer.writeUint32(2, value);
                });
            }
            for (const [key, value] of this.utmNameBreakdown) {
                writer.writeMessage(10, this.utmNameBreakdown, () => {
                    writer.writeString(1, key);
                    writer.writeUint32(2, value);
                });
            }
            for (const [key, value] of this.utmTermBreakdown) {
                writer.writeMessage(11, this.utmTermBreakdown, () => {
                    writer.writeString(1, key);
                    writer.writeUint32(2, value);
                });
            }
            for (const [key, value] of this.utmContentBreakdown) {
                writer.writeMessage(12, this.utmContentBreakdown, () => {
                    writer.writeString(1, key);
                    writer.writeUint32(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AnalyticsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnalyticsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.period = reader.readEnum();
                        break;
                    case 2:
                        message.created = reader.readUint32();
                        break;
                    case 3:
                        message.installed = reader.readUint32();
                        break;
                    case 4:
                        message.deleted = reader.readUint32();
                        break;
                    case 5:
                        message.invalidated = reader.readUint32();
                        break;
                    case 6:
                        reader.readMessage(message.deviceBreakdown, () => message.deviceBreakdown = DeviceBreakdown.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.utmSourceBreakdown as any, reader, reader.readString, reader.readUint32));
                        break;
                    case 8:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 8, ChartDataPoints.deserialize(reader), ChartDataPoints));
                        break;
                    case 9:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.utmMediumBreakdown as any, reader, reader.readString, reader.readUint32));
                        break;
                    case 10:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.utmNameBreakdown as any, reader, reader.readString, reader.readUint32));
                        break;
                    case 11:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.utmTermBreakdown as any, reader, reader.readString, reader.readUint32));
                        break;
                    case 12:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.utmContentBreakdown as any, reader, reader.readString, reader.readUint32));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AnalyticsResponse {
            return AnalyticsResponse.deserialize(bytes);
        }
    }
    export class DeviceBreakdown extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            appleWallet?: number;
            googlePay?: number;
            otherWallet?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("appleWallet" in data && data.appleWallet != undefined) {
                    this.appleWallet = data.appleWallet;
                }
                if ("googlePay" in data && data.googlePay != undefined) {
                    this.googlePay = data.googlePay;
                }
                if ("otherWallet" in data && data.otherWallet != undefined) {
                    this.otherWallet = data.otherWallet;
                }
            }
        }
        get appleWallet() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set appleWallet(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get googlePay() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set googlePay(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get otherWallet() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set otherWallet(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            appleWallet?: number;
            googlePay?: number;
            otherWallet?: number;
        }): DeviceBreakdown {
            const message = new DeviceBreakdown({});
            if (data.appleWallet != null) {
                message.appleWallet = data.appleWallet;
            }
            if (data.googlePay != null) {
                message.googlePay = data.googlePay;
            }
            if (data.otherWallet != null) {
                message.otherWallet = data.otherWallet;
            }
            return message;
        }
        toObject() {
            const data: {
                appleWallet?: number;
                googlePay?: number;
                otherWallet?: number;
            } = {};
            if (this.appleWallet != null) {
                data.appleWallet = this.appleWallet;
            }
            if (this.googlePay != null) {
                data.googlePay = this.googlePay;
            }
            if (this.otherWallet != null) {
                data.otherWallet = this.otherWallet;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.appleWallet != 0)
                writer.writeUint32(1, this.appleWallet);
            if (this.googlePay != 0)
                writer.writeUint32(2, this.googlePay);
            if (this.otherWallet != 0)
                writer.writeUint32(3, this.otherWallet);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeviceBreakdown {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeviceBreakdown();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.appleWallet = reader.readUint32();
                        break;
                    case 2:
                        message.googlePay = reader.readUint32();
                        break;
                    case 3:
                        message.otherWallet = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeviceBreakdown {
            return DeviceBreakdown.deserialize(bytes);
        }
    }
    export class ChartDataPoints extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            created?: number;
            installed?: number;
            updated?: number;
            deleted?: number;
            invalidated?: number;
            custom?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("installed" in data && data.installed != undefined) {
                    this.installed = data.installed;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
                if ("deleted" in data && data.deleted != undefined) {
                    this.deleted = data.deleted;
                }
                if ("invalidated" in data && data.invalidated != undefined) {
                    this.invalidated = data.invalidated;
                }
                if ("custom" in data && data.custom != undefined) {
                    this.custom = data.custom;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get created() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set created(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get installed() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set installed(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get updated() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set updated(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get deleted() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set deleted(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get invalidated() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set invalidated(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get custom() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set custom(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            name?: string;
            created?: number;
            installed?: number;
            updated?: number;
            deleted?: number;
            invalidated?: number;
            custom?: number;
        }): ChartDataPoints {
            const message = new ChartDataPoints({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.created != null) {
                message.created = data.created;
            }
            if (data.installed != null) {
                message.installed = data.installed;
            }
            if (data.updated != null) {
                message.updated = data.updated;
            }
            if (data.deleted != null) {
                message.deleted = data.deleted;
            }
            if (data.invalidated != null) {
                message.invalidated = data.invalidated;
            }
            if (data.custom != null) {
                message.custom = data.custom;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                created?: number;
                installed?: number;
                updated?: number;
                deleted?: number;
                invalidated?: number;
                custom?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.created != null) {
                data.created = this.created;
            }
            if (this.installed != null) {
                data.installed = this.installed;
            }
            if (this.updated != null) {
                data.updated = this.updated;
            }
            if (this.deleted != null) {
                data.deleted = this.deleted;
            }
            if (this.invalidated != null) {
                data.invalidated = this.invalidated;
            }
            if (this.custom != null) {
                data.custom = this.custom;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.created != 0)
                writer.writeUint32(2, this.created);
            if (this.installed != 0)
                writer.writeUint32(3, this.installed);
            if (this.updated != 0)
                writer.writeUint32(4, this.updated);
            if (this.deleted != 0)
                writer.writeUint32(5, this.deleted);
            if (this.invalidated != 0)
                writer.writeUint32(6, this.invalidated);
            if (this.custom != 0)
                writer.writeUint32(7, this.custom);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChartDataPoints {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChartDataPoints();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.created = reader.readUint32();
                        break;
                    case 3:
                        message.installed = reader.readUint32();
                        break;
                    case 4:
                        message.updated = reader.readUint32();
                        break;
                    case 5:
                        message.deleted = reader.readUint32();
                        break;
                    case 6:
                        message.invalidated = reader.readUint32();
                        break;
                    case 7:
                        message.custom = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChartDataPoints {
            return ChartDataPoints.deserialize(bytes);
        }
    }
    export class AnalyticsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[15, 16, 17]];
        constructor(data?: any[] | ({
            protocol?: dependency_1.io.PassProtocol;
            classId?: string;
            period?: Period;
            startDate?: string;
            endDate?: string;
            timezone?: string;
        } & (({
            coupon?: CouponAnalyticsFilter;
            flight?: never;
            eventTicket?: never;
        } | {
            coupon?: never;
            flight?: FlightAnalyticsFilter;
            eventTicket?: never;
        } | {
            coupon?: never;
            flight?: never;
            eventTicket?: EventTicketAnalyticsFilter;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("classId" in data && data.classId != undefined) {
                    this.classId = data.classId;
                }
                if ("period" in data && data.period != undefined) {
                    this.period = data.period;
                }
                if ("startDate" in data && data.startDate != undefined) {
                    this.startDate = data.startDate;
                }
                if ("endDate" in data && data.endDate != undefined) {
                    this.endDate = data.endDate;
                }
                if ("timezone" in data && data.timezone != undefined) {
                    this.timezone = data.timezone;
                }
                if ("coupon" in data && data.coupon != undefined) {
                    this.coupon = data.coupon;
                }
                if ("flight" in data && data.flight != undefined) {
                    this.flight = data.flight;
                }
                if ("eventTicket" in data && data.eventTicket != undefined) {
                    this.eventTicket = data.eventTicket;
                }
            }
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE) as dependency_1.io.PassProtocol;
        }
        set protocol(value: dependency_1.io.PassProtocol) {
            pb_1.Message.setField(this, 1, value);
        }
        get classId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set classId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get period() {
            return pb_1.Message.getFieldWithDefault(this, 3, Period.DAY) as Period;
        }
        set period(value: Period) {
            pb_1.Message.setField(this, 3, value);
        }
        get startDate() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set startDate(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get endDate() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set endDate(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get timezone() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set timezone(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get coupon() {
            return pb_1.Message.getWrapperField(this, CouponAnalyticsFilter, 15) as CouponAnalyticsFilter;
        }
        set coupon(value: CouponAnalyticsFilter) {
            pb_1.Message.setOneofWrapperField(this, 15, this.#one_of_decls[0], value);
        }
        get hasCoupon() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get flight() {
            return pb_1.Message.getWrapperField(this, FlightAnalyticsFilter, 16) as FlightAnalyticsFilter;
        }
        set flight(value: FlightAnalyticsFilter) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get hasFlight() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get eventTicket() {
            return pb_1.Message.getWrapperField(this, EventTicketAnalyticsFilter, 17) as EventTicketAnalyticsFilter;
        }
        set eventTicket(value: EventTicketAnalyticsFilter) {
            pb_1.Message.setOneofWrapperField(this, 17, this.#one_of_decls[0], value);
        }
        get hasEventTicket() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get filter() {
            const cases: {
                [index: number]: "none" | "coupon" | "flight" | "eventTicket";
            } = {
                0: "none",
                15: "coupon",
                16: "flight",
                17: "eventTicket"
            };
            return cases[pb_1.Message.computeOneofCase(this, [15, 16, 17])];
        }
        static fromObject(data: {
            protocol?: dependency_1.io.PassProtocol;
            classId?: string;
            period?: Period;
            startDate?: string;
            endDate?: string;
            timezone?: string;
            coupon?: ReturnType<typeof CouponAnalyticsFilter.prototype.toObject>;
            flight?: ReturnType<typeof FlightAnalyticsFilter.prototype.toObject>;
            eventTicket?: ReturnType<typeof EventTicketAnalyticsFilter.prototype.toObject>;
        }): AnalyticsRequest {
            const message = new AnalyticsRequest({});
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.classId != null) {
                message.classId = data.classId;
            }
            if (data.period != null) {
                message.period = data.period;
            }
            if (data.startDate != null) {
                message.startDate = data.startDate;
            }
            if (data.endDate != null) {
                message.endDate = data.endDate;
            }
            if (data.timezone != null) {
                message.timezone = data.timezone;
            }
            if (data.coupon != null) {
                message.coupon = CouponAnalyticsFilter.fromObject(data.coupon);
            }
            if (data.flight != null) {
                message.flight = FlightAnalyticsFilter.fromObject(data.flight);
            }
            if (data.eventTicket != null) {
                message.eventTicket = EventTicketAnalyticsFilter.fromObject(data.eventTicket);
            }
            return message;
        }
        toObject() {
            const data: {
                protocol?: dependency_1.io.PassProtocol;
                classId?: string;
                period?: Period;
                startDate?: string;
                endDate?: string;
                timezone?: string;
                coupon?: ReturnType<typeof CouponAnalyticsFilter.prototype.toObject>;
                flight?: ReturnType<typeof FlightAnalyticsFilter.prototype.toObject>;
                eventTicket?: ReturnType<typeof EventTicketAnalyticsFilter.prototype.toObject>;
            } = {};
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.classId != null) {
                data.classId = this.classId;
            }
            if (this.period != null) {
                data.period = this.period;
            }
            if (this.startDate != null) {
                data.startDate = this.startDate;
            }
            if (this.endDate != null) {
                data.endDate = this.endDate;
            }
            if (this.timezone != null) {
                data.timezone = this.timezone;
            }
            if (this.coupon != null) {
                data.coupon = this.coupon.toObject();
            }
            if (this.flight != null) {
                data.flight = this.flight.toObject();
            }
            if (this.eventTicket != null) {
                data.eventTicket = this.eventTicket.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.protocol != dependency_1.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE)
                writer.writeEnum(1, this.protocol);
            if (this.classId.length)
                writer.writeString(2, this.classId);
            if (this.period != Period.DAY)
                writer.writeEnum(3, this.period);
            if (this.startDate.length)
                writer.writeString(4, this.startDate);
            if (this.endDate.length)
                writer.writeString(5, this.endDate);
            if (this.timezone.length)
                writer.writeString(6, this.timezone);
            if (this.hasCoupon)
                writer.writeMessage(15, this.coupon, () => this.coupon.serialize(writer));
            if (this.hasFlight)
                writer.writeMessage(16, this.flight, () => this.flight.serialize(writer));
            if (this.hasEventTicket)
                writer.writeMessage(17, this.eventTicket, () => this.eventTicket.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AnalyticsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnalyticsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.protocol = reader.readEnum();
                        break;
                    case 2:
                        message.classId = reader.readString();
                        break;
                    case 3:
                        message.period = reader.readEnum();
                        break;
                    case 4:
                        message.startDate = reader.readString();
                        break;
                    case 5:
                        message.endDate = reader.readString();
                        break;
                    case 6:
                        message.timezone = reader.readString();
                        break;
                    case 15:
                        reader.readMessage(message.coupon, () => message.coupon = CouponAnalyticsFilter.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.flight, () => message.flight = FlightAnalyticsFilter.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.eventTicket, () => message.eventTicket = EventTicketAnalyticsFilter.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AnalyticsRequest {
            return AnalyticsRequest.deserialize(bytes);
        }
    }
    export class CouponAnalyticsFilter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            offerId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("offerId" in data && data.offerId != undefined) {
                    this.offerId = data.offerId;
                }
            }
        }
        get offerId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set offerId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            offerId?: string;
        }): CouponAnalyticsFilter {
            const message = new CouponAnalyticsFilter({});
            if (data.offerId != null) {
                message.offerId = data.offerId;
            }
            return message;
        }
        toObject() {
            const data: {
                offerId?: string;
            } = {};
            if (this.offerId != null) {
                data.offerId = this.offerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.offerId.length)
                writer.writeString(1, this.offerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CouponAnalyticsFilter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CouponAnalyticsFilter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.offerId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CouponAnalyticsFilter {
            return CouponAnalyticsFilter.deserialize(bytes);
        }
    }
    export class FlightAnalyticsFilter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            flightNumber?: string;
            departureDate?: dependency_2.io.Date;
            boardingPoint?: string;
            deplaningPoint?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("flightNumber" in data && data.flightNumber != undefined) {
                    this.flightNumber = data.flightNumber;
                }
                if ("departureDate" in data && data.departureDate != undefined) {
                    this.departureDate = data.departureDate;
                }
                if ("boardingPoint" in data && data.boardingPoint != undefined) {
                    this.boardingPoint = data.boardingPoint;
                }
                if ("deplaningPoint" in data && data.deplaningPoint != undefined) {
                    this.deplaningPoint = data.deplaningPoint;
                }
            }
        }
        get flightNumber() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set flightNumber(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get departureDate() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.Date, 2) as dependency_2.io.Date;
        }
        set departureDate(value: dependency_2.io.Date) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasDepartureDate() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get boardingPoint() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set boardingPoint(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get deplaningPoint() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set deplaningPoint(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            flightNumber?: string;
            departureDate?: ReturnType<typeof dependency_2.io.Date.prototype.toObject>;
            boardingPoint?: string;
            deplaningPoint?: string;
        }): FlightAnalyticsFilter {
            const message = new FlightAnalyticsFilter({});
            if (data.flightNumber != null) {
                message.flightNumber = data.flightNumber;
            }
            if (data.departureDate != null) {
                message.departureDate = dependency_2.io.Date.fromObject(data.departureDate);
            }
            if (data.boardingPoint != null) {
                message.boardingPoint = data.boardingPoint;
            }
            if (data.deplaningPoint != null) {
                message.deplaningPoint = data.deplaningPoint;
            }
            return message;
        }
        toObject() {
            const data: {
                flightNumber?: string;
                departureDate?: ReturnType<typeof dependency_2.io.Date.prototype.toObject>;
                boardingPoint?: string;
                deplaningPoint?: string;
            } = {};
            if (this.flightNumber != null) {
                data.flightNumber = this.flightNumber;
            }
            if (this.departureDate != null) {
                data.departureDate = this.departureDate.toObject();
            }
            if (this.boardingPoint != null) {
                data.boardingPoint = this.boardingPoint;
            }
            if (this.deplaningPoint != null) {
                data.deplaningPoint = this.deplaningPoint;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.flightNumber.length)
                writer.writeString(1, this.flightNumber);
            if (this.hasDepartureDate)
                writer.writeMessage(2, this.departureDate, () => this.departureDate.serialize(writer));
            if (this.boardingPoint.length)
                writer.writeString(3, this.boardingPoint);
            if (this.deplaningPoint.length)
                writer.writeString(4, this.deplaningPoint);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlightAnalyticsFilter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlightAnalyticsFilter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.flightNumber = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.departureDate, () => message.departureDate = dependency_2.io.Date.deserialize(reader));
                        break;
                    case 3:
                        message.boardingPoint = reader.readString();
                        break;
                    case 4:
                        message.deplaningPoint = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FlightAnalyticsFilter {
            return FlightAnalyticsFilter.deserialize(bytes);
        }
    }
    export class EventTicketAnalyticsFilter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ticketTypeId?: string;
            ticketTypeUid?: string;
            venueId?: string;
            venueUid?: string;
            eventId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ticketTypeId" in data && data.ticketTypeId != undefined) {
                    this.ticketTypeId = data.ticketTypeId;
                }
                if ("ticketTypeUid" in data && data.ticketTypeUid != undefined) {
                    this.ticketTypeUid = data.ticketTypeUid;
                }
                if ("venueId" in data && data.venueId != undefined) {
                    this.venueId = data.venueId;
                }
                if ("venueUid" in data && data.venueUid != undefined) {
                    this.venueUid = data.venueUid;
                }
                if ("eventId" in data && data.eventId != undefined) {
                    this.eventId = data.eventId;
                }
            }
        }
        get ticketTypeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ticketTypeId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ticketTypeUid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ticketTypeUid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get venueId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set venueId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get venueUid() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set venueUid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get eventId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set eventId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            ticketTypeId?: string;
            ticketTypeUid?: string;
            venueId?: string;
            venueUid?: string;
            eventId?: string;
        }): EventTicketAnalyticsFilter {
            const message = new EventTicketAnalyticsFilter({});
            if (data.ticketTypeId != null) {
                message.ticketTypeId = data.ticketTypeId;
            }
            if (data.ticketTypeUid != null) {
                message.ticketTypeUid = data.ticketTypeUid;
            }
            if (data.venueId != null) {
                message.venueId = data.venueId;
            }
            if (data.venueUid != null) {
                message.venueUid = data.venueUid;
            }
            if (data.eventId != null) {
                message.eventId = data.eventId;
            }
            return message;
        }
        toObject() {
            const data: {
                ticketTypeId?: string;
                ticketTypeUid?: string;
                venueId?: string;
                venueUid?: string;
                eventId?: string;
            } = {};
            if (this.ticketTypeId != null) {
                data.ticketTypeId = this.ticketTypeId;
            }
            if (this.ticketTypeUid != null) {
                data.ticketTypeUid = this.ticketTypeUid;
            }
            if (this.venueId != null) {
                data.venueId = this.venueId;
            }
            if (this.venueUid != null) {
                data.venueUid = this.venueUid;
            }
            if (this.eventId != null) {
                data.eventId = this.eventId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ticketTypeId.length)
                writer.writeString(1, this.ticketTypeId);
            if (this.ticketTypeUid.length)
                writer.writeString(2, this.ticketTypeUid);
            if (this.venueId.length)
                writer.writeString(3, this.venueId);
            if (this.venueUid.length)
                writer.writeString(4, this.venueUid);
            if (this.eventId.length)
                writer.writeString(5, this.eventId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventTicketAnalyticsFilter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventTicketAnalyticsFilter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ticketTypeId = reader.readString();
                        break;
                    case 2:
                        message.ticketTypeUid = reader.readString();
                        break;
                    case 3:
                        message.venueId = reader.readString();
                        break;
                    case 4:
                        message.venueUid = reader.readString();
                        break;
                    case 5:
                        message.eventId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventTicketAnalyticsFilter {
            return EventTicketAnalyticsFilter.deserialize(bytes);
        }
    }
}
