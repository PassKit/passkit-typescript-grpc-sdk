/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/distribution.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common_objects";
import * as dependency_2 from "./localization";
import * as dependency_3 from "./protocols";
import * as dependency_4 from "./template";
import * as dependency_5 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace io {
    export enum DistributionChannel {
        NO_DISTRIBUTION = 0,
        CHANNEL_EMAIL = 1,
        CHANNEL_SMS = 2
    }
    export enum EmailTemplateOptions {
        EMAIL_TEMP_OPT_NONE = 0,
        EMAIL_TEMP_OPT_HIDE_EXT_ID = 1,
        EMAIL_TEMP_OPT_HIDE_FULL_NAME = 2
    }
    export class EmailDistributionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            externalId?: string;
            classId?: string;
            protocol?: dependency_3.io.PassProtocol;
            alternativeEmail?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("classId" in data && data.classId != undefined) {
                    this.classId = data.classId;
                }
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("alternativeEmail" in data && data.alternativeEmail != undefined) {
                    this.alternativeEmail = data.alternativeEmail;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get classId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set classId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_3.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE) as dependency_3.io.PassProtocol;
        }
        set protocol(value: dependency_3.io.PassProtocol) {
            pb_1.Message.setField(this, 4, value);
        }
        get alternativeEmail() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set alternativeEmail(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            externalId?: string;
            classId?: string;
            protocol?: dependency_3.io.PassProtocol;
            alternativeEmail?: string;
        }): EmailDistributionRequest {
            const message = new EmailDistributionRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (data.classId != null) {
                message.classId = data.classId;
            }
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.alternativeEmail != null) {
                message.alternativeEmail = data.alternativeEmail;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                externalId?: string;
                classId?: string;
                protocol?: dependency_3.io.PassProtocol;
                alternativeEmail?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.classId != null) {
                data.classId = this.classId;
            }
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.alternativeEmail != null) {
                data.alternativeEmail = this.alternativeEmail;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.externalId.length)
                writer.writeString(2, this.externalId);
            if (this.classId.length)
                writer.writeString(3, this.classId);
            if (this.protocol != dependency_3.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE)
                writer.writeEnum(4, this.protocol);
            if (this.alternativeEmail.length)
                writer.writeString(5, this.alternativeEmail);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmailDistributionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmailDistributionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.externalId = reader.readString();
                        break;
                    case 3:
                        message.classId = reader.readString();
                        break;
                    case 4:
                        message.protocol = reader.readEnum();
                        break;
                    case 5:
                        message.alternativeEmail = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmailDistributionRequest {
            return EmailDistributionRequest.deserialize(bytes);
        }
    }
    export class SmartPassLinkRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            projectDistributionUrl?: dependency_1.io.Url;
            fields?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projectDistributionUrl" in data && data.projectDistributionUrl != undefined) {
                    this.projectDistributionUrl = data.projectDistributionUrl;
                }
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
            }
            if (!this.fields)
                this.fields = new Map();
        }
        get projectDistributionUrl() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Url, 1) as dependency_1.io.Url;
        }
        set projectDistributionUrl(value: dependency_1.io.Url) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasProjectDistributionUrl() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get fields() {
            return pb_1.Message.getField(this, 2) as any as Map<string, string>;
        }
        set fields(value: Map<string, string>) {
            pb_1.Message.setField(this, 2, value as any);
        }
        static fromObject(data: {
            projectDistributionUrl?: ReturnType<typeof dependency_1.io.Url.prototype.toObject>;
            fields?: {
                [key: string]: string;
            };
        }): SmartPassLinkRequest {
            const message = new SmartPassLinkRequest({});
            if (data.projectDistributionUrl != null) {
                message.projectDistributionUrl = dependency_1.io.Url.fromObject(data.projectDistributionUrl);
            }
            if (typeof data.fields == "object") {
                message.fields = new Map(Object.entries(data.fields));
            }
            return message;
        }
        toObject() {
            const data: {
                projectDistributionUrl?: ReturnType<typeof dependency_1.io.Url.prototype.toObject>;
                fields?: {
                    [key: string]: string;
                };
            } = {};
            if (this.projectDistributionUrl != null) {
                data.projectDistributionUrl = this.projectDistributionUrl.toObject();
            }
            if (this.fields != null) {
                data.fields = (Object.fromEntries)(this.fields);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasProjectDistributionUrl)
                writer.writeMessage(1, this.projectDistributionUrl, () => this.projectDistributionUrl.serialize(writer));
            for (const [key, value] of this.fields) {
                writer.writeMessage(2, this.fields, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartPassLinkRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartPassLinkRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.projectDistributionUrl, () => message.projectDistributionUrl = dependency_1.io.Url.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.fields as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartPassLinkRequest {
            return SmartPassLinkRequest.deserialize(bytes);
        }
    }
    export class DistributionSettings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            distributionChannels?: DistributionChannel[];
            welcomeEmail?: EmailTemplate;
            welcomeSms?: SmsTemplate;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("distributionChannels" in data && data.distributionChannels != undefined) {
                    this.distributionChannels = data.distributionChannels;
                }
                if ("welcomeEmail" in data && data.welcomeEmail != undefined) {
                    this.welcomeEmail = data.welcomeEmail;
                }
                if ("welcomeSms" in data && data.welcomeSms != undefined) {
                    this.welcomeSms = data.welcomeSms;
                }
            }
        }
        get distributionChannels() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as DistributionChannel[];
        }
        set distributionChannels(value: DistributionChannel[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get welcomeEmail() {
            return pb_1.Message.getWrapperField(this, EmailTemplate, 2) as EmailTemplate;
        }
        set welcomeEmail(value: EmailTemplate) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasWelcomeEmail() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get welcomeSms() {
            return pb_1.Message.getWrapperField(this, SmsTemplate, 3) as SmsTemplate;
        }
        set welcomeSms(value: SmsTemplate) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasWelcomeSms() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            distributionChannels?: DistributionChannel[];
            welcomeEmail?: ReturnType<typeof EmailTemplate.prototype.toObject>;
            welcomeSms?: ReturnType<typeof SmsTemplate.prototype.toObject>;
        }): DistributionSettings {
            const message = new DistributionSettings({});
            if (data.distributionChannels != null) {
                message.distributionChannels = data.distributionChannels;
            }
            if (data.welcomeEmail != null) {
                message.welcomeEmail = EmailTemplate.fromObject(data.welcomeEmail);
            }
            if (data.welcomeSms != null) {
                message.welcomeSms = SmsTemplate.fromObject(data.welcomeSms);
            }
            return message;
        }
        toObject() {
            const data: {
                distributionChannels?: DistributionChannel[];
                welcomeEmail?: ReturnType<typeof EmailTemplate.prototype.toObject>;
                welcomeSms?: ReturnType<typeof SmsTemplate.prototype.toObject>;
            } = {};
            if (this.distributionChannels != null) {
                data.distributionChannels = this.distributionChannels;
            }
            if (this.welcomeEmail != null) {
                data.welcomeEmail = this.welcomeEmail.toObject();
            }
            if (this.welcomeSms != null) {
                data.welcomeSms = this.welcomeSms.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.distributionChannels.length)
                writer.writePackedEnum(1, this.distributionChannels);
            if (this.hasWelcomeEmail)
                writer.writeMessage(2, this.welcomeEmail, () => this.welcomeEmail.serialize(writer));
            if (this.hasWelcomeSms)
                writer.writeMessage(3, this.welcomeSms, () => this.welcomeSms.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DistributionSettings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DistributionSettings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.distributionChannels = reader.readPackedEnum();
                        break;
                    case 2:
                        reader.readMessage(message.welcomeEmail, () => message.welcomeEmail = EmailTemplate.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.welcomeSms, () => message.welcomeSms = SmsTemplate.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DistributionSettings {
            return DistributionSettings.deserialize(bytes);
        }
    }
    export class EmailTemplate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            subject?: string;
            localizedSubject?: dependency_2.io.LocalizedString;
            bodyTextContent?: string;
            localizedBodyTextContent?: dependency_2.io.LocalizedString;
            bodyHtmlContent?: string;
            localizedBodyHtmlContent?: dependency_2.io.LocalizedString;
            configuration?: EmailConfiguration;
            buttonText?: string;
            buttonTextColor?: string;
            buttonBackgroundColor?: string;
            buttonBorderRadius?: string;
            footerTextContent?: string;
            localizedFooterTextContent?: dependency_2.io.LocalizedString;
            footerHtmlContent?: string;
            localizedFooterHtmlContent?: dependency_2.io.LocalizedString;
            messageBackgroundColor?: string;
            pageBackgroundColor?: string;
            templateOptions?: number;
            darkModeButtonTextColor?: string;
            darkModeButtonBackgroundColor?: string;
            darkModePageBackgroundColor?: string;
            darkModeContentBackgroundColor?: string;
            headerLabel?: string;
            localizedHeaderLabel?: dependency_2.io.LocalizedString;
            headerValue?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subject" in data && data.subject != undefined) {
                    this.subject = data.subject;
                }
                if ("localizedSubject" in data && data.localizedSubject != undefined) {
                    this.localizedSubject = data.localizedSubject;
                }
                if ("bodyTextContent" in data && data.bodyTextContent != undefined) {
                    this.bodyTextContent = data.bodyTextContent;
                }
                if ("localizedBodyTextContent" in data && data.localizedBodyTextContent != undefined) {
                    this.localizedBodyTextContent = data.localizedBodyTextContent;
                }
                if ("bodyHtmlContent" in data && data.bodyHtmlContent != undefined) {
                    this.bodyHtmlContent = data.bodyHtmlContent;
                }
                if ("localizedBodyHtmlContent" in data && data.localizedBodyHtmlContent != undefined) {
                    this.localizedBodyHtmlContent = data.localizedBodyHtmlContent;
                }
                if ("configuration" in data && data.configuration != undefined) {
                    this.configuration = data.configuration;
                }
                if ("buttonText" in data && data.buttonText != undefined) {
                    this.buttonText = data.buttonText;
                }
                if ("buttonTextColor" in data && data.buttonTextColor != undefined) {
                    this.buttonTextColor = data.buttonTextColor;
                }
                if ("buttonBackgroundColor" in data && data.buttonBackgroundColor != undefined) {
                    this.buttonBackgroundColor = data.buttonBackgroundColor;
                }
                if ("buttonBorderRadius" in data && data.buttonBorderRadius != undefined) {
                    this.buttonBorderRadius = data.buttonBorderRadius;
                }
                if ("footerTextContent" in data && data.footerTextContent != undefined) {
                    this.footerTextContent = data.footerTextContent;
                }
                if ("localizedFooterTextContent" in data && data.localizedFooterTextContent != undefined) {
                    this.localizedFooterTextContent = data.localizedFooterTextContent;
                }
                if ("footerHtmlContent" in data && data.footerHtmlContent != undefined) {
                    this.footerHtmlContent = data.footerHtmlContent;
                }
                if ("localizedFooterHtmlContent" in data && data.localizedFooterHtmlContent != undefined) {
                    this.localizedFooterHtmlContent = data.localizedFooterHtmlContent;
                }
                if ("messageBackgroundColor" in data && data.messageBackgroundColor != undefined) {
                    this.messageBackgroundColor = data.messageBackgroundColor;
                }
                if ("pageBackgroundColor" in data && data.pageBackgroundColor != undefined) {
                    this.pageBackgroundColor = data.pageBackgroundColor;
                }
                if ("templateOptions" in data && data.templateOptions != undefined) {
                    this.templateOptions = data.templateOptions;
                }
                if ("darkModeButtonTextColor" in data && data.darkModeButtonTextColor != undefined) {
                    this.darkModeButtonTextColor = data.darkModeButtonTextColor;
                }
                if ("darkModeButtonBackgroundColor" in data && data.darkModeButtonBackgroundColor != undefined) {
                    this.darkModeButtonBackgroundColor = data.darkModeButtonBackgroundColor;
                }
                if ("darkModePageBackgroundColor" in data && data.darkModePageBackgroundColor != undefined) {
                    this.darkModePageBackgroundColor = data.darkModePageBackgroundColor;
                }
                if ("darkModeContentBackgroundColor" in data && data.darkModeContentBackgroundColor != undefined) {
                    this.darkModeContentBackgroundColor = data.darkModeContentBackgroundColor;
                }
                if ("headerLabel" in data && data.headerLabel != undefined) {
                    this.headerLabel = data.headerLabel;
                }
                if ("localizedHeaderLabel" in data && data.localizedHeaderLabel != undefined) {
                    this.localizedHeaderLabel = data.localizedHeaderLabel;
                }
                if ("headerValue" in data && data.headerValue != undefined) {
                    this.headerValue = data.headerValue;
                }
            }
        }
        get subject() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set subject(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get localizedSubject() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 2) as dependency_2.io.LocalizedString;
        }
        set localizedSubject(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasLocalizedSubject() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get bodyTextContent() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set bodyTextContent(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get localizedBodyTextContent() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 4) as dependency_2.io.LocalizedString;
        }
        set localizedBodyTextContent(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasLocalizedBodyTextContent() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get bodyHtmlContent() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set bodyHtmlContent(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get localizedBodyHtmlContent() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 6) as dependency_2.io.LocalizedString;
        }
        set localizedBodyHtmlContent(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasLocalizedBodyHtmlContent() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get configuration() {
            return pb_1.Message.getWrapperField(this, EmailConfiguration, 7) as EmailConfiguration;
        }
        set configuration(value: EmailConfiguration) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasConfiguration() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get buttonText() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set buttonText(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get buttonTextColor() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set buttonTextColor(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get buttonBackgroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set buttonBackgroundColor(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get buttonBorderRadius() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set buttonBorderRadius(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get footerTextContent() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set footerTextContent(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get localizedFooterTextContent() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 13) as dependency_2.io.LocalizedString;
        }
        set localizedFooterTextContent(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasLocalizedFooterTextContent() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get footerHtmlContent() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set footerHtmlContent(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get localizedFooterHtmlContent() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 15) as dependency_2.io.LocalizedString;
        }
        set localizedFooterHtmlContent(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get hasLocalizedFooterHtmlContent() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get messageBackgroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set messageBackgroundColor(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get pageBackgroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set pageBackgroundColor(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get templateOptions() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set templateOptions(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get darkModeButtonTextColor() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set darkModeButtonTextColor(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get darkModeButtonBackgroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set darkModeButtonBackgroundColor(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get darkModePageBackgroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set darkModePageBackgroundColor(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get darkModeContentBackgroundColor() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set darkModeContentBackgroundColor(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get headerLabel() {
            return pb_1.Message.getFieldWithDefault(this, 23, "") as string;
        }
        set headerLabel(value: string) {
            pb_1.Message.setField(this, 23, value);
        }
        get localizedHeaderLabel() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 24) as dependency_2.io.LocalizedString;
        }
        set localizedHeaderLabel(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 24, value);
        }
        get hasLocalizedHeaderLabel() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get headerValue() {
            return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
        }
        set headerValue(value: string) {
            pb_1.Message.setField(this, 25, value);
        }
        static fromObject(data: {
            subject?: string;
            localizedSubject?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            bodyTextContent?: string;
            localizedBodyTextContent?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            bodyHtmlContent?: string;
            localizedBodyHtmlContent?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            configuration?: ReturnType<typeof EmailConfiguration.prototype.toObject>;
            buttonText?: string;
            buttonTextColor?: string;
            buttonBackgroundColor?: string;
            buttonBorderRadius?: string;
            footerTextContent?: string;
            localizedFooterTextContent?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            footerHtmlContent?: string;
            localizedFooterHtmlContent?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            messageBackgroundColor?: string;
            pageBackgroundColor?: string;
            templateOptions?: number;
            darkModeButtonTextColor?: string;
            darkModeButtonBackgroundColor?: string;
            darkModePageBackgroundColor?: string;
            darkModeContentBackgroundColor?: string;
            headerLabel?: string;
            localizedHeaderLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            headerValue?: string;
        }): EmailTemplate {
            const message = new EmailTemplate({});
            if (data.subject != null) {
                message.subject = data.subject;
            }
            if (data.localizedSubject != null) {
                message.localizedSubject = dependency_2.io.LocalizedString.fromObject(data.localizedSubject);
            }
            if (data.bodyTextContent != null) {
                message.bodyTextContent = data.bodyTextContent;
            }
            if (data.localizedBodyTextContent != null) {
                message.localizedBodyTextContent = dependency_2.io.LocalizedString.fromObject(data.localizedBodyTextContent);
            }
            if (data.bodyHtmlContent != null) {
                message.bodyHtmlContent = data.bodyHtmlContent;
            }
            if (data.localizedBodyHtmlContent != null) {
                message.localizedBodyHtmlContent = dependency_2.io.LocalizedString.fromObject(data.localizedBodyHtmlContent);
            }
            if (data.configuration != null) {
                message.configuration = EmailConfiguration.fromObject(data.configuration);
            }
            if (data.buttonText != null) {
                message.buttonText = data.buttonText;
            }
            if (data.buttonTextColor != null) {
                message.buttonTextColor = data.buttonTextColor;
            }
            if (data.buttonBackgroundColor != null) {
                message.buttonBackgroundColor = data.buttonBackgroundColor;
            }
            if (data.buttonBorderRadius != null) {
                message.buttonBorderRadius = data.buttonBorderRadius;
            }
            if (data.footerTextContent != null) {
                message.footerTextContent = data.footerTextContent;
            }
            if (data.localizedFooterTextContent != null) {
                message.localizedFooterTextContent = dependency_2.io.LocalizedString.fromObject(data.localizedFooterTextContent);
            }
            if (data.footerHtmlContent != null) {
                message.footerHtmlContent = data.footerHtmlContent;
            }
            if (data.localizedFooterHtmlContent != null) {
                message.localizedFooterHtmlContent = dependency_2.io.LocalizedString.fromObject(data.localizedFooterHtmlContent);
            }
            if (data.messageBackgroundColor != null) {
                message.messageBackgroundColor = data.messageBackgroundColor;
            }
            if (data.pageBackgroundColor != null) {
                message.pageBackgroundColor = data.pageBackgroundColor;
            }
            if (data.templateOptions != null) {
                message.templateOptions = data.templateOptions;
            }
            if (data.darkModeButtonTextColor != null) {
                message.darkModeButtonTextColor = data.darkModeButtonTextColor;
            }
            if (data.darkModeButtonBackgroundColor != null) {
                message.darkModeButtonBackgroundColor = data.darkModeButtonBackgroundColor;
            }
            if (data.darkModePageBackgroundColor != null) {
                message.darkModePageBackgroundColor = data.darkModePageBackgroundColor;
            }
            if (data.darkModeContentBackgroundColor != null) {
                message.darkModeContentBackgroundColor = data.darkModeContentBackgroundColor;
            }
            if (data.headerLabel != null) {
                message.headerLabel = data.headerLabel;
            }
            if (data.localizedHeaderLabel != null) {
                message.localizedHeaderLabel = dependency_2.io.LocalizedString.fromObject(data.localizedHeaderLabel);
            }
            if (data.headerValue != null) {
                message.headerValue = data.headerValue;
            }
            return message;
        }
        toObject() {
            const data: {
                subject?: string;
                localizedSubject?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                bodyTextContent?: string;
                localizedBodyTextContent?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                bodyHtmlContent?: string;
                localizedBodyHtmlContent?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                configuration?: ReturnType<typeof EmailConfiguration.prototype.toObject>;
                buttonText?: string;
                buttonTextColor?: string;
                buttonBackgroundColor?: string;
                buttonBorderRadius?: string;
                footerTextContent?: string;
                localizedFooterTextContent?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                footerHtmlContent?: string;
                localizedFooterHtmlContent?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                messageBackgroundColor?: string;
                pageBackgroundColor?: string;
                templateOptions?: number;
                darkModeButtonTextColor?: string;
                darkModeButtonBackgroundColor?: string;
                darkModePageBackgroundColor?: string;
                darkModeContentBackgroundColor?: string;
                headerLabel?: string;
                localizedHeaderLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                headerValue?: string;
            } = {};
            if (this.subject != null) {
                data.subject = this.subject;
            }
            if (this.localizedSubject != null) {
                data.localizedSubject = this.localizedSubject.toObject();
            }
            if (this.bodyTextContent != null) {
                data.bodyTextContent = this.bodyTextContent;
            }
            if (this.localizedBodyTextContent != null) {
                data.localizedBodyTextContent = this.localizedBodyTextContent.toObject();
            }
            if (this.bodyHtmlContent != null) {
                data.bodyHtmlContent = this.bodyHtmlContent;
            }
            if (this.localizedBodyHtmlContent != null) {
                data.localizedBodyHtmlContent = this.localizedBodyHtmlContent.toObject();
            }
            if (this.configuration != null) {
                data.configuration = this.configuration.toObject();
            }
            if (this.buttonText != null) {
                data.buttonText = this.buttonText;
            }
            if (this.buttonTextColor != null) {
                data.buttonTextColor = this.buttonTextColor;
            }
            if (this.buttonBackgroundColor != null) {
                data.buttonBackgroundColor = this.buttonBackgroundColor;
            }
            if (this.buttonBorderRadius != null) {
                data.buttonBorderRadius = this.buttonBorderRadius;
            }
            if (this.footerTextContent != null) {
                data.footerTextContent = this.footerTextContent;
            }
            if (this.localizedFooterTextContent != null) {
                data.localizedFooterTextContent = this.localizedFooterTextContent.toObject();
            }
            if (this.footerHtmlContent != null) {
                data.footerHtmlContent = this.footerHtmlContent;
            }
            if (this.localizedFooterHtmlContent != null) {
                data.localizedFooterHtmlContent = this.localizedFooterHtmlContent.toObject();
            }
            if (this.messageBackgroundColor != null) {
                data.messageBackgroundColor = this.messageBackgroundColor;
            }
            if (this.pageBackgroundColor != null) {
                data.pageBackgroundColor = this.pageBackgroundColor;
            }
            if (this.templateOptions != null) {
                data.templateOptions = this.templateOptions;
            }
            if (this.darkModeButtonTextColor != null) {
                data.darkModeButtonTextColor = this.darkModeButtonTextColor;
            }
            if (this.darkModeButtonBackgroundColor != null) {
                data.darkModeButtonBackgroundColor = this.darkModeButtonBackgroundColor;
            }
            if (this.darkModePageBackgroundColor != null) {
                data.darkModePageBackgroundColor = this.darkModePageBackgroundColor;
            }
            if (this.darkModeContentBackgroundColor != null) {
                data.darkModeContentBackgroundColor = this.darkModeContentBackgroundColor;
            }
            if (this.headerLabel != null) {
                data.headerLabel = this.headerLabel;
            }
            if (this.localizedHeaderLabel != null) {
                data.localizedHeaderLabel = this.localizedHeaderLabel.toObject();
            }
            if (this.headerValue != null) {
                data.headerValue = this.headerValue;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.subject.length)
                writer.writeString(1, this.subject);
            if (this.hasLocalizedSubject)
                writer.writeMessage(2, this.localizedSubject, () => this.localizedSubject.serialize(writer));
            if (this.bodyTextContent.length)
                writer.writeString(3, this.bodyTextContent);
            if (this.hasLocalizedBodyTextContent)
                writer.writeMessage(4, this.localizedBodyTextContent, () => this.localizedBodyTextContent.serialize(writer));
            if (this.bodyHtmlContent.length)
                writer.writeString(5, this.bodyHtmlContent);
            if (this.hasLocalizedBodyHtmlContent)
                writer.writeMessage(6, this.localizedBodyHtmlContent, () => this.localizedBodyHtmlContent.serialize(writer));
            if (this.hasConfiguration)
                writer.writeMessage(7, this.configuration, () => this.configuration.serialize(writer));
            if (this.buttonText.length)
                writer.writeString(8, this.buttonText);
            if (this.buttonTextColor.length)
                writer.writeString(9, this.buttonTextColor);
            if (this.buttonBackgroundColor.length)
                writer.writeString(10, this.buttonBackgroundColor);
            if (this.buttonBorderRadius.length)
                writer.writeString(11, this.buttonBorderRadius);
            if (this.footerTextContent.length)
                writer.writeString(12, this.footerTextContent);
            if (this.hasLocalizedFooterTextContent)
                writer.writeMessage(13, this.localizedFooterTextContent, () => this.localizedFooterTextContent.serialize(writer));
            if (this.footerHtmlContent.length)
                writer.writeString(14, this.footerHtmlContent);
            if (this.hasLocalizedFooterHtmlContent)
                writer.writeMessage(15, this.localizedFooterHtmlContent, () => this.localizedFooterHtmlContent.serialize(writer));
            if (this.messageBackgroundColor.length)
                writer.writeString(16, this.messageBackgroundColor);
            if (this.pageBackgroundColor.length)
                writer.writeString(17, this.pageBackgroundColor);
            if (this.templateOptions != 0)
                writer.writeInt32(18, this.templateOptions);
            if (this.darkModeButtonTextColor.length)
                writer.writeString(19, this.darkModeButtonTextColor);
            if (this.darkModeButtonBackgroundColor.length)
                writer.writeString(20, this.darkModeButtonBackgroundColor);
            if (this.darkModePageBackgroundColor.length)
                writer.writeString(21, this.darkModePageBackgroundColor);
            if (this.darkModeContentBackgroundColor.length)
                writer.writeString(22, this.darkModeContentBackgroundColor);
            if (this.headerLabel.length)
                writer.writeString(23, this.headerLabel);
            if (this.hasLocalizedHeaderLabel)
                writer.writeMessage(24, this.localizedHeaderLabel, () => this.localizedHeaderLabel.serialize(writer));
            if (this.headerValue.length)
                writer.writeString(25, this.headerValue);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmailTemplate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmailTemplate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.subject = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.localizedSubject, () => message.localizedSubject = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 3:
                        message.bodyTextContent = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.localizedBodyTextContent, () => message.localizedBodyTextContent = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 5:
                        message.bodyHtmlContent = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.localizedBodyHtmlContent, () => message.localizedBodyHtmlContent = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.configuration, () => message.configuration = EmailConfiguration.deserialize(reader));
                        break;
                    case 8:
                        message.buttonText = reader.readString();
                        break;
                    case 9:
                        message.buttonTextColor = reader.readString();
                        break;
                    case 10:
                        message.buttonBackgroundColor = reader.readString();
                        break;
                    case 11:
                        message.buttonBorderRadius = reader.readString();
                        break;
                    case 12:
                        message.footerTextContent = reader.readString();
                        break;
                    case 13:
                        reader.readMessage(message.localizedFooterTextContent, () => message.localizedFooterTextContent = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 14:
                        message.footerHtmlContent = reader.readString();
                        break;
                    case 15:
                        reader.readMessage(message.localizedFooterHtmlContent, () => message.localizedFooterHtmlContent = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 16:
                        message.messageBackgroundColor = reader.readString();
                        break;
                    case 17:
                        message.pageBackgroundColor = reader.readString();
                        break;
                    case 18:
                        message.templateOptions = reader.readInt32();
                        break;
                    case 19:
                        message.darkModeButtonTextColor = reader.readString();
                        break;
                    case 20:
                        message.darkModeButtonBackgroundColor = reader.readString();
                        break;
                    case 21:
                        message.darkModePageBackgroundColor = reader.readString();
                        break;
                    case 22:
                        message.darkModeContentBackgroundColor = reader.readString();
                        break;
                    case 23:
                        message.headerLabel = reader.readString();
                        break;
                    case 24:
                        reader.readMessage(message.localizedHeaderLabel, () => message.localizedHeaderLabel = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 25:
                        message.headerValue = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmailTemplate {
            return EmailTemplate.deserialize(bytes);
        }
    }
    export class EmailConfiguration extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            emailFrom?: string;
            emailFromName?: string;
            EmailFromVerifiedForSending?: boolean;
            useCustomHtml?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("emailFrom" in data && data.emailFrom != undefined) {
                    this.emailFrom = data.emailFrom;
                }
                if ("emailFromName" in data && data.emailFromName != undefined) {
                    this.emailFromName = data.emailFromName;
                }
                if ("EmailFromVerifiedForSending" in data && data.EmailFromVerifiedForSending != undefined) {
                    this.EmailFromVerifiedForSending = data.EmailFromVerifiedForSending;
                }
                if ("useCustomHtml" in data && data.useCustomHtml != undefined) {
                    this.useCustomHtml = data.useCustomHtml;
                }
            }
        }
        get emailFrom() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set emailFrom(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get emailFromName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set emailFromName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get EmailFromVerifiedForSending() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set EmailFromVerifiedForSending(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get useCustomHtml() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set useCustomHtml(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            emailFrom?: string;
            emailFromName?: string;
            EmailFromVerifiedForSending?: boolean;
            useCustomHtml?: boolean;
        }): EmailConfiguration {
            const message = new EmailConfiguration({});
            if (data.emailFrom != null) {
                message.emailFrom = data.emailFrom;
            }
            if (data.emailFromName != null) {
                message.emailFromName = data.emailFromName;
            }
            if (data.EmailFromVerifiedForSending != null) {
                message.EmailFromVerifiedForSending = data.EmailFromVerifiedForSending;
            }
            if (data.useCustomHtml != null) {
                message.useCustomHtml = data.useCustomHtml;
            }
            return message;
        }
        toObject() {
            const data: {
                emailFrom?: string;
                emailFromName?: string;
                EmailFromVerifiedForSending?: boolean;
                useCustomHtml?: boolean;
            } = {};
            if (this.emailFrom != null) {
                data.emailFrom = this.emailFrom;
            }
            if (this.emailFromName != null) {
                data.emailFromName = this.emailFromName;
            }
            if (this.EmailFromVerifiedForSending != null) {
                data.EmailFromVerifiedForSending = this.EmailFromVerifiedForSending;
            }
            if (this.useCustomHtml != null) {
                data.useCustomHtml = this.useCustomHtml;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.emailFrom.length)
                writer.writeString(1, this.emailFrom);
            if (this.emailFromName.length)
                writer.writeString(2, this.emailFromName);
            if (this.EmailFromVerifiedForSending != false)
                writer.writeBool(3, this.EmailFromVerifiedForSending);
            if (this.useCustomHtml != false)
                writer.writeBool(4, this.useCustomHtml);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EmailConfiguration {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EmailConfiguration();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.emailFrom = reader.readString();
                        break;
                    case 2:
                        message.emailFromName = reader.readString();
                        break;
                    case 3:
                        message.EmailFromVerifiedForSending = reader.readBool();
                        break;
                    case 4:
                        message.useCustomHtml = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EmailConfiguration {
            return EmailConfiguration.deserialize(bytes);
        }
    }
    export class SmsTemplate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: string;
            localizedContent?: dependency_2.io.LocalizedString;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("localizedContent" in data && data.localizedContent != undefined) {
                    this.localizedContent = data.localizedContent;
                }
            }
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get localizedContent() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 2) as dependency_2.io.LocalizedString;
        }
        set localizedContent(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasLocalizedContent() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            content?: string;
            localizedContent?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
        }): SmsTemplate {
            const message = new SmsTemplate({});
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.localizedContent != null) {
                message.localizedContent = dependency_2.io.LocalizedString.fromObject(data.localizedContent);
            }
            return message;
        }
        toObject() {
            const data: {
                content?: string;
                localizedContent?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            } = {};
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.localizedContent != null) {
                data.localizedContent = this.localizedContent.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeString(1, this.content);
            if (this.hasLocalizedContent)
                writer.writeMessage(2, this.localizedContent, () => this.localizedContent.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmsTemplate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmsTemplate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.content = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.localizedContent, () => message.localizedContent = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmsTemplate {
            return SmsTemplate.deserialize(bytes);
        }
    }
    export class EnrolmentUrls extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pageUrl?: string;
            qrCodeUrl?: string;
            tierEnrolmentUrls?: Map<string, string>;
            tierEnrolmentQRs?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pageUrl" in data && data.pageUrl != undefined) {
                    this.pageUrl = data.pageUrl;
                }
                if ("qrCodeUrl" in data && data.qrCodeUrl != undefined) {
                    this.qrCodeUrl = data.qrCodeUrl;
                }
                if ("tierEnrolmentUrls" in data && data.tierEnrolmentUrls != undefined) {
                    this.tierEnrolmentUrls = data.tierEnrolmentUrls;
                }
                if ("tierEnrolmentQRs" in data && data.tierEnrolmentQRs != undefined) {
                    this.tierEnrolmentQRs = data.tierEnrolmentQRs;
                }
            }
            if (!this.tierEnrolmentUrls)
                this.tierEnrolmentUrls = new Map();
            if (!this.tierEnrolmentQRs)
                this.tierEnrolmentQRs = new Map();
        }
        get pageUrl() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set pageUrl(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get qrCodeUrl() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set qrCodeUrl(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get tierEnrolmentUrls() {
            return pb_1.Message.getField(this, 3) as any as Map<string, string>;
        }
        set tierEnrolmentUrls(value: Map<string, string>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get tierEnrolmentQRs() {
            return pb_1.Message.getField(this, 4) as any as Map<string, string>;
        }
        set tierEnrolmentQRs(value: Map<string, string>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        static fromObject(data: {
            pageUrl?: string;
            qrCodeUrl?: string;
            tierEnrolmentUrls?: {
                [key: string]: string;
            };
            tierEnrolmentQRs?: {
                [key: string]: string;
            };
        }): EnrolmentUrls {
            const message = new EnrolmentUrls({});
            if (data.pageUrl != null) {
                message.pageUrl = data.pageUrl;
            }
            if (data.qrCodeUrl != null) {
                message.qrCodeUrl = data.qrCodeUrl;
            }
            if (typeof data.tierEnrolmentUrls == "object") {
                message.tierEnrolmentUrls = new Map(Object.entries(data.tierEnrolmentUrls));
            }
            if (typeof data.tierEnrolmentQRs == "object") {
                message.tierEnrolmentQRs = new Map(Object.entries(data.tierEnrolmentQRs));
            }
            return message;
        }
        toObject() {
            const data: {
                pageUrl?: string;
                qrCodeUrl?: string;
                tierEnrolmentUrls?: {
                    [key: string]: string;
                };
                tierEnrolmentQRs?: {
                    [key: string]: string;
                };
            } = {};
            if (this.pageUrl != null) {
                data.pageUrl = this.pageUrl;
            }
            if (this.qrCodeUrl != null) {
                data.qrCodeUrl = this.qrCodeUrl;
            }
            if (this.tierEnrolmentUrls != null) {
                data.tierEnrolmentUrls = (Object.fromEntries)(this.tierEnrolmentUrls);
            }
            if (this.tierEnrolmentQRs != null) {
                data.tierEnrolmentQRs = (Object.fromEntries)(this.tierEnrolmentQRs);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pageUrl.length)
                writer.writeString(1, this.pageUrl);
            if (this.qrCodeUrl.length)
                writer.writeString(2, this.qrCodeUrl);
            for (const [key, value] of this.tierEnrolmentUrls) {
                writer.writeMessage(3, this.tierEnrolmentUrls, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.tierEnrolmentQRs) {
                writer.writeMessage(4, this.tierEnrolmentQRs, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnrolmentUrls {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnrolmentUrls();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pageUrl = reader.readString();
                        break;
                    case 2:
                        message.qrCodeUrl = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tierEnrolmentUrls as any, reader, reader.readString, reader.readString));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.tierEnrolmentQRs as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnrolmentUrls {
            return EnrolmentUrls.deserialize(bytes);
        }
    }
    export class DataCollectionFields extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fields?: DataCollectionField[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
            }
        }
        get fields() {
            return pb_1.Message.getRepeatedWrapperField(this, DataCollectionField, 1) as DataCollectionField[];
        }
        set fields(value: DataCollectionField[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            fields?: ReturnType<typeof DataCollectionField.prototype.toObject>[];
        }): DataCollectionFields {
            const message = new DataCollectionFields({});
            if (data.fields != null) {
                message.fields = data.fields.map(item => DataCollectionField.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                fields?: ReturnType<typeof DataCollectionField.prototype.toObject>[];
            } = {};
            if (this.fields != null) {
                data.fields = this.fields.map((item: DataCollectionField) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fields.length)
                writer.writeRepeatedMessage(1, this.fields, (item: DataCollectionField) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataCollectionFields {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataCollectionFields();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.fields, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DataCollectionField.deserialize(reader), DataCollectionField));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataCollectionFields {
            return DataCollectionFields.deserialize(bytes);
        }
    }
    export class DataCollectionField extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uniqueName?: string;
            fieldType?: dependency_4.io.FieldType;
            isRequired?: boolean;
            label?: string;
            localizedLabel?: dependency_2.io.LocalizedString;
            dataType?: dependency_4.io.DataType;
            defaultValue?: string;
            localizedDefaultValue?: dependency_2.io.LocalizedString;
            validation?: string;
            userCanSetValue?: boolean;
            currencyCode?: string;
            defaultTelCountryCode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uniqueName" in data && data.uniqueName != undefined) {
                    this.uniqueName = data.uniqueName;
                }
                if ("fieldType" in data && data.fieldType != undefined) {
                    this.fieldType = data.fieldType;
                }
                if ("isRequired" in data && data.isRequired != undefined) {
                    this.isRequired = data.isRequired;
                }
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
                if ("localizedLabel" in data && data.localizedLabel != undefined) {
                    this.localizedLabel = data.localizedLabel;
                }
                if ("dataType" in data && data.dataType != undefined) {
                    this.dataType = data.dataType;
                }
                if ("defaultValue" in data && data.defaultValue != undefined) {
                    this.defaultValue = data.defaultValue;
                }
                if ("localizedDefaultValue" in data && data.localizedDefaultValue != undefined) {
                    this.localizedDefaultValue = data.localizedDefaultValue;
                }
                if ("validation" in data && data.validation != undefined) {
                    this.validation = data.validation;
                }
                if ("userCanSetValue" in data && data.userCanSetValue != undefined) {
                    this.userCanSetValue = data.userCanSetValue;
                }
                if ("currencyCode" in data && data.currencyCode != undefined) {
                    this.currencyCode = data.currencyCode;
                }
                if ("defaultTelCountryCode" in data && data.defaultTelCountryCode != undefined) {
                    this.defaultTelCountryCode = data.defaultTelCountryCode;
                }
            }
        }
        get uniqueName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uniqueName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get fieldType() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_4.io.FieldType.FIELD_TYPE_NONE) as dependency_4.io.FieldType;
        }
        set fieldType(value: dependency_4.io.FieldType) {
            pb_1.Message.setField(this, 2, value);
        }
        get isRequired() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set isRequired(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get localizedLabel() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 5) as dependency_2.io.LocalizedString;
        }
        set localizedLabel(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasLocalizedLabel() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get dataType() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_4.io.DataType.DATA_TYPE_NONE) as dependency_4.io.DataType;
        }
        set dataType(value: dependency_4.io.DataType) {
            pb_1.Message.setField(this, 6, value);
        }
        get defaultValue() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set defaultValue(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get localizedDefaultValue() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 8) as dependency_2.io.LocalizedString;
        }
        set localizedDefaultValue(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasLocalizedDefaultValue() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get validation() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set validation(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get userCanSetValue() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set userCanSetValue(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get currencyCode() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set currencyCode(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get defaultTelCountryCode() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set defaultTelCountryCode(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            uniqueName?: string;
            fieldType?: dependency_4.io.FieldType;
            isRequired?: boolean;
            label?: string;
            localizedLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            dataType?: dependency_4.io.DataType;
            defaultValue?: string;
            localizedDefaultValue?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            validation?: string;
            userCanSetValue?: boolean;
            currencyCode?: string;
            defaultTelCountryCode?: string;
        }): DataCollectionField {
            const message = new DataCollectionField({});
            if (data.uniqueName != null) {
                message.uniqueName = data.uniqueName;
            }
            if (data.fieldType != null) {
                message.fieldType = data.fieldType;
            }
            if (data.isRequired != null) {
                message.isRequired = data.isRequired;
            }
            if (data.label != null) {
                message.label = data.label;
            }
            if (data.localizedLabel != null) {
                message.localizedLabel = dependency_2.io.LocalizedString.fromObject(data.localizedLabel);
            }
            if (data.dataType != null) {
                message.dataType = data.dataType;
            }
            if (data.defaultValue != null) {
                message.defaultValue = data.defaultValue;
            }
            if (data.localizedDefaultValue != null) {
                message.localizedDefaultValue = dependency_2.io.LocalizedString.fromObject(data.localizedDefaultValue);
            }
            if (data.validation != null) {
                message.validation = data.validation;
            }
            if (data.userCanSetValue != null) {
                message.userCanSetValue = data.userCanSetValue;
            }
            if (data.currencyCode != null) {
                message.currencyCode = data.currencyCode;
            }
            if (data.defaultTelCountryCode != null) {
                message.defaultTelCountryCode = data.defaultTelCountryCode;
            }
            return message;
        }
        toObject() {
            const data: {
                uniqueName?: string;
                fieldType?: dependency_4.io.FieldType;
                isRequired?: boolean;
                label?: string;
                localizedLabel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                dataType?: dependency_4.io.DataType;
                defaultValue?: string;
                localizedDefaultValue?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                validation?: string;
                userCanSetValue?: boolean;
                currencyCode?: string;
                defaultTelCountryCode?: string;
            } = {};
            if (this.uniqueName != null) {
                data.uniqueName = this.uniqueName;
            }
            if (this.fieldType != null) {
                data.fieldType = this.fieldType;
            }
            if (this.isRequired != null) {
                data.isRequired = this.isRequired;
            }
            if (this.label != null) {
                data.label = this.label;
            }
            if (this.localizedLabel != null) {
                data.localizedLabel = this.localizedLabel.toObject();
            }
            if (this.dataType != null) {
                data.dataType = this.dataType;
            }
            if (this.defaultValue != null) {
                data.defaultValue = this.defaultValue;
            }
            if (this.localizedDefaultValue != null) {
                data.localizedDefaultValue = this.localizedDefaultValue.toObject();
            }
            if (this.validation != null) {
                data.validation = this.validation;
            }
            if (this.userCanSetValue != null) {
                data.userCanSetValue = this.userCanSetValue;
            }
            if (this.currencyCode != null) {
                data.currencyCode = this.currencyCode;
            }
            if (this.defaultTelCountryCode != null) {
                data.defaultTelCountryCode = this.defaultTelCountryCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uniqueName.length)
                writer.writeString(1, this.uniqueName);
            if (this.fieldType != dependency_4.io.FieldType.FIELD_TYPE_NONE)
                writer.writeEnum(2, this.fieldType);
            if (this.isRequired != false)
                writer.writeBool(3, this.isRequired);
            if (this.label.length)
                writer.writeString(4, this.label);
            if (this.hasLocalizedLabel)
                writer.writeMessage(5, this.localizedLabel, () => this.localizedLabel.serialize(writer));
            if (this.dataType != dependency_4.io.DataType.DATA_TYPE_NONE)
                writer.writeEnum(6, this.dataType);
            if (this.defaultValue.length)
                writer.writeString(7, this.defaultValue);
            if (this.hasLocalizedDefaultValue)
                writer.writeMessage(8, this.localizedDefaultValue, () => this.localizedDefaultValue.serialize(writer));
            if (this.validation.length)
                writer.writeString(9, this.validation);
            if (this.userCanSetValue != false)
                writer.writeBool(10, this.userCanSetValue);
            if (this.currencyCode.length)
                writer.writeString(11, this.currencyCode);
            if (this.defaultTelCountryCode.length)
                writer.writeString(12, this.defaultTelCountryCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataCollectionField {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataCollectionField();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uniqueName = reader.readString();
                        break;
                    case 2:
                        message.fieldType = reader.readEnum();
                        break;
                    case 3:
                        message.isRequired = reader.readBool();
                        break;
                    case 4:
                        message.label = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.localizedLabel, () => message.localizedLabel = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 6:
                        message.dataType = reader.readEnum();
                        break;
                    case 7:
                        message.defaultValue = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.localizedDefaultValue, () => message.localizedDefaultValue = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 9:
                        message.validation = reader.readString();
                        break;
                    case 10:
                        message.userCanSetValue = reader.readBool();
                        break;
                    case 11:
                        message.currencyCode = reader.readString();
                        break;
                    case 12:
                        message.defaultTelCountryCode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataCollectionField {
            return DataCollectionField.deserialize(bytes);
        }
    }
    export class SmartPassCsvUploadRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            distributionUrl?: string;
            csvContent?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("distributionUrl" in data && data.distributionUrl != undefined) {
                    this.distributionUrl = data.distributionUrl;
                }
                if ("csvContent" in data && data.csvContent != undefined) {
                    this.csvContent = data.csvContent;
                }
            }
        }
        get distributionUrl() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set distributionUrl(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get csvContent() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set csvContent(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            distributionUrl?: string;
            csvContent?: string;
        }): SmartPassCsvUploadRequest {
            const message = new SmartPassCsvUploadRequest({});
            if (data.distributionUrl != null) {
                message.distributionUrl = data.distributionUrl;
            }
            if (data.csvContent != null) {
                message.csvContent = data.csvContent;
            }
            return message;
        }
        toObject() {
            const data: {
                distributionUrl?: string;
                csvContent?: string;
            } = {};
            if (this.distributionUrl != null) {
                data.distributionUrl = this.distributionUrl;
            }
            if (this.csvContent != null) {
                data.csvContent = this.csvContent;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.distributionUrl.length)
                writer.writeString(1, this.distributionUrl);
            if (this.csvContent.length)
                writer.writeString(2, this.csvContent);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmartPassCsvUploadRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmartPassCsvUploadRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.distributionUrl = reader.readString();
                        break;
                    case 2:
                        message.csvContent = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmartPassCsvUploadRequest {
            return SmartPassCsvUploadRequest.deserialize(bytes);
        }
    }
    export class ImportProtocolRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            csvContent?: string;
            classId?: string;
            protocol?: dependency_3.io.PassProtocol;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("csvContent" in data && data.csvContent != undefined) {
                    this.csvContent = data.csvContent;
                }
                if ("classId" in data && data.classId != undefined) {
                    this.classId = data.classId;
                }
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
            }
        }
        get csvContent() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set csvContent(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get classId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set classId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_3.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE) as dependency_3.io.PassProtocol;
        }
        set protocol(value: dependency_3.io.PassProtocol) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            csvContent?: string;
            classId?: string;
            protocol?: dependency_3.io.PassProtocol;
        }): ImportProtocolRequest {
            const message = new ImportProtocolRequest({});
            if (data.csvContent != null) {
                message.csvContent = data.csvContent;
            }
            if (data.classId != null) {
                message.classId = data.classId;
            }
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            return message;
        }
        toObject() {
            const data: {
                csvContent?: string;
                classId?: string;
                protocol?: dependency_3.io.PassProtocol;
            } = {};
            if (this.csvContent != null) {
                data.csvContent = this.csvContent;
            }
            if (this.classId != null) {
                data.classId = this.classId;
            }
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.csvContent.length)
                writer.writeString(1, this.csvContent);
            if (this.classId.length)
                writer.writeString(2, this.classId);
            if (this.protocol != dependency_3.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE)
                writer.writeEnum(3, this.protocol);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImportProtocolRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImportProtocolRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.csvContent = reader.readString();
                        break;
                    case 2:
                        message.classId = reader.readString();
                        break;
                    case 3:
                        message.protocol = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ImportProtocolRequest {
            return ImportProtocolRequest.deserialize(bytes);
        }
    }
}
