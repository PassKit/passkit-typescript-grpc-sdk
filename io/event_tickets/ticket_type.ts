/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/event_tickets/ticket_type.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./../common/localization";
import * as dependency_3 from "./../common/filter";
import * as dependency_4 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace event_tickets {
    export class TicketType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            uid?: string;
            productionId?: string;
            name?: string;
            localizedName?: dependency_2.io.LocalizedString;
            ticketTypeConditions?: string;
            localizedTicketTypeConditions?: dependency_2.io.LocalizedString;
            beforeRedeemPassTemplateId?: string;
            afterRedeemPassTemplateId?: string;
            created?: dependency_1.google.protobuf.Timestamp;
            updated?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
                if ("productionId" in data && data.productionId != undefined) {
                    this.productionId = data.productionId;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("localizedName" in data && data.localizedName != undefined) {
                    this.localizedName = data.localizedName;
                }
                if ("ticketTypeConditions" in data && data.ticketTypeConditions != undefined) {
                    this.ticketTypeConditions = data.ticketTypeConditions;
                }
                if ("localizedTicketTypeConditions" in data && data.localizedTicketTypeConditions != undefined) {
                    this.localizedTicketTypeConditions = data.localizedTicketTypeConditions;
                }
                if ("beforeRedeemPassTemplateId" in data && data.beforeRedeemPassTemplateId != undefined) {
                    this.beforeRedeemPassTemplateId = data.beforeRedeemPassTemplateId;
                }
                if ("afterRedeemPassTemplateId" in data && data.afterRedeemPassTemplateId != undefined) {
                    this.afterRedeemPassTemplateId = data.afterRedeemPassTemplateId;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get productionId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set productionId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get localizedName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 5) as dependency_2.io.LocalizedString;
        }
        set localizedName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasLocalizedName() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get ticketTypeConditions() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ticketTypeConditions(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get localizedTicketTypeConditions() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 7) as dependency_2.io.LocalizedString;
        }
        set localizedTicketTypeConditions(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasLocalizedTicketTypeConditions() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get beforeRedeemPassTemplateId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set beforeRedeemPassTemplateId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get afterRedeemPassTemplateId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set afterRedeemPassTemplateId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 10) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 11) as dependency_1.google.protobuf.Timestamp;
        }
        set updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasUpdated() {
            return pb_1.Message.getField(this, 11) != null;
        }
        static fromObject(data: {
            id?: string;
            uid?: string;
            productionId?: string;
            name?: string;
            localizedName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            ticketTypeConditions?: string;
            localizedTicketTypeConditions?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            beforeRedeemPassTemplateId?: string;
            afterRedeemPassTemplateId?: string;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): TicketType {
            const message = new TicketType({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.uid != null) {
                message.uid = data.uid;
            }
            if (data.productionId != null) {
                message.productionId = data.productionId;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.localizedName != null) {
                message.localizedName = dependency_2.io.LocalizedString.fromObject(data.localizedName);
            }
            if (data.ticketTypeConditions != null) {
                message.ticketTypeConditions = data.ticketTypeConditions;
            }
            if (data.localizedTicketTypeConditions != null) {
                message.localizedTicketTypeConditions = dependency_2.io.LocalizedString.fromObject(data.localizedTicketTypeConditions);
            }
            if (data.beforeRedeemPassTemplateId != null) {
                message.beforeRedeemPassTemplateId = data.beforeRedeemPassTemplateId;
            }
            if (data.afterRedeemPassTemplateId != null) {
                message.afterRedeemPassTemplateId = data.afterRedeemPassTemplateId;
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_1.google.protobuf.Timestamp.fromObject(data.updated);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                uid?: string;
                productionId?: string;
                name?: string;
                localizedName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                ticketTypeConditions?: string;
                localizedTicketTypeConditions?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                beforeRedeemPassTemplateId?: string;
                afterRedeemPassTemplateId?: string;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.uid != null) {
                data.uid = this.uid;
            }
            if (this.productionId != null) {
                data.productionId = this.productionId;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.localizedName != null) {
                data.localizedName = this.localizedName.toObject();
            }
            if (this.ticketTypeConditions != null) {
                data.ticketTypeConditions = this.ticketTypeConditions;
            }
            if (this.localizedTicketTypeConditions != null) {
                data.localizedTicketTypeConditions = this.localizedTicketTypeConditions.toObject();
            }
            if (this.beforeRedeemPassTemplateId != null) {
                data.beforeRedeemPassTemplateId = this.beforeRedeemPassTemplateId;
            }
            if (this.afterRedeemPassTemplateId != null) {
                data.afterRedeemPassTemplateId = this.afterRedeemPassTemplateId;
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.uid.length)
                writer.writeString(2, this.uid);
            if (this.productionId.length)
                writer.writeString(3, this.productionId);
            if (this.name.length)
                writer.writeString(4, this.name);
            if (this.hasLocalizedName)
                writer.writeMessage(5, this.localizedName, () => this.localizedName.serialize(writer));
            if (this.ticketTypeConditions.length)
                writer.writeString(6, this.ticketTypeConditions);
            if (this.hasLocalizedTicketTypeConditions)
                writer.writeMessage(7, this.localizedTicketTypeConditions, () => this.localizedTicketTypeConditions.serialize(writer));
            if (this.beforeRedeemPassTemplateId.length)
                writer.writeString(8, this.beforeRedeemPassTemplateId);
            if (this.afterRedeemPassTemplateId.length)
                writer.writeString(9, this.afterRedeemPassTemplateId);
            if (this.hasCreated)
                writer.writeMessage(10, this.created, () => this.created.serialize(writer));
            if (this.hasUpdated)
                writer.writeMessage(11, this.updated, () => this.updated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TicketType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TicketType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.uid = reader.readString();
                        break;
                    case 3:
                        message.productionId = reader.readString();
                        break;
                    case 4:
                        message.name = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.localizedName, () => message.localizedName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 6:
                        message.ticketTypeConditions = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.localizedTicketTypeConditions, () => message.localizedTicketTypeConditions = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 8:
                        message.beforeRedeemPassTemplateId = reader.readString();
                        break;
                    case 9:
                        message.afterRedeemPassTemplateId = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.updated, () => message.updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TicketType {
            return TicketType.deserialize(bytes);
        }
    }
    export class GetByUidRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            productionId?: string;
            uid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productionId" in data && data.productionId != undefined) {
                    this.productionId = data.productionId;
                }
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
            }
        }
        get productionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            productionId?: string;
            uid?: string;
        }): GetByUidRequest {
            const message = new GetByUidRequest({});
            if (data.productionId != null) {
                message.productionId = data.productionId;
            }
            if (data.uid != null) {
                message.uid = data.uid;
            }
            return message;
        }
        toObject() {
            const data: {
                productionId?: string;
                uid?: string;
            } = {};
            if (this.productionId != null) {
                data.productionId = this.productionId;
            }
            if (this.uid != null) {
                data.uid = this.uid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.productionId.length)
                writer.writeString(1, this.productionId);
            if (this.uid.length)
                writer.writeString(2, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetByUidRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetByUidRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productionId = reader.readString();
                        break;
                    case 2:
                        message.uid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetByUidRequest {
            return GetByUidRequest.deserialize(bytes);
        }
    }
    export class TicketTypeLimitedFields extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            uid?: string;
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            uid?: string;
            name?: string;
        }): TicketTypeLimitedFields {
            const message = new TicketTypeLimitedFields({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.uid != null) {
                message.uid = data.uid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                uid?: string;
                name?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.uid != null) {
                data.uid = this.uid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.uid.length)
                writer.writeString(2, this.uid);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TicketTypeLimitedFields {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TicketTypeLimitedFields();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.uid = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TicketTypeLimitedFields {
            return TicketTypeLimitedFields.deserialize(bytes);
        }
    }
    export class TicketTypeListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            productionId?: string;
            filters?: dependency_3.io.Filters;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productionId" in data && data.productionId != undefined) {
                    this.productionId = data.productionId;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
            }
        }
        get productionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.Filters, 2) as dependency_3.io.Filters;
        }
        set filters(value: dependency_3.io.Filters) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasFilters() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            productionId?: string;
            filters?: ReturnType<typeof dependency_3.io.Filters.prototype.toObject>;
        }): TicketTypeListRequest {
            const message = new TicketTypeListRequest({});
            if (data.productionId != null) {
                message.productionId = data.productionId;
            }
            if (data.filters != null) {
                message.filters = dependency_3.io.Filters.fromObject(data.filters);
            }
            return message;
        }
        toObject() {
            const data: {
                productionId?: string;
                filters?: ReturnType<typeof dependency_3.io.Filters.prototype.toObject>;
            } = {};
            if (this.productionId != null) {
                data.productionId = this.productionId;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.productionId.length)
                writer.writeString(1, this.productionId);
            if (this.hasFilters)
                writer.writeMessage(2, this.filters, () => this.filters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TicketTypeListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TicketTypeListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productionId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.filters, () => message.filters = dependency_3.io.Filters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TicketTypeListRequest {
            return TicketTypeListRequest.deserialize(bytes);
        }
    }
}
