/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/member/member.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./../common/metrics";
import * as dependency_3 from "./../common/note";
import * as dependency_4 from "./../common/pagination";
import * as dependency_5 from "./../common/filter";
import * as dependency_6 from "./../common/operation";
import * as dependency_7 from "./../common/pass";
import * as dependency_8 from "./../common/personal";
import * as dependency_9 from "./../common/expiry";
import * as dependency_10 from "./event";
import * as dependency_11 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace members {
    export enum MemberStatus {
        ENROLLED = 0,
        ACTIVE = 1,
        CHECKED_IN = 2,
        EXPIRED = 3,
        CHECKED_OUT = 4,
        DELETED = 5
    }
    export class Member extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            externalId?: string;
            groupingIdentifier?: string;
            tierId?: string;
            programId?: string;
            person?: dependency_8.io.Person;
            metaData?: Map<string, string>;
            optOut?: boolean;
            points?: number;
            secondaryPoints?: number;
            tierPoints?: number;
            expiryDate?: dependency_1.google.protobuf.Timestamp;
            status?: MemberStatus;
            passOverrides?: dependency_7.io.PassOverrides;
            passMetaData?: dependency_2.io.Metadata;
            notes?: dependency_3.io.Note[];
            currentTierAwarded?: dependency_1.google.protobuf.Timestamp;
            currentTierExpires?: dependency_1.google.protobuf.Timestamp;
            created?: dependency_1.google.protobuf.Timestamp;
            updated?: dependency_1.google.protobuf.Timestamp;
            profileImage?: string;
            operation?: dependency_6.io.Operation;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [26], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("groupingIdentifier" in data && data.groupingIdentifier != undefined) {
                    this.groupingIdentifier = data.groupingIdentifier;
                }
                if ("tierId" in data && data.tierId != undefined) {
                    this.tierId = data.tierId;
                }
                if ("programId" in data && data.programId != undefined) {
                    this.programId = data.programId;
                }
                if ("person" in data && data.person != undefined) {
                    this.person = data.person;
                }
                if ("metaData" in data && data.metaData != undefined) {
                    this.metaData = data.metaData;
                }
                if ("optOut" in data && data.optOut != undefined) {
                    this.optOut = data.optOut;
                }
                if ("points" in data && data.points != undefined) {
                    this.points = data.points;
                }
                if ("secondaryPoints" in data && data.secondaryPoints != undefined) {
                    this.secondaryPoints = data.secondaryPoints;
                }
                if ("tierPoints" in data && data.tierPoints != undefined) {
                    this.tierPoints = data.tierPoints;
                }
                if ("expiryDate" in data && data.expiryDate != undefined) {
                    this.expiryDate = data.expiryDate;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("passOverrides" in data && data.passOverrides != undefined) {
                    this.passOverrides = data.passOverrides;
                }
                if ("passMetaData" in data && data.passMetaData != undefined) {
                    this.passMetaData = data.passMetaData;
                }
                if ("notes" in data && data.notes != undefined) {
                    this.notes = data.notes;
                }
                if ("currentTierAwarded" in data && data.currentTierAwarded != undefined) {
                    this.currentTierAwarded = data.currentTierAwarded;
                }
                if ("currentTierExpires" in data && data.currentTierExpires != undefined) {
                    this.currentTierExpires = data.currentTierExpires;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
                if ("profileImage" in data && data.profileImage != undefined) {
                    this.profileImage = data.profileImage;
                }
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
            }
            if (!this.metaData)
                this.metaData = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get groupingIdentifier() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set groupingIdentifier(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tierId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set tierId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get programId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set programId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get person() {
            return pb_1.Message.getWrapperField(this, dependency_8.io.Person, 6) as dependency_8.io.Person;
        }
        set person(value: dependency_8.io.Person) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasPerson() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get metaData() {
            return pb_1.Message.getField(this, 7) as any as Map<string, string>;
        }
        set metaData(value: Map<string, string>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        get optOut() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set optOut(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get points() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set points(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get secondaryPoints() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set secondaryPoints(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get tierPoints() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set tierPoints(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get expiryDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 18) as dependency_1.google.protobuf.Timestamp;
        }
        set expiryDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get hasExpiryDate() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 19, MemberStatus.ENROLLED) as MemberStatus;
        }
        set status(value: MemberStatus) {
            pb_1.Message.setField(this, 19, value);
        }
        get passOverrides() {
            return pb_1.Message.getWrapperField(this, dependency_7.io.PassOverrides, 20) as dependency_7.io.PassOverrides;
        }
        set passOverrides(value: dependency_7.io.PassOverrides) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get hasPassOverrides() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get passMetaData() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.Metadata, 21) as dependency_2.io.Metadata;
        }
        set passMetaData(value: dependency_2.io.Metadata) {
            pb_1.Message.setWrapperField(this, 21, value);
        }
        get hasPassMetaData() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get notes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.io.Note, 26) as dependency_3.io.Note[];
        }
        set notes(value: dependency_3.io.Note[]) {
            pb_1.Message.setRepeatedWrapperField(this, 26, value);
        }
        get currentTierAwarded() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 27) as dependency_1.google.protobuf.Timestamp;
        }
        set currentTierAwarded(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 27, value);
        }
        get hasCurrentTierAwarded() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get currentTierExpires() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 28) as dependency_1.google.protobuf.Timestamp;
        }
        set currentTierExpires(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 28, value);
        }
        get hasCurrentTierExpires() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 29) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 29, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 30) as dependency_1.google.protobuf.Timestamp;
        }
        set updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 30, value);
        }
        get hasUpdated() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get profileImage() {
            return pb_1.Message.getFieldWithDefault(this, 31, "") as string;
        }
        set profileImage(value: string) {
            pb_1.Message.setField(this, 31, value);
        }
        get operation() {
            return pb_1.Message.getFieldWithDefault(this, 100, dependency_6.io.Operation.OPERATION_DO_NOT_USE) as dependency_6.io.Operation;
        }
        set operation(value: dependency_6.io.Operation) {
            pb_1.Message.setField(this, 100, value);
        }
        static fromObject(data: {
            id?: string;
            externalId?: string;
            groupingIdentifier?: string;
            tierId?: string;
            programId?: string;
            person?: ReturnType<typeof dependency_8.io.Person.prototype.toObject>;
            metaData?: {
                [key: string]: string;
            };
            optOut?: boolean;
            points?: number;
            secondaryPoints?: number;
            tierPoints?: number;
            expiryDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            status?: MemberStatus;
            passOverrides?: ReturnType<typeof dependency_7.io.PassOverrides.prototype.toObject>;
            passMetaData?: ReturnType<typeof dependency_2.io.Metadata.prototype.toObject>;
            notes?: ReturnType<typeof dependency_3.io.Note.prototype.toObject>[];
            currentTierAwarded?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            currentTierExpires?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            profileImage?: string;
            operation?: dependency_6.io.Operation;
        }): Member {
            const message = new Member({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (data.groupingIdentifier != null) {
                message.groupingIdentifier = data.groupingIdentifier;
            }
            if (data.tierId != null) {
                message.tierId = data.tierId;
            }
            if (data.programId != null) {
                message.programId = data.programId;
            }
            if (data.person != null) {
                message.person = dependency_8.io.Person.fromObject(data.person);
            }
            if (typeof data.metaData == "object") {
                message.metaData = new Map(Object.entries(data.metaData));
            }
            if (data.optOut != null) {
                message.optOut = data.optOut;
            }
            if (data.points != null) {
                message.points = data.points;
            }
            if (data.secondaryPoints != null) {
                message.secondaryPoints = data.secondaryPoints;
            }
            if (data.tierPoints != null) {
                message.tierPoints = data.tierPoints;
            }
            if (data.expiryDate != null) {
                message.expiryDate = dependency_1.google.protobuf.Timestamp.fromObject(data.expiryDate);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.passOverrides != null) {
                message.passOverrides = dependency_7.io.PassOverrides.fromObject(data.passOverrides);
            }
            if (data.passMetaData != null) {
                message.passMetaData = dependency_2.io.Metadata.fromObject(data.passMetaData);
            }
            if (data.notes != null) {
                message.notes = data.notes.map(item => dependency_3.io.Note.fromObject(item));
            }
            if (data.currentTierAwarded != null) {
                message.currentTierAwarded = dependency_1.google.protobuf.Timestamp.fromObject(data.currentTierAwarded);
            }
            if (data.currentTierExpires != null) {
                message.currentTierExpires = dependency_1.google.protobuf.Timestamp.fromObject(data.currentTierExpires);
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_1.google.protobuf.Timestamp.fromObject(data.updated);
            }
            if (data.profileImage != null) {
                message.profileImage = data.profileImage;
            }
            if (data.operation != null) {
                message.operation = data.operation;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                externalId?: string;
                groupingIdentifier?: string;
                tierId?: string;
                programId?: string;
                person?: ReturnType<typeof dependency_8.io.Person.prototype.toObject>;
                metaData?: {
                    [key: string]: string;
                };
                optOut?: boolean;
                points?: number;
                secondaryPoints?: number;
                tierPoints?: number;
                expiryDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                status?: MemberStatus;
                passOverrides?: ReturnType<typeof dependency_7.io.PassOverrides.prototype.toObject>;
                passMetaData?: ReturnType<typeof dependency_2.io.Metadata.prototype.toObject>;
                notes?: ReturnType<typeof dependency_3.io.Note.prototype.toObject>[];
                currentTierAwarded?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                currentTierExpires?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                profileImage?: string;
                operation?: dependency_6.io.Operation;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.groupingIdentifier != null) {
                data.groupingIdentifier = this.groupingIdentifier;
            }
            if (this.tierId != null) {
                data.tierId = this.tierId;
            }
            if (this.programId != null) {
                data.programId = this.programId;
            }
            if (this.person != null) {
                data.person = this.person.toObject();
            }
            if (this.metaData != null) {
                data.metaData = (Object.fromEntries)(this.metaData);
            }
            if (this.optOut != null) {
                data.optOut = this.optOut;
            }
            if (this.points != null) {
                data.points = this.points;
            }
            if (this.secondaryPoints != null) {
                data.secondaryPoints = this.secondaryPoints;
            }
            if (this.tierPoints != null) {
                data.tierPoints = this.tierPoints;
            }
            if (this.expiryDate != null) {
                data.expiryDate = this.expiryDate.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.passOverrides != null) {
                data.passOverrides = this.passOverrides.toObject();
            }
            if (this.passMetaData != null) {
                data.passMetaData = this.passMetaData.toObject();
            }
            if (this.notes != null) {
                data.notes = this.notes.map((item: dependency_3.io.Note) => item.toObject());
            }
            if (this.currentTierAwarded != null) {
                data.currentTierAwarded = this.currentTierAwarded.toObject();
            }
            if (this.currentTierExpires != null) {
                data.currentTierExpires = this.currentTierExpires.toObject();
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            if (this.profileImage != null) {
                data.profileImage = this.profileImage;
            }
            if (this.operation != null) {
                data.operation = this.operation;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.externalId.length)
                writer.writeString(2, this.externalId);
            if (this.groupingIdentifier.length)
                writer.writeString(3, this.groupingIdentifier);
            if (this.tierId.length)
                writer.writeString(4, this.tierId);
            if (this.programId.length)
                writer.writeString(5, this.programId);
            if (this.hasPerson)
                writer.writeMessage(6, this.person, () => this.person.serialize(writer));
            for (const [key, value] of this.metaData) {
                writer.writeMessage(7, this.metaData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.optOut != false)
                writer.writeBool(13, this.optOut);
            if (this.points != 0)
                writer.writeFloat(14, this.points);
            if (this.secondaryPoints != 0)
                writer.writeFloat(15, this.secondaryPoints);
            if (this.tierPoints != 0)
                writer.writeUint32(16, this.tierPoints);
            if (this.hasExpiryDate)
                writer.writeMessage(18, this.expiryDate, () => this.expiryDate.serialize(writer));
            if (this.status != MemberStatus.ENROLLED)
                writer.writeEnum(19, this.status);
            if (this.hasPassOverrides)
                writer.writeMessage(20, this.passOverrides, () => this.passOverrides.serialize(writer));
            if (this.hasPassMetaData)
                writer.writeMessage(21, this.passMetaData, () => this.passMetaData.serialize(writer));
            if (this.notes.length)
                writer.writeRepeatedMessage(26, this.notes, (item: dependency_3.io.Note) => item.serialize(writer));
            if (this.hasCurrentTierAwarded)
                writer.writeMessage(27, this.currentTierAwarded, () => this.currentTierAwarded.serialize(writer));
            if (this.hasCurrentTierExpires)
                writer.writeMessage(28, this.currentTierExpires, () => this.currentTierExpires.serialize(writer));
            if (this.hasCreated)
                writer.writeMessage(29, this.created, () => this.created.serialize(writer));
            if (this.hasUpdated)
                writer.writeMessage(30, this.updated, () => this.updated.serialize(writer));
            if (this.profileImage.length)
                writer.writeString(31, this.profileImage);
            if (this.operation != dependency_6.io.Operation.OPERATION_DO_NOT_USE)
                writer.writeEnum(100, this.operation);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Member {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Member();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.externalId = reader.readString();
                        break;
                    case 3:
                        message.groupingIdentifier = reader.readString();
                        break;
                    case 4:
                        message.tierId = reader.readString();
                        break;
                    case 5:
                        message.programId = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.person, () => message.person = dependency_8.io.Person.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metaData as any, reader, reader.readString, reader.readString));
                        break;
                    case 13:
                        message.optOut = reader.readBool();
                        break;
                    case 14:
                        message.points = reader.readFloat();
                        break;
                    case 15:
                        message.secondaryPoints = reader.readFloat();
                        break;
                    case 16:
                        message.tierPoints = reader.readUint32();
                        break;
                    case 18:
                        reader.readMessage(message.expiryDate, () => message.expiryDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 19:
                        message.status = reader.readEnum();
                        break;
                    case 20:
                        reader.readMessage(message.passOverrides, () => message.passOverrides = dependency_7.io.PassOverrides.deserialize(reader));
                        break;
                    case 21:
                        reader.readMessage(message.passMetaData, () => message.passMetaData = dependency_2.io.Metadata.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.notes, () => pb_1.Message.addToRepeatedWrapperField(message, 26, dependency_3.io.Note.deserialize(reader), dependency_3.io.Note));
                        break;
                    case 27:
                        reader.readMessage(message.currentTierAwarded, () => message.currentTierAwarded = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.currentTierExpires, () => message.currentTierExpires = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 29:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 30:
                        reader.readMessage(message.updated, () => message.updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 31:
                        message.profileImage = reader.readString();
                        break;
                    case 100:
                        message.operation = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Member {
            return Member.deserialize(bytes);
        }
    }
    export class MemberRecordByExternalIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            programId?: string;
            externalId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("programId" in data && data.programId != undefined) {
                    this.programId = data.programId;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
            }
        }
        get programId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set programId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            programId?: string;
            externalId?: string;
        }): MemberRecordByExternalIdRequest {
            const message = new MemberRecordByExternalIdRequest({});
            if (data.programId != null) {
                message.programId = data.programId;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            return message;
        }
        toObject() {
            const data: {
                programId?: string;
                externalId?: string;
            } = {};
            if (this.programId != null) {
                data.programId = this.programId;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.programId.length)
                writer.writeString(1, this.programId);
            if (this.externalId.length)
                writer.writeString(2, this.externalId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberRecordByExternalIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberRecordByExternalIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.programId = reader.readString();
                        break;
                    case 2:
                        message.externalId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemberRecordByExternalIdRequest {
            return MemberRecordByExternalIdRequest.deserialize(bytes);
        }
    }
    export class MemberSegmentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            filter?: dependency_4.io.Filter;
            newValues?: Member;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filter" in data && data.filter != undefined) {
                    this.filter = data.filter;
                }
                if ("newValues" in data && data.newValues != undefined) {
                    this.newValues = data.newValues;
                }
            }
        }
        get filter() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.Filter, 1) as dependency_4.io.Filter;
        }
        set filter(value: dependency_4.io.Filter) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasFilter() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get newValues() {
            return pb_1.Message.getWrapperField(this, Member, 2) as Member;
        }
        set newValues(value: Member) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasNewValues() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            filter?: ReturnType<typeof dependency_4.io.Filter.prototype.toObject>;
            newValues?: ReturnType<typeof Member.prototype.toObject>;
        }): MemberSegmentRequest {
            const message = new MemberSegmentRequest({});
            if (data.filter != null) {
                message.filter = dependency_4.io.Filter.fromObject(data.filter);
            }
            if (data.newValues != null) {
                message.newValues = Member.fromObject(data.newValues);
            }
            return message;
        }
        toObject() {
            const data: {
                filter?: ReturnType<typeof dependency_4.io.Filter.prototype.toObject>;
                newValues?: ReturnType<typeof Member.prototype.toObject>;
            } = {};
            if (this.filter != null) {
                data.filter = this.filter.toObject();
            }
            if (this.newValues != null) {
                data.newValues = this.newValues.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasFilter)
                writer.writeMessage(1, this.filter, () => this.filter.serialize(writer));
            if (this.hasNewValues)
                writer.writeMessage(2, this.newValues, () => this.newValues.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberSegmentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberSegmentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.filter, () => message.filter = dependency_4.io.Filter.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.newValues, () => message.newValues = Member.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemberSegmentRequest {
            return MemberSegmentRequest.deserialize(bytes);
        }
    }
    export class UpdateExpiryRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            programId?: string;
            tierId?: string;
            expirySettings?: dependency_9.io.ExpirySettings;
            timezone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("programId" in data && data.programId != undefined) {
                    this.programId = data.programId;
                }
                if ("tierId" in data && data.tierId != undefined) {
                    this.tierId = data.tierId;
                }
                if ("expirySettings" in data && data.expirySettings != undefined) {
                    this.expirySettings = data.expirySettings;
                }
                if ("timezone" in data && data.timezone != undefined) {
                    this.timezone = data.timezone;
                }
            }
        }
        get programId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set programId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tierId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tierId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get expirySettings() {
            return pb_1.Message.getWrapperField(this, dependency_9.io.ExpirySettings, 3) as dependency_9.io.ExpirySettings;
        }
        set expirySettings(value: dependency_9.io.ExpirySettings) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasExpirySettings() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get timezone() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set timezone(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            programId?: string;
            tierId?: string;
            expirySettings?: ReturnType<typeof dependency_9.io.ExpirySettings.prototype.toObject>;
            timezone?: string;
        }): UpdateExpiryRequest {
            const message = new UpdateExpiryRequest({});
            if (data.programId != null) {
                message.programId = data.programId;
            }
            if (data.tierId != null) {
                message.tierId = data.tierId;
            }
            if (data.expirySettings != null) {
                message.expirySettings = dependency_9.io.ExpirySettings.fromObject(data.expirySettings);
            }
            if (data.timezone != null) {
                message.timezone = data.timezone;
            }
            return message;
        }
        toObject() {
            const data: {
                programId?: string;
                tierId?: string;
                expirySettings?: ReturnType<typeof dependency_9.io.ExpirySettings.prototype.toObject>;
                timezone?: string;
            } = {};
            if (this.programId != null) {
                data.programId = this.programId;
            }
            if (this.tierId != null) {
                data.tierId = this.tierId;
            }
            if (this.expirySettings != null) {
                data.expirySettings = this.expirySettings.toObject();
            }
            if (this.timezone != null) {
                data.timezone = this.timezone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.programId.length)
                writer.writeString(1, this.programId);
            if (this.tierId.length)
                writer.writeString(2, this.tierId);
            if (this.hasExpirySettings)
                writer.writeMessage(3, this.expirySettings, () => this.expirySettings.serialize(writer));
            if (this.timezone.length)
                writer.writeString(4, this.timezone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateExpiryRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateExpiryRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.programId = reader.readString();
                        break;
                    case 2:
                        message.tierId = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.expirySettings, () => message.expirySettings = dependency_9.io.ExpirySettings.deserialize(reader));
                        break;
                    case 4:
                        message.timezone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateExpiryRequest {
            return UpdateExpiryRequest.deserialize(bytes);
        }
    }
    export class MemberExpiry extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            externalId?: string;
            programId?: string;
            expiryDate?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("programId" in data && data.programId != undefined) {
                    this.programId = data.programId;
                }
                if ("expiryDate" in data && data.expiryDate != undefined) {
                    this.expiryDate = data.expiryDate;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get programId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set programId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get expiryDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set expiryDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasExpiryDate() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: string;
            externalId?: string;
            programId?: string;
            expiryDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): MemberExpiry {
            const message = new MemberExpiry({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (data.programId != null) {
                message.programId = data.programId;
            }
            if (data.expiryDate != null) {
                message.expiryDate = dependency_1.google.protobuf.Timestamp.fromObject(data.expiryDate);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                externalId?: string;
                programId?: string;
                expiryDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.programId != null) {
                data.programId = this.programId;
            }
            if (this.expiryDate != null) {
                data.expiryDate = this.expiryDate.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.externalId.length)
                writer.writeString(2, this.externalId);
            if (this.programId.length)
                writer.writeString(3, this.programId);
            if (this.hasExpiryDate)
                writer.writeMessage(4, this.expiryDate, () => this.expiryDate.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberExpiry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberExpiry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.externalId = reader.readString();
                        break;
                    case 3:
                        message.programId = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.expiryDate, () => message.expiryDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemberExpiry {
            return MemberExpiry.deserialize(bytes);
        }
    }
    export class MemberPoints extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            externalId?: string;
            programId?: string;
            points?: number;
            secondaryPoints?: number;
            tierPoints?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("programId" in data && data.programId != undefined) {
                    this.programId = data.programId;
                }
                if ("points" in data && data.points != undefined) {
                    this.points = data.points;
                }
                if ("secondaryPoints" in data && data.secondaryPoints != undefined) {
                    this.secondaryPoints = data.secondaryPoints;
                }
                if ("tierPoints" in data && data.tierPoints != undefined) {
                    this.tierPoints = data.tierPoints;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get programId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set programId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get points() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set points(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get secondaryPoints() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set secondaryPoints(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get tierPoints() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set tierPoints(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: string;
            externalId?: string;
            programId?: string;
            points?: number;
            secondaryPoints?: number;
            tierPoints?: number;
        }): MemberPoints {
            const message = new MemberPoints({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (data.programId != null) {
                message.programId = data.programId;
            }
            if (data.points != null) {
                message.points = data.points;
            }
            if (data.secondaryPoints != null) {
                message.secondaryPoints = data.secondaryPoints;
            }
            if (data.tierPoints != null) {
                message.tierPoints = data.tierPoints;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                externalId?: string;
                programId?: string;
                points?: number;
                secondaryPoints?: number;
                tierPoints?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.programId != null) {
                data.programId = this.programId;
            }
            if (this.points != null) {
                data.points = this.points;
            }
            if (this.secondaryPoints != null) {
                data.secondaryPoints = this.secondaryPoints;
            }
            if (this.tierPoints != null) {
                data.tierPoints = this.tierPoints;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.externalId.length)
                writer.writeString(2, this.externalId);
            if (this.programId.length)
                writer.writeString(3, this.programId);
            if (this.points != 0)
                writer.writeFloat(4, this.points);
            if (this.secondaryPoints != 0)
                writer.writeFloat(5, this.secondaryPoints);
            if (this.tierPoints != 0)
                writer.writeUint32(6, this.tierPoints);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberPoints {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberPoints();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.externalId = reader.readString();
                        break;
                    case 3:
                        message.programId = reader.readString();
                        break;
                    case 4:
                        message.points = reader.readFloat();
                        break;
                    case 5:
                        message.secondaryPoints = reader.readFloat();
                        break;
                    case 6:
                        message.tierPoints = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemberPoints {
            return MemberPoints.deserialize(bytes);
        }
    }
    export class EarnBurnPointsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            externalId?: string;
            programId?: string;
            points?: number;
            secondaryPoints?: number;
            tierPoints?: number;
            eventDetails?: dependency_10.members.EventDetails;
            tierId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("programId" in data && data.programId != undefined) {
                    this.programId = data.programId;
                }
                if ("points" in data && data.points != undefined) {
                    this.points = data.points;
                }
                if ("secondaryPoints" in data && data.secondaryPoints != undefined) {
                    this.secondaryPoints = data.secondaryPoints;
                }
                if ("tierPoints" in data && data.tierPoints != undefined) {
                    this.tierPoints = data.tierPoints;
                }
                if ("eventDetails" in data && data.eventDetails != undefined) {
                    this.eventDetails = data.eventDetails;
                }
                if ("tierId" in data && data.tierId != undefined) {
                    this.tierId = data.tierId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get programId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set programId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get points() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set points(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get secondaryPoints() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set secondaryPoints(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get tierPoints() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set tierPoints(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get eventDetails() {
            return pb_1.Message.getWrapperField(this, dependency_10.members.EventDetails, 7) as dependency_10.members.EventDetails;
        }
        set eventDetails(value: dependency_10.members.EventDetails) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasEventDetails() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get tierId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set tierId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            externalId?: string;
            programId?: string;
            points?: number;
            secondaryPoints?: number;
            tierPoints?: number;
            eventDetails?: ReturnType<typeof dependency_10.members.EventDetails.prototype.toObject>;
            tierId?: string;
        }): EarnBurnPointsRequest {
            const message = new EarnBurnPointsRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (data.programId != null) {
                message.programId = data.programId;
            }
            if (data.points != null) {
                message.points = data.points;
            }
            if (data.secondaryPoints != null) {
                message.secondaryPoints = data.secondaryPoints;
            }
            if (data.tierPoints != null) {
                message.tierPoints = data.tierPoints;
            }
            if (data.eventDetails != null) {
                message.eventDetails = dependency_10.members.EventDetails.fromObject(data.eventDetails);
            }
            if (data.tierId != null) {
                message.tierId = data.tierId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                externalId?: string;
                programId?: string;
                points?: number;
                secondaryPoints?: number;
                tierPoints?: number;
                eventDetails?: ReturnType<typeof dependency_10.members.EventDetails.prototype.toObject>;
                tierId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.programId != null) {
                data.programId = this.programId;
            }
            if (this.points != null) {
                data.points = this.points;
            }
            if (this.secondaryPoints != null) {
                data.secondaryPoints = this.secondaryPoints;
            }
            if (this.tierPoints != null) {
                data.tierPoints = this.tierPoints;
            }
            if (this.eventDetails != null) {
                data.eventDetails = this.eventDetails.toObject();
            }
            if (this.tierId != null) {
                data.tierId = this.tierId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.externalId.length)
                writer.writeString(2, this.externalId);
            if (this.programId.length)
                writer.writeString(3, this.programId);
            if (this.points != 0)
                writer.writeFloat(4, this.points);
            if (this.secondaryPoints != 0)
                writer.writeFloat(5, this.secondaryPoints);
            if (this.tierPoints != 0)
                writer.writeUint32(6, this.tierPoints);
            if (this.hasEventDetails)
                writer.writeMessage(7, this.eventDetails, () => this.eventDetails.serialize(writer));
            if (this.tierId.length)
                writer.writeString(8, this.tierId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EarnBurnPointsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EarnBurnPointsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.externalId = reader.readString();
                        break;
                    case 3:
                        message.programId = reader.readString();
                        break;
                    case 4:
                        message.points = reader.readFloat();
                        break;
                    case 5:
                        message.secondaryPoints = reader.readFloat();
                        break;
                    case 6:
                        message.tierPoints = reader.readUint32();
                        break;
                    case 7:
                        reader.readMessage(message.eventDetails, () => message.eventDetails = dependency_10.members.EventDetails.deserialize(reader));
                        break;
                    case 8:
                        message.tierId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EarnBurnPointsRequest {
            return EarnBurnPointsRequest.deserialize(bytes);
        }
    }
    export class SetPointsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            externalId?: string;
            programId?: string;
            points?: number;
            secondaryPoints?: number;
            tierPoints?: number;
            resetPoints?: boolean;
            resetSecondaryPoints?: boolean;
            resetTierPoints?: boolean;
            eventDetails?: dependency_10.members.EventDetails;
            tierId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("programId" in data && data.programId != undefined) {
                    this.programId = data.programId;
                }
                if ("points" in data && data.points != undefined) {
                    this.points = data.points;
                }
                if ("secondaryPoints" in data && data.secondaryPoints != undefined) {
                    this.secondaryPoints = data.secondaryPoints;
                }
                if ("tierPoints" in data && data.tierPoints != undefined) {
                    this.tierPoints = data.tierPoints;
                }
                if ("resetPoints" in data && data.resetPoints != undefined) {
                    this.resetPoints = data.resetPoints;
                }
                if ("resetSecondaryPoints" in data && data.resetSecondaryPoints != undefined) {
                    this.resetSecondaryPoints = data.resetSecondaryPoints;
                }
                if ("resetTierPoints" in data && data.resetTierPoints != undefined) {
                    this.resetTierPoints = data.resetTierPoints;
                }
                if ("eventDetails" in data && data.eventDetails != undefined) {
                    this.eventDetails = data.eventDetails;
                }
                if ("tierId" in data && data.tierId != undefined) {
                    this.tierId = data.tierId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get programId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set programId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get points() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set points(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get secondaryPoints() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set secondaryPoints(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get tierPoints() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set tierPoints(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get resetPoints() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set resetPoints(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get resetSecondaryPoints() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set resetSecondaryPoints(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get resetTierPoints() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set resetTierPoints(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get eventDetails() {
            return pb_1.Message.getWrapperField(this, dependency_10.members.EventDetails, 10) as dependency_10.members.EventDetails;
        }
        set eventDetails(value: dependency_10.members.EventDetails) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasEventDetails() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get tierId() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set tierId(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: string;
            externalId?: string;
            programId?: string;
            points?: number;
            secondaryPoints?: number;
            tierPoints?: number;
            resetPoints?: boolean;
            resetSecondaryPoints?: boolean;
            resetTierPoints?: boolean;
            eventDetails?: ReturnType<typeof dependency_10.members.EventDetails.prototype.toObject>;
            tierId?: string;
        }): SetPointsRequest {
            const message = new SetPointsRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (data.programId != null) {
                message.programId = data.programId;
            }
            if (data.points != null) {
                message.points = data.points;
            }
            if (data.secondaryPoints != null) {
                message.secondaryPoints = data.secondaryPoints;
            }
            if (data.tierPoints != null) {
                message.tierPoints = data.tierPoints;
            }
            if (data.resetPoints != null) {
                message.resetPoints = data.resetPoints;
            }
            if (data.resetSecondaryPoints != null) {
                message.resetSecondaryPoints = data.resetSecondaryPoints;
            }
            if (data.resetTierPoints != null) {
                message.resetTierPoints = data.resetTierPoints;
            }
            if (data.eventDetails != null) {
                message.eventDetails = dependency_10.members.EventDetails.fromObject(data.eventDetails);
            }
            if (data.tierId != null) {
                message.tierId = data.tierId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                externalId?: string;
                programId?: string;
                points?: number;
                secondaryPoints?: number;
                tierPoints?: number;
                resetPoints?: boolean;
                resetSecondaryPoints?: boolean;
                resetTierPoints?: boolean;
                eventDetails?: ReturnType<typeof dependency_10.members.EventDetails.prototype.toObject>;
                tierId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.programId != null) {
                data.programId = this.programId;
            }
            if (this.points != null) {
                data.points = this.points;
            }
            if (this.secondaryPoints != null) {
                data.secondaryPoints = this.secondaryPoints;
            }
            if (this.tierPoints != null) {
                data.tierPoints = this.tierPoints;
            }
            if (this.resetPoints != null) {
                data.resetPoints = this.resetPoints;
            }
            if (this.resetSecondaryPoints != null) {
                data.resetSecondaryPoints = this.resetSecondaryPoints;
            }
            if (this.resetTierPoints != null) {
                data.resetTierPoints = this.resetTierPoints;
            }
            if (this.eventDetails != null) {
                data.eventDetails = this.eventDetails.toObject();
            }
            if (this.tierId != null) {
                data.tierId = this.tierId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.externalId.length)
                writer.writeString(2, this.externalId);
            if (this.programId.length)
                writer.writeString(3, this.programId);
            if (this.points != 0)
                writer.writeFloat(4, this.points);
            if (this.secondaryPoints != 0)
                writer.writeFloat(5, this.secondaryPoints);
            if (this.tierPoints != 0)
                writer.writeUint32(6, this.tierPoints);
            if (this.resetPoints != false)
                writer.writeBool(7, this.resetPoints);
            if (this.resetSecondaryPoints != false)
                writer.writeBool(8, this.resetSecondaryPoints);
            if (this.resetTierPoints != false)
                writer.writeBool(9, this.resetTierPoints);
            if (this.hasEventDetails)
                writer.writeMessage(10, this.eventDetails, () => this.eventDetails.serialize(writer));
            if (this.tierId.length)
                writer.writeString(11, this.tierId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetPointsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetPointsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.externalId = reader.readString();
                        break;
                    case 3:
                        message.programId = reader.readString();
                        break;
                    case 4:
                        message.points = reader.readFloat();
                        break;
                    case 5:
                        message.secondaryPoints = reader.readFloat();
                        break;
                    case 6:
                        message.tierPoints = reader.readUint32();
                        break;
                    case 7:
                        message.resetPoints = reader.readBool();
                        break;
                    case 8:
                        message.resetSecondaryPoints = reader.readBool();
                        break;
                    case 9:
                        message.resetTierPoints = reader.readBool();
                        break;
                    case 10:
                        reader.readMessage(message.eventDetails, () => message.eventDetails = dependency_10.members.EventDetails.deserialize(reader));
                        break;
                    case 11:
                        message.tierId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetPointsRequest {
            return SetPointsRequest.deserialize(bytes);
        }
    }
    export class MemberCheckInOutRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            memberId?: string;
            externalMemberId?: string;
            programId?: string;
            address?: string;
            lat?: number;
            lon?: number;
            alt?: number;
            externalEventId?: string;
            externalDeviceId?: string;
            externalServiceId?: string;
            metaData?: Map<string, string>;
            notes?: string;
            externalUserId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("memberId" in data && data.memberId != undefined) {
                    this.memberId = data.memberId;
                }
                if ("externalMemberId" in data && data.externalMemberId != undefined) {
                    this.externalMemberId = data.externalMemberId;
                }
                if ("programId" in data && data.programId != undefined) {
                    this.programId = data.programId;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("lat" in data && data.lat != undefined) {
                    this.lat = data.lat;
                }
                if ("lon" in data && data.lon != undefined) {
                    this.lon = data.lon;
                }
                if ("alt" in data && data.alt != undefined) {
                    this.alt = data.alt;
                }
                if ("externalEventId" in data && data.externalEventId != undefined) {
                    this.externalEventId = data.externalEventId;
                }
                if ("externalDeviceId" in data && data.externalDeviceId != undefined) {
                    this.externalDeviceId = data.externalDeviceId;
                }
                if ("externalServiceId" in data && data.externalServiceId != undefined) {
                    this.externalServiceId = data.externalServiceId;
                }
                if ("metaData" in data && data.metaData != undefined) {
                    this.metaData = data.metaData;
                }
                if ("notes" in data && data.notes != undefined) {
                    this.notes = data.notes;
                }
                if ("externalUserId" in data && data.externalUserId != undefined) {
                    this.externalUserId = data.externalUserId;
                }
            }
            if (!this.metaData)
                this.metaData = new Map();
        }
        get memberId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set memberId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalMemberId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalMemberId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get programId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set programId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get lat() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set lat(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get lon() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set lon(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get alt() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set alt(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get externalEventId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set externalEventId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get externalDeviceId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set externalDeviceId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get externalServiceId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set externalServiceId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get metaData() {
            return pb_1.Message.getField(this, 11) as any as Map<string, string>;
        }
        set metaData(value: Map<string, string>) {
            pb_1.Message.setField(this, 11, value as any);
        }
        get notes() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set notes(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get externalUserId() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set externalUserId(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            memberId?: string;
            externalMemberId?: string;
            programId?: string;
            address?: string;
            lat?: number;
            lon?: number;
            alt?: number;
            externalEventId?: string;
            externalDeviceId?: string;
            externalServiceId?: string;
            metaData?: {
                [key: string]: string;
            };
            notes?: string;
            externalUserId?: string;
        }): MemberCheckInOutRequest {
            const message = new MemberCheckInOutRequest({});
            if (data.memberId != null) {
                message.memberId = data.memberId;
            }
            if (data.externalMemberId != null) {
                message.externalMemberId = data.externalMemberId;
            }
            if (data.programId != null) {
                message.programId = data.programId;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.lat != null) {
                message.lat = data.lat;
            }
            if (data.lon != null) {
                message.lon = data.lon;
            }
            if (data.alt != null) {
                message.alt = data.alt;
            }
            if (data.externalEventId != null) {
                message.externalEventId = data.externalEventId;
            }
            if (data.externalDeviceId != null) {
                message.externalDeviceId = data.externalDeviceId;
            }
            if (data.externalServiceId != null) {
                message.externalServiceId = data.externalServiceId;
            }
            if (typeof data.metaData == "object") {
                message.metaData = new Map(Object.entries(data.metaData));
            }
            if (data.notes != null) {
                message.notes = data.notes;
            }
            if (data.externalUserId != null) {
                message.externalUserId = data.externalUserId;
            }
            return message;
        }
        toObject() {
            const data: {
                memberId?: string;
                externalMemberId?: string;
                programId?: string;
                address?: string;
                lat?: number;
                lon?: number;
                alt?: number;
                externalEventId?: string;
                externalDeviceId?: string;
                externalServiceId?: string;
                metaData?: {
                    [key: string]: string;
                };
                notes?: string;
                externalUserId?: string;
            } = {};
            if (this.memberId != null) {
                data.memberId = this.memberId;
            }
            if (this.externalMemberId != null) {
                data.externalMemberId = this.externalMemberId;
            }
            if (this.programId != null) {
                data.programId = this.programId;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.lat != null) {
                data.lat = this.lat;
            }
            if (this.lon != null) {
                data.lon = this.lon;
            }
            if (this.alt != null) {
                data.alt = this.alt;
            }
            if (this.externalEventId != null) {
                data.externalEventId = this.externalEventId;
            }
            if (this.externalDeviceId != null) {
                data.externalDeviceId = this.externalDeviceId;
            }
            if (this.externalServiceId != null) {
                data.externalServiceId = this.externalServiceId;
            }
            if (this.metaData != null) {
                data.metaData = (Object.fromEntries)(this.metaData);
            }
            if (this.notes != null) {
                data.notes = this.notes;
            }
            if (this.externalUserId != null) {
                data.externalUserId = this.externalUserId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.memberId.length)
                writer.writeString(1, this.memberId);
            if (this.externalMemberId.length)
                writer.writeString(2, this.externalMemberId);
            if (this.programId.length)
                writer.writeString(3, this.programId);
            if (this.address.length)
                writer.writeString(4, this.address);
            if (this.lat != 0)
                writer.writeDouble(5, this.lat);
            if (this.lon != 0)
                writer.writeDouble(6, this.lon);
            if (this.alt != 0)
                writer.writeInt32(7, this.alt);
            if (this.externalEventId.length)
                writer.writeString(8, this.externalEventId);
            if (this.externalDeviceId.length)
                writer.writeString(9, this.externalDeviceId);
            if (this.externalServiceId.length)
                writer.writeString(10, this.externalServiceId);
            for (const [key, value] of this.metaData) {
                writer.writeMessage(11, this.metaData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.notes.length)
                writer.writeString(12, this.notes);
            if (this.externalUserId.length)
                writer.writeString(13, this.externalUserId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberCheckInOutRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberCheckInOutRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.memberId = reader.readString();
                        break;
                    case 2:
                        message.externalMemberId = reader.readString();
                        break;
                    case 3:
                        message.programId = reader.readString();
                        break;
                    case 4:
                        message.address = reader.readString();
                        break;
                    case 5:
                        message.lat = reader.readDouble();
                        break;
                    case 6:
                        message.lon = reader.readDouble();
                        break;
                    case 7:
                        message.alt = reader.readInt32();
                        break;
                    case 8:
                        message.externalEventId = reader.readString();
                        break;
                    case 9:
                        message.externalDeviceId = reader.readString();
                        break;
                    case 10:
                        message.externalServiceId = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metaData as any, reader, reader.readString, reader.readString));
                        break;
                    case 12:
                        message.notes = reader.readString();
                        break;
                    case 13:
                        message.externalUserId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemberCheckInOutRequest {
            return MemberCheckInOutRequest.deserialize(bytes);
        }
    }
    export class ListRequestDeprecated extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            programId?: string;
            pagination?: dependency_4.io.Pagination;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("programId" in data && data.programId != undefined) {
                    this.programId = data.programId;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get programId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set programId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.Pagination, 2) as dependency_4.io.Pagination;
        }
        set pagination(value: dependency_4.io.Pagination) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasPagination() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            programId?: string;
            pagination?: ReturnType<typeof dependency_4.io.Pagination.prototype.toObject>;
        }): ListRequestDeprecated {
            const message = new ListRequestDeprecated({});
            if (data.programId != null) {
                message.programId = data.programId;
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.io.Pagination.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                programId?: string;
                pagination?: ReturnType<typeof dependency_4.io.Pagination.prototype.toObject>;
            } = {};
            if (this.programId != null) {
                data.programId = this.programId;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.programId.length)
                writer.writeString(1, this.programId);
            if (this.hasPagination)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRequestDeprecated {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRequestDeprecated();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.programId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.io.Pagination.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRequestDeprecated {
            return ListRequestDeprecated.deserialize(bytes);
        }
    }
    export class ListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            programId?: string;
            filters?: dependency_5.io.Filters;
            emailAsCsv?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("programId" in data && data.programId != undefined) {
                    this.programId = data.programId;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("emailAsCsv" in data && data.emailAsCsv != undefined) {
                    this.emailAsCsv = data.emailAsCsv;
                }
            }
        }
        get programId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set programId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_5.io.Filters, 2) as dependency_5.io.Filters;
        }
        set filters(value: dependency_5.io.Filters) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasFilters() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get emailAsCsv() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set emailAsCsv(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            programId?: string;
            filters?: ReturnType<typeof dependency_5.io.Filters.prototype.toObject>;
            emailAsCsv?: boolean;
        }): ListRequest {
            const message = new ListRequest({});
            if (data.programId != null) {
                message.programId = data.programId;
            }
            if (data.filters != null) {
                message.filters = dependency_5.io.Filters.fromObject(data.filters);
            }
            if (data.emailAsCsv != null) {
                message.emailAsCsv = data.emailAsCsv;
            }
            return message;
        }
        toObject() {
            const data: {
                programId?: string;
                filters?: ReturnType<typeof dependency_5.io.Filters.prototype.toObject>;
                emailAsCsv?: boolean;
            } = {};
            if (this.programId != null) {
                data.programId = this.programId;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            if (this.emailAsCsv != null) {
                data.emailAsCsv = this.emailAsCsv;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.programId.length)
                writer.writeString(1, this.programId);
            if (this.hasFilters)
                writer.writeMessage(2, this.filters, () => this.filters.serialize(writer));
            if (this.emailAsCsv != false)
                writer.writeBool(3, this.emailAsCsv);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.programId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.filters, () => message.filters = dependency_5.io.Filters.deserialize(reader));
                        break;
                    case 3:
                        message.emailAsCsv = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRequest {
            return ListRequest.deserialize(bytes);
        }
    }
    export class ChangeTierRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            memberId?: string;
            externalMemberId?: string;
            programId?: string;
            tierId?: string;
            eventDetails?: dependency_10.members.EventDetails;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("memberId" in data && data.memberId != undefined) {
                    this.memberId = data.memberId;
                }
                if ("externalMemberId" in data && data.externalMemberId != undefined) {
                    this.externalMemberId = data.externalMemberId;
                }
                if ("programId" in data && data.programId != undefined) {
                    this.programId = data.programId;
                }
                if ("tierId" in data && data.tierId != undefined) {
                    this.tierId = data.tierId;
                }
                if ("eventDetails" in data && data.eventDetails != undefined) {
                    this.eventDetails = data.eventDetails;
                }
            }
        }
        get memberId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set memberId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalMemberId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalMemberId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get programId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set programId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tierId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set tierId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get eventDetails() {
            return pb_1.Message.getWrapperField(this, dependency_10.members.EventDetails, 7) as dependency_10.members.EventDetails;
        }
        set eventDetails(value: dependency_10.members.EventDetails) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasEventDetails() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            memberId?: string;
            externalMemberId?: string;
            programId?: string;
            tierId?: string;
            eventDetails?: ReturnType<typeof dependency_10.members.EventDetails.prototype.toObject>;
        }): ChangeTierRequest {
            const message = new ChangeTierRequest({});
            if (data.memberId != null) {
                message.memberId = data.memberId;
            }
            if (data.externalMemberId != null) {
                message.externalMemberId = data.externalMemberId;
            }
            if (data.programId != null) {
                message.programId = data.programId;
            }
            if (data.tierId != null) {
                message.tierId = data.tierId;
            }
            if (data.eventDetails != null) {
                message.eventDetails = dependency_10.members.EventDetails.fromObject(data.eventDetails);
            }
            return message;
        }
        toObject() {
            const data: {
                memberId?: string;
                externalMemberId?: string;
                programId?: string;
                tierId?: string;
                eventDetails?: ReturnType<typeof dependency_10.members.EventDetails.prototype.toObject>;
            } = {};
            if (this.memberId != null) {
                data.memberId = this.memberId;
            }
            if (this.externalMemberId != null) {
                data.externalMemberId = this.externalMemberId;
            }
            if (this.programId != null) {
                data.programId = this.programId;
            }
            if (this.tierId != null) {
                data.tierId = this.tierId;
            }
            if (this.eventDetails != null) {
                data.eventDetails = this.eventDetails.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.memberId.length)
                writer.writeString(1, this.memberId);
            if (this.externalMemberId.length)
                writer.writeString(2, this.externalMemberId);
            if (this.programId.length)
                writer.writeString(3, this.programId);
            if (this.tierId.length)
                writer.writeString(4, this.tierId);
            if (this.hasEventDetails)
                writer.writeMessage(7, this.eventDetails, () => this.eventDetails.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChangeTierRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChangeTierRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.memberId = reader.readString();
                        break;
                    case 2:
                        message.externalMemberId = reader.readString();
                        break;
                    case 3:
                        message.programId = reader.readString();
                        break;
                    case 4:
                        message.tierId = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.eventDetails, () => message.eventDetails = dependency_10.members.EventDetails.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChangeTierRequest {
            return ChangeTierRequest.deserialize(bytes);
        }
    }
}
