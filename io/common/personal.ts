/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/personal.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common_objects";
import * as pb_1 from "google-protobuf";
export namespace io {
    export enum Gender {
        NOT_KNOWN = 0,
        MALE = 1,
        FEMALE = 2
    }
    export class Person extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            surname?: string;
            forename?: string;
            otherNames?: string[];
            salutation?: string;
            suffix?: string;
            displayName?: string;
            gender?: Gender;
            dateOfBirth?: dependency_1.io.Date;
            emailAddress?: string;
            mobileNumber?: string;
            externalId?: string;
            externalIds?: Map<number, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("surname" in data && data.surname != undefined) {
                    this.surname = data.surname;
                }
                if ("forename" in data && data.forename != undefined) {
                    this.forename = data.forename;
                }
                if ("otherNames" in data && data.otherNames != undefined) {
                    this.otherNames = data.otherNames;
                }
                if ("salutation" in data && data.salutation != undefined) {
                    this.salutation = data.salutation;
                }
                if ("suffix" in data && data.suffix != undefined) {
                    this.suffix = data.suffix;
                }
                if ("displayName" in data && data.displayName != undefined) {
                    this.displayName = data.displayName;
                }
                if ("gender" in data && data.gender != undefined) {
                    this.gender = data.gender;
                }
                if ("dateOfBirth" in data && data.dateOfBirth != undefined) {
                    this.dateOfBirth = data.dateOfBirth;
                }
                if ("emailAddress" in data && data.emailAddress != undefined) {
                    this.emailAddress = data.emailAddress;
                }
                if ("mobileNumber" in data && data.mobileNumber != undefined) {
                    this.mobileNumber = data.mobileNumber;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("externalIds" in data && data.externalIds != undefined) {
                    this.externalIds = data.externalIds;
                }
            }
            if (!this.externalIds)
                this.externalIds = new Map();
        }
        get surname() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set surname(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get forename() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set forename(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get otherNames() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set otherNames(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get salutation() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set salutation(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get suffix() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set suffix(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get displayName() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set displayName(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get gender() {
            return pb_1.Message.getFieldWithDefault(this, 7, Gender.NOT_KNOWN) as Gender;
        }
        set gender(value: Gender) {
            pb_1.Message.setField(this, 7, value);
        }
        get dateOfBirth() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Date, 8) as dependency_1.io.Date;
        }
        set dateOfBirth(value: dependency_1.io.Date) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasDateOfBirth() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get emailAddress() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set emailAddress(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get mobileNumber() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set mobileNumber(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get externalIds() {
            return pb_1.Message.getField(this, 12) as any as Map<number, string>;
        }
        set externalIds(value: Map<number, string>) {
            pb_1.Message.setField(this, 12, value as any);
        }
        static fromObject(data: {
            surname?: string;
            forename?: string;
            otherNames?: string[];
            salutation?: string;
            suffix?: string;
            displayName?: string;
            gender?: Gender;
            dateOfBirth?: ReturnType<typeof dependency_1.io.Date.prototype.toObject>;
            emailAddress?: string;
            mobileNumber?: string;
            externalId?: string;
            externalIds?: {
                [key: number]: string;
            };
        }): Person {
            const message = new Person({});
            if (data.surname != null) {
                message.surname = data.surname;
            }
            if (data.forename != null) {
                message.forename = data.forename;
            }
            if (data.otherNames != null) {
                message.otherNames = data.otherNames;
            }
            if (data.salutation != null) {
                message.salutation = data.salutation;
            }
            if (data.suffix != null) {
                message.suffix = data.suffix;
            }
            if (data.displayName != null) {
                message.displayName = data.displayName;
            }
            if (data.gender != null) {
                message.gender = data.gender;
            }
            if (data.dateOfBirth != null) {
                message.dateOfBirth = dependency_1.io.Date.fromObject(data.dateOfBirth);
            }
            if (data.emailAddress != null) {
                message.emailAddress = data.emailAddress;
            }
            if (data.mobileNumber != null) {
                message.mobileNumber = data.mobileNumber;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (typeof data.externalIds == "object") {
                message.externalIds = new Map(Object.entries(data.externalIds).map(([key, value]) => [Number(key), value]));
            }
            return message;
        }
        toObject() {
            const data: {
                surname?: string;
                forename?: string;
                otherNames?: string[];
                salutation?: string;
                suffix?: string;
                displayName?: string;
                gender?: Gender;
                dateOfBirth?: ReturnType<typeof dependency_1.io.Date.prototype.toObject>;
                emailAddress?: string;
                mobileNumber?: string;
                externalId?: string;
                externalIds?: {
                    [key: number]: string;
                };
            } = {};
            if (this.surname != null) {
                data.surname = this.surname;
            }
            if (this.forename != null) {
                data.forename = this.forename;
            }
            if (this.otherNames != null) {
                data.otherNames = this.otherNames;
            }
            if (this.salutation != null) {
                data.salutation = this.salutation;
            }
            if (this.suffix != null) {
                data.suffix = this.suffix;
            }
            if (this.displayName != null) {
                data.displayName = this.displayName;
            }
            if (this.gender != null) {
                data.gender = this.gender;
            }
            if (this.dateOfBirth != null) {
                data.dateOfBirth = this.dateOfBirth.toObject();
            }
            if (this.emailAddress != null) {
                data.emailAddress = this.emailAddress;
            }
            if (this.mobileNumber != null) {
                data.mobileNumber = this.mobileNumber;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.externalIds != null) {
                data.externalIds = (Object.fromEntries)(this.externalIds);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.surname.length)
                writer.writeString(1, this.surname);
            if (this.forename.length)
                writer.writeString(2, this.forename);
            if (this.otherNames.length)
                writer.writeRepeatedString(3, this.otherNames);
            if (this.salutation.length)
                writer.writeString(4, this.salutation);
            if (this.suffix.length)
                writer.writeString(5, this.suffix);
            if (this.displayName.length)
                writer.writeString(6, this.displayName);
            if (this.gender != Gender.NOT_KNOWN)
                writer.writeEnum(7, this.gender);
            if (this.hasDateOfBirth)
                writer.writeMessage(8, this.dateOfBirth, () => this.dateOfBirth.serialize(writer));
            if (this.emailAddress.length)
                writer.writeString(9, this.emailAddress);
            if (this.mobileNumber.length)
                writer.writeString(10, this.mobileNumber);
            if (this.externalId.length)
                writer.writeString(11, this.externalId);
            for (const [key, value] of this.externalIds) {
                writer.writeMessage(12, this.externalIds, () => {
                    writer.writeInt32(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Person {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Person();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.surname = reader.readString();
                        break;
                    case 2:
                        message.forename = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.salutation = reader.readString();
                        break;
                    case 5:
                        message.suffix = reader.readString();
                        break;
                    case 6:
                        message.displayName = reader.readString();
                        break;
                    case 7:
                        message.gender = reader.readEnum();
                        break;
                    case 8:
                        reader.readMessage(message.dateOfBirth, () => message.dateOfBirth = dependency_1.io.Date.deserialize(reader));
                        break;
                    case 9:
                        message.emailAddress = reader.readString();
                        break;
                    case 10:
                        message.mobileNumber = reader.readString();
                        break;
                    case 11:
                        message.externalId = reader.readString();
                        break;
                    case 12:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.externalIds as any, reader, reader.readInt32, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Person {
            return Person.deserialize(bytes);
        }
    }
    export class Address extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            addressLine1?: string;
            addressLine2?: string;
            addressLine3?: string;
            city?: string;
            state?: string;
            zipCode?: string;
            countryCode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("addressLine1" in data && data.addressLine1 != undefined) {
                    this.addressLine1 = data.addressLine1;
                }
                if ("addressLine2" in data && data.addressLine2 != undefined) {
                    this.addressLine2 = data.addressLine2;
                }
                if ("addressLine3" in data && data.addressLine3 != undefined) {
                    this.addressLine3 = data.addressLine3;
                }
                if ("city" in data && data.city != undefined) {
                    this.city = data.city;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("zipCode" in data && data.zipCode != undefined) {
                    this.zipCode = data.zipCode;
                }
                if ("countryCode" in data && data.countryCode != undefined) {
                    this.countryCode = data.countryCode;
                }
            }
        }
        get addressLine1() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set addressLine1(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get addressLine2() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set addressLine2(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get addressLine3() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set addressLine3(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get city() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set city(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get zipCode() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set zipCode(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get countryCode() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set countryCode(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            addressLine1?: string;
            addressLine2?: string;
            addressLine3?: string;
            city?: string;
            state?: string;
            zipCode?: string;
            countryCode?: string;
        }): Address {
            const message = new Address({});
            if (data.addressLine1 != null) {
                message.addressLine1 = data.addressLine1;
            }
            if (data.addressLine2 != null) {
                message.addressLine2 = data.addressLine2;
            }
            if (data.addressLine3 != null) {
                message.addressLine3 = data.addressLine3;
            }
            if (data.city != null) {
                message.city = data.city;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.zipCode != null) {
                message.zipCode = data.zipCode;
            }
            if (data.countryCode != null) {
                message.countryCode = data.countryCode;
            }
            return message;
        }
        toObject() {
            const data: {
                addressLine1?: string;
                addressLine2?: string;
                addressLine3?: string;
                city?: string;
                state?: string;
                zipCode?: string;
                countryCode?: string;
            } = {};
            if (this.addressLine1 != null) {
                data.addressLine1 = this.addressLine1;
            }
            if (this.addressLine2 != null) {
                data.addressLine2 = this.addressLine2;
            }
            if (this.addressLine3 != null) {
                data.addressLine3 = this.addressLine3;
            }
            if (this.city != null) {
                data.city = this.city;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.zipCode != null) {
                data.zipCode = this.zipCode;
            }
            if (this.countryCode != null) {
                data.countryCode = this.countryCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.addressLine1.length)
                writer.writeString(1, this.addressLine1);
            if (this.addressLine2.length)
                writer.writeString(2, this.addressLine2);
            if (this.addressLine3.length)
                writer.writeString(3, this.addressLine3);
            if (this.city.length)
                writer.writeString(4, this.city);
            if (this.state.length)
                writer.writeString(5, this.state);
            if (this.zipCode.length)
                writer.writeString(6, this.zipCode);
            if (this.countryCode.length)
                writer.writeString(7, this.countryCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Address {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Address();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.addressLine1 = reader.readString();
                        break;
                    case 2:
                        message.addressLine2 = reader.readString();
                        break;
                    case 3:
                        message.addressLine3 = reader.readString();
                        break;
                    case 4:
                        message.city = reader.readString();
                        break;
                    case 5:
                        message.state = reader.readString();
                        break;
                    case 6:
                        message.zipCode = reader.readString();
                        break;
                    case 7:
                        message.countryCode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Address {
            return Address.deserialize(bytes);
        }
    }
    export class PersonRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            externalId?: string;
            classId?: string;
            person?: Person;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("classId" in data && data.classId != undefined) {
                    this.classId = data.classId;
                }
                if ("person" in data && data.person != undefined) {
                    this.person = data.person;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get classId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set classId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get person() {
            return pb_1.Message.getWrapperField(this, Person, 4) as Person;
        }
        set person(value: Person) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasPerson() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: string;
            externalId?: string;
            classId?: string;
            person?: ReturnType<typeof Person.prototype.toObject>;
        }): PersonRequest {
            const message = new PersonRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (data.classId != null) {
                message.classId = data.classId;
            }
            if (data.person != null) {
                message.person = Person.fromObject(data.person);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                externalId?: string;
                classId?: string;
                person?: ReturnType<typeof Person.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.classId != null) {
                data.classId = this.classId;
            }
            if (this.person != null) {
                data.person = this.person.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.externalId.length)
                writer.writeString(2, this.externalId);
            if (this.classId.length)
                writer.writeString(3, this.classId);
            if (this.hasPerson)
                writer.writeMessage(4, this.person, () => this.person.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PersonRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PersonRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.externalId = reader.readString();
                        break;
                    case 3:
                        message.classId = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.person, () => message.person = Person.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PersonRequest {
            return PersonRequest.deserialize(bytes);
        }
    }
}
