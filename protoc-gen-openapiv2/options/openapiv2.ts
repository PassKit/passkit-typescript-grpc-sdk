/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: protoc-gen-openapiv2/options/openapiv2.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/struct";
import * as pb_1 from "google-protobuf";
export namespace grpc.gateway.protoc_gen_openapiv2.options {
    export enum Scheme {
        UNKNOWN = 0,
        HTTP = 1,
        HTTPS = 2,
        WS = 3,
        WSS = 4
    }
    export class Swagger extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            swagger?: string;
            info?: Info;
            host?: string;
            basePath?: string;
            schemes?: Scheme[];
            consumes?: string[];
            produces?: string[];
            responses?: Map<string, Response>;
            securityDefinitions?: SecurityDefinitions;
            security?: SecurityRequirement[];
            tags?: Tag[];
            externalDocs?: ExternalDocumentation;
            extensions?: Map<string, dependency_1.google.protobuf.Value>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6, 7, 12, 13], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("swagger" in data && data.swagger != undefined) {
                    this.swagger = data.swagger;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
                if ("host" in data && data.host != undefined) {
                    this.host = data.host;
                }
                if ("basePath" in data && data.basePath != undefined) {
                    this.basePath = data.basePath;
                }
                if ("schemes" in data && data.schemes != undefined) {
                    this.schemes = data.schemes;
                }
                if ("consumes" in data && data.consumes != undefined) {
                    this.consumes = data.consumes;
                }
                if ("produces" in data && data.produces != undefined) {
                    this.produces = data.produces;
                }
                if ("responses" in data && data.responses != undefined) {
                    this.responses = data.responses;
                }
                if ("securityDefinitions" in data && data.securityDefinitions != undefined) {
                    this.securityDefinitions = data.securityDefinitions;
                }
                if ("security" in data && data.security != undefined) {
                    this.security = data.security;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("externalDocs" in data && data.externalDocs != undefined) {
                    this.externalDocs = data.externalDocs;
                }
                if ("extensions" in data && data.extensions != undefined) {
                    this.extensions = data.extensions;
                }
            }
            if (!this.responses)
                this.responses = new Map();
            if (!this.extensions)
                this.extensions = new Map();
        }
        get swagger() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set swagger(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get info() {
            return pb_1.Message.getWrapperField(this, Info, 2) as Info;
        }
        set info(value: Info) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasInfo() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get host() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set host(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get basePath() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set basePath(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get schemes() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as Scheme[];
        }
        set schemes(value: Scheme[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get consumes() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set consumes(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get produces() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set produces(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get responses() {
            return pb_1.Message.getField(this, 10) as any as Map<string, Response>;
        }
        set responses(value: Map<string, Response>) {
            pb_1.Message.setField(this, 10, value as any);
        }
        get securityDefinitions() {
            return pb_1.Message.getWrapperField(this, SecurityDefinitions, 11) as SecurityDefinitions;
        }
        set securityDefinitions(value: SecurityDefinitions) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasSecurityDefinitions() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get security() {
            return pb_1.Message.getRepeatedWrapperField(this, SecurityRequirement, 12) as SecurityRequirement[];
        }
        set security(value: SecurityRequirement[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get tags() {
            return pb_1.Message.getRepeatedWrapperField(this, Tag, 13) as Tag[];
        }
        set tags(value: Tag[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get externalDocs() {
            return pb_1.Message.getWrapperField(this, ExternalDocumentation, 14) as ExternalDocumentation;
        }
        set externalDocs(value: ExternalDocumentation) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get hasExternalDocs() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get extensions() {
            return pb_1.Message.getField(this, 15) as any as Map<string, dependency_1.google.protobuf.Value>;
        }
        set extensions(value: Map<string, dependency_1.google.protobuf.Value>) {
            pb_1.Message.setField(this, 15, value as any);
        }
        static fromObject(data: {
            swagger?: string;
            info?: ReturnType<typeof Info.prototype.toObject>;
            host?: string;
            basePath?: string;
            schemes?: Scheme[];
            consumes?: string[];
            produces?: string[];
            responses?: {
                [key: string]: ReturnType<typeof Response.prototype.toObject>;
            };
            securityDefinitions?: ReturnType<typeof SecurityDefinitions.prototype.toObject>;
            security?: ReturnType<typeof SecurityRequirement.prototype.toObject>[];
            tags?: ReturnType<typeof Tag.prototype.toObject>[];
            externalDocs?: ReturnType<typeof ExternalDocumentation.prototype.toObject>;
            extensions?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
            };
        }): Swagger {
            const message = new Swagger({});
            if (data.swagger != null) {
                message.swagger = data.swagger;
            }
            if (data.info != null) {
                message.info = Info.fromObject(data.info);
            }
            if (data.host != null) {
                message.host = data.host;
            }
            if (data.basePath != null) {
                message.basePath = data.basePath;
            }
            if (data.schemes != null) {
                message.schemes = data.schemes;
            }
            if (data.consumes != null) {
                message.consumes = data.consumes;
            }
            if (data.produces != null) {
                message.produces = data.produces;
            }
            if (typeof data.responses == "object") {
                message.responses = new Map(Object.entries(data.responses).map(([key, value]) => [key, Response.fromObject(value)]));
            }
            if (data.securityDefinitions != null) {
                message.securityDefinitions = SecurityDefinitions.fromObject(data.securityDefinitions);
            }
            if (data.security != null) {
                message.security = data.security.map(item => SecurityRequirement.fromObject(item));
            }
            if (data.tags != null) {
                message.tags = data.tags.map(item => Tag.fromObject(item));
            }
            if (data.externalDocs != null) {
                message.externalDocs = ExternalDocumentation.fromObject(data.externalDocs);
            }
            if (typeof data.extensions == "object") {
                message.extensions = new Map(Object.entries(data.extensions).map(([key, value]) => [key, dependency_1.google.protobuf.Value.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                swagger?: string;
                info?: ReturnType<typeof Info.prototype.toObject>;
                host?: string;
                basePath?: string;
                schemes?: Scheme[];
                consumes?: string[];
                produces?: string[];
                responses?: {
                    [key: string]: ReturnType<typeof Response.prototype.toObject>;
                };
                securityDefinitions?: ReturnType<typeof SecurityDefinitions.prototype.toObject>;
                security?: ReturnType<typeof SecurityRequirement.prototype.toObject>[];
                tags?: ReturnType<typeof Tag.prototype.toObject>[];
                externalDocs?: ReturnType<typeof ExternalDocumentation.prototype.toObject>;
                extensions?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
                };
            } = {};
            if (this.swagger != null) {
                data.swagger = this.swagger;
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            if (this.host != null) {
                data.host = this.host;
            }
            if (this.basePath != null) {
                data.basePath = this.basePath;
            }
            if (this.schemes != null) {
                data.schemes = this.schemes;
            }
            if (this.consumes != null) {
                data.consumes = this.consumes;
            }
            if (this.produces != null) {
                data.produces = this.produces;
            }
            if (this.responses != null) {
                data.responses = (Object.fromEntries)((Array.from)(this.responses).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.securityDefinitions != null) {
                data.securityDefinitions = this.securityDefinitions.toObject();
            }
            if (this.security != null) {
                data.security = this.security.map((item: SecurityRequirement) => item.toObject());
            }
            if (this.tags != null) {
                data.tags = this.tags.map((item: Tag) => item.toObject());
            }
            if (this.externalDocs != null) {
                data.externalDocs = this.externalDocs.toObject();
            }
            if (this.extensions != null) {
                data.extensions = (Object.fromEntries)((Array.from)(this.extensions).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.swagger.length)
                writer.writeString(1, this.swagger);
            if (this.hasInfo)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (this.host.length)
                writer.writeString(3, this.host);
            if (this.basePath.length)
                writer.writeString(4, this.basePath);
            if (this.schemes.length)
                writer.writePackedEnum(5, this.schemes);
            if (this.consumes.length)
                writer.writeRepeatedString(6, this.consumes);
            if (this.produces.length)
                writer.writeRepeatedString(7, this.produces);
            for (const [key, value] of this.responses) {
                writer.writeMessage(10, this.responses, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.hasSecurityDefinitions)
                writer.writeMessage(11, this.securityDefinitions, () => this.securityDefinitions.serialize(writer));
            if (this.security.length)
                writer.writeRepeatedMessage(12, this.security, (item: SecurityRequirement) => item.serialize(writer));
            if (this.tags.length)
                writer.writeRepeatedMessage(13, this.tags, (item: Tag) => item.serialize(writer));
            if (this.hasExternalDocs)
                writer.writeMessage(14, this.externalDocs, () => this.externalDocs.serialize(writer));
            for (const [key, value] of this.extensions) {
                writer.writeMessage(15, this.extensions, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Swagger {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Swagger();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.swagger = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = Info.deserialize(reader));
                        break;
                    case 3:
                        message.host = reader.readString();
                        break;
                    case 4:
                        message.basePath = reader.readString();
                        break;
                    case 5:
                        message.schemes = reader.readPackedEnum();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 10:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.responses as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = Response.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 11:
                        reader.readMessage(message.securityDefinitions, () => message.securityDefinitions = SecurityDefinitions.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.security, () => pb_1.Message.addToRepeatedWrapperField(message, 12, SecurityRequirement.deserialize(reader), SecurityRequirement));
                        break;
                    case 13:
                        reader.readMessage(message.tags, () => pb_1.Message.addToRepeatedWrapperField(message, 13, Tag.deserialize(reader), Tag));
                        break;
                    case 14:
                        reader.readMessage(message.externalDocs, () => message.externalDocs = ExternalDocumentation.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.extensions as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Swagger {
            return Swagger.deserialize(bytes);
        }
    }
    export class Operation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tags?: string[];
            summary?: string;
            description?: string;
            externalDocs?: ExternalDocumentation;
            operationId?: string;
            consumes?: string[];
            produces?: string[];
            responses?: Map<string, Response>;
            schemes?: Scheme[];
            deprecated?: boolean;
            security?: SecurityRequirement[];
            extensions?: Map<string, dependency_1.google.protobuf.Value>;
            parameters?: Parameters;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 6, 7, 10, 12], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
                if ("summary" in data && data.summary != undefined) {
                    this.summary = data.summary;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("externalDocs" in data && data.externalDocs != undefined) {
                    this.externalDocs = data.externalDocs;
                }
                if ("operationId" in data && data.operationId != undefined) {
                    this.operationId = data.operationId;
                }
                if ("consumes" in data && data.consumes != undefined) {
                    this.consumes = data.consumes;
                }
                if ("produces" in data && data.produces != undefined) {
                    this.produces = data.produces;
                }
                if ("responses" in data && data.responses != undefined) {
                    this.responses = data.responses;
                }
                if ("schemes" in data && data.schemes != undefined) {
                    this.schemes = data.schemes;
                }
                if ("deprecated" in data && data.deprecated != undefined) {
                    this.deprecated = data.deprecated;
                }
                if ("security" in data && data.security != undefined) {
                    this.security = data.security;
                }
                if ("extensions" in data && data.extensions != undefined) {
                    this.extensions = data.extensions;
                }
                if ("parameters" in data && data.parameters != undefined) {
                    this.parameters = data.parameters;
                }
            }
            if (!this.responses)
                this.responses = new Map();
            if (!this.extensions)
                this.extensions = new Map();
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get summary() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set summary(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get externalDocs() {
            return pb_1.Message.getWrapperField(this, ExternalDocumentation, 4) as ExternalDocumentation;
        }
        set externalDocs(value: ExternalDocumentation) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasExternalDocs() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get operationId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set operationId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get consumes() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set consumes(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get produces() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set produces(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get responses() {
            return pb_1.Message.getField(this, 9) as any as Map<string, Response>;
        }
        set responses(value: Map<string, Response>) {
            pb_1.Message.setField(this, 9, value as any);
        }
        get schemes() {
            return pb_1.Message.getFieldWithDefault(this, 10, []) as Scheme[];
        }
        set schemes(value: Scheme[]) {
            pb_1.Message.setField(this, 10, value);
        }
        get deprecated() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set deprecated(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get security() {
            return pb_1.Message.getRepeatedWrapperField(this, SecurityRequirement, 12) as SecurityRequirement[];
        }
        set security(value: SecurityRequirement[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get extensions() {
            return pb_1.Message.getField(this, 13) as any as Map<string, dependency_1.google.protobuf.Value>;
        }
        set extensions(value: Map<string, dependency_1.google.protobuf.Value>) {
            pb_1.Message.setField(this, 13, value as any);
        }
        get parameters() {
            return pb_1.Message.getWrapperField(this, Parameters, 14) as Parameters;
        }
        set parameters(value: Parameters) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get hasParameters() {
            return pb_1.Message.getField(this, 14) != null;
        }
        static fromObject(data: {
            tags?: string[];
            summary?: string;
            description?: string;
            externalDocs?: ReturnType<typeof ExternalDocumentation.prototype.toObject>;
            operationId?: string;
            consumes?: string[];
            produces?: string[];
            responses?: {
                [key: string]: ReturnType<typeof Response.prototype.toObject>;
            };
            schemes?: Scheme[];
            deprecated?: boolean;
            security?: ReturnType<typeof SecurityRequirement.prototype.toObject>[];
            extensions?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
            };
            parameters?: ReturnType<typeof Parameters.prototype.toObject>;
        }): Operation {
            const message = new Operation({});
            if (data.tags != null) {
                message.tags = data.tags;
            }
            if (data.summary != null) {
                message.summary = data.summary;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.externalDocs != null) {
                message.externalDocs = ExternalDocumentation.fromObject(data.externalDocs);
            }
            if (data.operationId != null) {
                message.operationId = data.operationId;
            }
            if (data.consumes != null) {
                message.consumes = data.consumes;
            }
            if (data.produces != null) {
                message.produces = data.produces;
            }
            if (typeof data.responses == "object") {
                message.responses = new Map(Object.entries(data.responses).map(([key, value]) => [key, Response.fromObject(value)]));
            }
            if (data.schemes != null) {
                message.schemes = data.schemes;
            }
            if (data.deprecated != null) {
                message.deprecated = data.deprecated;
            }
            if (data.security != null) {
                message.security = data.security.map(item => SecurityRequirement.fromObject(item));
            }
            if (typeof data.extensions == "object") {
                message.extensions = new Map(Object.entries(data.extensions).map(([key, value]) => [key, dependency_1.google.protobuf.Value.fromObject(value)]));
            }
            if (data.parameters != null) {
                message.parameters = Parameters.fromObject(data.parameters);
            }
            return message;
        }
        toObject() {
            const data: {
                tags?: string[];
                summary?: string;
                description?: string;
                externalDocs?: ReturnType<typeof ExternalDocumentation.prototype.toObject>;
                operationId?: string;
                consumes?: string[];
                produces?: string[];
                responses?: {
                    [key: string]: ReturnType<typeof Response.prototype.toObject>;
                };
                schemes?: Scheme[];
                deprecated?: boolean;
                security?: ReturnType<typeof SecurityRequirement.prototype.toObject>[];
                extensions?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
                };
                parameters?: ReturnType<typeof Parameters.prototype.toObject>;
            } = {};
            if (this.tags != null) {
                data.tags = this.tags;
            }
            if (this.summary != null) {
                data.summary = this.summary;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.externalDocs != null) {
                data.externalDocs = this.externalDocs.toObject();
            }
            if (this.operationId != null) {
                data.operationId = this.operationId;
            }
            if (this.consumes != null) {
                data.consumes = this.consumes;
            }
            if (this.produces != null) {
                data.produces = this.produces;
            }
            if (this.responses != null) {
                data.responses = (Object.fromEntries)((Array.from)(this.responses).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.schemes != null) {
                data.schemes = this.schemes;
            }
            if (this.deprecated != null) {
                data.deprecated = this.deprecated;
            }
            if (this.security != null) {
                data.security = this.security.map((item: SecurityRequirement) => item.toObject());
            }
            if (this.extensions != null) {
                data.extensions = (Object.fromEntries)((Array.from)(this.extensions).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.parameters != null) {
                data.parameters = this.parameters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tags.length)
                writer.writeRepeatedString(1, this.tags);
            if (this.summary.length)
                writer.writeString(2, this.summary);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.hasExternalDocs)
                writer.writeMessage(4, this.externalDocs, () => this.externalDocs.serialize(writer));
            if (this.operationId.length)
                writer.writeString(5, this.operationId);
            if (this.consumes.length)
                writer.writeRepeatedString(6, this.consumes);
            if (this.produces.length)
                writer.writeRepeatedString(7, this.produces);
            for (const [key, value] of this.responses) {
                writer.writeMessage(9, this.responses, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.schemes.length)
                writer.writePackedEnum(10, this.schemes);
            if (this.deprecated != false)
                writer.writeBool(11, this.deprecated);
            if (this.security.length)
                writer.writeRepeatedMessage(12, this.security, (item: SecurityRequirement) => item.serialize(writer));
            for (const [key, value] of this.extensions) {
                writer.writeMessage(13, this.extensions, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.hasParameters)
                writer.writeMessage(14, this.parameters, () => this.parameters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Operation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Operation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.summary = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.externalDocs, () => message.externalDocs = ExternalDocumentation.deserialize(reader));
                        break;
                    case 5:
                        message.operationId = reader.readString();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 9:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.responses as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = Response.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 10:
                        message.schemes = reader.readPackedEnum();
                        break;
                    case 11:
                        message.deprecated = reader.readBool();
                        break;
                    case 12:
                        reader.readMessage(message.security, () => pb_1.Message.addToRepeatedWrapperField(message, 12, SecurityRequirement.deserialize(reader), SecurityRequirement));
                        break;
                    case 13:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.extensions as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 14:
                        reader.readMessage(message.parameters, () => message.parameters = Parameters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Operation {
            return Operation.deserialize(bytes);
        }
    }
    export class Parameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            headers?: HeaderParameter[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
            }
        }
        get headers() {
            return pb_1.Message.getRepeatedWrapperField(this, HeaderParameter, 1) as HeaderParameter[];
        }
        set headers(value: HeaderParameter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            headers?: ReturnType<typeof HeaderParameter.prototype.toObject>[];
        }): Parameters {
            const message = new Parameters({});
            if (data.headers != null) {
                message.headers = data.headers.map(item => HeaderParameter.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                headers?: ReturnType<typeof HeaderParameter.prototype.toObject>[];
            } = {};
            if (this.headers != null) {
                data.headers = this.headers.map((item: HeaderParameter) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.headers.length)
                writer.writeRepeatedMessage(1, this.headers, (item: HeaderParameter) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Parameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Parameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.headers, () => pb_1.Message.addToRepeatedWrapperField(message, 1, HeaderParameter.deserialize(reader), HeaderParameter));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Parameters {
            return Parameters.deserialize(bytes);
        }
    }
    export class HeaderParameter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            type?: HeaderParameter.Type;
            format?: string;
            required?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
                if ("required" in data && data.required != undefined) {
                    this.required = data.required;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, HeaderParameter.Type.UNKNOWN) as HeaderParameter.Type;
        }
        set type(value: HeaderParameter.Type) {
            pb_1.Message.setField(this, 3, value);
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set format(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get required() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set required(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            type?: HeaderParameter.Type;
            format?: string;
            required?: boolean;
        }): HeaderParameter {
            const message = new HeaderParameter({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.format != null) {
                message.format = data.format;
            }
            if (data.required != null) {
                message.required = data.required;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                type?: HeaderParameter.Type;
                format?: string;
                required?: boolean;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.format != null) {
                data.format = this.format;
            }
            if (this.required != null) {
                data.required = this.required;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.type != HeaderParameter.Type.UNKNOWN)
                writer.writeEnum(3, this.type);
            if (this.format.length)
                writer.writeString(4, this.format);
            if (this.required != false)
                writer.writeBool(5, this.required);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HeaderParameter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HeaderParameter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.type = reader.readEnum();
                        break;
                    case 4:
                        message.format = reader.readString();
                        break;
                    case 5:
                        message.required = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HeaderParameter {
            return HeaderParameter.deserialize(bytes);
        }
    }
    export namespace HeaderParameter {
        export enum Type {
            UNKNOWN = 0,
            STRING = 1,
            NUMBER = 2,
            INTEGER = 3,
            BOOLEAN = 4
        }
    }
    export class Header extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            description?: string;
            type?: string;
            format?: string;
            default?: string;
            pattern?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
                if ("default" in data && data.default != undefined) {
                    this.default = data.default;
                }
                if ("pattern" in data && data.pattern != undefined) {
                    this.pattern = data.pattern;
                }
            }
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set format(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get default() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set default(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get pattern() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set pattern(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        static fromObject(data: {
            description?: string;
            type?: string;
            format?: string;
            default?: string;
            pattern?: string;
        }): Header {
            const message = new Header({});
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.format != null) {
                message.format = data.format;
            }
            if (data.default != null) {
                message.default = data.default;
            }
            if (data.pattern != null) {
                message.pattern = data.pattern;
            }
            return message;
        }
        toObject() {
            const data: {
                description?: string;
                type?: string;
                format?: string;
                default?: string;
                pattern?: string;
            } = {};
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.format != null) {
                data.format = this.format;
            }
            if (this.default != null) {
                data.default = this.default;
            }
            if (this.pattern != null) {
                data.pattern = this.pattern;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.description.length)
                writer.writeString(1, this.description);
            if (this.type.length)
                writer.writeString(2, this.type);
            if (this.format.length)
                writer.writeString(3, this.format);
            if (this.default.length)
                writer.writeString(6, this.default);
            if (this.pattern.length)
                writer.writeString(13, this.pattern);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Header {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Header();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.description = reader.readString();
                        break;
                    case 2:
                        message.type = reader.readString();
                        break;
                    case 3:
                        message.format = reader.readString();
                        break;
                    case 6:
                        message.default = reader.readString();
                        break;
                    case 13:
                        message.pattern = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Header {
            return Header.deserialize(bytes);
        }
    }
    export class Response extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            description?: string;
            schema?: Schema;
            headers?: Map<string, Header>;
            examples?: Map<string, string>;
            extensions?: Map<string, dependency_1.google.protobuf.Value>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("schema" in data && data.schema != undefined) {
                    this.schema = data.schema;
                }
                if ("headers" in data && data.headers != undefined) {
                    this.headers = data.headers;
                }
                if ("examples" in data && data.examples != undefined) {
                    this.examples = data.examples;
                }
                if ("extensions" in data && data.extensions != undefined) {
                    this.extensions = data.extensions;
                }
            }
            if (!this.headers)
                this.headers = new Map();
            if (!this.examples)
                this.examples = new Map();
            if (!this.extensions)
                this.extensions = new Map();
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get schema() {
            return pb_1.Message.getWrapperField(this, Schema, 2) as Schema;
        }
        set schema(value: Schema) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasSchema() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get headers() {
            return pb_1.Message.getField(this, 3) as any as Map<string, Header>;
        }
        set headers(value: Map<string, Header>) {
            pb_1.Message.setField(this, 3, value as any);
        }
        get examples() {
            return pb_1.Message.getField(this, 4) as any as Map<string, string>;
        }
        set examples(value: Map<string, string>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get extensions() {
            return pb_1.Message.getField(this, 5) as any as Map<string, dependency_1.google.protobuf.Value>;
        }
        set extensions(value: Map<string, dependency_1.google.protobuf.Value>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        static fromObject(data: {
            description?: string;
            schema?: ReturnType<typeof Schema.prototype.toObject>;
            headers?: {
                [key: string]: ReturnType<typeof Header.prototype.toObject>;
            };
            examples?: {
                [key: string]: string;
            };
            extensions?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
            };
        }): Response {
            const message = new Response({});
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.schema != null) {
                message.schema = Schema.fromObject(data.schema);
            }
            if (typeof data.headers == "object") {
                message.headers = new Map(Object.entries(data.headers).map(([key, value]) => [key, Header.fromObject(value)]));
            }
            if (typeof data.examples == "object") {
                message.examples = new Map(Object.entries(data.examples));
            }
            if (typeof data.extensions == "object") {
                message.extensions = new Map(Object.entries(data.extensions).map(([key, value]) => [key, dependency_1.google.protobuf.Value.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                description?: string;
                schema?: ReturnType<typeof Schema.prototype.toObject>;
                headers?: {
                    [key: string]: ReturnType<typeof Header.prototype.toObject>;
                };
                examples?: {
                    [key: string]: string;
                };
                extensions?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
                };
            } = {};
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.schema != null) {
                data.schema = this.schema.toObject();
            }
            if (this.headers != null) {
                data.headers = (Object.fromEntries)((Array.from)(this.headers).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.examples != null) {
                data.examples = (Object.fromEntries)(this.examples);
            }
            if (this.extensions != null) {
                data.extensions = (Object.fromEntries)((Array.from)(this.extensions).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.description.length)
                writer.writeString(1, this.description);
            if (this.hasSchema)
                writer.writeMessage(2, this.schema, () => this.schema.serialize(writer));
            for (const [key, value] of this.headers) {
                writer.writeMessage(3, this.headers, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.examples) {
                writer.writeMessage(4, this.examples, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            for (const [key, value] of this.extensions) {
                writer.writeMessage(5, this.extensions, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.description = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.schema, () => message.schema = Schema.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.headers as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = Header.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.examples as any, reader, reader.readString, reader.readString));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.extensions as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Response {
            return Response.deserialize(bytes);
        }
    }
    export class Info extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            title?: string;
            description?: string;
            termsOfService?: string;
            contact?: Contact;
            license?: License;
            version?: string;
            extensions?: Map<string, dependency_1.google.protobuf.Value>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("termsOfService" in data && data.termsOfService != undefined) {
                    this.termsOfService = data.termsOfService;
                }
                if ("contact" in data && data.contact != undefined) {
                    this.contact = data.contact;
                }
                if ("license" in data && data.license != undefined) {
                    this.license = data.license;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("extensions" in data && data.extensions != undefined) {
                    this.extensions = data.extensions;
                }
            }
            if (!this.extensions)
                this.extensions = new Map();
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get termsOfService() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set termsOfService(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get contact() {
            return pb_1.Message.getWrapperField(this, Contact, 4) as Contact;
        }
        set contact(value: Contact) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasContact() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get license() {
            return pb_1.Message.getWrapperField(this, License, 5) as License;
        }
        set license(value: License) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasLicense() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get extensions() {
            return pb_1.Message.getField(this, 7) as any as Map<string, dependency_1.google.protobuf.Value>;
        }
        set extensions(value: Map<string, dependency_1.google.protobuf.Value>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        static fromObject(data: {
            title?: string;
            description?: string;
            termsOfService?: string;
            contact?: ReturnType<typeof Contact.prototype.toObject>;
            license?: ReturnType<typeof License.prototype.toObject>;
            version?: string;
            extensions?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
            };
        }): Info {
            const message = new Info({});
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.termsOfService != null) {
                message.termsOfService = data.termsOfService;
            }
            if (data.contact != null) {
                message.contact = Contact.fromObject(data.contact);
            }
            if (data.license != null) {
                message.license = License.fromObject(data.license);
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (typeof data.extensions == "object") {
                message.extensions = new Map(Object.entries(data.extensions).map(([key, value]) => [key, dependency_1.google.protobuf.Value.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                title?: string;
                description?: string;
                termsOfService?: string;
                contact?: ReturnType<typeof Contact.prototype.toObject>;
                license?: ReturnType<typeof License.prototype.toObject>;
                version?: string;
                extensions?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
                };
            } = {};
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.termsOfService != null) {
                data.termsOfService = this.termsOfService;
            }
            if (this.contact != null) {
                data.contact = this.contact.toObject();
            }
            if (this.license != null) {
                data.license = this.license.toObject();
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.extensions != null) {
                data.extensions = (Object.fromEntries)((Array.from)(this.extensions).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.title.length)
                writer.writeString(1, this.title);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.termsOfService.length)
                writer.writeString(3, this.termsOfService);
            if (this.hasContact)
                writer.writeMessage(4, this.contact, () => this.contact.serialize(writer));
            if (this.hasLicense)
                writer.writeMessage(5, this.license, () => this.license.serialize(writer));
            if (this.version.length)
                writer.writeString(6, this.version);
            for (const [key, value] of this.extensions) {
                writer.writeMessage(7, this.extensions, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Info {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Info();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.title = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.termsOfService = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.contact, () => message.contact = Contact.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.license, () => message.license = License.deserialize(reader));
                        break;
                    case 6:
                        message.version = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.extensions as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Info {
            return Info.deserialize(bytes);
        }
    }
    export class Contact extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            url?: string;
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            url?: string;
            email?: string;
        }): Contact {
            const message = new Contact({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                url?: string;
                email?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (this.email.length)
                writer.writeString(3, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Contact {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Contact();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    case 3:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Contact {
            return Contact.deserialize(bytes);
        }
    }
    export class License extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            url?: string;
        }): License {
            const message = new License({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                url?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): License {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new License();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): License {
            return License.deserialize(bytes);
        }
    }
    export class ExternalDocumentation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            description?: string;
            url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
            }
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            description?: string;
            url?: string;
        }): ExternalDocumentation {
            const message = new ExternalDocumentation({});
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            return message;
        }
        toObject() {
            const data: {
                description?: string;
                url?: string;
            } = {};
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.description.length)
                writer.writeString(1, this.description);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExternalDocumentation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExternalDocumentation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.description = reader.readString();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExternalDocumentation {
            return ExternalDocumentation.deserialize(bytes);
        }
    }
    export class Schema extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            jsonSchema?: JSONSchema;
            discriminator?: string;
            readOnly?: boolean;
            externalDocs?: ExternalDocumentation;
            example?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("jsonSchema" in data && data.jsonSchema != undefined) {
                    this.jsonSchema = data.jsonSchema;
                }
                if ("discriminator" in data && data.discriminator != undefined) {
                    this.discriminator = data.discriminator;
                }
                if ("readOnly" in data && data.readOnly != undefined) {
                    this.readOnly = data.readOnly;
                }
                if ("externalDocs" in data && data.externalDocs != undefined) {
                    this.externalDocs = data.externalDocs;
                }
                if ("example" in data && data.example != undefined) {
                    this.example = data.example;
                }
            }
        }
        get jsonSchema() {
            return pb_1.Message.getWrapperField(this, JSONSchema, 1) as JSONSchema;
        }
        set jsonSchema(value: JSONSchema) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasJsonSchema() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get discriminator() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set discriminator(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get readOnly() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set readOnly(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get externalDocs() {
            return pb_1.Message.getWrapperField(this, ExternalDocumentation, 5) as ExternalDocumentation;
        }
        set externalDocs(value: ExternalDocumentation) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasExternalDocs() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get example() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set example(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            jsonSchema?: ReturnType<typeof JSONSchema.prototype.toObject>;
            discriminator?: string;
            readOnly?: boolean;
            externalDocs?: ReturnType<typeof ExternalDocumentation.prototype.toObject>;
            example?: string;
        }): Schema {
            const message = new Schema({});
            if (data.jsonSchema != null) {
                message.jsonSchema = JSONSchema.fromObject(data.jsonSchema);
            }
            if (data.discriminator != null) {
                message.discriminator = data.discriminator;
            }
            if (data.readOnly != null) {
                message.readOnly = data.readOnly;
            }
            if (data.externalDocs != null) {
                message.externalDocs = ExternalDocumentation.fromObject(data.externalDocs);
            }
            if (data.example != null) {
                message.example = data.example;
            }
            return message;
        }
        toObject() {
            const data: {
                jsonSchema?: ReturnType<typeof JSONSchema.prototype.toObject>;
                discriminator?: string;
                readOnly?: boolean;
                externalDocs?: ReturnType<typeof ExternalDocumentation.prototype.toObject>;
                example?: string;
            } = {};
            if (this.jsonSchema != null) {
                data.jsonSchema = this.jsonSchema.toObject();
            }
            if (this.discriminator != null) {
                data.discriminator = this.discriminator;
            }
            if (this.readOnly != null) {
                data.readOnly = this.readOnly;
            }
            if (this.externalDocs != null) {
                data.externalDocs = this.externalDocs.toObject();
            }
            if (this.example != null) {
                data.example = this.example;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasJsonSchema)
                writer.writeMessage(1, this.jsonSchema, () => this.jsonSchema.serialize(writer));
            if (this.discriminator.length)
                writer.writeString(2, this.discriminator);
            if (this.readOnly != false)
                writer.writeBool(3, this.readOnly);
            if (this.hasExternalDocs)
                writer.writeMessage(5, this.externalDocs, () => this.externalDocs.serialize(writer));
            if (this.example.length)
                writer.writeString(6, this.example);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Schema {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Schema();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.jsonSchema, () => message.jsonSchema = JSONSchema.deserialize(reader));
                        break;
                    case 2:
                        message.discriminator = reader.readString();
                        break;
                    case 3:
                        message.readOnly = reader.readBool();
                        break;
                    case 5:
                        reader.readMessage(message.externalDocs, () => message.externalDocs = ExternalDocumentation.deserialize(reader));
                        break;
                    case 6:
                        message.example = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Schema {
            return Schema.deserialize(bytes);
        }
    }
    export class EnumSchema extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            description?: string;
            default?: string;
            title?: string;
            required?: boolean;
            readOnly?: boolean;
            externalDocs?: ExternalDocumentation;
            example?: string;
            ref?: string;
            extensions?: Map<string, dependency_1.google.protobuf.Value>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("default" in data && data.default != undefined) {
                    this.default = data.default;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("required" in data && data.required != undefined) {
                    this.required = data.required;
                }
                if ("readOnly" in data && data.readOnly != undefined) {
                    this.readOnly = data.readOnly;
                }
                if ("externalDocs" in data && data.externalDocs != undefined) {
                    this.externalDocs = data.externalDocs;
                }
                if ("example" in data && data.example != undefined) {
                    this.example = data.example;
                }
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("extensions" in data && data.extensions != undefined) {
                    this.extensions = data.extensions;
                }
            }
            if (!this.extensions)
                this.extensions = new Map();
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get default() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set default(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get required() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set required(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get readOnly() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set readOnly(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get externalDocs() {
            return pb_1.Message.getWrapperField(this, ExternalDocumentation, 6) as ExternalDocumentation;
        }
        set externalDocs(value: ExternalDocumentation) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasExternalDocs() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get example() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set example(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get extensions() {
            return pb_1.Message.getField(this, 9) as any as Map<string, dependency_1.google.protobuf.Value>;
        }
        set extensions(value: Map<string, dependency_1.google.protobuf.Value>) {
            pb_1.Message.setField(this, 9, value as any);
        }
        static fromObject(data: {
            description?: string;
            default?: string;
            title?: string;
            required?: boolean;
            readOnly?: boolean;
            externalDocs?: ReturnType<typeof ExternalDocumentation.prototype.toObject>;
            example?: string;
            ref?: string;
            extensions?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
            };
        }): EnumSchema {
            const message = new EnumSchema({});
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.default != null) {
                message.default = data.default;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.required != null) {
                message.required = data.required;
            }
            if (data.readOnly != null) {
                message.readOnly = data.readOnly;
            }
            if (data.externalDocs != null) {
                message.externalDocs = ExternalDocumentation.fromObject(data.externalDocs);
            }
            if (data.example != null) {
                message.example = data.example;
            }
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (typeof data.extensions == "object") {
                message.extensions = new Map(Object.entries(data.extensions).map(([key, value]) => [key, dependency_1.google.protobuf.Value.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                description?: string;
                default?: string;
                title?: string;
                required?: boolean;
                readOnly?: boolean;
                externalDocs?: ReturnType<typeof ExternalDocumentation.prototype.toObject>;
                example?: string;
                ref?: string;
                extensions?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
                };
            } = {};
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.default != null) {
                data.default = this.default;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.required != null) {
                data.required = this.required;
            }
            if (this.readOnly != null) {
                data.readOnly = this.readOnly;
            }
            if (this.externalDocs != null) {
                data.externalDocs = this.externalDocs.toObject();
            }
            if (this.example != null) {
                data.example = this.example;
            }
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.extensions != null) {
                data.extensions = (Object.fromEntries)((Array.from)(this.extensions).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.description.length)
                writer.writeString(1, this.description);
            if (this.default.length)
                writer.writeString(2, this.default);
            if (this.title.length)
                writer.writeString(3, this.title);
            if (this.required != false)
                writer.writeBool(4, this.required);
            if (this.readOnly != false)
                writer.writeBool(5, this.readOnly);
            if (this.hasExternalDocs)
                writer.writeMessage(6, this.externalDocs, () => this.externalDocs.serialize(writer));
            if (this.example.length)
                writer.writeString(7, this.example);
            if (this.ref.length)
                writer.writeString(8, this.ref);
            for (const [key, value] of this.extensions) {
                writer.writeMessage(9, this.extensions, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnumSchema {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnumSchema();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.description = reader.readString();
                        break;
                    case 2:
                        message.default = reader.readString();
                        break;
                    case 3:
                        message.title = reader.readString();
                        break;
                    case 4:
                        message.required = reader.readBool();
                        break;
                    case 5:
                        message.readOnly = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.externalDocs, () => message.externalDocs = ExternalDocumentation.deserialize(reader));
                        break;
                    case 7:
                        message.example = reader.readString();
                        break;
                    case 8:
                        message.ref = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.extensions as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnumSchema {
            return EnumSchema.deserialize(bytes);
        }
    }
    export class JSONSchema extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ref?: string;
            title?: string;
            description?: string;
            default?: string;
            readOnly?: boolean;
            example?: string;
            multipleOf?: number;
            maximum?: number;
            exclusiveMaximum?: boolean;
            minimum?: number;
            exclusiveMinimum?: boolean;
            maxLength?: number;
            minLength?: number;
            pattern?: string;
            maxItems?: number;
            minItems?: number;
            uniqueItems?: boolean;
            maxProperties?: number;
            minProperties?: number;
            required?: string[];
            array?: string[];
            type?: JSONSchema.JSONSchemaSimpleTypes[];
            format?: string;
            enum?: string[];
            fieldConfiguration?: JSONSchema.FieldConfiguration;
            extensions?: Map<string, dependency_1.google.protobuf.Value>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [26, 34, 35, 46], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ref" in data && data.ref != undefined) {
                    this.ref = data.ref;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("default" in data && data.default != undefined) {
                    this.default = data.default;
                }
                if ("readOnly" in data && data.readOnly != undefined) {
                    this.readOnly = data.readOnly;
                }
                if ("example" in data && data.example != undefined) {
                    this.example = data.example;
                }
                if ("multipleOf" in data && data.multipleOf != undefined) {
                    this.multipleOf = data.multipleOf;
                }
                if ("maximum" in data && data.maximum != undefined) {
                    this.maximum = data.maximum;
                }
                if ("exclusiveMaximum" in data && data.exclusiveMaximum != undefined) {
                    this.exclusiveMaximum = data.exclusiveMaximum;
                }
                if ("minimum" in data && data.minimum != undefined) {
                    this.minimum = data.minimum;
                }
                if ("exclusiveMinimum" in data && data.exclusiveMinimum != undefined) {
                    this.exclusiveMinimum = data.exclusiveMinimum;
                }
                if ("maxLength" in data && data.maxLength != undefined) {
                    this.maxLength = data.maxLength;
                }
                if ("minLength" in data && data.minLength != undefined) {
                    this.minLength = data.minLength;
                }
                if ("pattern" in data && data.pattern != undefined) {
                    this.pattern = data.pattern;
                }
                if ("maxItems" in data && data.maxItems != undefined) {
                    this.maxItems = data.maxItems;
                }
                if ("minItems" in data && data.minItems != undefined) {
                    this.minItems = data.minItems;
                }
                if ("uniqueItems" in data && data.uniqueItems != undefined) {
                    this.uniqueItems = data.uniqueItems;
                }
                if ("maxProperties" in data && data.maxProperties != undefined) {
                    this.maxProperties = data.maxProperties;
                }
                if ("minProperties" in data && data.minProperties != undefined) {
                    this.minProperties = data.minProperties;
                }
                if ("required" in data && data.required != undefined) {
                    this.required = data.required;
                }
                if ("array" in data && data.array != undefined) {
                    this.array = data.array;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
                if ("enum" in data && data.enum != undefined) {
                    this.enum = data.enum;
                }
                if ("fieldConfiguration" in data && data.fieldConfiguration != undefined) {
                    this.fieldConfiguration = data.fieldConfiguration;
                }
                if ("extensions" in data && data.extensions != undefined) {
                    this.extensions = data.extensions;
                }
            }
            if (!this.extensions)
                this.extensions = new Map();
        }
        get ref() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ref(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get default() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set default(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get readOnly() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set readOnly(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get example() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set example(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get multipleOf() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set multipleOf(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get maximum() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set maximum(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get exclusiveMaximum() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set exclusiveMaximum(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get minimum() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set minimum(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get exclusiveMinimum() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set exclusiveMinimum(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get maxLength() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set maxLength(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get minLength() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set minLength(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get pattern() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set pattern(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get maxItems() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set maxItems(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        get minItems() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set minItems(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get uniqueItems() {
            return pb_1.Message.getFieldWithDefault(this, 22, false) as boolean;
        }
        set uniqueItems(value: boolean) {
            pb_1.Message.setField(this, 22, value);
        }
        get maxProperties() {
            return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
        }
        set maxProperties(value: number) {
            pb_1.Message.setField(this, 24, value);
        }
        get minProperties() {
            return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
        }
        set minProperties(value: number) {
            pb_1.Message.setField(this, 25, value);
        }
        get required() {
            return pb_1.Message.getFieldWithDefault(this, 26, []) as string[];
        }
        set required(value: string[]) {
            pb_1.Message.setField(this, 26, value);
        }
        get array() {
            return pb_1.Message.getFieldWithDefault(this, 34, []) as string[];
        }
        set array(value: string[]) {
            pb_1.Message.setField(this, 34, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 35, []) as JSONSchema.JSONSchemaSimpleTypes[];
        }
        set type(value: JSONSchema.JSONSchemaSimpleTypes[]) {
            pb_1.Message.setField(this, 35, value);
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 36, "") as string;
        }
        set format(value: string) {
            pb_1.Message.setField(this, 36, value);
        }
        get enum() {
            return pb_1.Message.getFieldWithDefault(this, 46, []) as string[];
        }
        set enum(value: string[]) {
            pb_1.Message.setField(this, 46, value);
        }
        get fieldConfiguration() {
            return pb_1.Message.getWrapperField(this, JSONSchema.FieldConfiguration, 1001) as JSONSchema.FieldConfiguration;
        }
        set fieldConfiguration(value: JSONSchema.FieldConfiguration) {
            pb_1.Message.setWrapperField(this, 1001, value);
        }
        get hasFieldConfiguration() {
            return pb_1.Message.getField(this, 1001) != null;
        }
        get extensions() {
            return pb_1.Message.getField(this, 48) as any as Map<string, dependency_1.google.protobuf.Value>;
        }
        set extensions(value: Map<string, dependency_1.google.protobuf.Value>) {
            pb_1.Message.setField(this, 48, value as any);
        }
        static fromObject(data: {
            ref?: string;
            title?: string;
            description?: string;
            default?: string;
            readOnly?: boolean;
            example?: string;
            multipleOf?: number;
            maximum?: number;
            exclusiveMaximum?: boolean;
            minimum?: number;
            exclusiveMinimum?: boolean;
            maxLength?: number;
            minLength?: number;
            pattern?: string;
            maxItems?: number;
            minItems?: number;
            uniqueItems?: boolean;
            maxProperties?: number;
            minProperties?: number;
            required?: string[];
            array?: string[];
            type?: JSONSchema.JSONSchemaSimpleTypes[];
            format?: string;
            enum?: string[];
            fieldConfiguration?: ReturnType<typeof JSONSchema.FieldConfiguration.prototype.toObject>;
            extensions?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
            };
        }): JSONSchema {
            const message = new JSONSchema({});
            if (data.ref != null) {
                message.ref = data.ref;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.default != null) {
                message.default = data.default;
            }
            if (data.readOnly != null) {
                message.readOnly = data.readOnly;
            }
            if (data.example != null) {
                message.example = data.example;
            }
            if (data.multipleOf != null) {
                message.multipleOf = data.multipleOf;
            }
            if (data.maximum != null) {
                message.maximum = data.maximum;
            }
            if (data.exclusiveMaximum != null) {
                message.exclusiveMaximum = data.exclusiveMaximum;
            }
            if (data.minimum != null) {
                message.minimum = data.minimum;
            }
            if (data.exclusiveMinimum != null) {
                message.exclusiveMinimum = data.exclusiveMinimum;
            }
            if (data.maxLength != null) {
                message.maxLength = data.maxLength;
            }
            if (data.minLength != null) {
                message.minLength = data.minLength;
            }
            if (data.pattern != null) {
                message.pattern = data.pattern;
            }
            if (data.maxItems != null) {
                message.maxItems = data.maxItems;
            }
            if (data.minItems != null) {
                message.minItems = data.minItems;
            }
            if (data.uniqueItems != null) {
                message.uniqueItems = data.uniqueItems;
            }
            if (data.maxProperties != null) {
                message.maxProperties = data.maxProperties;
            }
            if (data.minProperties != null) {
                message.minProperties = data.minProperties;
            }
            if (data.required != null) {
                message.required = data.required;
            }
            if (data.array != null) {
                message.array = data.array;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.format != null) {
                message.format = data.format;
            }
            if (data.enum != null) {
                message.enum = data.enum;
            }
            if (data.fieldConfiguration != null) {
                message.fieldConfiguration = JSONSchema.FieldConfiguration.fromObject(data.fieldConfiguration);
            }
            if (typeof data.extensions == "object") {
                message.extensions = new Map(Object.entries(data.extensions).map(([key, value]) => [key, dependency_1.google.protobuf.Value.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                ref?: string;
                title?: string;
                description?: string;
                default?: string;
                readOnly?: boolean;
                example?: string;
                multipleOf?: number;
                maximum?: number;
                exclusiveMaximum?: boolean;
                minimum?: number;
                exclusiveMinimum?: boolean;
                maxLength?: number;
                minLength?: number;
                pattern?: string;
                maxItems?: number;
                minItems?: number;
                uniqueItems?: boolean;
                maxProperties?: number;
                minProperties?: number;
                required?: string[];
                array?: string[];
                type?: JSONSchema.JSONSchemaSimpleTypes[];
                format?: string;
                enum?: string[];
                fieldConfiguration?: ReturnType<typeof JSONSchema.FieldConfiguration.prototype.toObject>;
                extensions?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
                };
            } = {};
            if (this.ref != null) {
                data.ref = this.ref;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.default != null) {
                data.default = this.default;
            }
            if (this.readOnly != null) {
                data.readOnly = this.readOnly;
            }
            if (this.example != null) {
                data.example = this.example;
            }
            if (this.multipleOf != null) {
                data.multipleOf = this.multipleOf;
            }
            if (this.maximum != null) {
                data.maximum = this.maximum;
            }
            if (this.exclusiveMaximum != null) {
                data.exclusiveMaximum = this.exclusiveMaximum;
            }
            if (this.minimum != null) {
                data.minimum = this.minimum;
            }
            if (this.exclusiveMinimum != null) {
                data.exclusiveMinimum = this.exclusiveMinimum;
            }
            if (this.maxLength != null) {
                data.maxLength = this.maxLength;
            }
            if (this.minLength != null) {
                data.minLength = this.minLength;
            }
            if (this.pattern != null) {
                data.pattern = this.pattern;
            }
            if (this.maxItems != null) {
                data.maxItems = this.maxItems;
            }
            if (this.minItems != null) {
                data.minItems = this.minItems;
            }
            if (this.uniqueItems != null) {
                data.uniqueItems = this.uniqueItems;
            }
            if (this.maxProperties != null) {
                data.maxProperties = this.maxProperties;
            }
            if (this.minProperties != null) {
                data.minProperties = this.minProperties;
            }
            if (this.required != null) {
                data.required = this.required;
            }
            if (this.array != null) {
                data.array = this.array;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.format != null) {
                data.format = this.format;
            }
            if (this.enum != null) {
                data.enum = this.enum;
            }
            if (this.fieldConfiguration != null) {
                data.fieldConfiguration = this.fieldConfiguration.toObject();
            }
            if (this.extensions != null) {
                data.extensions = (Object.fromEntries)((Array.from)(this.extensions).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ref.length)
                writer.writeString(3, this.ref);
            if (this.title.length)
                writer.writeString(5, this.title);
            if (this.description.length)
                writer.writeString(6, this.description);
            if (this.default.length)
                writer.writeString(7, this.default);
            if (this.readOnly != false)
                writer.writeBool(8, this.readOnly);
            if (this.example.length)
                writer.writeString(9, this.example);
            if (this.multipleOf != 0)
                writer.writeDouble(10, this.multipleOf);
            if (this.maximum != 0)
                writer.writeDouble(11, this.maximum);
            if (this.exclusiveMaximum != false)
                writer.writeBool(12, this.exclusiveMaximum);
            if (this.minimum != 0)
                writer.writeDouble(13, this.minimum);
            if (this.exclusiveMinimum != false)
                writer.writeBool(14, this.exclusiveMinimum);
            if (this.maxLength != 0)
                writer.writeUint64(15, this.maxLength);
            if (this.minLength != 0)
                writer.writeUint64(16, this.minLength);
            if (this.pattern.length)
                writer.writeString(17, this.pattern);
            if (this.maxItems != 0)
                writer.writeUint64(20, this.maxItems);
            if (this.minItems != 0)
                writer.writeUint64(21, this.minItems);
            if (this.uniqueItems != false)
                writer.writeBool(22, this.uniqueItems);
            if (this.maxProperties != 0)
                writer.writeUint64(24, this.maxProperties);
            if (this.minProperties != 0)
                writer.writeUint64(25, this.minProperties);
            if (this.required.length)
                writer.writeRepeatedString(26, this.required);
            if (this.array.length)
                writer.writeRepeatedString(34, this.array);
            if (this.type.length)
                writer.writePackedEnum(35, this.type);
            if (this.format.length)
                writer.writeString(36, this.format);
            if (this.enum.length)
                writer.writeRepeatedString(46, this.enum);
            if (this.hasFieldConfiguration)
                writer.writeMessage(1001, this.fieldConfiguration, () => this.fieldConfiguration.serialize(writer));
            for (const [key, value] of this.extensions) {
                writer.writeMessage(48, this.extensions, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JSONSchema {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JSONSchema();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        message.ref = reader.readString();
                        break;
                    case 5:
                        message.title = reader.readString();
                        break;
                    case 6:
                        message.description = reader.readString();
                        break;
                    case 7:
                        message.default = reader.readString();
                        break;
                    case 8:
                        message.readOnly = reader.readBool();
                        break;
                    case 9:
                        message.example = reader.readString();
                        break;
                    case 10:
                        message.multipleOf = reader.readDouble();
                        break;
                    case 11:
                        message.maximum = reader.readDouble();
                        break;
                    case 12:
                        message.exclusiveMaximum = reader.readBool();
                        break;
                    case 13:
                        message.minimum = reader.readDouble();
                        break;
                    case 14:
                        message.exclusiveMinimum = reader.readBool();
                        break;
                    case 15:
                        message.maxLength = reader.readUint64();
                        break;
                    case 16:
                        message.minLength = reader.readUint64();
                        break;
                    case 17:
                        message.pattern = reader.readString();
                        break;
                    case 20:
                        message.maxItems = reader.readUint64();
                        break;
                    case 21:
                        message.minItems = reader.readUint64();
                        break;
                    case 22:
                        message.uniqueItems = reader.readBool();
                        break;
                    case 24:
                        message.maxProperties = reader.readUint64();
                        break;
                    case 25:
                        message.minProperties = reader.readUint64();
                        break;
                    case 26:
                        pb_1.Message.addToRepeatedField(message, 26, reader.readString());
                        break;
                    case 34:
                        pb_1.Message.addToRepeatedField(message, 34, reader.readString());
                        break;
                    case 35:
                        message.type = reader.readPackedEnum();
                        break;
                    case 36:
                        message.format = reader.readString();
                        break;
                    case 46:
                        pb_1.Message.addToRepeatedField(message, 46, reader.readString());
                        break;
                    case 1001:
                        reader.readMessage(message.fieldConfiguration, () => message.fieldConfiguration = JSONSchema.FieldConfiguration.deserialize(reader));
                        break;
                    case 48:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.extensions as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JSONSchema {
            return JSONSchema.deserialize(bytes);
        }
    }
    export namespace JSONSchema {
        export enum JSONSchemaSimpleTypes {
            UNKNOWN = 0,
            ARRAY = 1,
            BOOLEAN = 2,
            INTEGER = 3,
            NULL = 4,
            NUMBER = 5,
            OBJECT = 6,
            STRING = 7
        }
        export class FieldConfiguration extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                pathParamName?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("pathParamName" in data && data.pathParamName != undefined) {
                        this.pathParamName = data.pathParamName;
                    }
                }
            }
            get pathParamName() {
                return pb_1.Message.getFieldWithDefault(this, 47, "") as string;
            }
            set pathParamName(value: string) {
                pb_1.Message.setField(this, 47, value);
            }
            static fromObject(data: {
                pathParamName?: string;
            }): FieldConfiguration {
                const message = new FieldConfiguration({});
                if (data.pathParamName != null) {
                    message.pathParamName = data.pathParamName;
                }
                return message;
            }
            toObject() {
                const data: {
                    pathParamName?: string;
                } = {};
                if (this.pathParamName != null) {
                    data.pathParamName = this.pathParamName;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.pathParamName.length)
                    writer.writeString(47, this.pathParamName);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldConfiguration {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldConfiguration();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 47:
                            message.pathParamName = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): FieldConfiguration {
                return FieldConfiguration.deserialize(bytes);
            }
        }
    }
    export class Tag extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            description?: string;
            externalDocs?: ExternalDocumentation;
            extensions?: Map<string, dependency_1.google.protobuf.Value>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("externalDocs" in data && data.externalDocs != undefined) {
                    this.externalDocs = data.externalDocs;
                }
                if ("extensions" in data && data.extensions != undefined) {
                    this.extensions = data.extensions;
                }
            }
            if (!this.extensions)
                this.extensions = new Map();
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get externalDocs() {
            return pb_1.Message.getWrapperField(this, ExternalDocumentation, 3) as ExternalDocumentation;
        }
        set externalDocs(value: ExternalDocumentation) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasExternalDocs() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get extensions() {
            return pb_1.Message.getField(this, 4) as any as Map<string, dependency_1.google.protobuf.Value>;
        }
        set extensions(value: Map<string, dependency_1.google.protobuf.Value>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        static fromObject(data: {
            name?: string;
            description?: string;
            externalDocs?: ReturnType<typeof ExternalDocumentation.prototype.toObject>;
            extensions?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
            };
        }): Tag {
            const message = new Tag({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.externalDocs != null) {
                message.externalDocs = ExternalDocumentation.fromObject(data.externalDocs);
            }
            if (typeof data.extensions == "object") {
                message.extensions = new Map(Object.entries(data.extensions).map(([key, value]) => [key, dependency_1.google.protobuf.Value.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                description?: string;
                externalDocs?: ReturnType<typeof ExternalDocumentation.prototype.toObject>;
                extensions?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
                };
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.externalDocs != null) {
                data.externalDocs = this.externalDocs.toObject();
            }
            if (this.extensions != null) {
                data.extensions = (Object.fromEntries)((Array.from)(this.extensions).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.hasExternalDocs)
                writer.writeMessage(3, this.externalDocs, () => this.externalDocs.serialize(writer));
            for (const [key, value] of this.extensions) {
                writer.writeMessage(4, this.extensions, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Tag {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Tag();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.externalDocs, () => message.externalDocs = ExternalDocumentation.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.extensions as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Tag {
            return Tag.deserialize(bytes);
        }
    }
    export class SecurityDefinitions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            security?: Map<string, SecurityScheme>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("security" in data && data.security != undefined) {
                    this.security = data.security;
                }
            }
            if (!this.security)
                this.security = new Map();
        }
        get security() {
            return pb_1.Message.getField(this, 1) as any as Map<string, SecurityScheme>;
        }
        set security(value: Map<string, SecurityScheme>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            security?: {
                [key: string]: ReturnType<typeof SecurityScheme.prototype.toObject>;
            };
        }): SecurityDefinitions {
            const message = new SecurityDefinitions({});
            if (typeof data.security == "object") {
                message.security = new Map(Object.entries(data.security).map(([key, value]) => [key, SecurityScheme.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                security?: {
                    [key: string]: ReturnType<typeof SecurityScheme.prototype.toObject>;
                };
            } = {};
            if (this.security != null) {
                data.security = (Object.fromEntries)((Array.from)(this.security).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.security) {
                writer.writeMessage(1, this.security, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SecurityDefinitions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SecurityDefinitions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.security as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = SecurityScheme.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SecurityDefinitions {
            return SecurityDefinitions.deserialize(bytes);
        }
    }
    export class SecurityScheme extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: SecurityScheme.Type;
            description?: string;
            name?: string;
            in?: SecurityScheme.In;
            flow?: SecurityScheme.Flow;
            authorizationUrl?: string;
            tokenUrl?: string;
            scopes?: Scopes;
            extensions?: Map<string, dependency_1.google.protobuf.Value>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("in" in data && data.in != undefined) {
                    this.in = data.in;
                }
                if ("flow" in data && data.flow != undefined) {
                    this.flow = data.flow;
                }
                if ("authorizationUrl" in data && data.authorizationUrl != undefined) {
                    this.authorizationUrl = data.authorizationUrl;
                }
                if ("tokenUrl" in data && data.tokenUrl != undefined) {
                    this.tokenUrl = data.tokenUrl;
                }
                if ("scopes" in data && data.scopes != undefined) {
                    this.scopes = data.scopes;
                }
                if ("extensions" in data && data.extensions != undefined) {
                    this.extensions = data.extensions;
                }
            }
            if (!this.extensions)
                this.extensions = new Map();
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, SecurityScheme.Type.TYPE_INVALID) as SecurityScheme.Type;
        }
        set type(value: SecurityScheme.Type) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get in() {
            return pb_1.Message.getFieldWithDefault(this, 4, SecurityScheme.In.IN_INVALID) as SecurityScheme.In;
        }
        set in(value: SecurityScheme.In) {
            pb_1.Message.setField(this, 4, value);
        }
        get flow() {
            return pb_1.Message.getFieldWithDefault(this, 5, SecurityScheme.Flow.FLOW_INVALID) as SecurityScheme.Flow;
        }
        set flow(value: SecurityScheme.Flow) {
            pb_1.Message.setField(this, 5, value);
        }
        get authorizationUrl() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set authorizationUrl(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get tokenUrl() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set tokenUrl(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get scopes() {
            return pb_1.Message.getWrapperField(this, Scopes, 8) as Scopes;
        }
        set scopes(value: Scopes) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasScopes() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get extensions() {
            return pb_1.Message.getField(this, 9) as any as Map<string, dependency_1.google.protobuf.Value>;
        }
        set extensions(value: Map<string, dependency_1.google.protobuf.Value>) {
            pb_1.Message.setField(this, 9, value as any);
        }
        static fromObject(data: {
            type?: SecurityScheme.Type;
            description?: string;
            name?: string;
            in?: SecurityScheme.In;
            flow?: SecurityScheme.Flow;
            authorizationUrl?: string;
            tokenUrl?: string;
            scopes?: ReturnType<typeof Scopes.prototype.toObject>;
            extensions?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
            };
        }): SecurityScheme {
            const message = new SecurityScheme({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.in != null) {
                message.in = data.in;
            }
            if (data.flow != null) {
                message.flow = data.flow;
            }
            if (data.authorizationUrl != null) {
                message.authorizationUrl = data.authorizationUrl;
            }
            if (data.tokenUrl != null) {
                message.tokenUrl = data.tokenUrl;
            }
            if (data.scopes != null) {
                message.scopes = Scopes.fromObject(data.scopes);
            }
            if (typeof data.extensions == "object") {
                message.extensions = new Map(Object.entries(data.extensions).map(([key, value]) => [key, dependency_1.google.protobuf.Value.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                type?: SecurityScheme.Type;
                description?: string;
                name?: string;
                in?: SecurityScheme.In;
                flow?: SecurityScheme.Flow;
                authorizationUrl?: string;
                tokenUrl?: string;
                scopes?: ReturnType<typeof Scopes.prototype.toObject>;
                extensions?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Value.prototype.toObject>;
                };
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.in != null) {
                data.in = this.in;
            }
            if (this.flow != null) {
                data.flow = this.flow;
            }
            if (this.authorizationUrl != null) {
                data.authorizationUrl = this.authorizationUrl;
            }
            if (this.tokenUrl != null) {
                data.tokenUrl = this.tokenUrl;
            }
            if (this.scopes != null) {
                data.scopes = this.scopes.toObject();
            }
            if (this.extensions != null) {
                data.extensions = (Object.fromEntries)((Array.from)(this.extensions).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != SecurityScheme.Type.TYPE_INVALID)
                writer.writeEnum(1, this.type);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.in != SecurityScheme.In.IN_INVALID)
                writer.writeEnum(4, this.in);
            if (this.flow != SecurityScheme.Flow.FLOW_INVALID)
                writer.writeEnum(5, this.flow);
            if (this.authorizationUrl.length)
                writer.writeString(6, this.authorizationUrl);
            if (this.tokenUrl.length)
                writer.writeString(7, this.tokenUrl);
            if (this.hasScopes)
                writer.writeMessage(8, this.scopes, () => this.scopes.serialize(writer));
            for (const [key, value] of this.extensions) {
                writer.writeMessage(9, this.extensions, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SecurityScheme {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SecurityScheme();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.in = reader.readEnum();
                        break;
                    case 5:
                        message.flow = reader.readEnum();
                        break;
                    case 6:
                        message.authorizationUrl = reader.readString();
                        break;
                    case 7:
                        message.tokenUrl = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.scopes, () => message.scopes = Scopes.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.extensions as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SecurityScheme {
            return SecurityScheme.deserialize(bytes);
        }
    }
    export namespace SecurityScheme {
        export enum Type {
            TYPE_INVALID = 0,
            TYPE_BASIC = 1,
            TYPE_API_KEY = 2,
            TYPE_OAUTH2 = 3
        }
        export enum In {
            IN_INVALID = 0,
            IN_QUERY = 1,
            IN_HEADER = 2
        }
        export enum Flow {
            FLOW_INVALID = 0,
            FLOW_IMPLICIT = 1,
            FLOW_PASSWORD = 2,
            FLOW_APPLICATION = 3,
            FLOW_ACCESS_CODE = 4
        }
    }
    export class SecurityRequirement extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            securityRequirement?: Map<string, SecurityRequirement.SecurityRequirementValue>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("securityRequirement" in data && data.securityRequirement != undefined) {
                    this.securityRequirement = data.securityRequirement;
                }
            }
            if (!this.securityRequirement)
                this.securityRequirement = new Map();
        }
        get securityRequirement() {
            return pb_1.Message.getField(this, 1) as any as Map<string, SecurityRequirement.SecurityRequirementValue>;
        }
        set securityRequirement(value: Map<string, SecurityRequirement.SecurityRequirementValue>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            securityRequirement?: {
                [key: string]: ReturnType<typeof SecurityRequirement.SecurityRequirementValue.prototype.toObject>;
            };
        }): SecurityRequirement {
            const message = new SecurityRequirement({});
            if (typeof data.securityRequirement == "object") {
                message.securityRequirement = new Map(Object.entries(data.securityRequirement).map(([key, value]) => [key, SecurityRequirement.SecurityRequirementValue.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                securityRequirement?: {
                    [key: string]: ReturnType<typeof SecurityRequirement.SecurityRequirementValue.prototype.toObject>;
                };
            } = {};
            if (this.securityRequirement != null) {
                data.securityRequirement = (Object.fromEntries)((Array.from)(this.securityRequirement).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.securityRequirement) {
                writer.writeMessage(1, this.securityRequirement, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SecurityRequirement {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SecurityRequirement();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.securityRequirement as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = SecurityRequirement.SecurityRequirementValue.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SecurityRequirement {
            return SecurityRequirement.deserialize(bytes);
        }
    }
    export namespace SecurityRequirement {
        export class SecurityRequirementValue extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                scope?: string[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("scope" in data && data.scope != undefined) {
                        this.scope = data.scope;
                    }
                }
            }
            get scope() {
                return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
            }
            set scope(value: string[]) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                scope?: string[];
            }): SecurityRequirementValue {
                const message = new SecurityRequirementValue({});
                if (data.scope != null) {
                    message.scope = data.scope;
                }
                return message;
            }
            toObject() {
                const data: {
                    scope?: string[];
                } = {};
                if (this.scope != null) {
                    data.scope = this.scope;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.scope.length)
                    writer.writeRepeatedString(1, this.scope);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SecurityRequirementValue {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SecurityRequirementValue();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SecurityRequirementValue {
                return SecurityRequirementValue.deserialize(bytes);
            }
        }
    }
    export class Scopes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scope?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scope" in data && data.scope != undefined) {
                    this.scope = data.scope;
                }
            }
            if (!this.scope)
                this.scope = new Map();
        }
        get scope() {
            return pb_1.Message.getField(this, 1) as any as Map<string, string>;
        }
        set scope(value: Map<string, string>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            scope?: {
                [key: string]: string;
            };
        }): Scopes {
            const message = new Scopes({});
            if (typeof data.scope == "object") {
                message.scope = new Map(Object.entries(data.scope));
            }
            return message;
        }
        toObject() {
            const data: {
                scope?: {
                    [key: string]: string;
                };
            } = {};
            if (this.scope != null) {
                data.scope = (Object.fromEntries)(this.scope);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.scope) {
                writer.writeMessage(1, this.scope, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Scopes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Scopes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.scope as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Scopes {
            return Scopes.deserialize(bytes);
        }
    }
}
