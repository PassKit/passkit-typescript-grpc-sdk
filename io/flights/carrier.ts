/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/flights/carrier.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../common/localization";
import * as dependency_2 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace flights {
    export class Carrier extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            iataCarrierCode?: string;
            icaoCarrierCode?: string;
            iataAccountingCode?: number;
            airlineName?: string;
            localizedAirlineName?: dependency_1.io.LocalizedString;
            passTypeIdentifier?: string;
            privateKeyId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("iataCarrierCode" in data && data.iataCarrierCode != undefined) {
                    this.iataCarrierCode = data.iataCarrierCode;
                }
                if ("icaoCarrierCode" in data && data.icaoCarrierCode != undefined) {
                    this.icaoCarrierCode = data.icaoCarrierCode;
                }
                if ("iataAccountingCode" in data && data.iataAccountingCode != undefined) {
                    this.iataAccountingCode = data.iataAccountingCode;
                }
                if ("airlineName" in data && data.airlineName != undefined) {
                    this.airlineName = data.airlineName;
                }
                if ("localizedAirlineName" in data && data.localizedAirlineName != undefined) {
                    this.localizedAirlineName = data.localizedAirlineName;
                }
                if ("passTypeIdentifier" in data && data.passTypeIdentifier != undefined) {
                    this.passTypeIdentifier = data.passTypeIdentifier;
                }
                if ("privateKeyId" in data && data.privateKeyId != undefined) {
                    this.privateKeyId = data.privateKeyId;
                }
            }
        }
        get iataCarrierCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set iataCarrierCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get icaoCarrierCode() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set icaoCarrierCode(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get iataAccountingCode() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set iataAccountingCode(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get airlineName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set airlineName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get localizedAirlineName() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 5) as dependency_1.io.LocalizedString;
        }
        set localizedAirlineName(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasLocalizedAirlineName() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get passTypeIdentifier() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set passTypeIdentifier(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get privateKeyId() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set privateKeyId(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            iataCarrierCode?: string;
            icaoCarrierCode?: string;
            iataAccountingCode?: number;
            airlineName?: string;
            localizedAirlineName?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            passTypeIdentifier?: string;
            privateKeyId?: string;
        }): Carrier {
            const message = new Carrier({});
            if (data.iataCarrierCode != null) {
                message.iataCarrierCode = data.iataCarrierCode;
            }
            if (data.icaoCarrierCode != null) {
                message.icaoCarrierCode = data.icaoCarrierCode;
            }
            if (data.iataAccountingCode != null) {
                message.iataAccountingCode = data.iataAccountingCode;
            }
            if (data.airlineName != null) {
                message.airlineName = data.airlineName;
            }
            if (data.localizedAirlineName != null) {
                message.localizedAirlineName = dependency_1.io.LocalizedString.fromObject(data.localizedAirlineName);
            }
            if (data.passTypeIdentifier != null) {
                message.passTypeIdentifier = data.passTypeIdentifier;
            }
            if (data.privateKeyId != null) {
                message.privateKeyId = data.privateKeyId;
            }
            return message;
        }
        toObject() {
            const data: {
                iataCarrierCode?: string;
                icaoCarrierCode?: string;
                iataAccountingCode?: number;
                airlineName?: string;
                localizedAirlineName?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                passTypeIdentifier?: string;
                privateKeyId?: string;
            } = {};
            if (this.iataCarrierCode != null) {
                data.iataCarrierCode = this.iataCarrierCode;
            }
            if (this.icaoCarrierCode != null) {
                data.icaoCarrierCode = this.icaoCarrierCode;
            }
            if (this.iataAccountingCode != null) {
                data.iataAccountingCode = this.iataAccountingCode;
            }
            if (this.airlineName != null) {
                data.airlineName = this.airlineName;
            }
            if (this.localizedAirlineName != null) {
                data.localizedAirlineName = this.localizedAirlineName.toObject();
            }
            if (this.passTypeIdentifier != null) {
                data.passTypeIdentifier = this.passTypeIdentifier;
            }
            if (this.privateKeyId != null) {
                data.privateKeyId = this.privateKeyId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.iataCarrierCode.length)
                writer.writeString(1, this.iataCarrierCode);
            if (this.icaoCarrierCode.length)
                writer.writeString(2, this.icaoCarrierCode);
            if (this.iataAccountingCode != 0)
                writer.writeInt32(3, this.iataAccountingCode);
            if (this.airlineName.length)
                writer.writeString(4, this.airlineName);
            if (this.hasLocalizedAirlineName)
                writer.writeMessage(5, this.localizedAirlineName, () => this.localizedAirlineName.serialize(writer));
            if (this.passTypeIdentifier.length)
                writer.writeString(6, this.passTypeIdentifier);
            if (this.privateKeyId.length)
                writer.writeString(7, this.privateKeyId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Carrier {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Carrier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.iataCarrierCode = reader.readString();
                        break;
                    case 2:
                        message.icaoCarrierCode = reader.readString();
                        break;
                    case 3:
                        message.iataAccountingCode = reader.readInt32();
                        break;
                    case 4:
                        message.airlineName = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.localizedAirlineName, () => message.localizedAirlineName = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 6:
                        message.passTypeIdentifier = reader.readString();
                        break;
                    case 7:
                        message.privateKeyId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Carrier {
            return Carrier.deserialize(bytes);
        }
    }
    export class CarrierCode extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            carrierCode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("carrierCode" in data && data.carrierCode != undefined) {
                    this.carrierCode = data.carrierCode;
                }
            }
        }
        get carrierCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set carrierCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            carrierCode?: string;
        }): CarrierCode {
            const message = new CarrierCode({});
            if (data.carrierCode != null) {
                message.carrierCode = data.carrierCode;
            }
            return message;
        }
        toObject() {
            const data: {
                carrierCode?: string;
            } = {};
            if (this.carrierCode != null) {
                data.carrierCode = this.carrierCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.carrierCode.length)
                writer.writeString(1, this.carrierCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CarrierCode {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CarrierCode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.carrierCode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CarrierCode {
            return CarrierCode.deserialize(bytes);
        }
    }
}
