/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/single_use_coupons/campaign.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./../common/localization";
import * as dependency_3 from "./../common/project";
import * as dependency_4 from "./../common/reporting";
import * as dependency_5 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace single_use_coupons {
    export class CouponCampaign extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            localizedName?: dependency_2.io.LocalizedString;
            status?: dependency_3.io.ProjectStatus[];
            passTypeIdentifier?: string;
            ianaTimezone?: string;
            created?: dependency_1.google.protobuf.Timestamp;
            updated?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("localizedName" in data && data.localizedName != undefined) {
                    this.localizedName = data.localizedName;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("passTypeIdentifier" in data && data.passTypeIdentifier != undefined) {
                    this.passTypeIdentifier = data.passTypeIdentifier;
                }
                if ("ianaTimezone" in data && data.ianaTimezone != undefined) {
                    this.ianaTimezone = data.ianaTimezone;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get localizedName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 3) as dependency_2.io.LocalizedString;
        }
        set localizedName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocalizedName() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as dependency_3.io.ProjectStatus[];
        }
        set status(value: dependency_3.io.ProjectStatus[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get passTypeIdentifier() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set passTypeIdentifier(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get ianaTimezone() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set ianaTimezone(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 10) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 11) as dependency_1.google.protobuf.Timestamp;
        }
        set updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasUpdated() {
            return pb_1.Message.getField(this, 11) != null;
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            localizedName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            status?: dependency_3.io.ProjectStatus[];
            passTypeIdentifier?: string;
            ianaTimezone?: string;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): CouponCampaign {
            const message = new CouponCampaign({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.localizedName != null) {
                message.localizedName = dependency_2.io.LocalizedString.fromObject(data.localizedName);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.passTypeIdentifier != null) {
                message.passTypeIdentifier = data.passTypeIdentifier;
            }
            if (data.ianaTimezone != null) {
                message.ianaTimezone = data.ianaTimezone;
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_1.google.protobuf.Timestamp.fromObject(data.updated);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                localizedName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                status?: dependency_3.io.ProjectStatus[];
                passTypeIdentifier?: string;
                ianaTimezone?: string;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.localizedName != null) {
                data.localizedName = this.localizedName.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.passTypeIdentifier != null) {
                data.passTypeIdentifier = this.passTypeIdentifier;
            }
            if (this.ianaTimezone != null) {
                data.ianaTimezone = this.ianaTimezone;
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.hasLocalizedName)
                writer.writeMessage(3, this.localizedName, () => this.localizedName.serialize(writer));
            if (this.status.length)
                writer.writePackedEnum(5, this.status);
            if (this.passTypeIdentifier.length)
                writer.writeString(6, this.passTypeIdentifier);
            if (this.ianaTimezone.length)
                writer.writeString(7, this.ianaTimezone);
            if (this.hasCreated)
                writer.writeMessage(10, this.created, () => this.created.serialize(writer));
            if (this.hasUpdated)
                writer.writeMessage(11, this.updated, () => this.updated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CouponCampaign {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CouponCampaign();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.localizedName, () => message.localizedName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 5:
                        message.status = reader.readPackedEnum();
                        break;
                    case 6:
                        message.passTypeIdentifier = reader.readString();
                        break;
                    case 7:
                        message.ianaTimezone = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.updated, () => message.updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CouponCampaign {
            return CouponCampaign.deserialize(bytes);
        }
    }
    export class CouponCampaignAnalyticsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            period?: dependency_4.io.Period;
            redeemed?: number;
            devices?: dependency_4.io.DeviceBreakdown;
            sources?: Map<string, number>;
            data?: dependency_4.io.ChartDataPoints[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("period" in data && data.period != undefined) {
                    this.period = data.period;
                }
                if ("redeemed" in data && data.redeemed != undefined) {
                    this.redeemed = data.redeemed;
                }
                if ("devices" in data && data.devices != undefined) {
                    this.devices = data.devices;
                }
                if ("sources" in data && data.sources != undefined) {
                    this.sources = data.sources;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
            if (!this.sources)
                this.sources = new Map();
        }
        get period() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_4.io.Period.DAY) as dependency_4.io.Period;
        }
        set period(value: dependency_4.io.Period) {
            pb_1.Message.setField(this, 1, value);
        }
        get redeemed() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set redeemed(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get devices() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.DeviceBreakdown, 3) as dependency_4.io.DeviceBreakdown;
        }
        set devices(value: dependency_4.io.DeviceBreakdown) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasDevices() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get sources() {
            return pb_1.Message.getField(this, 4) as any as Map<string, number>;
        }
        set sources(value: Map<string, number>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.io.ChartDataPoints, 5) as dependency_4.io.ChartDataPoints[];
        }
        set data(value: dependency_4.io.ChartDataPoints[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            period?: dependency_4.io.Period;
            redeemed?: number;
            devices?: ReturnType<typeof dependency_4.io.DeviceBreakdown.prototype.toObject>;
            sources?: {
                [key: string]: number;
            };
            data?: ReturnType<typeof dependency_4.io.ChartDataPoints.prototype.toObject>[];
        }): CouponCampaignAnalyticsResponse {
            const message = new CouponCampaignAnalyticsResponse({});
            if (data.period != null) {
                message.period = data.period;
            }
            if (data.redeemed != null) {
                message.redeemed = data.redeemed;
            }
            if (data.devices != null) {
                message.devices = dependency_4.io.DeviceBreakdown.fromObject(data.devices);
            }
            if (typeof data.sources == "object") {
                message.sources = new Map(Object.entries(data.sources));
            }
            if (data.data != null) {
                message.data = data.data.map(item => dependency_4.io.ChartDataPoints.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                period?: dependency_4.io.Period;
                redeemed?: number;
                devices?: ReturnType<typeof dependency_4.io.DeviceBreakdown.prototype.toObject>;
                sources?: {
                    [key: string]: number;
                };
                data?: ReturnType<typeof dependency_4.io.ChartDataPoints.prototype.toObject>[];
            } = {};
            if (this.period != null) {
                data.period = this.period;
            }
            if (this.redeemed != null) {
                data.redeemed = this.redeemed;
            }
            if (this.devices != null) {
                data.devices = this.devices.toObject();
            }
            if (this.sources != null) {
                data.sources = (Object.fromEntries)(this.sources);
            }
            if (this.data != null) {
                data.data = this.data.map((item: dependency_4.io.ChartDataPoints) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.period != dependency_4.io.Period.DAY)
                writer.writeEnum(1, this.period);
            if (this.redeemed != 0)
                writer.writeUint32(2, this.redeemed);
            if (this.hasDevices)
                writer.writeMessage(3, this.devices, () => this.devices.serialize(writer));
            for (const [key, value] of this.sources) {
                writer.writeMessage(4, this.sources, () => {
                    writer.writeString(1, key);
                    writer.writeUint32(2, value);
                });
            }
            if (this.data.length)
                writer.writeRepeatedMessage(5, this.data, (item: dependency_4.io.ChartDataPoints) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CouponCampaignAnalyticsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CouponCampaignAnalyticsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.period = reader.readEnum();
                        break;
                    case 2:
                        message.redeemed = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.devices, () => message.devices = dependency_4.io.DeviceBreakdown.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.sources as any, reader, reader.readString, reader.readUint32));
                        break;
                    case 5:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_4.io.ChartDataPoints.deserialize(reader), dependency_4.io.ChartDataPoints));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CouponCampaignAnalyticsResponse {
            return CouponCampaignAnalyticsResponse.deserialize(bytes);
        }
    }
    export class CampaignCopyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            status?: dependency_3.io.ProjectStatus[];
            passTypeIdentifier?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("passTypeIdentifier" in data && data.passTypeIdentifier != undefined) {
                    this.passTypeIdentifier = data.passTypeIdentifier;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as dependency_3.io.ProjectStatus[];
        }
        set status(value: dependency_3.io.ProjectStatus[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get passTypeIdentifier() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set passTypeIdentifier(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            status?: dependency_3.io.ProjectStatus[];
            passTypeIdentifier?: string;
        }): CampaignCopyRequest {
            const message = new CampaignCopyRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.passTypeIdentifier != null) {
                message.passTypeIdentifier = data.passTypeIdentifier;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                status?: dependency_3.io.ProjectStatus[];
                passTypeIdentifier?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.passTypeIdentifier != null) {
                data.passTypeIdentifier = this.passTypeIdentifier;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.status.length)
                writer.writePackedEnum(3, this.status);
            if (this.passTypeIdentifier.length)
                writer.writeString(4, this.passTypeIdentifier);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CampaignCopyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CampaignCopyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.status = reader.readPackedEnum();
                        break;
                    case 4:
                        message.passTypeIdentifier = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CampaignCopyRequest {
            return CampaignCopyRequest.deserialize(bytes);
        }
    }
}
