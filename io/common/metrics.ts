/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/metrics.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./attributes";
import * as pb_1 from "google-protobuf";
export namespace io {
    export enum LifecycleEvents {
        NO_STATUS = 0,
        RENDERED = 1,
        INSTALLED_APPLE = 2,
        INSTALLED_GOOGLE = 4,
        INSTALLED_ANDROID_OTHER = 8,
        UNINSTALLED_APPLE = 1024,
        UNINSTALLED_GOOGLE = 2048,
        UNINSTALLED_ANDROID_OTHER = 4096,
        APPLE_PASS_CREATED = 8192,
        GOOGLE_PAY_RECORD_CREATED = 16384,
        INVALIDATE_REQUESTED = 262144,
        INVALIDATE_CONFIRMED = 524288,
        PASS_PERSONALISATION_REQUESTED = 1048576,
        PASS_PERSONALISED = 2097152,
        PASS_ICLOUD_BOUND = 4194304,
        PASS_EMAIL_BOUNCED = 8388608,
        PASS_EMAIL_COMPLAINED = 16777216
    }
    export enum Status {
        PASS_ISSUED = 0,
        PASS_INSTALLED = 1,
        PASS_UNINSTALLED = 2,
        PASS_INVALIDATED = 3
    }
    export class Metrics extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            created?: number;
            appleWalletInstalls?: number;
            googlePayInstalls?: number;
            otherAndroidInstalls?: number;
            appleWalletUninstalls?: number;
            googlePayUninstalls?: number;
            otherAndroidUninstalls?: number;
            invalidations?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("appleWalletInstalls" in data && data.appleWalletInstalls != undefined) {
                    this.appleWalletInstalls = data.appleWalletInstalls;
                }
                if ("googlePayInstalls" in data && data.googlePayInstalls != undefined) {
                    this.googlePayInstalls = data.googlePayInstalls;
                }
                if ("otherAndroidInstalls" in data && data.otherAndroidInstalls != undefined) {
                    this.otherAndroidInstalls = data.otherAndroidInstalls;
                }
                if ("appleWalletUninstalls" in data && data.appleWalletUninstalls != undefined) {
                    this.appleWalletUninstalls = data.appleWalletUninstalls;
                }
                if ("googlePayUninstalls" in data && data.googlePayUninstalls != undefined) {
                    this.googlePayUninstalls = data.googlePayUninstalls;
                }
                if ("otherAndroidUninstalls" in data && data.otherAndroidUninstalls != undefined) {
                    this.otherAndroidUninstalls = data.otherAndroidUninstalls;
                }
                if ("invalidations" in data && data.invalidations != undefined) {
                    this.invalidations = data.invalidations;
                }
            }
        }
        get created() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set created(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get appleWalletInstalls() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set appleWalletInstalls(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get googlePayInstalls() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set googlePayInstalls(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get otherAndroidInstalls() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set otherAndroidInstalls(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get appleWalletUninstalls() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set appleWalletUninstalls(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get googlePayUninstalls() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set googlePayUninstalls(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get otherAndroidUninstalls() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set otherAndroidUninstalls(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get invalidations() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set invalidations(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        static fromObject(data: {
            created?: number;
            appleWalletInstalls?: number;
            googlePayInstalls?: number;
            otherAndroidInstalls?: number;
            appleWalletUninstalls?: number;
            googlePayUninstalls?: number;
            otherAndroidUninstalls?: number;
            invalidations?: number;
        }): Metrics {
            const message = new Metrics({});
            if (data.created != null) {
                message.created = data.created;
            }
            if (data.appleWalletInstalls != null) {
                message.appleWalletInstalls = data.appleWalletInstalls;
            }
            if (data.googlePayInstalls != null) {
                message.googlePayInstalls = data.googlePayInstalls;
            }
            if (data.otherAndroidInstalls != null) {
                message.otherAndroidInstalls = data.otherAndroidInstalls;
            }
            if (data.appleWalletUninstalls != null) {
                message.appleWalletUninstalls = data.appleWalletUninstalls;
            }
            if (data.googlePayUninstalls != null) {
                message.googlePayUninstalls = data.googlePayUninstalls;
            }
            if (data.otherAndroidUninstalls != null) {
                message.otherAndroidUninstalls = data.otherAndroidUninstalls;
            }
            if (data.invalidations != null) {
                message.invalidations = data.invalidations;
            }
            return message;
        }
        toObject() {
            const data: {
                created?: number;
                appleWalletInstalls?: number;
                googlePayInstalls?: number;
                otherAndroidInstalls?: number;
                appleWalletUninstalls?: number;
                googlePayUninstalls?: number;
                otherAndroidUninstalls?: number;
                invalidations?: number;
            } = {};
            if (this.created != null) {
                data.created = this.created;
            }
            if (this.appleWalletInstalls != null) {
                data.appleWalletInstalls = this.appleWalletInstalls;
            }
            if (this.googlePayInstalls != null) {
                data.googlePayInstalls = this.googlePayInstalls;
            }
            if (this.otherAndroidInstalls != null) {
                data.otherAndroidInstalls = this.otherAndroidInstalls;
            }
            if (this.appleWalletUninstalls != null) {
                data.appleWalletUninstalls = this.appleWalletUninstalls;
            }
            if (this.googlePayUninstalls != null) {
                data.googlePayUninstalls = this.googlePayUninstalls;
            }
            if (this.otherAndroidUninstalls != null) {
                data.otherAndroidUninstalls = this.otherAndroidUninstalls;
            }
            if (this.invalidations != null) {
                data.invalidations = this.invalidations;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.created != 0)
                writer.writeUint64(1, this.created);
            if (this.appleWalletInstalls != 0)
                writer.writeUint64(2, this.appleWalletInstalls);
            if (this.googlePayInstalls != 0)
                writer.writeUint64(3, this.googlePayInstalls);
            if (this.otherAndroidInstalls != 0)
                writer.writeUint64(4, this.otherAndroidInstalls);
            if (this.appleWalletUninstalls != 0)
                writer.writeUint64(11, this.appleWalletUninstalls);
            if (this.googlePayUninstalls != 0)
                writer.writeUint64(12, this.googlePayUninstalls);
            if (this.otherAndroidUninstalls != 0)
                writer.writeUint64(13, this.otherAndroidUninstalls);
            if (this.invalidations != 0)
                writer.writeUint64(20, this.invalidations);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Metrics {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metrics();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.created = reader.readUint64();
                        break;
                    case 2:
                        message.appleWalletInstalls = reader.readUint64();
                        break;
                    case 3:
                        message.googlePayInstalls = reader.readUint64();
                        break;
                    case 4:
                        message.otherAndroidInstalls = reader.readUint64();
                        break;
                    case 11:
                        message.appleWalletUninstalls = reader.readUint64();
                        break;
                    case 12:
                        message.googlePayUninstalls = reader.readUint64();
                        break;
                    case 13:
                        message.otherAndroidUninstalls = reader.readUint64();
                        break;
                    case 20:
                        message.invalidations = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Metrics {
            return Metrics.deserialize(bytes);
        }
    }
    export class UTM extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            source?: string;
            medium?: string;
            name?: string;
            term?: string;
            content?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("source" in data && data.source != undefined) {
                    this.source = data.source;
                }
                if ("medium" in data && data.medium != undefined) {
                    this.medium = data.medium;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("term" in data && data.term != undefined) {
                    this.term = data.term;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get source() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set source(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get medium() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set medium(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get term() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set term(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            source?: string;
            medium?: string;
            name?: string;
            term?: string;
            content?: string;
        }): UTM {
            const message = new UTM({});
            if (data.source != null) {
                message.source = data.source;
            }
            if (data.medium != null) {
                message.medium = data.medium;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.term != null) {
                message.term = data.term;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            return message;
        }
        toObject() {
            const data: {
                source?: string;
                medium?: string;
                name?: string;
                term?: string;
                content?: string;
            } = {};
            if (this.source != null) {
                data.source = this.source;
            }
            if (this.medium != null) {
                data.medium = this.medium;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.term != null) {
                data.term = this.term;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.source.length)
                writer.writeString(1, this.source);
            if (this.medium.length)
                writer.writeString(2, this.medium);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.term.length)
                writer.writeString(4, this.term);
            if (this.content.length)
                writer.writeString(5, this.content);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UTM {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UTM();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.source = reader.readString();
                        break;
                    case 2:
                        message.medium = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.term = reader.readString();
                        break;
                    case 5:
                        message.content = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UTM {
            return UTM.deserialize(bytes);
        }
    }
    export class MetaLocation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            country?: string;
            city?: string;
            state?: string;
            latitude?: number;
            longitude?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("city" in data && data.city != undefined) {
                    this.city = data.city;
                }
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("latitude" in data && data.latitude != undefined) {
                    this.latitude = data.latitude;
                }
                if ("longitude" in data && data.longitude != undefined) {
                    this.longitude = data.longitude;
                }
            }
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get city() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set city(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get latitude() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set latitude(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get longitude() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set longitude(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            country?: string;
            city?: string;
            state?: string;
            latitude?: number;
            longitude?: number;
        }): MetaLocation {
            const message = new MetaLocation({});
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.city != null) {
                message.city = data.city;
            }
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.latitude != null) {
                message.latitude = data.latitude;
            }
            if (data.longitude != null) {
                message.longitude = data.longitude;
            }
            return message;
        }
        toObject() {
            const data: {
                country?: string;
                city?: string;
                state?: string;
                latitude?: number;
                longitude?: number;
            } = {};
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.city != null) {
                data.city = this.city;
            }
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.latitude != null) {
                data.latitude = this.latitude;
            }
            if (this.longitude != null) {
                data.longitude = this.longitude;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.country.length)
                writer.writeString(1, this.country);
            if (this.city.length)
                writer.writeString(2, this.city);
            if (this.state.length)
                writer.writeString(3, this.state);
            if (this.latitude != 0)
                writer.writeDouble(4, this.latitude);
            if (this.longitude != 0)
                writer.writeDouble(5, this.longitude);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MetaLocation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MetaLocation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.country = reader.readString();
                        break;
                    case 2:
                        message.city = reader.readString();
                        break;
                    case 3:
                        message.state = reader.readString();
                        break;
                    case 4:
                        message.latitude = reader.readDouble();
                        break;
                    case 5:
                        message.longitude = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MetaLocation {
            return MetaLocation.deserialize(bytes);
        }
    }
    export class Metadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: Status;
            lifecycleEvents?: LifecycleEvents[];
            utm?: UTM;
            altId?: string;
            issueIpAddress?: string;
            installIpAddress?: string;
            renderLocation?: MetaLocation;
            renderIpAddress?: string;
            installUserAgent?: string;
            renderUserAgent?: string;
            installDeviceAttributes?: dependency_2.io.DeviceAttributes[];
            renderDeviceAttributes?: dependency_2.io.DeviceAttributes[];
            issueAt?: dependency_1.google.protobuf.Timestamp;
            renderedAt?: dependency_1.google.protobuf.Timestamp;
            firstInstalledAt?: dependency_1.google.protobuf.Timestamp;
            lastInstalledAt?: dependency_1.google.protobuf.Timestamp;
            firstUninstalledAt?: dependency_1.google.protobuf.Timestamp;
            lastUninstalledAt?: dependency_1.google.protobuf.Timestamp;
            invalidatedAt?: dependency_1.google.protobuf.Timestamp;
            lastUpdatedAt?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 11, 12], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("lifecycleEvents" in data && data.lifecycleEvents != undefined) {
                    this.lifecycleEvents = data.lifecycleEvents;
                }
                if ("utm" in data && data.utm != undefined) {
                    this.utm = data.utm;
                }
                if ("altId" in data && data.altId != undefined) {
                    this.altId = data.altId;
                }
                if ("issueIpAddress" in data && data.issueIpAddress != undefined) {
                    this.issueIpAddress = data.issueIpAddress;
                }
                if ("installIpAddress" in data && data.installIpAddress != undefined) {
                    this.installIpAddress = data.installIpAddress;
                }
                if ("renderLocation" in data && data.renderLocation != undefined) {
                    this.renderLocation = data.renderLocation;
                }
                if ("renderIpAddress" in data && data.renderIpAddress != undefined) {
                    this.renderIpAddress = data.renderIpAddress;
                }
                if ("installUserAgent" in data && data.installUserAgent != undefined) {
                    this.installUserAgent = data.installUserAgent;
                }
                if ("renderUserAgent" in data && data.renderUserAgent != undefined) {
                    this.renderUserAgent = data.renderUserAgent;
                }
                if ("installDeviceAttributes" in data && data.installDeviceAttributes != undefined) {
                    this.installDeviceAttributes = data.installDeviceAttributes;
                }
                if ("renderDeviceAttributes" in data && data.renderDeviceAttributes != undefined) {
                    this.renderDeviceAttributes = data.renderDeviceAttributes;
                }
                if ("issueAt" in data && data.issueAt != undefined) {
                    this.issueAt = data.issueAt;
                }
                if ("renderedAt" in data && data.renderedAt != undefined) {
                    this.renderedAt = data.renderedAt;
                }
                if ("firstInstalledAt" in data && data.firstInstalledAt != undefined) {
                    this.firstInstalledAt = data.firstInstalledAt;
                }
                if ("lastInstalledAt" in data && data.lastInstalledAt != undefined) {
                    this.lastInstalledAt = data.lastInstalledAt;
                }
                if ("firstUninstalledAt" in data && data.firstUninstalledAt != undefined) {
                    this.firstUninstalledAt = data.firstUninstalledAt;
                }
                if ("lastUninstalledAt" in data && data.lastUninstalledAt != undefined) {
                    this.lastUninstalledAt = data.lastUninstalledAt;
                }
                if ("invalidatedAt" in data && data.invalidatedAt != undefined) {
                    this.invalidatedAt = data.invalidatedAt;
                }
                if ("lastUpdatedAt" in data && data.lastUpdatedAt != undefined) {
                    this.lastUpdatedAt = data.lastUpdatedAt;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, Status.PASS_ISSUED) as Status;
        }
        set status(value: Status) {
            pb_1.Message.setField(this, 1, value);
        }
        get lifecycleEvents() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as LifecycleEvents[];
        }
        set lifecycleEvents(value: LifecycleEvents[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get utm() {
            return pb_1.Message.getWrapperField(this, UTM, 3) as UTM;
        }
        set utm(value: UTM) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasUtm() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get altId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set altId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get issueIpAddress() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set issueIpAddress(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get installIpAddress() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set installIpAddress(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get renderLocation() {
            return pb_1.Message.getWrapperField(this, MetaLocation, 7) as MetaLocation;
        }
        set renderLocation(value: MetaLocation) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasRenderLocation() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get renderIpAddress() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set renderIpAddress(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get installUserAgent() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set installUserAgent(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get renderUserAgent() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set renderUserAgent(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get installDeviceAttributes() {
            return pb_1.Message.getFieldWithDefault(this, 11, []) as dependency_2.io.DeviceAttributes[];
        }
        set installDeviceAttributes(value: dependency_2.io.DeviceAttributes[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get renderDeviceAttributes() {
            return pb_1.Message.getFieldWithDefault(this, 12, []) as dependency_2.io.DeviceAttributes[];
        }
        set renderDeviceAttributes(value: dependency_2.io.DeviceAttributes[]) {
            pb_1.Message.setField(this, 12, value);
        }
        get issueAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 13) as dependency_1.google.protobuf.Timestamp;
        }
        set issueAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasIssueAt() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get renderedAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 14) as dependency_1.google.protobuf.Timestamp;
        }
        set renderedAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get hasRenderedAt() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get firstInstalledAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 15) as dependency_1.google.protobuf.Timestamp;
        }
        set firstInstalledAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get hasFirstInstalledAt() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get lastInstalledAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 16) as dependency_1.google.protobuf.Timestamp;
        }
        set lastInstalledAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get hasLastInstalledAt() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get firstUninstalledAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 17) as dependency_1.google.protobuf.Timestamp;
        }
        set firstUninstalledAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get hasFirstUninstalledAt() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get lastUninstalledAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 18) as dependency_1.google.protobuf.Timestamp;
        }
        set lastUninstalledAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get hasLastUninstalledAt() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get invalidatedAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 19) as dependency_1.google.protobuf.Timestamp;
        }
        set invalidatedAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get hasInvalidatedAt() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get lastUpdatedAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 20) as dependency_1.google.protobuf.Timestamp;
        }
        set lastUpdatedAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get hasLastUpdatedAt() {
            return pb_1.Message.getField(this, 20) != null;
        }
        static fromObject(data: {
            status?: Status;
            lifecycleEvents?: LifecycleEvents[];
            utm?: ReturnType<typeof UTM.prototype.toObject>;
            altId?: string;
            issueIpAddress?: string;
            installIpAddress?: string;
            renderLocation?: ReturnType<typeof MetaLocation.prototype.toObject>;
            renderIpAddress?: string;
            installUserAgent?: string;
            renderUserAgent?: string;
            installDeviceAttributes?: dependency_2.io.DeviceAttributes[];
            renderDeviceAttributes?: dependency_2.io.DeviceAttributes[];
            issueAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            renderedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            firstInstalledAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            lastInstalledAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            firstUninstalledAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            lastUninstalledAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            invalidatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            lastUpdatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): Metadata {
            const message = new Metadata({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.lifecycleEvents != null) {
                message.lifecycleEvents = data.lifecycleEvents;
            }
            if (data.utm != null) {
                message.utm = UTM.fromObject(data.utm);
            }
            if (data.altId != null) {
                message.altId = data.altId;
            }
            if (data.issueIpAddress != null) {
                message.issueIpAddress = data.issueIpAddress;
            }
            if (data.installIpAddress != null) {
                message.installIpAddress = data.installIpAddress;
            }
            if (data.renderLocation != null) {
                message.renderLocation = MetaLocation.fromObject(data.renderLocation);
            }
            if (data.renderIpAddress != null) {
                message.renderIpAddress = data.renderIpAddress;
            }
            if (data.installUserAgent != null) {
                message.installUserAgent = data.installUserAgent;
            }
            if (data.renderUserAgent != null) {
                message.renderUserAgent = data.renderUserAgent;
            }
            if (data.installDeviceAttributes != null) {
                message.installDeviceAttributes = data.installDeviceAttributes;
            }
            if (data.renderDeviceAttributes != null) {
                message.renderDeviceAttributes = data.renderDeviceAttributes;
            }
            if (data.issueAt != null) {
                message.issueAt = dependency_1.google.protobuf.Timestamp.fromObject(data.issueAt);
            }
            if (data.renderedAt != null) {
                message.renderedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.renderedAt);
            }
            if (data.firstInstalledAt != null) {
                message.firstInstalledAt = dependency_1.google.protobuf.Timestamp.fromObject(data.firstInstalledAt);
            }
            if (data.lastInstalledAt != null) {
                message.lastInstalledAt = dependency_1.google.protobuf.Timestamp.fromObject(data.lastInstalledAt);
            }
            if (data.firstUninstalledAt != null) {
                message.firstUninstalledAt = dependency_1.google.protobuf.Timestamp.fromObject(data.firstUninstalledAt);
            }
            if (data.lastUninstalledAt != null) {
                message.lastUninstalledAt = dependency_1.google.protobuf.Timestamp.fromObject(data.lastUninstalledAt);
            }
            if (data.invalidatedAt != null) {
                message.invalidatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.invalidatedAt);
            }
            if (data.lastUpdatedAt != null) {
                message.lastUpdatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.lastUpdatedAt);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: Status;
                lifecycleEvents?: LifecycleEvents[];
                utm?: ReturnType<typeof UTM.prototype.toObject>;
                altId?: string;
                issueIpAddress?: string;
                installIpAddress?: string;
                renderLocation?: ReturnType<typeof MetaLocation.prototype.toObject>;
                renderIpAddress?: string;
                installUserAgent?: string;
                renderUserAgent?: string;
                installDeviceAttributes?: dependency_2.io.DeviceAttributes[];
                renderDeviceAttributes?: dependency_2.io.DeviceAttributes[];
                issueAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                renderedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                firstInstalledAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                lastInstalledAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                firstUninstalledAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                lastUninstalledAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                invalidatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                lastUpdatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.lifecycleEvents != null) {
                data.lifecycleEvents = this.lifecycleEvents;
            }
            if (this.utm != null) {
                data.utm = this.utm.toObject();
            }
            if (this.altId != null) {
                data.altId = this.altId;
            }
            if (this.issueIpAddress != null) {
                data.issueIpAddress = this.issueIpAddress;
            }
            if (this.installIpAddress != null) {
                data.installIpAddress = this.installIpAddress;
            }
            if (this.renderLocation != null) {
                data.renderLocation = this.renderLocation.toObject();
            }
            if (this.renderIpAddress != null) {
                data.renderIpAddress = this.renderIpAddress;
            }
            if (this.installUserAgent != null) {
                data.installUserAgent = this.installUserAgent;
            }
            if (this.renderUserAgent != null) {
                data.renderUserAgent = this.renderUserAgent;
            }
            if (this.installDeviceAttributes != null) {
                data.installDeviceAttributes = this.installDeviceAttributes;
            }
            if (this.renderDeviceAttributes != null) {
                data.renderDeviceAttributes = this.renderDeviceAttributes;
            }
            if (this.issueAt != null) {
                data.issueAt = this.issueAt.toObject();
            }
            if (this.renderedAt != null) {
                data.renderedAt = this.renderedAt.toObject();
            }
            if (this.firstInstalledAt != null) {
                data.firstInstalledAt = this.firstInstalledAt.toObject();
            }
            if (this.lastInstalledAt != null) {
                data.lastInstalledAt = this.lastInstalledAt.toObject();
            }
            if (this.firstUninstalledAt != null) {
                data.firstUninstalledAt = this.firstUninstalledAt.toObject();
            }
            if (this.lastUninstalledAt != null) {
                data.lastUninstalledAt = this.lastUninstalledAt.toObject();
            }
            if (this.invalidatedAt != null) {
                data.invalidatedAt = this.invalidatedAt.toObject();
            }
            if (this.lastUpdatedAt != null) {
                data.lastUpdatedAt = this.lastUpdatedAt.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != Status.PASS_ISSUED)
                writer.writeEnum(1, this.status);
            if (this.lifecycleEvents.length)
                writer.writePackedEnum(2, this.lifecycleEvents);
            if (this.hasUtm)
                writer.writeMessage(3, this.utm, () => this.utm.serialize(writer));
            if (this.altId.length)
                writer.writeString(4, this.altId);
            if (this.issueIpAddress.length)
                writer.writeString(5, this.issueIpAddress);
            if (this.installIpAddress.length)
                writer.writeString(6, this.installIpAddress);
            if (this.hasRenderLocation)
                writer.writeMessage(7, this.renderLocation, () => this.renderLocation.serialize(writer));
            if (this.renderIpAddress.length)
                writer.writeString(8, this.renderIpAddress);
            if (this.installUserAgent.length)
                writer.writeString(9, this.installUserAgent);
            if (this.renderUserAgent.length)
                writer.writeString(10, this.renderUserAgent);
            if (this.installDeviceAttributes.length)
                writer.writePackedEnum(11, this.installDeviceAttributes);
            if (this.renderDeviceAttributes.length)
                writer.writePackedEnum(12, this.renderDeviceAttributes);
            if (this.hasIssueAt)
                writer.writeMessage(13, this.issueAt, () => this.issueAt.serialize(writer));
            if (this.hasRenderedAt)
                writer.writeMessage(14, this.renderedAt, () => this.renderedAt.serialize(writer));
            if (this.hasFirstInstalledAt)
                writer.writeMessage(15, this.firstInstalledAt, () => this.firstInstalledAt.serialize(writer));
            if (this.hasLastInstalledAt)
                writer.writeMessage(16, this.lastInstalledAt, () => this.lastInstalledAt.serialize(writer));
            if (this.hasFirstUninstalledAt)
                writer.writeMessage(17, this.firstUninstalledAt, () => this.firstUninstalledAt.serialize(writer));
            if (this.hasLastUninstalledAt)
                writer.writeMessage(18, this.lastUninstalledAt, () => this.lastUninstalledAt.serialize(writer));
            if (this.hasInvalidatedAt)
                writer.writeMessage(19, this.invalidatedAt, () => this.invalidatedAt.serialize(writer));
            if (this.hasLastUpdatedAt)
                writer.writeMessage(20, this.lastUpdatedAt, () => this.lastUpdatedAt.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Metadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.lifecycleEvents = reader.readPackedEnum();
                        break;
                    case 3:
                        reader.readMessage(message.utm, () => message.utm = UTM.deserialize(reader));
                        break;
                    case 4:
                        message.altId = reader.readString();
                        break;
                    case 5:
                        message.issueIpAddress = reader.readString();
                        break;
                    case 6:
                        message.installIpAddress = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.renderLocation, () => message.renderLocation = MetaLocation.deserialize(reader));
                        break;
                    case 8:
                        message.renderIpAddress = reader.readString();
                        break;
                    case 9:
                        message.installUserAgent = reader.readString();
                        break;
                    case 10:
                        message.renderUserAgent = reader.readString();
                        break;
                    case 11:
                        message.installDeviceAttributes = reader.readPackedEnum();
                        break;
                    case 12:
                        message.renderDeviceAttributes = reader.readPackedEnum();
                        break;
                    case 13:
                        reader.readMessage(message.issueAt, () => message.issueAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.renderedAt, () => message.renderedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.firstInstalledAt, () => message.firstInstalledAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.lastInstalledAt, () => message.lastInstalledAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 17:
                        reader.readMessage(message.firstUninstalledAt, () => message.firstUninstalledAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.lastUninstalledAt, () => message.lastUninstalledAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 19:
                        reader.readMessage(message.invalidatedAt, () => message.invalidatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 20:
                        reader.readMessage(message.lastUpdatedAt, () => message.lastUpdatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Metadata {
            return Metadata.deserialize(bytes);
        }
    }
}
