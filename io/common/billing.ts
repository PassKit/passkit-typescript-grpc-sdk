/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/billing.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace io {
    export class Quota extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            details?: Map<number, QuotaDetails>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("details" in data && data.details != undefined) {
                    this.details = data.details;
                }
            }
            if (!this.details)
                this.details = new Map();
        }
        get details() {
            return pb_1.Message.getField(this, 1) as any as Map<number, QuotaDetails>;
        }
        set details(value: Map<number, QuotaDetails>) {
            pb_1.Message.setField(this, 1, value as any);
        }
        static fromObject(data: {
            details?: {
                [key: number]: ReturnType<typeof QuotaDetails.prototype.toObject>;
            };
        }): Quota {
            const message = new Quota({});
            if (typeof data.details == "object") {
                message.details = new Map(Object.entries(data.details).map(([key, value]) => [Number(key), QuotaDetails.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                details?: {
                    [key: number]: ReturnType<typeof QuotaDetails.prototype.toObject>;
                };
            } = {};
            if (this.details != null) {
                data.details = (Object.fromEntries)((Array.from)(this.details).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.details) {
                writer.writeMessage(1, this.details, () => {
                    writer.writeUint32(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Quota {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Quota();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.details as any, reader, reader.readUint32, () => {
                            let value;
                            reader.readMessage(message, () => value = QuotaDetails.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Quota {
            return Quota.deserialize(bytes);
        }
    }
    export class QuotaDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quota?: number;
            status?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quota" in data && data.quota != undefined) {
                    this.quota = data.quota;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get quota() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set quota(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set status(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            quota?: number;
            status?: number;
        }): QuotaDetails {
            const message = new QuotaDetails({});
            if (data.quota != null) {
                message.quota = data.quota;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                quota?: number;
                status?: number;
            } = {};
            if (this.quota != null) {
                data.quota = this.quota;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quota != 0)
                writer.writeInt32(1, this.quota);
            if (this.status != 0)
                writer.writeUint64(2, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuotaDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuotaDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quota = reader.readInt32();
                        break;
                    case 2:
                        message.status = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuotaDetails {
            return QuotaDetails.deserialize(bytes);
        }
    }
}
