/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/useragent.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace io {
    export class UserAgent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            raw?: string;
            platform?: string;
            os?: string;
            osVersion?: string;
            engine?: string;
            engineVersion?: string;
            browser?: string;
            browserVersion?: string;
            localization?: string;
            mobile?: boolean;
            walletCompatible?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("raw" in data && data.raw != undefined) {
                    this.raw = data.raw;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("os" in data && data.os != undefined) {
                    this.os = data.os;
                }
                if ("osVersion" in data && data.osVersion != undefined) {
                    this.osVersion = data.osVersion;
                }
                if ("engine" in data && data.engine != undefined) {
                    this.engine = data.engine;
                }
                if ("engineVersion" in data && data.engineVersion != undefined) {
                    this.engineVersion = data.engineVersion;
                }
                if ("browser" in data && data.browser != undefined) {
                    this.browser = data.browser;
                }
                if ("browserVersion" in data && data.browserVersion != undefined) {
                    this.browserVersion = data.browserVersion;
                }
                if ("localization" in data && data.localization != undefined) {
                    this.localization = data.localization;
                }
                if ("mobile" in data && data.mobile != undefined) {
                    this.mobile = data.mobile;
                }
                if ("walletCompatible" in data && data.walletCompatible != undefined) {
                    this.walletCompatible = data.walletCompatible;
                }
            }
        }
        get raw() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set raw(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set platform(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get os() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set os(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get osVersion() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set osVersion(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get engine() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set engine(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get engineVersion() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set engineVersion(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get browser() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set browser(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get browserVersion() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set browserVersion(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get localization() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set localization(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get mobile() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set mobile(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get walletCompatible() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set walletCompatible(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            raw?: string;
            platform?: string;
            os?: string;
            osVersion?: string;
            engine?: string;
            engineVersion?: string;
            browser?: string;
            browserVersion?: string;
            localization?: string;
            mobile?: boolean;
            walletCompatible?: boolean;
        }): UserAgent {
            const message = new UserAgent({});
            if (data.raw != null) {
                message.raw = data.raw;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.os != null) {
                message.os = data.os;
            }
            if (data.osVersion != null) {
                message.osVersion = data.osVersion;
            }
            if (data.engine != null) {
                message.engine = data.engine;
            }
            if (data.engineVersion != null) {
                message.engineVersion = data.engineVersion;
            }
            if (data.browser != null) {
                message.browser = data.browser;
            }
            if (data.browserVersion != null) {
                message.browserVersion = data.browserVersion;
            }
            if (data.localization != null) {
                message.localization = data.localization;
            }
            if (data.mobile != null) {
                message.mobile = data.mobile;
            }
            if (data.walletCompatible != null) {
                message.walletCompatible = data.walletCompatible;
            }
            return message;
        }
        toObject() {
            const data: {
                raw?: string;
                platform?: string;
                os?: string;
                osVersion?: string;
                engine?: string;
                engineVersion?: string;
                browser?: string;
                browserVersion?: string;
                localization?: string;
                mobile?: boolean;
                walletCompatible?: boolean;
            } = {};
            if (this.raw != null) {
                data.raw = this.raw;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.os != null) {
                data.os = this.os;
            }
            if (this.osVersion != null) {
                data.osVersion = this.osVersion;
            }
            if (this.engine != null) {
                data.engine = this.engine;
            }
            if (this.engineVersion != null) {
                data.engineVersion = this.engineVersion;
            }
            if (this.browser != null) {
                data.browser = this.browser;
            }
            if (this.browserVersion != null) {
                data.browserVersion = this.browserVersion;
            }
            if (this.localization != null) {
                data.localization = this.localization;
            }
            if (this.mobile != null) {
                data.mobile = this.mobile;
            }
            if (this.walletCompatible != null) {
                data.walletCompatible = this.walletCompatible;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.raw.length)
                writer.writeString(1, this.raw);
            if (this.platform.length)
                writer.writeString(2, this.platform);
            if (this.os.length)
                writer.writeString(3, this.os);
            if (this.osVersion.length)
                writer.writeString(4, this.osVersion);
            if (this.engine.length)
                writer.writeString(5, this.engine);
            if (this.engineVersion.length)
                writer.writeString(6, this.engineVersion);
            if (this.browser.length)
                writer.writeString(7, this.browser);
            if (this.browserVersion.length)
                writer.writeString(8, this.browserVersion);
            if (this.localization.length)
                writer.writeString(9, this.localization);
            if (this.mobile != false)
                writer.writeBool(10, this.mobile);
            if (this.walletCompatible != false)
                writer.writeBool(11, this.walletCompatible);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserAgent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserAgent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.raw = reader.readString();
                        break;
                    case 2:
                        message.platform = reader.readString();
                        break;
                    case 3:
                        message.os = reader.readString();
                        break;
                    case 4:
                        message.osVersion = reader.readString();
                        break;
                    case 5:
                        message.engine = reader.readString();
                        break;
                    case 6:
                        message.engineVersion = reader.readString();
                        break;
                    case 7:
                        message.browser = reader.readString();
                        break;
                    case 8:
                        message.browserVersion = reader.readString();
                        break;
                    case 9:
                        message.localization = reader.readString();
                        break;
                    case 10:
                        message.mobile = reader.readBool();
                        break;
                    case 11:
                        message.walletCompatible = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserAgent {
            return UserAgent.deserialize(bytes);
        }
    }
}
