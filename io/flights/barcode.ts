/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/flights/barcode.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../common/common_objects";
import * as dependency_2 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace flights {
    export enum PassengerStatus {
        ISSUED_NOT_CHECKED_IN = 0,
        ISSUED_CHECKED_IN = 1,
        BAGGAGE_CHECKED_PASSENGER_NOT_CHECKED_IN = 2,
        BAGGAGE_CHECKED_PASSENGER_CHECKED_IN = 3,
        PASSENGER_PASSED_SECURITY_CHECK = 4,
        PASSENGER_PASSED_GATE = 5,
        TRANSIT = 6,
        STANDBY = 7,
        BOARDING_DATA_REVALIDATION_DONE = 8,
        ORIGINAL_BOARDING_LINE_USED_AT_TICKET_ISSUANCE = 9,
        UP_OR_DOWN_GRADING_REQUIRED = 10
    }
    export enum PassengerDescription {
        ADULT = 0,
        MALE = 1,
        FEMALE = 2,
        CHILD = 3,
        INFANT = 4,
        NO_PASSENGER = 5,
        ADULT_WITH_INFANT = 6,
        UNACCOMPANIED_MINOR = 7
    }
    export enum Source {
        W = 0,
        K = 1,
        X = 2,
        R = 3,
        M = 4,
        O = 5,
        T = 6,
        V = 7
    }
    export enum DocType {
        B = 0,
        I = 1
    }
    export enum InternationalDocVerification {
        NOT_REQUIRED = 0,
        REQUIRED = 1,
        COMPLETED = 2
    }
    export enum IDADIndicator {
        NONE = 0,
        IDN1 = 1,
        IDN2 = 2,
        IDB1 = 3,
        IDB2 = 4,
        AD = 5,
        DG = 6,
        DM = 7,
        GE = 8,
        IG = 9,
        RG = 10,
        UD = 11,
        ID = 12,
        IDFS1 = 13,
        IDFS2 = 14,
        IDR1 = 15,
        IDR2 = 16
    }
    export enum SelecteeIndicator {
        NOT_SELECTEE = 0,
        SELECTEE = 1,
        TSA_PRECHECK = 3
    }
    export enum FastTrack {
        N = 0,
        Y = 1
    }
    export class ConditionalItems extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            passengerDescription?: PassengerDescription;
            checkInSource?: Source;
            boardingPassIssuanceSource?: Source;
            boardingPassIssueDate?: dependency_1.io.Date;
            documentType?: DocType;
            boardingPassIssuer?: string;
            baggageTagNumber?: string[];
            selecteeIndicator?: SelecteeIndicator;
            internationalDocVerification?: InternationalDocVerification;
            idadIndicator?: IDADIndicator;
            fastTrack?: FastTrack;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("passengerDescription" in data && data.passengerDescription != undefined) {
                    this.passengerDescription = data.passengerDescription;
                }
                if ("checkInSource" in data && data.checkInSource != undefined) {
                    this.checkInSource = data.checkInSource;
                }
                if ("boardingPassIssuanceSource" in data && data.boardingPassIssuanceSource != undefined) {
                    this.boardingPassIssuanceSource = data.boardingPassIssuanceSource;
                }
                if ("boardingPassIssueDate" in data && data.boardingPassIssueDate != undefined) {
                    this.boardingPassIssueDate = data.boardingPassIssueDate;
                }
                if ("documentType" in data && data.documentType != undefined) {
                    this.documentType = data.documentType;
                }
                if ("boardingPassIssuer" in data && data.boardingPassIssuer != undefined) {
                    this.boardingPassIssuer = data.boardingPassIssuer;
                }
                if ("baggageTagNumber" in data && data.baggageTagNumber != undefined) {
                    this.baggageTagNumber = data.baggageTagNumber;
                }
                if ("selecteeIndicator" in data && data.selecteeIndicator != undefined) {
                    this.selecteeIndicator = data.selecteeIndicator;
                }
                if ("internationalDocVerification" in data && data.internationalDocVerification != undefined) {
                    this.internationalDocVerification = data.internationalDocVerification;
                }
                if ("idadIndicator" in data && data.idadIndicator != undefined) {
                    this.idadIndicator = data.idadIndicator;
                }
                if ("fastTrack" in data && data.fastTrack != undefined) {
                    this.fastTrack = data.fastTrack;
                }
            }
        }
        get passengerDescription() {
            return pb_1.Message.getFieldWithDefault(this, 1, PassengerDescription.ADULT) as PassengerDescription;
        }
        set passengerDescription(value: PassengerDescription) {
            pb_1.Message.setField(this, 1, value);
        }
        get checkInSource() {
            return pb_1.Message.getFieldWithDefault(this, 2, Source.W) as Source;
        }
        set checkInSource(value: Source) {
            pb_1.Message.setField(this, 2, value);
        }
        get boardingPassIssuanceSource() {
            return pb_1.Message.getFieldWithDefault(this, 3, Source.W) as Source;
        }
        set boardingPassIssuanceSource(value: Source) {
            pb_1.Message.setField(this, 3, value);
        }
        get boardingPassIssueDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Date, 4) as dependency_1.io.Date;
        }
        set boardingPassIssueDate(value: dependency_1.io.Date) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasBoardingPassIssueDate() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get documentType() {
            return pb_1.Message.getFieldWithDefault(this, 5, DocType.B) as DocType;
        }
        set documentType(value: DocType) {
            pb_1.Message.setField(this, 5, value);
        }
        get boardingPassIssuer() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set boardingPassIssuer(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get baggageTagNumber() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set baggageTagNumber(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get selecteeIndicator() {
            return pb_1.Message.getFieldWithDefault(this, 8, SelecteeIndicator.NOT_SELECTEE) as SelecteeIndicator;
        }
        set selecteeIndicator(value: SelecteeIndicator) {
            pb_1.Message.setField(this, 8, value);
        }
        get internationalDocVerification() {
            return pb_1.Message.getFieldWithDefault(this, 9, InternationalDocVerification.NOT_REQUIRED) as InternationalDocVerification;
        }
        set internationalDocVerification(value: InternationalDocVerification) {
            pb_1.Message.setField(this, 9, value);
        }
        get idadIndicator() {
            return pb_1.Message.getFieldWithDefault(this, 10, IDADIndicator.NONE) as IDADIndicator;
        }
        set idadIndicator(value: IDADIndicator) {
            pb_1.Message.setField(this, 10, value);
        }
        get fastTrack() {
            return pb_1.Message.getFieldWithDefault(this, 11, FastTrack.N) as FastTrack;
        }
        set fastTrack(value: FastTrack) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            passengerDescription?: PassengerDescription;
            checkInSource?: Source;
            boardingPassIssuanceSource?: Source;
            boardingPassIssueDate?: ReturnType<typeof dependency_1.io.Date.prototype.toObject>;
            documentType?: DocType;
            boardingPassIssuer?: string;
            baggageTagNumber?: string[];
            selecteeIndicator?: SelecteeIndicator;
            internationalDocVerification?: InternationalDocVerification;
            idadIndicator?: IDADIndicator;
            fastTrack?: FastTrack;
        }): ConditionalItems {
            const message = new ConditionalItems({});
            if (data.passengerDescription != null) {
                message.passengerDescription = data.passengerDescription;
            }
            if (data.checkInSource != null) {
                message.checkInSource = data.checkInSource;
            }
            if (data.boardingPassIssuanceSource != null) {
                message.boardingPassIssuanceSource = data.boardingPassIssuanceSource;
            }
            if (data.boardingPassIssueDate != null) {
                message.boardingPassIssueDate = dependency_1.io.Date.fromObject(data.boardingPassIssueDate);
            }
            if (data.documentType != null) {
                message.documentType = data.documentType;
            }
            if (data.boardingPassIssuer != null) {
                message.boardingPassIssuer = data.boardingPassIssuer;
            }
            if (data.baggageTagNumber != null) {
                message.baggageTagNumber = data.baggageTagNumber;
            }
            if (data.selecteeIndicator != null) {
                message.selecteeIndicator = data.selecteeIndicator;
            }
            if (data.internationalDocVerification != null) {
                message.internationalDocVerification = data.internationalDocVerification;
            }
            if (data.idadIndicator != null) {
                message.idadIndicator = data.idadIndicator;
            }
            if (data.fastTrack != null) {
                message.fastTrack = data.fastTrack;
            }
            return message;
        }
        toObject() {
            const data: {
                passengerDescription?: PassengerDescription;
                checkInSource?: Source;
                boardingPassIssuanceSource?: Source;
                boardingPassIssueDate?: ReturnType<typeof dependency_1.io.Date.prototype.toObject>;
                documentType?: DocType;
                boardingPassIssuer?: string;
                baggageTagNumber?: string[];
                selecteeIndicator?: SelecteeIndicator;
                internationalDocVerification?: InternationalDocVerification;
                idadIndicator?: IDADIndicator;
                fastTrack?: FastTrack;
            } = {};
            if (this.passengerDescription != null) {
                data.passengerDescription = this.passengerDescription;
            }
            if (this.checkInSource != null) {
                data.checkInSource = this.checkInSource;
            }
            if (this.boardingPassIssuanceSource != null) {
                data.boardingPassIssuanceSource = this.boardingPassIssuanceSource;
            }
            if (this.boardingPassIssueDate != null) {
                data.boardingPassIssueDate = this.boardingPassIssueDate.toObject();
            }
            if (this.documentType != null) {
                data.documentType = this.documentType;
            }
            if (this.boardingPassIssuer != null) {
                data.boardingPassIssuer = this.boardingPassIssuer;
            }
            if (this.baggageTagNumber != null) {
                data.baggageTagNumber = this.baggageTagNumber;
            }
            if (this.selecteeIndicator != null) {
                data.selecteeIndicator = this.selecteeIndicator;
            }
            if (this.internationalDocVerification != null) {
                data.internationalDocVerification = this.internationalDocVerification;
            }
            if (this.idadIndicator != null) {
                data.idadIndicator = this.idadIndicator;
            }
            if (this.fastTrack != null) {
                data.fastTrack = this.fastTrack;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.passengerDescription != PassengerDescription.ADULT)
                writer.writeEnum(1, this.passengerDescription);
            if (this.checkInSource != Source.W)
                writer.writeEnum(2, this.checkInSource);
            if (this.boardingPassIssuanceSource != Source.W)
                writer.writeEnum(3, this.boardingPassIssuanceSource);
            if (this.hasBoardingPassIssueDate)
                writer.writeMessage(4, this.boardingPassIssueDate, () => this.boardingPassIssueDate.serialize(writer));
            if (this.documentType != DocType.B)
                writer.writeEnum(5, this.documentType);
            if (this.boardingPassIssuer.length)
                writer.writeString(6, this.boardingPassIssuer);
            if (this.baggageTagNumber.length)
                writer.writeRepeatedString(7, this.baggageTagNumber);
            if (this.selecteeIndicator != SelecteeIndicator.NOT_SELECTEE)
                writer.writeEnum(8, this.selecteeIndicator);
            if (this.internationalDocVerification != InternationalDocVerification.NOT_REQUIRED)
                writer.writeEnum(9, this.internationalDocVerification);
            if (this.idadIndicator != IDADIndicator.NONE)
                writer.writeEnum(10, this.idadIndicator);
            if (this.fastTrack != FastTrack.N)
                writer.writeEnum(11, this.fastTrack);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConditionalItems {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConditionalItems();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.passengerDescription = reader.readEnum();
                        break;
                    case 2:
                        message.checkInSource = reader.readEnum();
                        break;
                    case 3:
                        message.boardingPassIssuanceSource = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.boardingPassIssueDate, () => message.boardingPassIssueDate = dependency_1.io.Date.deserialize(reader));
                        break;
                    case 5:
                        message.documentType = reader.readEnum();
                        break;
                    case 6:
                        message.boardingPassIssuer = reader.readString();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        message.selecteeIndicator = reader.readEnum();
                        break;
                    case 9:
                        message.internationalDocVerification = reader.readEnum();
                        break;
                    case 10:
                        message.idadIndicator = reader.readEnum();
                        break;
                    case 11:
                        message.fastTrack = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConditionalItems {
            return ConditionalItems.deserialize(bytes);
        }
    }
}
