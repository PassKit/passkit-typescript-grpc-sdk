/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/analytics/a_rpc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/api/annotations";
import * as dependency_2 from "./../../protoc-gen-openapiv2/options/annotations";
import * as dependency_3 from "./../common/reporting";
import * as grpc_1 from "@grpc/grpc-js";
export namespace analytics {
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAnalyticsService {
        static definition = {
            getAnalytics: {
                path: "/analytics.Analytics/getAnalytics",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.io.AnalyticsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.io.AnalyticsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.AnalyticsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.AnalyticsResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract getAnalytics(call: grpc_1.ServerUnaryCall<dependency_3.io.AnalyticsRequest, dependency_3.io.AnalyticsResponse>, callback: grpc_1.sendUnaryData<dependency_3.io.AnalyticsResponse>): void;
    }
    export class AnalyticsClient extends grpc_1.makeGenericClientConstructor(UnimplementedAnalyticsService.definition, "Analytics", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        getAnalytics: GrpcPromiseServiceInterface<dependency_3.io.AnalyticsRequest, dependency_3.io.AnalyticsResponse> = (message: dependency_3.io.AnalyticsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.AnalyticsResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getAnalytics(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.AnalyticsResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
    }
}
