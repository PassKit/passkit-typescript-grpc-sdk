/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/flights/flight_designator.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../common/common_objects";
import * as dependency_2 from "./../common/proximity";
import * as dependency_3 from "./../common/links";
import * as dependency_4 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace flights {
    export enum FlightAlerts {
        NO_ALERTS = 0,
        ALL_ALERTS = 1,
        DEPARTURE_GATE_ALERT = 2,
        DEPARTURE_TIME_ALERT = 4,
        ARRIVAL_GATE_ALERT = 8,
        ARRIVAL_TIME_ALERT = 16,
        BAGGAGE_BELT_ALERT = 32
    }
    export enum BoardingPolicy {
        BOARDING_POLICY_UNSPECIFIED = 0,
        ZONE_BASED = 1,
        GROUP_BASED = 2,
        BOARDING_POLICY_OTHER = 3
    }
    export enum SeatClassPolicy {
        SEAT_CLASS_POLICY_UNSPECIFIED = 0,
        CABIN_BASED = 1,
        CLASS_BASED = 2,
        TIER_BASED = 3,
        SEAT_CLASS_POLICY_OTHER = 4
    }
    export enum Authority {
        IATA = 0,
        ICAO = 1
    }
    export class FlightDesignator extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            carrierCode?: string;
            flightNumber?: string;
            validFrom?: dependency_1.io.Date;
            revision?: number;
            active?: boolean;
            schedule?: FlightSchedule;
            operatingCarrierCode?: string;
            operatingFlightNumber?: string;
            codeShareFlightNumbers?: string[];
            origin?: string;
            destination?: string;
            transitPoints?: string[];
            departureTerminal?: string;
            arrivalTerminal?: string;
            transitTerminals?: string[];
            boardingPolicy?: BoardingPolicy;
            seatClassPolicy?: SeatClassPolicy;
            alerts?: FlightAlerts[];
            passTemplateId?: string;
            autoInvalidateAfter?: number;
            /** @deprecated*/
            autoInvalidateCancelledPasses?: boolean;
            locationMessages?: dependency_2.io.GPSLocation[];
            beaconMessages?: dependency_2.io.Beacon[];
            defaultLinks?: dependency_3.io.Link[];
            ConditionalItems?: boolean;
            BarcodeAdditionalData?: string;
            invalidateCancelledPasses?: dependency_1.io.Toggle;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9, 12, 15, 18, 22, 23, 24], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("carrierCode" in data && data.carrierCode != undefined) {
                    this.carrierCode = data.carrierCode;
                }
                if ("flightNumber" in data && data.flightNumber != undefined) {
                    this.flightNumber = data.flightNumber;
                }
                if ("validFrom" in data && data.validFrom != undefined) {
                    this.validFrom = data.validFrom;
                }
                if ("revision" in data && data.revision != undefined) {
                    this.revision = data.revision;
                }
                if ("active" in data && data.active != undefined) {
                    this.active = data.active;
                }
                if ("schedule" in data && data.schedule != undefined) {
                    this.schedule = data.schedule;
                }
                if ("operatingCarrierCode" in data && data.operatingCarrierCode != undefined) {
                    this.operatingCarrierCode = data.operatingCarrierCode;
                }
                if ("operatingFlightNumber" in data && data.operatingFlightNumber != undefined) {
                    this.operatingFlightNumber = data.operatingFlightNumber;
                }
                if ("codeShareFlightNumbers" in data && data.codeShareFlightNumbers != undefined) {
                    this.codeShareFlightNumbers = data.codeShareFlightNumbers;
                }
                if ("origin" in data && data.origin != undefined) {
                    this.origin = data.origin;
                }
                if ("destination" in data && data.destination != undefined) {
                    this.destination = data.destination;
                }
                if ("transitPoints" in data && data.transitPoints != undefined) {
                    this.transitPoints = data.transitPoints;
                }
                if ("departureTerminal" in data && data.departureTerminal != undefined) {
                    this.departureTerminal = data.departureTerminal;
                }
                if ("arrivalTerminal" in data && data.arrivalTerminal != undefined) {
                    this.arrivalTerminal = data.arrivalTerminal;
                }
                if ("transitTerminals" in data && data.transitTerminals != undefined) {
                    this.transitTerminals = data.transitTerminals;
                }
                if ("boardingPolicy" in data && data.boardingPolicy != undefined) {
                    this.boardingPolicy = data.boardingPolicy;
                }
                if ("seatClassPolicy" in data && data.seatClassPolicy != undefined) {
                    this.seatClassPolicy = data.seatClassPolicy;
                }
                if ("alerts" in data && data.alerts != undefined) {
                    this.alerts = data.alerts;
                }
                if ("passTemplateId" in data && data.passTemplateId != undefined) {
                    this.passTemplateId = data.passTemplateId;
                }
                if ("autoInvalidateAfter" in data && data.autoInvalidateAfter != undefined) {
                    this.autoInvalidateAfter = data.autoInvalidateAfter;
                }
                if ("autoInvalidateCancelledPasses" in data && data.autoInvalidateCancelledPasses != undefined) {
                    this.autoInvalidateCancelledPasses = data.autoInvalidateCancelledPasses;
                }
                if ("locationMessages" in data && data.locationMessages != undefined) {
                    this.locationMessages = data.locationMessages;
                }
                if ("beaconMessages" in data && data.beaconMessages != undefined) {
                    this.beaconMessages = data.beaconMessages;
                }
                if ("defaultLinks" in data && data.defaultLinks != undefined) {
                    this.defaultLinks = data.defaultLinks;
                }
                if ("ConditionalItems" in data && data.ConditionalItems != undefined) {
                    this.ConditionalItems = data.ConditionalItems;
                }
                if ("BarcodeAdditionalData" in data && data.BarcodeAdditionalData != undefined) {
                    this.BarcodeAdditionalData = data.BarcodeAdditionalData;
                }
                if ("invalidateCancelledPasses" in data && data.invalidateCancelledPasses != undefined) {
                    this.invalidateCancelledPasses = data.invalidateCancelledPasses;
                }
            }
        }
        get carrierCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set carrierCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get flightNumber() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set flightNumber(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get validFrom() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Date, 3) as dependency_1.io.Date;
        }
        set validFrom(value: dependency_1.io.Date) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasValidFrom() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get revision() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set revision(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get active() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set active(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get schedule() {
            return pb_1.Message.getWrapperField(this, FlightSchedule, 6) as FlightSchedule;
        }
        set schedule(value: FlightSchedule) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasSchedule() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get operatingCarrierCode() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set operatingCarrierCode(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get operatingFlightNumber() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set operatingFlightNumber(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get codeShareFlightNumbers() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set codeShareFlightNumbers(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get origin() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set origin(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get destination() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set destination(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get transitPoints() {
            return pb_1.Message.getFieldWithDefault(this, 12, []) as string[];
        }
        set transitPoints(value: string[]) {
            pb_1.Message.setField(this, 12, value);
        }
        get departureTerminal() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set departureTerminal(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get arrivalTerminal() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set arrivalTerminal(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get transitTerminals() {
            return pb_1.Message.getFieldWithDefault(this, 15, []) as string[];
        }
        set transitTerminals(value: string[]) {
            pb_1.Message.setField(this, 15, value);
        }
        get boardingPolicy() {
            return pb_1.Message.getFieldWithDefault(this, 16, BoardingPolicy.BOARDING_POLICY_UNSPECIFIED) as BoardingPolicy;
        }
        set boardingPolicy(value: BoardingPolicy) {
            pb_1.Message.setField(this, 16, value);
        }
        get seatClassPolicy() {
            return pb_1.Message.getFieldWithDefault(this, 17, SeatClassPolicy.SEAT_CLASS_POLICY_UNSPECIFIED) as SeatClassPolicy;
        }
        set seatClassPolicy(value: SeatClassPolicy) {
            pb_1.Message.setField(this, 17, value);
        }
        get alerts() {
            return pb_1.Message.getFieldWithDefault(this, 18, []) as FlightAlerts[];
        }
        set alerts(value: FlightAlerts[]) {
            pb_1.Message.setField(this, 18, value);
        }
        get passTemplateId() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set passTemplateId(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get autoInvalidateAfter() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set autoInvalidateAfter(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        /** @deprecated*/
        get autoInvalidateCancelledPasses() {
            return pb_1.Message.getFieldWithDefault(this, 21, false) as boolean;
        }
        /** @deprecated*/
        set autoInvalidateCancelledPasses(value: boolean) {
            pb_1.Message.setField(this, 21, value);
        }
        get locationMessages() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.io.GPSLocation, 22) as dependency_2.io.GPSLocation[];
        }
        set locationMessages(value: dependency_2.io.GPSLocation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 22, value);
        }
        get beaconMessages() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.io.Beacon, 23) as dependency_2.io.Beacon[];
        }
        set beaconMessages(value: dependency_2.io.Beacon[]) {
            pb_1.Message.setRepeatedWrapperField(this, 23, value);
        }
        get defaultLinks() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.io.Link, 24) as dependency_3.io.Link[];
        }
        set defaultLinks(value: dependency_3.io.Link[]) {
            pb_1.Message.setRepeatedWrapperField(this, 24, value);
        }
        get ConditionalItems() {
            return pb_1.Message.getFieldWithDefault(this, 25, false) as boolean;
        }
        set ConditionalItems(value: boolean) {
            pb_1.Message.setField(this, 25, value);
        }
        get BarcodeAdditionalData() {
            return pb_1.Message.getFieldWithDefault(this, 26, "") as string;
        }
        set BarcodeAdditionalData(value: string) {
            pb_1.Message.setField(this, 26, value);
        }
        get invalidateCancelledPasses() {
            return pb_1.Message.getFieldWithDefault(this, 27, dependency_1.io.Toggle.DO_NOT_USE) as dependency_1.io.Toggle;
        }
        set invalidateCancelledPasses(value: dependency_1.io.Toggle) {
            pb_1.Message.setField(this, 27, value);
        }
        static fromObject(data: {
            carrierCode?: string;
            flightNumber?: string;
            validFrom?: ReturnType<typeof dependency_1.io.Date.prototype.toObject>;
            revision?: number;
            active?: boolean;
            schedule?: ReturnType<typeof FlightSchedule.prototype.toObject>;
            operatingCarrierCode?: string;
            operatingFlightNumber?: string;
            codeShareFlightNumbers?: string[];
            origin?: string;
            destination?: string;
            transitPoints?: string[];
            departureTerminal?: string;
            arrivalTerminal?: string;
            transitTerminals?: string[];
            boardingPolicy?: BoardingPolicy;
            seatClassPolicy?: SeatClassPolicy;
            alerts?: FlightAlerts[];
            passTemplateId?: string;
            autoInvalidateAfter?: number;
            autoInvalidateCancelledPasses?: boolean;
            locationMessages?: ReturnType<typeof dependency_2.io.GPSLocation.prototype.toObject>[];
            beaconMessages?: ReturnType<typeof dependency_2.io.Beacon.prototype.toObject>[];
            defaultLinks?: ReturnType<typeof dependency_3.io.Link.prototype.toObject>[];
            ConditionalItems?: boolean;
            BarcodeAdditionalData?: string;
            invalidateCancelledPasses?: dependency_1.io.Toggle;
        }): FlightDesignator {
            const message = new FlightDesignator({});
            if (data.carrierCode != null) {
                message.carrierCode = data.carrierCode;
            }
            if (data.flightNumber != null) {
                message.flightNumber = data.flightNumber;
            }
            if (data.validFrom != null) {
                message.validFrom = dependency_1.io.Date.fromObject(data.validFrom);
            }
            if (data.revision != null) {
                message.revision = data.revision;
            }
            if (data.active != null) {
                message.active = data.active;
            }
            if (data.schedule != null) {
                message.schedule = FlightSchedule.fromObject(data.schedule);
            }
            if (data.operatingCarrierCode != null) {
                message.operatingCarrierCode = data.operatingCarrierCode;
            }
            if (data.operatingFlightNumber != null) {
                message.operatingFlightNumber = data.operatingFlightNumber;
            }
            if (data.codeShareFlightNumbers != null) {
                message.codeShareFlightNumbers = data.codeShareFlightNumbers;
            }
            if (data.origin != null) {
                message.origin = data.origin;
            }
            if (data.destination != null) {
                message.destination = data.destination;
            }
            if (data.transitPoints != null) {
                message.transitPoints = data.transitPoints;
            }
            if (data.departureTerminal != null) {
                message.departureTerminal = data.departureTerminal;
            }
            if (data.arrivalTerminal != null) {
                message.arrivalTerminal = data.arrivalTerminal;
            }
            if (data.transitTerminals != null) {
                message.transitTerminals = data.transitTerminals;
            }
            if (data.boardingPolicy != null) {
                message.boardingPolicy = data.boardingPolicy;
            }
            if (data.seatClassPolicy != null) {
                message.seatClassPolicy = data.seatClassPolicy;
            }
            if (data.alerts != null) {
                message.alerts = data.alerts;
            }
            if (data.passTemplateId != null) {
                message.passTemplateId = data.passTemplateId;
            }
            if (data.autoInvalidateAfter != null) {
                message.autoInvalidateAfter = data.autoInvalidateAfter;
            }
            if (data.autoInvalidateCancelledPasses != null) {
                message.autoInvalidateCancelledPasses = data.autoInvalidateCancelledPasses;
            }
            if (data.locationMessages != null) {
                message.locationMessages = data.locationMessages.map(item => dependency_2.io.GPSLocation.fromObject(item));
            }
            if (data.beaconMessages != null) {
                message.beaconMessages = data.beaconMessages.map(item => dependency_2.io.Beacon.fromObject(item));
            }
            if (data.defaultLinks != null) {
                message.defaultLinks = data.defaultLinks.map(item => dependency_3.io.Link.fromObject(item));
            }
            if (data.ConditionalItems != null) {
                message.ConditionalItems = data.ConditionalItems;
            }
            if (data.BarcodeAdditionalData != null) {
                message.BarcodeAdditionalData = data.BarcodeAdditionalData;
            }
            if (data.invalidateCancelledPasses != null) {
                message.invalidateCancelledPasses = data.invalidateCancelledPasses;
            }
            return message;
        }
        toObject() {
            const data: {
                carrierCode?: string;
                flightNumber?: string;
                validFrom?: ReturnType<typeof dependency_1.io.Date.prototype.toObject>;
                revision?: number;
                active?: boolean;
                schedule?: ReturnType<typeof FlightSchedule.prototype.toObject>;
                operatingCarrierCode?: string;
                operatingFlightNumber?: string;
                codeShareFlightNumbers?: string[];
                origin?: string;
                destination?: string;
                transitPoints?: string[];
                departureTerminal?: string;
                arrivalTerminal?: string;
                transitTerminals?: string[];
                boardingPolicy?: BoardingPolicy;
                seatClassPolicy?: SeatClassPolicy;
                alerts?: FlightAlerts[];
                passTemplateId?: string;
                autoInvalidateAfter?: number;
                autoInvalidateCancelledPasses?: boolean;
                locationMessages?: ReturnType<typeof dependency_2.io.GPSLocation.prototype.toObject>[];
                beaconMessages?: ReturnType<typeof dependency_2.io.Beacon.prototype.toObject>[];
                defaultLinks?: ReturnType<typeof dependency_3.io.Link.prototype.toObject>[];
                ConditionalItems?: boolean;
                BarcodeAdditionalData?: string;
                invalidateCancelledPasses?: dependency_1.io.Toggle;
            } = {};
            if (this.carrierCode != null) {
                data.carrierCode = this.carrierCode;
            }
            if (this.flightNumber != null) {
                data.flightNumber = this.flightNumber;
            }
            if (this.validFrom != null) {
                data.validFrom = this.validFrom.toObject();
            }
            if (this.revision != null) {
                data.revision = this.revision;
            }
            if (this.active != null) {
                data.active = this.active;
            }
            if (this.schedule != null) {
                data.schedule = this.schedule.toObject();
            }
            if (this.operatingCarrierCode != null) {
                data.operatingCarrierCode = this.operatingCarrierCode;
            }
            if (this.operatingFlightNumber != null) {
                data.operatingFlightNumber = this.operatingFlightNumber;
            }
            if (this.codeShareFlightNumbers != null) {
                data.codeShareFlightNumbers = this.codeShareFlightNumbers;
            }
            if (this.origin != null) {
                data.origin = this.origin;
            }
            if (this.destination != null) {
                data.destination = this.destination;
            }
            if (this.transitPoints != null) {
                data.transitPoints = this.transitPoints;
            }
            if (this.departureTerminal != null) {
                data.departureTerminal = this.departureTerminal;
            }
            if (this.arrivalTerminal != null) {
                data.arrivalTerminal = this.arrivalTerminal;
            }
            if (this.transitTerminals != null) {
                data.transitTerminals = this.transitTerminals;
            }
            if (this.boardingPolicy != null) {
                data.boardingPolicy = this.boardingPolicy;
            }
            if (this.seatClassPolicy != null) {
                data.seatClassPolicy = this.seatClassPolicy;
            }
            if (this.alerts != null) {
                data.alerts = this.alerts;
            }
            if (this.passTemplateId != null) {
                data.passTemplateId = this.passTemplateId;
            }
            if (this.autoInvalidateAfter != null) {
                data.autoInvalidateAfter = this.autoInvalidateAfter;
            }
            if (this.autoInvalidateCancelledPasses != null) {
                data.autoInvalidateCancelledPasses = this.autoInvalidateCancelledPasses;
            }
            if (this.locationMessages != null) {
                data.locationMessages = this.locationMessages.map((item: dependency_2.io.GPSLocation) => item.toObject());
            }
            if (this.beaconMessages != null) {
                data.beaconMessages = this.beaconMessages.map((item: dependency_2.io.Beacon) => item.toObject());
            }
            if (this.defaultLinks != null) {
                data.defaultLinks = this.defaultLinks.map((item: dependency_3.io.Link) => item.toObject());
            }
            if (this.ConditionalItems != null) {
                data.ConditionalItems = this.ConditionalItems;
            }
            if (this.BarcodeAdditionalData != null) {
                data.BarcodeAdditionalData = this.BarcodeAdditionalData;
            }
            if (this.invalidateCancelledPasses != null) {
                data.invalidateCancelledPasses = this.invalidateCancelledPasses;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.carrierCode.length)
                writer.writeString(1, this.carrierCode);
            if (this.flightNumber.length)
                writer.writeString(2, this.flightNumber);
            if (this.hasValidFrom)
                writer.writeMessage(3, this.validFrom, () => this.validFrom.serialize(writer));
            if (this.revision != 0)
                writer.writeUint32(4, this.revision);
            if (this.active != false)
                writer.writeBool(5, this.active);
            if (this.hasSchedule)
                writer.writeMessage(6, this.schedule, () => this.schedule.serialize(writer));
            if (this.operatingCarrierCode.length)
                writer.writeString(7, this.operatingCarrierCode);
            if (this.operatingFlightNumber.length)
                writer.writeString(8, this.operatingFlightNumber);
            if (this.codeShareFlightNumbers.length)
                writer.writeRepeatedString(9, this.codeShareFlightNumbers);
            if (this.origin.length)
                writer.writeString(10, this.origin);
            if (this.destination.length)
                writer.writeString(11, this.destination);
            if (this.transitPoints.length)
                writer.writeRepeatedString(12, this.transitPoints);
            if (this.departureTerminal.length)
                writer.writeString(13, this.departureTerminal);
            if (this.arrivalTerminal.length)
                writer.writeString(14, this.arrivalTerminal);
            if (this.transitTerminals.length)
                writer.writeRepeatedString(15, this.transitTerminals);
            if (this.boardingPolicy != BoardingPolicy.BOARDING_POLICY_UNSPECIFIED)
                writer.writeEnum(16, this.boardingPolicy);
            if (this.seatClassPolicy != SeatClassPolicy.SEAT_CLASS_POLICY_UNSPECIFIED)
                writer.writeEnum(17, this.seatClassPolicy);
            if (this.alerts.length)
                writer.writePackedEnum(18, this.alerts);
            if (this.passTemplateId.length)
                writer.writeString(19, this.passTemplateId);
            if (this.autoInvalidateAfter != 0)
                writer.writeUint32(20, this.autoInvalidateAfter);
            if (this.autoInvalidateCancelledPasses != false)
                writer.writeBool(21, this.autoInvalidateCancelledPasses);
            if (this.locationMessages.length)
                writer.writeRepeatedMessage(22, this.locationMessages, (item: dependency_2.io.GPSLocation) => item.serialize(writer));
            if (this.beaconMessages.length)
                writer.writeRepeatedMessage(23, this.beaconMessages, (item: dependency_2.io.Beacon) => item.serialize(writer));
            if (this.defaultLinks.length)
                writer.writeRepeatedMessage(24, this.defaultLinks, (item: dependency_3.io.Link) => item.serialize(writer));
            if (this.ConditionalItems != false)
                writer.writeBool(25, this.ConditionalItems);
            if (this.BarcodeAdditionalData.length)
                writer.writeString(26, this.BarcodeAdditionalData);
            if (this.invalidateCancelledPasses != dependency_1.io.Toggle.DO_NOT_USE)
                writer.writeEnum(27, this.invalidateCancelledPasses);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlightDesignator {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlightDesignator();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.carrierCode = reader.readString();
                        break;
                    case 2:
                        message.flightNumber = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.validFrom, () => message.validFrom = dependency_1.io.Date.deserialize(reader));
                        break;
                    case 4:
                        message.revision = reader.readUint32();
                        break;
                    case 5:
                        message.active = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.schedule, () => message.schedule = FlightSchedule.deserialize(reader));
                        break;
                    case 7:
                        message.operatingCarrierCode = reader.readString();
                        break;
                    case 8:
                        message.operatingFlightNumber = reader.readString();
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    case 10:
                        message.origin = reader.readString();
                        break;
                    case 11:
                        message.destination = reader.readString();
                        break;
                    case 12:
                        pb_1.Message.addToRepeatedField(message, 12, reader.readString());
                        break;
                    case 13:
                        message.departureTerminal = reader.readString();
                        break;
                    case 14:
                        message.arrivalTerminal = reader.readString();
                        break;
                    case 15:
                        pb_1.Message.addToRepeatedField(message, 15, reader.readString());
                        break;
                    case 16:
                        message.boardingPolicy = reader.readEnum();
                        break;
                    case 17:
                        message.seatClassPolicy = reader.readEnum();
                        break;
                    case 18:
                        message.alerts = reader.readPackedEnum();
                        break;
                    case 19:
                        message.passTemplateId = reader.readString();
                        break;
                    case 20:
                        message.autoInvalidateAfter = reader.readUint32();
                        break;
                    case 21:
                        message.autoInvalidateCancelledPasses = reader.readBool();
                        break;
                    case 22:
                        reader.readMessage(message.locationMessages, () => pb_1.Message.addToRepeatedWrapperField(message, 22, dependency_2.io.GPSLocation.deserialize(reader), dependency_2.io.GPSLocation));
                        break;
                    case 23:
                        reader.readMessage(message.beaconMessages, () => pb_1.Message.addToRepeatedWrapperField(message, 23, dependency_2.io.Beacon.deserialize(reader), dependency_2.io.Beacon));
                        break;
                    case 24:
                        reader.readMessage(message.defaultLinks, () => pb_1.Message.addToRepeatedWrapperField(message, 24, dependency_3.io.Link.deserialize(reader), dependency_3.io.Link));
                        break;
                    case 25:
                        message.ConditionalItems = reader.readBool();
                        break;
                    case 26:
                        message.BarcodeAdditionalData = reader.readString();
                        break;
                    case 27:
                        message.invalidateCancelledPasses = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FlightDesignator {
            return FlightDesignator.deserialize(bytes);
        }
    }
    export class FlightDesignatorRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            carrierCode?: string;
            flightNumber?: string;
            revision?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("carrierCode" in data && data.carrierCode != undefined) {
                    this.carrierCode = data.carrierCode;
                }
                if ("flightNumber" in data && data.flightNumber != undefined) {
                    this.flightNumber = data.flightNumber;
                }
                if ("revision" in data && data.revision != undefined) {
                    this.revision = data.revision;
                }
            }
        }
        get carrierCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set carrierCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get flightNumber() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set flightNumber(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get revision() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set revision(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            carrierCode?: string;
            flightNumber?: string;
            revision?: number;
        }): FlightDesignatorRequest {
            const message = new FlightDesignatorRequest({});
            if (data.carrierCode != null) {
                message.carrierCode = data.carrierCode;
            }
            if (data.flightNumber != null) {
                message.flightNumber = data.flightNumber;
            }
            if (data.revision != null) {
                message.revision = data.revision;
            }
            return message;
        }
        toObject() {
            const data: {
                carrierCode?: string;
                flightNumber?: string;
                revision?: number;
            } = {};
            if (this.carrierCode != null) {
                data.carrierCode = this.carrierCode;
            }
            if (this.flightNumber != null) {
                data.flightNumber = this.flightNumber;
            }
            if (this.revision != null) {
                data.revision = this.revision;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.carrierCode.length)
                writer.writeString(1, this.carrierCode);
            if (this.flightNumber.length)
                writer.writeString(2, this.flightNumber);
            if (this.revision != 0)
                writer.writeUint32(3, this.revision);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlightDesignatorRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlightDesignatorRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.carrierCode = reader.readString();
                        break;
                    case 2:
                        message.flightNumber = reader.readString();
                        break;
                    case 3:
                        message.revision = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FlightDesignatorRequest {
            return FlightDesignatorRequest.deserialize(bytes);
        }
    }
    export class FlightSchedule extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            monday?: FlightTimes;
            tuesday?: FlightTimes;
            wednesday?: FlightTimes;
            thursday?: FlightTimes;
            friday?: FlightTimes;
            saturday?: FlightTimes;
            sunday?: FlightTimes;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("monday" in data && data.monday != undefined) {
                    this.monday = data.monday;
                }
                if ("tuesday" in data && data.tuesday != undefined) {
                    this.tuesday = data.tuesday;
                }
                if ("wednesday" in data && data.wednesday != undefined) {
                    this.wednesday = data.wednesday;
                }
                if ("thursday" in data && data.thursday != undefined) {
                    this.thursday = data.thursday;
                }
                if ("friday" in data && data.friday != undefined) {
                    this.friday = data.friday;
                }
                if ("saturday" in data && data.saturday != undefined) {
                    this.saturday = data.saturday;
                }
                if ("sunday" in data && data.sunday != undefined) {
                    this.sunday = data.sunday;
                }
            }
        }
        get monday() {
            return pb_1.Message.getWrapperField(this, FlightTimes, 1) as FlightTimes;
        }
        set monday(value: FlightTimes) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasMonday() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get tuesday() {
            return pb_1.Message.getWrapperField(this, FlightTimes, 2) as FlightTimes;
        }
        set tuesday(value: FlightTimes) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasTuesday() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get wednesday() {
            return pb_1.Message.getWrapperField(this, FlightTimes, 3) as FlightTimes;
        }
        set wednesday(value: FlightTimes) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasWednesday() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get thursday() {
            return pb_1.Message.getWrapperField(this, FlightTimes, 4) as FlightTimes;
        }
        set thursday(value: FlightTimes) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasThursday() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get friday() {
            return pb_1.Message.getWrapperField(this, FlightTimes, 5) as FlightTimes;
        }
        set friday(value: FlightTimes) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasFriday() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get saturday() {
            return pb_1.Message.getWrapperField(this, FlightTimes, 6) as FlightTimes;
        }
        set saturday(value: FlightTimes) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasSaturday() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get sunday() {
            return pb_1.Message.getWrapperField(this, FlightTimes, 7) as FlightTimes;
        }
        set sunday(value: FlightTimes) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasSunday() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            monday?: ReturnType<typeof FlightTimes.prototype.toObject>;
            tuesday?: ReturnType<typeof FlightTimes.prototype.toObject>;
            wednesday?: ReturnType<typeof FlightTimes.prototype.toObject>;
            thursday?: ReturnType<typeof FlightTimes.prototype.toObject>;
            friday?: ReturnType<typeof FlightTimes.prototype.toObject>;
            saturday?: ReturnType<typeof FlightTimes.prototype.toObject>;
            sunday?: ReturnType<typeof FlightTimes.prototype.toObject>;
        }): FlightSchedule {
            const message = new FlightSchedule({});
            if (data.monday != null) {
                message.monday = FlightTimes.fromObject(data.monday);
            }
            if (data.tuesday != null) {
                message.tuesday = FlightTimes.fromObject(data.tuesday);
            }
            if (data.wednesday != null) {
                message.wednesday = FlightTimes.fromObject(data.wednesday);
            }
            if (data.thursday != null) {
                message.thursday = FlightTimes.fromObject(data.thursday);
            }
            if (data.friday != null) {
                message.friday = FlightTimes.fromObject(data.friday);
            }
            if (data.saturday != null) {
                message.saturday = FlightTimes.fromObject(data.saturday);
            }
            if (data.sunday != null) {
                message.sunday = FlightTimes.fromObject(data.sunday);
            }
            return message;
        }
        toObject() {
            const data: {
                monday?: ReturnType<typeof FlightTimes.prototype.toObject>;
                tuesday?: ReturnType<typeof FlightTimes.prototype.toObject>;
                wednesday?: ReturnType<typeof FlightTimes.prototype.toObject>;
                thursday?: ReturnType<typeof FlightTimes.prototype.toObject>;
                friday?: ReturnType<typeof FlightTimes.prototype.toObject>;
                saturday?: ReturnType<typeof FlightTimes.prototype.toObject>;
                sunday?: ReturnType<typeof FlightTimes.prototype.toObject>;
            } = {};
            if (this.monday != null) {
                data.monday = this.monday.toObject();
            }
            if (this.tuesday != null) {
                data.tuesday = this.tuesday.toObject();
            }
            if (this.wednesday != null) {
                data.wednesday = this.wednesday.toObject();
            }
            if (this.thursday != null) {
                data.thursday = this.thursday.toObject();
            }
            if (this.friday != null) {
                data.friday = this.friday.toObject();
            }
            if (this.saturday != null) {
                data.saturday = this.saturday.toObject();
            }
            if (this.sunday != null) {
                data.sunday = this.sunday.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasMonday)
                writer.writeMessage(1, this.monday, () => this.monday.serialize(writer));
            if (this.hasTuesday)
                writer.writeMessage(2, this.tuesday, () => this.tuesday.serialize(writer));
            if (this.hasWednesday)
                writer.writeMessage(3, this.wednesday, () => this.wednesday.serialize(writer));
            if (this.hasThursday)
                writer.writeMessage(4, this.thursday, () => this.thursday.serialize(writer));
            if (this.hasFriday)
                writer.writeMessage(5, this.friday, () => this.friday.serialize(writer));
            if (this.hasSaturday)
                writer.writeMessage(6, this.saturday, () => this.saturday.serialize(writer));
            if (this.hasSunday)
                writer.writeMessage(7, this.sunday, () => this.sunday.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlightSchedule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlightSchedule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.monday, () => message.monday = FlightTimes.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.tuesday, () => message.tuesday = FlightTimes.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.wednesday, () => message.wednesday = FlightTimes.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.thursday, () => message.thursday = FlightTimes.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.friday, () => message.friday = FlightTimes.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.saturday, () => message.saturday = FlightTimes.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.sunday, () => message.sunday = FlightTimes.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FlightSchedule {
            return FlightSchedule.deserialize(bytes);
        }
    }
    export class FlightTimes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scheduledDepartureTime?: dependency_1.io.Time;
            boardingTime?: dependency_1.io.Time;
            gateClosingTime?: dependency_1.io.Time;
            scheduledArrivalTime?: dependency_1.io.Time;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scheduledDepartureTime" in data && data.scheduledDepartureTime != undefined) {
                    this.scheduledDepartureTime = data.scheduledDepartureTime;
                }
                if ("boardingTime" in data && data.boardingTime != undefined) {
                    this.boardingTime = data.boardingTime;
                }
                if ("gateClosingTime" in data && data.gateClosingTime != undefined) {
                    this.gateClosingTime = data.gateClosingTime;
                }
                if ("scheduledArrivalTime" in data && data.scheduledArrivalTime != undefined) {
                    this.scheduledArrivalTime = data.scheduledArrivalTime;
                }
            }
        }
        get scheduledDepartureTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Time, 1) as dependency_1.io.Time;
        }
        set scheduledDepartureTime(value: dependency_1.io.Time) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasScheduledDepartureTime() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get boardingTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Time, 2) as dependency_1.io.Time;
        }
        set boardingTime(value: dependency_1.io.Time) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasBoardingTime() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get gateClosingTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Time, 3) as dependency_1.io.Time;
        }
        set gateClosingTime(value: dependency_1.io.Time) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasGateClosingTime() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get scheduledArrivalTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.Time, 4) as dependency_1.io.Time;
        }
        set scheduledArrivalTime(value: dependency_1.io.Time) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasScheduledArrivalTime() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            scheduledDepartureTime?: ReturnType<typeof dependency_1.io.Time.prototype.toObject>;
            boardingTime?: ReturnType<typeof dependency_1.io.Time.prototype.toObject>;
            gateClosingTime?: ReturnType<typeof dependency_1.io.Time.prototype.toObject>;
            scheduledArrivalTime?: ReturnType<typeof dependency_1.io.Time.prototype.toObject>;
        }): FlightTimes {
            const message = new FlightTimes({});
            if (data.scheduledDepartureTime != null) {
                message.scheduledDepartureTime = dependency_1.io.Time.fromObject(data.scheduledDepartureTime);
            }
            if (data.boardingTime != null) {
                message.boardingTime = dependency_1.io.Time.fromObject(data.boardingTime);
            }
            if (data.gateClosingTime != null) {
                message.gateClosingTime = dependency_1.io.Time.fromObject(data.gateClosingTime);
            }
            if (data.scheduledArrivalTime != null) {
                message.scheduledArrivalTime = dependency_1.io.Time.fromObject(data.scheduledArrivalTime);
            }
            return message;
        }
        toObject() {
            const data: {
                scheduledDepartureTime?: ReturnType<typeof dependency_1.io.Time.prototype.toObject>;
                boardingTime?: ReturnType<typeof dependency_1.io.Time.prototype.toObject>;
                gateClosingTime?: ReturnType<typeof dependency_1.io.Time.prototype.toObject>;
                scheduledArrivalTime?: ReturnType<typeof dependency_1.io.Time.prototype.toObject>;
            } = {};
            if (this.scheduledDepartureTime != null) {
                data.scheduledDepartureTime = this.scheduledDepartureTime.toObject();
            }
            if (this.boardingTime != null) {
                data.boardingTime = this.boardingTime.toObject();
            }
            if (this.gateClosingTime != null) {
                data.gateClosingTime = this.gateClosingTime.toObject();
            }
            if (this.scheduledArrivalTime != null) {
                data.scheduledArrivalTime = this.scheduledArrivalTime.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasScheduledDepartureTime)
                writer.writeMessage(1, this.scheduledDepartureTime, () => this.scheduledDepartureTime.serialize(writer));
            if (this.hasBoardingTime)
                writer.writeMessage(2, this.boardingTime, () => this.boardingTime.serialize(writer));
            if (this.hasGateClosingTime)
                writer.writeMessage(3, this.gateClosingTime, () => this.gateClosingTime.serialize(writer));
            if (this.hasScheduledArrivalTime)
                writer.writeMessage(4, this.scheduledArrivalTime, () => this.scheduledArrivalTime.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FlightTimes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FlightTimes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.scheduledDepartureTime, () => message.scheduledDepartureTime = dependency_1.io.Time.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.boardingTime, () => message.boardingTime = dependency_1.io.Time.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.gateClosingTime, () => message.gateClosingTime = dependency_1.io.Time.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.scheduledArrivalTime, () => message.scheduledArrivalTime = dependency_1.io.Time.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FlightTimes {
            return FlightTimes.deserialize(bytes);
        }
    }
}
