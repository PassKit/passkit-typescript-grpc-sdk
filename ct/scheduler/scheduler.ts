/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: ct/scheduler/scheduler.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../protoc-gen-openapiv2/options/annotations";
import * as dependency_2 from "./../../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export namespace ct {
    export enum JobStatus {
        JOB_STATUS_NONE = 0,
        JOB_STATUS_CREATED = 1,
        JOB_STATUS_READY = 2,
        JOB_STATUS_INFLIGHT = 3,
        JOB_STATUS_SUCCEEDED = 4,
        JOB_STATUS_FAILED = 5,
        JOB_STATUS_PAUSED = 6,
        JOB_STATUS_EXPIRED = 7,
        JOB_STATUS_DELETED = 8
    }
    export class SchedulingJob extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            jobFunction?: string;
            jobPayload?: string;
            name?: string;
            description?: string;
            schedule?: Schedule;
            status?: JobStatus;
            nextRunDatetime?: dependency_2.google.protobuf.Timestamp;
            lastRunDatetime?: dependency_2.google.protobuf.Timestamp;
            logs?: JobHistory[];
            created?: dependency_2.google.protobuf.Timestamp;
            updated?: dependency_2.google.protobuf.Timestamp;
            expiry?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("jobFunction" in data && data.jobFunction != undefined) {
                    this.jobFunction = data.jobFunction;
                }
                if ("jobPayload" in data && data.jobPayload != undefined) {
                    this.jobPayload = data.jobPayload;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("schedule" in data && data.schedule != undefined) {
                    this.schedule = data.schedule;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("nextRunDatetime" in data && data.nextRunDatetime != undefined) {
                    this.nextRunDatetime = data.nextRunDatetime;
                }
                if ("lastRunDatetime" in data && data.lastRunDatetime != undefined) {
                    this.lastRunDatetime = data.lastRunDatetime;
                }
                if ("logs" in data && data.logs != undefined) {
                    this.logs = data.logs;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
                if ("expiry" in data && data.expiry != undefined) {
                    this.expiry = data.expiry;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get jobFunction() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jobFunction(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get jobPayload() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set jobPayload(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get schedule() {
            return pb_1.Message.getWrapperField(this, Schedule, 6) as Schedule;
        }
        set schedule(value: Schedule) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasSchedule() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 7, JobStatus.JOB_STATUS_NONE) as JobStatus;
        }
        set status(value: JobStatus) {
            pb_1.Message.setField(this, 7, value);
        }
        get nextRunDatetime() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 8) as dependency_2.google.protobuf.Timestamp;
        }
        set nextRunDatetime(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasNextRunDatetime() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get lastRunDatetime() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 9) as dependency_2.google.protobuf.Timestamp;
        }
        set lastRunDatetime(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasLastRunDatetime() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get logs() {
            return pb_1.Message.getRepeatedWrapperField(this, JobHistory, 10) as JobHistory[];
        }
        set logs(value: JobHistory[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 11) as dependency_2.google.protobuf.Timestamp;
        }
        set created(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 12) as dependency_2.google.protobuf.Timestamp;
        }
        set updated(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get hasUpdated() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get expiry() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 13) as dependency_2.google.protobuf.Timestamp;
        }
        set expiry(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasExpiry() {
            return pb_1.Message.getField(this, 13) != null;
        }
        static fromObject(data: {
            id?: string;
            jobFunction?: string;
            jobPayload?: string;
            name?: string;
            description?: string;
            schedule?: ReturnType<typeof Schedule.prototype.toObject>;
            status?: JobStatus;
            nextRunDatetime?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            lastRunDatetime?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            logs?: ReturnType<typeof JobHistory.prototype.toObject>[];
            created?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            expiry?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): SchedulingJob {
            const message = new SchedulingJob({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.jobFunction != null) {
                message.jobFunction = data.jobFunction;
            }
            if (data.jobPayload != null) {
                message.jobPayload = data.jobPayload;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.schedule != null) {
                message.schedule = Schedule.fromObject(data.schedule);
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.nextRunDatetime != null) {
                message.nextRunDatetime = dependency_2.google.protobuf.Timestamp.fromObject(data.nextRunDatetime);
            }
            if (data.lastRunDatetime != null) {
                message.lastRunDatetime = dependency_2.google.protobuf.Timestamp.fromObject(data.lastRunDatetime);
            }
            if (data.logs != null) {
                message.logs = data.logs.map(item => JobHistory.fromObject(item));
            }
            if (data.created != null) {
                message.created = dependency_2.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_2.google.protobuf.Timestamp.fromObject(data.updated);
            }
            if (data.expiry != null) {
                message.expiry = dependency_2.google.protobuf.Timestamp.fromObject(data.expiry);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                jobFunction?: string;
                jobPayload?: string;
                name?: string;
                description?: string;
                schedule?: ReturnType<typeof Schedule.prototype.toObject>;
                status?: JobStatus;
                nextRunDatetime?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                lastRunDatetime?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                logs?: ReturnType<typeof JobHistory.prototype.toObject>[];
                created?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                expiry?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.jobFunction != null) {
                data.jobFunction = this.jobFunction;
            }
            if (this.jobPayload != null) {
                data.jobPayload = this.jobPayload;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.schedule != null) {
                data.schedule = this.schedule.toObject();
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.nextRunDatetime != null) {
                data.nextRunDatetime = this.nextRunDatetime.toObject();
            }
            if (this.lastRunDatetime != null) {
                data.lastRunDatetime = this.lastRunDatetime.toObject();
            }
            if (this.logs != null) {
                data.logs = this.logs.map((item: JobHistory) => item.toObject());
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            if (this.expiry != null) {
                data.expiry = this.expiry.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.jobFunction.length)
                writer.writeString(2, this.jobFunction);
            if (this.jobPayload.length)
                writer.writeString(3, this.jobPayload);
            if (this.name.length)
                writer.writeString(4, this.name);
            if (this.description.length)
                writer.writeString(5, this.description);
            if (this.hasSchedule)
                writer.writeMessage(6, this.schedule, () => this.schedule.serialize(writer));
            if (this.status != JobStatus.JOB_STATUS_NONE)
                writer.writeEnum(7, this.status);
            if (this.hasNextRunDatetime)
                writer.writeMessage(8, this.nextRunDatetime, () => this.nextRunDatetime.serialize(writer));
            if (this.hasLastRunDatetime)
                writer.writeMessage(9, this.lastRunDatetime, () => this.lastRunDatetime.serialize(writer));
            if (this.logs.length)
                writer.writeRepeatedMessage(10, this.logs, (item: JobHistory) => item.serialize(writer));
            if (this.hasCreated)
                writer.writeMessage(11, this.created, () => this.created.serialize(writer));
            if (this.hasUpdated)
                writer.writeMessage(12, this.updated, () => this.updated.serialize(writer));
            if (this.hasExpiry)
                writer.writeMessage(13, this.expiry, () => this.expiry.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SchedulingJob {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SchedulingJob();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.jobFunction = reader.readString();
                        break;
                    case 3:
                        message.jobPayload = reader.readString();
                        break;
                    case 4:
                        message.name = reader.readString();
                        break;
                    case 5:
                        message.description = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.schedule, () => message.schedule = Schedule.deserialize(reader));
                        break;
                    case 7:
                        message.status = reader.readEnum();
                        break;
                    case 8:
                        reader.readMessage(message.nextRunDatetime, () => message.nextRunDatetime = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.lastRunDatetime, () => message.lastRunDatetime = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.logs, () => pb_1.Message.addToRepeatedWrapperField(message, 10, JobHistory.deserialize(reader), JobHistory));
                        break;
                    case 11:
                        reader.readMessage(message.created, () => message.created = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.updated, () => message.updated = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.expiry, () => message.expiry = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SchedulingJob {
            return SchedulingJob.deserialize(bytes);
        }
    }
    export class Schedule extends pb_1.Message {
        #one_of_decls: number[][] = [[15, 16]];
        constructor(data?: any[] | ({
            schedule?: string;
            timezone?: string;
            startsAt?: dependency_2.google.protobuf.Timestamp;
        } & (({
            repeatCount?: number;
            expiryDate?: never;
        } | {
            repeatCount?: never;
            expiryDate?: dependency_2.google.protobuf.Timestamp;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("schedule" in data && data.schedule != undefined) {
                    this.schedule = data.schedule;
                }
                if ("timezone" in data && data.timezone != undefined) {
                    this.timezone = data.timezone;
                }
                if ("startsAt" in data && data.startsAt != undefined) {
                    this.startsAt = data.startsAt;
                }
                if ("repeatCount" in data && data.repeatCount != undefined) {
                    this.repeatCount = data.repeatCount;
                }
                if ("expiryDate" in data && data.expiryDate != undefined) {
                    this.expiryDate = data.expiryDate;
                }
            }
        }
        get schedule() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set schedule(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timezone() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set timezone(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get startsAt() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 3) as dependency_2.google.protobuf.Timestamp;
        }
        set startsAt(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasStartsAt() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get repeatCount() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set repeatCount(value: number) {
            pb_1.Message.setOneofField(this, 15, this.#one_of_decls[0], value);
        }
        get hasRepeatCount() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get expiryDate() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 16) as dependency_2.google.protobuf.Timestamp;
        }
        set expiryDate(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setOneofWrapperField(this, 16, this.#one_of_decls[0], value);
        }
        get hasExpiryDate() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get expiry() {
            const cases: {
                [index: number]: "none" | "repeatCount" | "expiryDate";
            } = {
                0: "none",
                15: "repeatCount",
                16: "expiryDate"
            };
            return cases[pb_1.Message.computeOneofCase(this, [15, 16])];
        }
        static fromObject(data: {
            schedule?: string;
            timezone?: string;
            startsAt?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            repeatCount?: number;
            expiryDate?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): Schedule {
            const message = new Schedule({});
            if (data.schedule != null) {
                message.schedule = data.schedule;
            }
            if (data.timezone != null) {
                message.timezone = data.timezone;
            }
            if (data.startsAt != null) {
                message.startsAt = dependency_2.google.protobuf.Timestamp.fromObject(data.startsAt);
            }
            if (data.repeatCount != null) {
                message.repeatCount = data.repeatCount;
            }
            if (data.expiryDate != null) {
                message.expiryDate = dependency_2.google.protobuf.Timestamp.fromObject(data.expiryDate);
            }
            return message;
        }
        toObject() {
            const data: {
                schedule?: string;
                timezone?: string;
                startsAt?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                repeatCount?: number;
                expiryDate?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.schedule != null) {
                data.schedule = this.schedule;
            }
            if (this.timezone != null) {
                data.timezone = this.timezone;
            }
            if (this.startsAt != null) {
                data.startsAt = this.startsAt.toObject();
            }
            if (this.repeatCount != null) {
                data.repeatCount = this.repeatCount;
            }
            if (this.expiryDate != null) {
                data.expiryDate = this.expiryDate.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.schedule.length)
                writer.writeString(1, this.schedule);
            if (this.timezone.length)
                writer.writeString(2, this.timezone);
            if (this.hasStartsAt)
                writer.writeMessage(3, this.startsAt, () => this.startsAt.serialize(writer));
            if (this.hasRepeatCount)
                writer.writeSint32(15, this.repeatCount);
            if (this.hasExpiryDate)
                writer.writeMessage(16, this.expiryDate, () => this.expiryDate.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Schedule {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Schedule();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.schedule = reader.readString();
                        break;
                    case 2:
                        message.timezone = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.startsAt, () => message.startsAt = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 15:
                        message.repeatCount = reader.readSint32();
                        break;
                    case 16:
                        reader.readMessage(message.expiryDate, () => message.expiryDate = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Schedule {
            return Schedule.deserialize(bytes);
        }
    }
    export class SchedulingJobResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            status?: JobStatus;
            nextRunDatetime?: dependency_2.google.protobuf.Timestamp;
            expiry?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("nextRunDatetime" in data && data.nextRunDatetime != undefined) {
                    this.nextRunDatetime = data.nextRunDatetime;
                }
                if ("expiry" in data && data.expiry != undefined) {
                    this.expiry = data.expiry;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, JobStatus.JOB_STATUS_NONE) as JobStatus;
        }
        set status(value: JobStatus) {
            pb_1.Message.setField(this, 2, value);
        }
        get nextRunDatetime() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 3) as dependency_2.google.protobuf.Timestamp;
        }
        set nextRunDatetime(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasNextRunDatetime() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get expiry() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 4) as dependency_2.google.protobuf.Timestamp;
        }
        set expiry(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasExpiry() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: string;
            status?: JobStatus;
            nextRunDatetime?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            expiry?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): SchedulingJobResponse {
            const message = new SchedulingJobResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.nextRunDatetime != null) {
                message.nextRunDatetime = dependency_2.google.protobuf.Timestamp.fromObject(data.nextRunDatetime);
            }
            if (data.expiry != null) {
                message.expiry = dependency_2.google.protobuf.Timestamp.fromObject(data.expiry);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                status?: JobStatus;
                nextRunDatetime?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                expiry?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.nextRunDatetime != null) {
                data.nextRunDatetime = this.nextRunDatetime.toObject();
            }
            if (this.expiry != null) {
                data.expiry = this.expiry.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.status != JobStatus.JOB_STATUS_NONE)
                writer.writeEnum(2, this.status);
            if (this.hasNextRunDatetime)
                writer.writeMessage(3, this.nextRunDatetime, () => this.nextRunDatetime.serialize(writer));
            if (this.hasExpiry)
                writer.writeMessage(4, this.expiry, () => this.expiry.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SchedulingJobResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SchedulingJobResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.status = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.nextRunDatetime, () => message.nextRunDatetime = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.expiry, () => message.expiry = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SchedulingJobResponse {
            return SchedulingJobResponse.deserialize(bytes);
        }
    }
    export class JobHistory extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            jobId?: string;
            success?: boolean;
            log?: string;
            statusCode?: number;
            scheduledRunDateTime?: dependency_2.google.protobuf.Timestamp;
            completedAt?: dependency_2.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("jobId" in data && data.jobId != undefined) {
                    this.jobId = data.jobId;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("log" in data && data.log != undefined) {
                    this.log = data.log;
                }
                if ("statusCode" in data && data.statusCode != undefined) {
                    this.statusCode = data.statusCode;
                }
                if ("scheduledRunDateTime" in data && data.scheduledRunDateTime != undefined) {
                    this.scheduledRunDateTime = data.scheduledRunDateTime;
                }
                if ("completedAt" in data && data.completedAt != undefined) {
                    this.completedAt = data.completedAt;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get jobId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set jobId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get log() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set log(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get statusCode() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set statusCode(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get scheduledRunDateTime() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 6) as dependency_2.google.protobuf.Timestamp;
        }
        set scheduledRunDateTime(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasScheduledRunDateTime() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get completedAt() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 7) as dependency_2.google.protobuf.Timestamp;
        }
        set completedAt(value: dependency_2.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasCompletedAt() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            id?: string;
            jobId?: string;
            success?: boolean;
            log?: string;
            statusCode?: number;
            scheduledRunDateTime?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            completedAt?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
        }): JobHistory {
            const message = new JobHistory({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.jobId != null) {
                message.jobId = data.jobId;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.log != null) {
                message.log = data.log;
            }
            if (data.statusCode != null) {
                message.statusCode = data.statusCode;
            }
            if (data.scheduledRunDateTime != null) {
                message.scheduledRunDateTime = dependency_2.google.protobuf.Timestamp.fromObject(data.scheduledRunDateTime);
            }
            if (data.completedAt != null) {
                message.completedAt = dependency_2.google.protobuf.Timestamp.fromObject(data.completedAt);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                jobId?: string;
                success?: boolean;
                log?: string;
                statusCode?: number;
                scheduledRunDateTime?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
                completedAt?: ReturnType<typeof dependency_2.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.jobId != null) {
                data.jobId = this.jobId;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.log != null) {
                data.log = this.log;
            }
            if (this.statusCode != null) {
                data.statusCode = this.statusCode;
            }
            if (this.scheduledRunDateTime != null) {
                data.scheduledRunDateTime = this.scheduledRunDateTime.toObject();
            }
            if (this.completedAt != null) {
                data.completedAt = this.completedAt.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.jobId.length)
                writer.writeString(2, this.jobId);
            if (this.success != false)
                writer.writeBool(3, this.success);
            if (this.log.length)
                writer.writeString(4, this.log);
            if (this.statusCode != 0)
                writer.writeUint32(5, this.statusCode);
            if (this.hasScheduledRunDateTime)
                writer.writeMessage(6, this.scheduledRunDateTime, () => this.scheduledRunDateTime.serialize(writer));
            if (this.hasCompletedAt)
                writer.writeMessage(7, this.completedAt, () => this.completedAt.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JobHistory {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JobHistory();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.jobId = reader.readString();
                        break;
                    case 3:
                        message.success = reader.readBool();
                        break;
                    case 4:
                        message.log = reader.readString();
                        break;
                    case 5:
                        message.statusCode = reader.readUint32();
                        break;
                    case 6:
                        reader.readMessage(message.scheduledRunDateTime, () => message.scheduledRunDateTime = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.completedAt, () => message.completedAt = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JobHistory {
            return JobHistory.deserialize(bytes);
        }
    }
}
