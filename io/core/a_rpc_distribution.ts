/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/core/a_rpc_distribution.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/api/annotations";
import * as dependency_2 from "./../../google/protobuf/empty";
import * as dependency_3 from "./../../protoc-gen-openapiv2/options/annotations";
import * as dependency_4 from "./../common/common_objects";
import * as dependency_5 from "./../common/distribution";
import * as grpc_1 from "@grpc/grpc-js";
export namespace io {
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedDistributionService {
        static definition = {
            sendWelcomeEmail: {
                path: "/io.Distribution/sendWelcomeEmail",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.io.EmailDistributionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.io.EmailDistributionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            getSmartPassLink: {
                path: "/io.Distribution/getSmartPassLink",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.io.SmartPassLinkRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.io.SmartPassLinkRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.io.Url) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.io.Url.deserialize(new Uint8Array(bytes))
            },
            getDataCollectionPageFields: {
                path: "/io.Distribution/getDataCollectionPageFields",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_4.io.ClassObjectInput) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_4.io.ClassObjectInput.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_5.io.DataCollectionFields) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_5.io.DataCollectionFields.deserialize(new Uint8Array(bytes))
            },
            uploadSmartPassCsv: {
                path: "/io.Distribution/uploadSmartPassCsv",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.io.SmartPassCsvUploadRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.io.SmartPassCsvUploadRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            importProtocolCsv: {
                path: "/io.Distribution/importProtocolCsv",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.io.ImportProtocolRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.io.ImportProtocolRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            validateBarcode: {
                path: "/io.Distribution/validateBarcode",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_4.io.Payload) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_4.io.Payload.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_4.io.Payload) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_4.io.Payload.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract sendWelcomeEmail(call: grpc_1.ServerUnaryCall<dependency_5.io.EmailDistributionRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract getSmartPassLink(call: grpc_1.ServerUnaryCall<dependency_5.io.SmartPassLinkRequest, dependency_4.io.Url>, callback: grpc_1.sendUnaryData<dependency_4.io.Url>): void;
        abstract getDataCollectionPageFields(call: grpc_1.ServerUnaryCall<dependency_4.io.ClassObjectInput, dependency_5.io.DataCollectionFields>, callback: grpc_1.sendUnaryData<dependency_5.io.DataCollectionFields>): void;
        abstract uploadSmartPassCsv(call: grpc_1.ServerUnaryCall<dependency_5.io.SmartPassCsvUploadRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract importProtocolCsv(call: grpc_1.ServerUnaryCall<dependency_5.io.ImportProtocolRequest, dependency_2.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_2.google.protobuf.Empty>): void;
        abstract validateBarcode(call: grpc_1.ServerUnaryCall<dependency_4.io.Payload, dependency_4.io.Payload>, callback: grpc_1.sendUnaryData<dependency_4.io.Payload>): void;
    }
    export class DistributionClient extends grpc_1.makeGenericClientConstructor(UnimplementedDistributionService.definition, "Distribution", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        sendWelcomeEmail: GrpcPromiseServiceInterface<dependency_5.io.EmailDistributionRequest, dependency_2.google.protobuf.Empty> = (message: dependency_5.io.EmailDistributionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_2.google.protobuf.Empty> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.sendWelcomeEmail(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_2.google.protobuf.Empty) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        getSmartPassLink: GrpcPromiseServiceInterface<dependency_5.io.SmartPassLinkRequest, dependency_4.io.Url> = (message: dependency_5.io.SmartPassLinkRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_4.io.Url> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getSmartPassLink(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_4.io.Url) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        getDataCollectionPageFields: GrpcPromiseServiceInterface<dependency_4.io.ClassObjectInput, dependency_5.io.DataCollectionFields> = (message: dependency_4.io.ClassObjectInput, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_5.io.DataCollectionFields> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getDataCollectionPageFields(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_5.io.DataCollectionFields) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        uploadSmartPassCsv: GrpcPromiseServiceInterface<dependency_5.io.SmartPassCsvUploadRequest, dependency_2.google.protobuf.Empty> = (message: dependency_5.io.SmartPassCsvUploadRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_2.google.protobuf.Empty> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.uploadSmartPassCsv(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_2.google.protobuf.Empty) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        importProtocolCsv: GrpcPromiseServiceInterface<dependency_5.io.ImportProtocolRequest, dependency_2.google.protobuf.Empty> = (message: dependency_5.io.ImportProtocolRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_2.google.protobuf.Empty> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.importProtocolCsv(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_2.google.protobuf.Empty) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        validateBarcode: GrpcPromiseServiceInterface<dependency_4.io.Payload, dependency_4.io.Payload> = (message: dependency_4.io.Payload, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_4.io.Payload> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.validateBarcode(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_4.io.Payload) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
    }
}
