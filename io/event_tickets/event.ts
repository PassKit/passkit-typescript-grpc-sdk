/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/event_tickets/event.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./../common/billing";
import * as dependency_3 from "./../common/metrics";
import * as dependency_4 from "./../common/filter";
import * as dependency_5 from "./../common/semantics";
import * as dependency_6 from "./production";
import * as dependency_7 from "./venue";
import * as dependency_8 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace event_tickets {
    export class Event extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            production?: dependency_6.event_tickets.Production;
            venue?: dependency_7.event_tickets.Venue;
            doorsOpen?: dependency_1.google.protobuf.Timestamp;
            scheduledStartDate?: dependency_1.google.protobuf.Timestamp;
            actualStartDate?: dependency_1.google.protobuf.Timestamp;
            endDate?: dependency_1.google.protobuf.Timestamp;
            relevantDate?: dependency_1.google.protobuf.Timestamp;
            quota?: dependency_2.io.Quota;
            metrics?: dependency_3.io.Metrics;
            relevantDates?: EventHours[];
            semanticTags?: dependency_5.io.EventSemanticTags;
            created?: dependency_1.google.protobuf.Timestamp;
            updated?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("production" in data && data.production != undefined) {
                    this.production = data.production;
                }
                if ("venue" in data && data.venue != undefined) {
                    this.venue = data.venue;
                }
                if ("doorsOpen" in data && data.doorsOpen != undefined) {
                    this.doorsOpen = data.doorsOpen;
                }
                if ("scheduledStartDate" in data && data.scheduledStartDate != undefined) {
                    this.scheduledStartDate = data.scheduledStartDate;
                }
                if ("actualStartDate" in data && data.actualStartDate != undefined) {
                    this.actualStartDate = data.actualStartDate;
                }
                if ("endDate" in data && data.endDate != undefined) {
                    this.endDate = data.endDate;
                }
                if ("relevantDate" in data && data.relevantDate != undefined) {
                    this.relevantDate = data.relevantDate;
                }
                if ("quota" in data && data.quota != undefined) {
                    this.quota = data.quota;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
                if ("relevantDates" in data && data.relevantDates != undefined) {
                    this.relevantDates = data.relevantDates;
                }
                if ("semanticTags" in data && data.semanticTags != undefined) {
                    this.semanticTags = data.semanticTags;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get production() {
            return pb_1.Message.getWrapperField(this, dependency_6.event_tickets.Production, 2) as dependency_6.event_tickets.Production;
        }
        set production(value: dependency_6.event_tickets.Production) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasProduction() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get venue() {
            return pb_1.Message.getWrapperField(this, dependency_7.event_tickets.Venue, 3) as dependency_7.event_tickets.Venue;
        }
        set venue(value: dependency_7.event_tickets.Venue) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasVenue() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get doorsOpen() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set doorsOpen(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasDoorsOpen() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get scheduledStartDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set scheduledStartDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasScheduledStartDate() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get actualStartDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set actualStartDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasActualStartDate() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get endDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 7) as dependency_1.google.protobuf.Timestamp;
        }
        set endDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasEndDate() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get relevantDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 8) as dependency_1.google.protobuf.Timestamp;
        }
        set relevantDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasRelevantDate() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get quota() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.Quota, 9) as dependency_2.io.Quota;
        }
        set quota(value: dependency_2.io.Quota) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasQuota() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get metrics() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.Metrics, 10) as dependency_3.io.Metrics;
        }
        set metrics(value: dependency_3.io.Metrics) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasMetrics() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get relevantDates() {
            return pb_1.Message.getRepeatedWrapperField(this, EventHours, 13) as EventHours[];
        }
        set relevantDates(value: EventHours[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get semanticTags() {
            return pb_1.Message.getWrapperField(this, dependency_5.io.EventSemanticTags, 14) as dependency_5.io.EventSemanticTags;
        }
        set semanticTags(value: dependency_5.io.EventSemanticTags) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get hasSemanticTags() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 11) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 12) as dependency_1.google.protobuf.Timestamp;
        }
        set updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get hasUpdated() {
            return pb_1.Message.getField(this, 12) != null;
        }
        static fromObject(data: {
            id?: string;
            production?: ReturnType<typeof dependency_6.event_tickets.Production.prototype.toObject>;
            venue?: ReturnType<typeof dependency_7.event_tickets.Venue.prototype.toObject>;
            doorsOpen?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            scheduledStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            actualStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            endDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            relevantDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            quota?: ReturnType<typeof dependency_2.io.Quota.prototype.toObject>;
            metrics?: ReturnType<typeof dependency_3.io.Metrics.prototype.toObject>;
            relevantDates?: ReturnType<typeof EventHours.prototype.toObject>[];
            semanticTags?: ReturnType<typeof dependency_5.io.EventSemanticTags.prototype.toObject>;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): Event {
            const message = new Event({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.production != null) {
                message.production = dependency_6.event_tickets.Production.fromObject(data.production);
            }
            if (data.venue != null) {
                message.venue = dependency_7.event_tickets.Venue.fromObject(data.venue);
            }
            if (data.doorsOpen != null) {
                message.doorsOpen = dependency_1.google.protobuf.Timestamp.fromObject(data.doorsOpen);
            }
            if (data.scheduledStartDate != null) {
                message.scheduledStartDate = dependency_1.google.protobuf.Timestamp.fromObject(data.scheduledStartDate);
            }
            if (data.actualStartDate != null) {
                message.actualStartDate = dependency_1.google.protobuf.Timestamp.fromObject(data.actualStartDate);
            }
            if (data.endDate != null) {
                message.endDate = dependency_1.google.protobuf.Timestamp.fromObject(data.endDate);
            }
            if (data.relevantDate != null) {
                message.relevantDate = dependency_1.google.protobuf.Timestamp.fromObject(data.relevantDate);
            }
            if (data.quota != null) {
                message.quota = dependency_2.io.Quota.fromObject(data.quota);
            }
            if (data.metrics != null) {
                message.metrics = dependency_3.io.Metrics.fromObject(data.metrics);
            }
            if (data.relevantDates != null) {
                message.relevantDates = data.relevantDates.map(item => EventHours.fromObject(item));
            }
            if (data.semanticTags != null) {
                message.semanticTags = dependency_5.io.EventSemanticTags.fromObject(data.semanticTags);
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_1.google.protobuf.Timestamp.fromObject(data.updated);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                production?: ReturnType<typeof dependency_6.event_tickets.Production.prototype.toObject>;
                venue?: ReturnType<typeof dependency_7.event_tickets.Venue.prototype.toObject>;
                doorsOpen?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                scheduledStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                actualStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                endDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                relevantDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                quota?: ReturnType<typeof dependency_2.io.Quota.prototype.toObject>;
                metrics?: ReturnType<typeof dependency_3.io.Metrics.prototype.toObject>;
                relevantDates?: ReturnType<typeof EventHours.prototype.toObject>[];
                semanticTags?: ReturnType<typeof dependency_5.io.EventSemanticTags.prototype.toObject>;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.production != null) {
                data.production = this.production.toObject();
            }
            if (this.venue != null) {
                data.venue = this.venue.toObject();
            }
            if (this.doorsOpen != null) {
                data.doorsOpen = this.doorsOpen.toObject();
            }
            if (this.scheduledStartDate != null) {
                data.scheduledStartDate = this.scheduledStartDate.toObject();
            }
            if (this.actualStartDate != null) {
                data.actualStartDate = this.actualStartDate.toObject();
            }
            if (this.endDate != null) {
                data.endDate = this.endDate.toObject();
            }
            if (this.relevantDate != null) {
                data.relevantDate = this.relevantDate.toObject();
            }
            if (this.quota != null) {
                data.quota = this.quota.toObject();
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.toObject();
            }
            if (this.relevantDates != null) {
                data.relevantDates = this.relevantDates.map((item: EventHours) => item.toObject());
            }
            if (this.semanticTags != null) {
                data.semanticTags = this.semanticTags.toObject();
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.hasProduction)
                writer.writeMessage(2, this.production, () => this.production.serialize(writer));
            if (this.hasVenue)
                writer.writeMessage(3, this.venue, () => this.venue.serialize(writer));
            if (this.hasDoorsOpen)
                writer.writeMessage(4, this.doorsOpen, () => this.doorsOpen.serialize(writer));
            if (this.hasScheduledStartDate)
                writer.writeMessage(5, this.scheduledStartDate, () => this.scheduledStartDate.serialize(writer));
            if (this.hasActualStartDate)
                writer.writeMessage(6, this.actualStartDate, () => this.actualStartDate.serialize(writer));
            if (this.hasEndDate)
                writer.writeMessage(7, this.endDate, () => this.endDate.serialize(writer));
            if (this.hasRelevantDate)
                writer.writeMessage(8, this.relevantDate, () => this.relevantDate.serialize(writer));
            if (this.hasQuota)
                writer.writeMessage(9, this.quota, () => this.quota.serialize(writer));
            if (this.hasMetrics)
                writer.writeMessage(10, this.metrics, () => this.metrics.serialize(writer));
            if (this.relevantDates.length)
                writer.writeRepeatedMessage(13, this.relevantDates, (item: EventHours) => item.serialize(writer));
            if (this.hasSemanticTags)
                writer.writeMessage(14, this.semanticTags, () => this.semanticTags.serialize(writer));
            if (this.hasCreated)
                writer.writeMessage(11, this.created, () => this.created.serialize(writer));
            if (this.hasUpdated)
                writer.writeMessage(12, this.updated, () => this.updated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Event {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Event();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.production, () => message.production = dependency_6.event_tickets.Production.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.venue, () => message.venue = dependency_7.event_tickets.Venue.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.doorsOpen, () => message.doorsOpen = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.scheduledStartDate, () => message.scheduledStartDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.actualStartDate, () => message.actualStartDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.endDate, () => message.endDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.relevantDate, () => message.relevantDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.quota, () => message.quota = dependency_2.io.Quota.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.metrics, () => message.metrics = dependency_3.io.Metrics.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.relevantDates, () => pb_1.Message.addToRepeatedWrapperField(message, 13, EventHours.deserialize(reader), EventHours));
                        break;
                    case 14:
                        reader.readMessage(message.semanticTags, () => message.semanticTags = dependency_5.io.EventSemanticTags.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.updated, () => message.updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Event {
            return Event.deserialize(bytes);
        }
    }
    export class EventHours extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            startTime?: dependency_1.google.protobuf.Timestamp;
            endTime?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("startTime" in data && data.startTime != undefined) {
                    this.startTime = data.startTime;
                }
                if ("endTime" in data && data.endTime != undefined) {
                    this.endTime = data.endTime;
                }
            }
        }
        get startTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set startTime(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasStartTime() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get endTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set endTime(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasEndTime() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            startTime?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            endTime?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): EventHours {
            const message = new EventHours({});
            if (data.startTime != null) {
                message.startTime = dependency_1.google.protobuf.Timestamp.fromObject(data.startTime);
            }
            if (data.endTime != null) {
                message.endTime = dependency_1.google.protobuf.Timestamp.fromObject(data.endTime);
            }
            return message;
        }
        toObject() {
            const data: {
                startTime?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                endTime?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.startTime != null) {
                data.startTime = this.startTime.toObject();
            }
            if (this.endTime != null) {
                data.endTime = this.endTime.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasStartTime)
                writer.writeMessage(1, this.startTime, () => this.startTime.serialize(writer));
            if (this.hasEndTime)
                writer.writeMessage(2, this.endTime, () => this.endTime.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventHours {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventHours();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.startTime, () => message.startTime = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.endTime, () => message.endTime = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventHours {
            return EventHours.deserialize(bytes);
        }
    }
    export class EventListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            venueId?: string;
            filters?: dependency_4.io.Filters;
        } & (({
            productionId?: string;
            productionUid?: never;
        } | {
            productionId?: never;
            productionUid?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productionId" in data && data.productionId != undefined) {
                    this.productionId = data.productionId;
                }
                if ("productionUid" in data && data.productionUid != undefined) {
                    this.productionUid = data.productionUid;
                }
                if ("venueId" in data && data.venueId != undefined) {
                    this.venueId = data.venueId;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
            }
        }
        get productionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productionId(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get hasProductionId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get productionUid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set productionUid(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get hasProductionUid() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get venueId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set venueId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get filters() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.Filters, 4) as dependency_4.io.Filters;
        }
        set filters(value: dependency_4.io.Filters) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasFilters() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get production() {
            const cases: {
                [index: number]: "none" | "productionId" | "productionUid";
            } = {
                0: "none",
                1: "productionId",
                2: "productionUid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            productionId?: string;
            productionUid?: string;
            venueId?: string;
            filters?: ReturnType<typeof dependency_4.io.Filters.prototype.toObject>;
        }): EventListRequest {
            const message = new EventListRequest({});
            if (data.productionId != null) {
                message.productionId = data.productionId;
            }
            if (data.productionUid != null) {
                message.productionUid = data.productionUid;
            }
            if (data.venueId != null) {
                message.venueId = data.venueId;
            }
            if (data.filters != null) {
                message.filters = dependency_4.io.Filters.fromObject(data.filters);
            }
            return message;
        }
        toObject() {
            const data: {
                productionId?: string;
                productionUid?: string;
                venueId?: string;
                filters?: ReturnType<typeof dependency_4.io.Filters.prototype.toObject>;
            } = {};
            if (this.productionId != null) {
                data.productionId = this.productionId;
            }
            if (this.productionUid != null) {
                data.productionUid = this.productionUid;
            }
            if (this.venueId != null) {
                data.venueId = this.venueId;
            }
            if (this.filters != null) {
                data.filters = this.filters.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasProductionId)
                writer.writeString(1, this.productionId);
            if (this.hasProductionUid)
                writer.writeString(2, this.productionUid);
            if (this.venueId.length)
                writer.writeString(3, this.venueId);
            if (this.hasFilters)
                writer.writeMessage(4, this.filters, () => this.filters.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productionId = reader.readString();
                        break;
                    case 2:
                        message.productionUid = reader.readString();
                        break;
                    case 3:
                        message.venueId = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.filters, () => message.filters = dependency_4.io.Filters.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventListRequest {
            return EventListRequest.deserialize(bytes);
        }
    }
    export class GetEventRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2], [3, 4]];
        constructor(data?: any[] | ({
            scheduledStartDate?: dependency_1.google.protobuf.Timestamp;
        } & (({
            productionId?: string;
            productionUid?: never;
        } | {
            productionId?: never;
            productionUid?: string;
        }) | ({
            venueId?: string;
            venueUid?: never;
        } | {
            venueId?: never;
            venueUid?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productionId" in data && data.productionId != undefined) {
                    this.productionId = data.productionId;
                }
                if ("productionUid" in data && data.productionUid != undefined) {
                    this.productionUid = data.productionUid;
                }
                if ("venueId" in data && data.venueId != undefined) {
                    this.venueId = data.venueId;
                }
                if ("venueUid" in data && data.venueUid != undefined) {
                    this.venueUid = data.venueUid;
                }
                if ("scheduledStartDate" in data && data.scheduledStartDate != undefined) {
                    this.scheduledStartDate = data.scheduledStartDate;
                }
            }
        }
        get productionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productionId(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get hasProductionId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get productionUid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set productionUid(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get hasProductionUid() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get venueId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set venueId(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get hasVenueId() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get venueUid() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set venueUid(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[1], value);
        }
        get hasVenueUid() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get scheduledStartDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set scheduledStartDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasScheduledStartDate() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get production() {
            const cases: {
                [index: number]: "none" | "productionId" | "productionUid";
            } = {
                0: "none",
                1: "productionId",
                2: "productionUid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        get venue() {
            const cases: {
                [index: number]: "none" | "venueId" | "venueUid";
            } = {
                0: "none",
                3: "venueId",
                4: "venueUid"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        static fromObject(data: {
            productionId?: string;
            productionUid?: string;
            venueId?: string;
            venueUid?: string;
            scheduledStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): GetEventRequest {
            const message = new GetEventRequest({});
            if (data.productionId != null) {
                message.productionId = data.productionId;
            }
            if (data.productionUid != null) {
                message.productionUid = data.productionUid;
            }
            if (data.venueId != null) {
                message.venueId = data.venueId;
            }
            if (data.venueUid != null) {
                message.venueUid = data.venueUid;
            }
            if (data.scheduledStartDate != null) {
                message.scheduledStartDate = dependency_1.google.protobuf.Timestamp.fromObject(data.scheduledStartDate);
            }
            return message;
        }
        toObject() {
            const data: {
                productionId?: string;
                productionUid?: string;
                venueId?: string;
                venueUid?: string;
                scheduledStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.productionId != null) {
                data.productionId = this.productionId;
            }
            if (this.productionUid != null) {
                data.productionUid = this.productionUid;
            }
            if (this.venueId != null) {
                data.venueId = this.venueId;
            }
            if (this.venueUid != null) {
                data.venueUid = this.venueUid;
            }
            if (this.scheduledStartDate != null) {
                data.scheduledStartDate = this.scheduledStartDate.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasProductionId)
                writer.writeString(1, this.productionId);
            if (this.hasProductionUid)
                writer.writeString(2, this.productionUid);
            if (this.hasVenueId)
                writer.writeString(3, this.venueId);
            if (this.hasVenueUid)
                writer.writeString(4, this.venueUid);
            if (this.hasScheduledStartDate)
                writer.writeMessage(5, this.scheduledStartDate, () => this.scheduledStartDate.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetEventRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetEventRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productionId = reader.readString();
                        break;
                    case 2:
                        message.productionUid = reader.readString();
                        break;
                    case 3:
                        message.venueId = reader.readString();
                        break;
                    case 4:
                        message.venueUid = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.scheduledStartDate, () => message.scheduledStartDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetEventRequest {
            return GetEventRequest.deserialize(bytes);
        }
    }
    export class EventLimitedFieldsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            scheduledStartDate?: dependency_1.google.protobuf.Timestamp;
            actualStartDate?: dependency_1.google.protobuf.Timestamp;
            endDate?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("scheduledStartDate" in data && data.scheduledStartDate != undefined) {
                    this.scheduledStartDate = data.scheduledStartDate;
                }
                if ("actualStartDate" in data && data.actualStartDate != undefined) {
                    this.actualStartDate = data.actualStartDate;
                }
                if ("endDate" in data && data.endDate != undefined) {
                    this.endDate = data.endDate;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get scheduledStartDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set scheduledStartDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasScheduledStartDate() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get actualStartDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set actualStartDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasActualStartDate() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get endDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set endDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasEndDate() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: string;
            scheduledStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            actualStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            endDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): EventLimitedFieldsResponse {
            const message = new EventLimitedFieldsResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.scheduledStartDate != null) {
                message.scheduledStartDate = dependency_1.google.protobuf.Timestamp.fromObject(data.scheduledStartDate);
            }
            if (data.actualStartDate != null) {
                message.actualStartDate = dependency_1.google.protobuf.Timestamp.fromObject(data.actualStartDate);
            }
            if (data.endDate != null) {
                message.endDate = dependency_1.google.protobuf.Timestamp.fromObject(data.endDate);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                scheduledStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                actualStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                endDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.scheduledStartDate != null) {
                data.scheduledStartDate = this.scheduledStartDate.toObject();
            }
            if (this.actualStartDate != null) {
                data.actualStartDate = this.actualStartDate.toObject();
            }
            if (this.endDate != null) {
                data.endDate = this.endDate.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.hasScheduledStartDate)
                writer.writeMessage(2, this.scheduledStartDate, () => this.scheduledStartDate.serialize(writer));
            if (this.hasActualStartDate)
                writer.writeMessage(3, this.actualStartDate, () => this.actualStartDate.serialize(writer));
            if (this.hasEndDate)
                writer.writeMessage(4, this.endDate, () => this.endDate.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventLimitedFieldsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventLimitedFieldsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.scheduledStartDate, () => message.scheduledStartDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.actualStartDate, () => message.actualStartDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.endDate, () => message.endDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventLimitedFieldsResponse {
            return EventLimitedFieldsResponse.deserialize(bytes);
        }
    }
    export class EventLimitedFieldsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            productionId?: string;
            venueId?: string;
            doorsOpen?: dependency_1.google.protobuf.Timestamp;
            scheduledStartDate?: dependency_1.google.protobuf.Timestamp;
            actualStartDate?: dependency_1.google.protobuf.Timestamp;
            endDate?: dependency_1.google.protobuf.Timestamp;
            relevantDate?: dependency_1.google.protobuf.Timestamp;
            quota?: dependency_2.io.Quota;
            metrics?: dependency_3.io.Metrics;
            relevantDates?: EventHours[];
            semanticTags?: dependency_5.io.EventSemanticTags;
            created?: dependency_1.google.protobuf.Timestamp;
            updated?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [12], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("productionId" in data && data.productionId != undefined) {
                    this.productionId = data.productionId;
                }
                if ("venueId" in data && data.venueId != undefined) {
                    this.venueId = data.venueId;
                }
                if ("doorsOpen" in data && data.doorsOpen != undefined) {
                    this.doorsOpen = data.doorsOpen;
                }
                if ("scheduledStartDate" in data && data.scheduledStartDate != undefined) {
                    this.scheduledStartDate = data.scheduledStartDate;
                }
                if ("actualStartDate" in data && data.actualStartDate != undefined) {
                    this.actualStartDate = data.actualStartDate;
                }
                if ("endDate" in data && data.endDate != undefined) {
                    this.endDate = data.endDate;
                }
                if ("relevantDate" in data && data.relevantDate != undefined) {
                    this.relevantDate = data.relevantDate;
                }
                if ("quota" in data && data.quota != undefined) {
                    this.quota = data.quota;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
                if ("relevantDates" in data && data.relevantDates != undefined) {
                    this.relevantDates = data.relevantDates;
                }
                if ("semanticTags" in data && data.semanticTags != undefined) {
                    this.semanticTags = data.semanticTags;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
            }
        }
        get productionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set productionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get venueId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set venueId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get doorsOpen() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 3) as dependency_1.google.protobuf.Timestamp;
        }
        set doorsOpen(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasDoorsOpen() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get scheduledStartDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set scheduledStartDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasScheduledStartDate() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get actualStartDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set actualStartDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasActualStartDate() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get endDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set endDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasEndDate() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get relevantDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 7) as dependency_1.google.protobuf.Timestamp;
        }
        set relevantDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasRelevantDate() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get quota() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.Quota, 8) as dependency_2.io.Quota;
        }
        set quota(value: dependency_2.io.Quota) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasQuota() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get metrics() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.Metrics, 9) as dependency_3.io.Metrics;
        }
        set metrics(value: dependency_3.io.Metrics) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasMetrics() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get relevantDates() {
            return pb_1.Message.getRepeatedWrapperField(this, EventHours, 12) as EventHours[];
        }
        set relevantDates(value: EventHours[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get semanticTags() {
            return pb_1.Message.getWrapperField(this, dependency_5.io.EventSemanticTags, 13) as dependency_5.io.EventSemanticTags;
        }
        set semanticTags(value: dependency_5.io.EventSemanticTags) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasSemanticTags() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 10) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 11) as dependency_1.google.protobuf.Timestamp;
        }
        set updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasUpdated() {
            return pb_1.Message.getField(this, 11) != null;
        }
        static fromObject(data: {
            productionId?: string;
            venueId?: string;
            doorsOpen?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            scheduledStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            actualStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            endDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            relevantDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            quota?: ReturnType<typeof dependency_2.io.Quota.prototype.toObject>;
            metrics?: ReturnType<typeof dependency_3.io.Metrics.prototype.toObject>;
            relevantDates?: ReturnType<typeof EventHours.prototype.toObject>[];
            semanticTags?: ReturnType<typeof dependency_5.io.EventSemanticTags.prototype.toObject>;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): EventLimitedFieldsRequest {
            const message = new EventLimitedFieldsRequest({});
            if (data.productionId != null) {
                message.productionId = data.productionId;
            }
            if (data.venueId != null) {
                message.venueId = data.venueId;
            }
            if (data.doorsOpen != null) {
                message.doorsOpen = dependency_1.google.protobuf.Timestamp.fromObject(data.doorsOpen);
            }
            if (data.scheduledStartDate != null) {
                message.scheduledStartDate = dependency_1.google.protobuf.Timestamp.fromObject(data.scheduledStartDate);
            }
            if (data.actualStartDate != null) {
                message.actualStartDate = dependency_1.google.protobuf.Timestamp.fromObject(data.actualStartDate);
            }
            if (data.endDate != null) {
                message.endDate = dependency_1.google.protobuf.Timestamp.fromObject(data.endDate);
            }
            if (data.relevantDate != null) {
                message.relevantDate = dependency_1.google.protobuf.Timestamp.fromObject(data.relevantDate);
            }
            if (data.quota != null) {
                message.quota = dependency_2.io.Quota.fromObject(data.quota);
            }
            if (data.metrics != null) {
                message.metrics = dependency_3.io.Metrics.fromObject(data.metrics);
            }
            if (data.relevantDates != null) {
                message.relevantDates = data.relevantDates.map(item => EventHours.fromObject(item));
            }
            if (data.semanticTags != null) {
                message.semanticTags = dependency_5.io.EventSemanticTags.fromObject(data.semanticTags);
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_1.google.protobuf.Timestamp.fromObject(data.updated);
            }
            return message;
        }
        toObject() {
            const data: {
                productionId?: string;
                venueId?: string;
                doorsOpen?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                scheduledStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                actualStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                endDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                relevantDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                quota?: ReturnType<typeof dependency_2.io.Quota.prototype.toObject>;
                metrics?: ReturnType<typeof dependency_3.io.Metrics.prototype.toObject>;
                relevantDates?: ReturnType<typeof EventHours.prototype.toObject>[];
                semanticTags?: ReturnType<typeof dependency_5.io.EventSemanticTags.prototype.toObject>;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.productionId != null) {
                data.productionId = this.productionId;
            }
            if (this.venueId != null) {
                data.venueId = this.venueId;
            }
            if (this.doorsOpen != null) {
                data.doorsOpen = this.doorsOpen.toObject();
            }
            if (this.scheduledStartDate != null) {
                data.scheduledStartDate = this.scheduledStartDate.toObject();
            }
            if (this.actualStartDate != null) {
                data.actualStartDate = this.actualStartDate.toObject();
            }
            if (this.endDate != null) {
                data.endDate = this.endDate.toObject();
            }
            if (this.relevantDate != null) {
                data.relevantDate = this.relevantDate.toObject();
            }
            if (this.quota != null) {
                data.quota = this.quota.toObject();
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.toObject();
            }
            if (this.relevantDates != null) {
                data.relevantDates = this.relevantDates.map((item: EventHours) => item.toObject());
            }
            if (this.semanticTags != null) {
                data.semanticTags = this.semanticTags.toObject();
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.productionId.length)
                writer.writeString(1, this.productionId);
            if (this.venueId.length)
                writer.writeString(2, this.venueId);
            if (this.hasDoorsOpen)
                writer.writeMessage(3, this.doorsOpen, () => this.doorsOpen.serialize(writer));
            if (this.hasScheduledStartDate)
                writer.writeMessage(4, this.scheduledStartDate, () => this.scheduledStartDate.serialize(writer));
            if (this.hasActualStartDate)
                writer.writeMessage(5, this.actualStartDate, () => this.actualStartDate.serialize(writer));
            if (this.hasEndDate)
                writer.writeMessage(6, this.endDate, () => this.endDate.serialize(writer));
            if (this.hasRelevantDate)
                writer.writeMessage(7, this.relevantDate, () => this.relevantDate.serialize(writer));
            if (this.hasQuota)
                writer.writeMessage(8, this.quota, () => this.quota.serialize(writer));
            if (this.hasMetrics)
                writer.writeMessage(9, this.metrics, () => this.metrics.serialize(writer));
            if (this.relevantDates.length)
                writer.writeRepeatedMessage(12, this.relevantDates, (item: EventHours) => item.serialize(writer));
            if (this.hasSemanticTags)
                writer.writeMessage(13, this.semanticTags, () => this.semanticTags.serialize(writer));
            if (this.hasCreated)
                writer.writeMessage(10, this.created, () => this.created.serialize(writer));
            if (this.hasUpdated)
                writer.writeMessage(11, this.updated, () => this.updated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventLimitedFieldsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventLimitedFieldsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.productionId = reader.readString();
                        break;
                    case 2:
                        message.venueId = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.doorsOpen, () => message.doorsOpen = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.scheduledStartDate, () => message.scheduledStartDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.actualStartDate, () => message.actualStartDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.endDate, () => message.endDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.relevantDate, () => message.relevantDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.quota, () => message.quota = dependency_2.io.Quota.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.metrics, () => message.metrics = dependency_3.io.Metrics.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.relevantDates, () => pb_1.Message.addToRepeatedWrapperField(message, 12, EventHours.deserialize(reader), EventHours));
                        break;
                    case 13:
                        reader.readMessage(message.semanticTags, () => message.semanticTags = dependency_5.io.EventSemanticTags.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.updated, () => message.updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventLimitedFieldsRequest {
            return EventLimitedFieldsRequest.deserialize(bytes);
        }
    }
    export class EventListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            production?: dependency_6.event_tickets.ProductionLimitedFieldsResponse;
            venue?: dependency_7.event_tickets.VenueLimitedFieldsResponse;
            doorsOpen?: dependency_1.google.protobuf.Timestamp;
            scheduledStartDate?: dependency_1.google.protobuf.Timestamp;
            actualStartDate?: dependency_1.google.protobuf.Timestamp;
            endDate?: dependency_1.google.protobuf.Timestamp;
            relevantDate?: dependency_1.google.protobuf.Timestamp;
            quota?: dependency_2.io.Quota;
            metrics?: dependency_3.io.Metrics;
            created?: dependency_1.google.protobuf.Timestamp;
            updated?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("production" in data && data.production != undefined) {
                    this.production = data.production;
                }
                if ("venue" in data && data.venue != undefined) {
                    this.venue = data.venue;
                }
                if ("doorsOpen" in data && data.doorsOpen != undefined) {
                    this.doorsOpen = data.doorsOpen;
                }
                if ("scheduledStartDate" in data && data.scheduledStartDate != undefined) {
                    this.scheduledStartDate = data.scheduledStartDate;
                }
                if ("actualStartDate" in data && data.actualStartDate != undefined) {
                    this.actualStartDate = data.actualStartDate;
                }
                if ("endDate" in data && data.endDate != undefined) {
                    this.endDate = data.endDate;
                }
                if ("relevantDate" in data && data.relevantDate != undefined) {
                    this.relevantDate = data.relevantDate;
                }
                if ("quota" in data && data.quota != undefined) {
                    this.quota = data.quota;
                }
                if ("metrics" in data && data.metrics != undefined) {
                    this.metrics = data.metrics;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get production() {
            return pb_1.Message.getWrapperField(this, dependency_6.event_tickets.ProductionLimitedFieldsResponse, 2) as dependency_6.event_tickets.ProductionLimitedFieldsResponse;
        }
        set production(value: dependency_6.event_tickets.ProductionLimitedFieldsResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasProduction() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get venue() {
            return pb_1.Message.getWrapperField(this, dependency_7.event_tickets.VenueLimitedFieldsResponse, 3) as dependency_7.event_tickets.VenueLimitedFieldsResponse;
        }
        set venue(value: dependency_7.event_tickets.VenueLimitedFieldsResponse) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasVenue() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get doorsOpen() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 4) as dependency_1.google.protobuf.Timestamp;
        }
        set doorsOpen(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasDoorsOpen() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get scheduledStartDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set scheduledStartDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasScheduledStartDate() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get actualStartDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set actualStartDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasActualStartDate() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get endDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 7) as dependency_1.google.protobuf.Timestamp;
        }
        set endDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasEndDate() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get relevantDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 8) as dependency_1.google.protobuf.Timestamp;
        }
        set relevantDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasRelevantDate() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get quota() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.Quota, 9) as dependency_2.io.Quota;
        }
        set quota(value: dependency_2.io.Quota) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasQuota() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get metrics() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.Metrics, 10) as dependency_3.io.Metrics;
        }
        set metrics(value: dependency_3.io.Metrics) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasMetrics() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 11) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 12) as dependency_1.google.protobuf.Timestamp;
        }
        set updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get hasUpdated() {
            return pb_1.Message.getField(this, 12) != null;
        }
        static fromObject(data: {
            id?: string;
            production?: ReturnType<typeof dependency_6.event_tickets.ProductionLimitedFieldsResponse.prototype.toObject>;
            venue?: ReturnType<typeof dependency_7.event_tickets.VenueLimitedFieldsResponse.prototype.toObject>;
            doorsOpen?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            scheduledStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            actualStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            endDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            relevantDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            quota?: ReturnType<typeof dependency_2.io.Quota.prototype.toObject>;
            metrics?: ReturnType<typeof dependency_3.io.Metrics.prototype.toObject>;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): EventListResponse {
            const message = new EventListResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.production != null) {
                message.production = dependency_6.event_tickets.ProductionLimitedFieldsResponse.fromObject(data.production);
            }
            if (data.venue != null) {
                message.venue = dependency_7.event_tickets.VenueLimitedFieldsResponse.fromObject(data.venue);
            }
            if (data.doorsOpen != null) {
                message.doorsOpen = dependency_1.google.protobuf.Timestamp.fromObject(data.doorsOpen);
            }
            if (data.scheduledStartDate != null) {
                message.scheduledStartDate = dependency_1.google.protobuf.Timestamp.fromObject(data.scheduledStartDate);
            }
            if (data.actualStartDate != null) {
                message.actualStartDate = dependency_1.google.protobuf.Timestamp.fromObject(data.actualStartDate);
            }
            if (data.endDate != null) {
                message.endDate = dependency_1.google.protobuf.Timestamp.fromObject(data.endDate);
            }
            if (data.relevantDate != null) {
                message.relevantDate = dependency_1.google.protobuf.Timestamp.fromObject(data.relevantDate);
            }
            if (data.quota != null) {
                message.quota = dependency_2.io.Quota.fromObject(data.quota);
            }
            if (data.metrics != null) {
                message.metrics = dependency_3.io.Metrics.fromObject(data.metrics);
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_1.google.protobuf.Timestamp.fromObject(data.updated);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                production?: ReturnType<typeof dependency_6.event_tickets.ProductionLimitedFieldsResponse.prototype.toObject>;
                venue?: ReturnType<typeof dependency_7.event_tickets.VenueLimitedFieldsResponse.prototype.toObject>;
                doorsOpen?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                scheduledStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                actualStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                endDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                relevantDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                quota?: ReturnType<typeof dependency_2.io.Quota.prototype.toObject>;
                metrics?: ReturnType<typeof dependency_3.io.Metrics.prototype.toObject>;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.production != null) {
                data.production = this.production.toObject();
            }
            if (this.venue != null) {
                data.venue = this.venue.toObject();
            }
            if (this.doorsOpen != null) {
                data.doorsOpen = this.doorsOpen.toObject();
            }
            if (this.scheduledStartDate != null) {
                data.scheduledStartDate = this.scheduledStartDate.toObject();
            }
            if (this.actualStartDate != null) {
                data.actualStartDate = this.actualStartDate.toObject();
            }
            if (this.endDate != null) {
                data.endDate = this.endDate.toObject();
            }
            if (this.relevantDate != null) {
                data.relevantDate = this.relevantDate.toObject();
            }
            if (this.quota != null) {
                data.quota = this.quota.toObject();
            }
            if (this.metrics != null) {
                data.metrics = this.metrics.toObject();
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.hasProduction)
                writer.writeMessage(2, this.production, () => this.production.serialize(writer));
            if (this.hasVenue)
                writer.writeMessage(3, this.venue, () => this.venue.serialize(writer));
            if (this.hasDoorsOpen)
                writer.writeMessage(4, this.doorsOpen, () => this.doorsOpen.serialize(writer));
            if (this.hasScheduledStartDate)
                writer.writeMessage(5, this.scheduledStartDate, () => this.scheduledStartDate.serialize(writer));
            if (this.hasActualStartDate)
                writer.writeMessage(6, this.actualStartDate, () => this.actualStartDate.serialize(writer));
            if (this.hasEndDate)
                writer.writeMessage(7, this.endDate, () => this.endDate.serialize(writer));
            if (this.hasRelevantDate)
                writer.writeMessage(8, this.relevantDate, () => this.relevantDate.serialize(writer));
            if (this.hasQuota)
                writer.writeMessage(9, this.quota, () => this.quota.serialize(writer));
            if (this.hasMetrics)
                writer.writeMessage(10, this.metrics, () => this.metrics.serialize(writer));
            if (this.hasCreated)
                writer.writeMessage(11, this.created, () => this.created.serialize(writer));
            if (this.hasUpdated)
                writer.writeMessage(12, this.updated, () => this.updated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.production, () => message.production = dependency_6.event_tickets.ProductionLimitedFieldsResponse.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.venue, () => message.venue = dependency_7.event_tickets.VenueLimitedFieldsResponse.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.doorsOpen, () => message.doorsOpen = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.scheduledStartDate, () => message.scheduledStartDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.actualStartDate, () => message.actualStartDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.endDate, () => message.endDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.relevantDate, () => message.relevantDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.quota, () => message.quota = dependency_2.io.Quota.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.metrics, () => message.metrics = dependency_3.io.Metrics.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.updated, () => message.updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventListResponse {
            return EventListResponse.deserialize(bytes);
        }
    }
}
