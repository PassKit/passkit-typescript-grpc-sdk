/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/filter.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace io {
    export enum Operator {
        AND = 0,
        OR = 1
    }
    export class Filters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            limit?: number;
            offset?: number;
            filterGroups?: FilterGroup[];
            orderBy?: string;
            orderAsc?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("filterGroups" in data && data.filterGroups != undefined) {
                    this.filterGroups = data.filterGroups;
                }
                if ("orderBy" in data && data.orderBy != undefined) {
                    this.orderBy = data.orderBy;
                }
                if ("orderAsc" in data && data.orderAsc != undefined) {
                    this.orderAsc = data.orderAsc;
                }
            }
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get filterGroups() {
            return pb_1.Message.getRepeatedWrapperField(this, FilterGroup, 3) as FilterGroup[];
        }
        set filterGroups(value: FilterGroup[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get orderBy() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set orderBy(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get orderAsc() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set orderAsc(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            limit?: number;
            offset?: number;
            filterGroups?: ReturnType<typeof FilterGroup.prototype.toObject>[];
            orderBy?: string;
            orderAsc?: boolean;
        }): Filters {
            const message = new Filters({});
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.filterGroups != null) {
                message.filterGroups = data.filterGroups.map(item => FilterGroup.fromObject(item));
            }
            if (data.orderBy != null) {
                message.orderBy = data.orderBy;
            }
            if (data.orderAsc != null) {
                message.orderAsc = data.orderAsc;
            }
            return message;
        }
        toObject() {
            const data: {
                limit?: number;
                offset?: number;
                filterGroups?: ReturnType<typeof FilterGroup.prototype.toObject>[];
                orderBy?: string;
                orderAsc?: boolean;
            } = {};
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.filterGroups != null) {
                data.filterGroups = this.filterGroups.map((item: FilterGroup) => item.toObject());
            }
            if (this.orderBy != null) {
                data.orderBy = this.orderBy;
            }
            if (this.orderAsc != null) {
                data.orderAsc = this.orderAsc;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.limit != 0)
                writer.writeInt32(1, this.limit);
            if (this.offset != 0)
                writer.writeInt32(2, this.offset);
            if (this.filterGroups.length)
                writer.writeRepeatedMessage(3, this.filterGroups, (item: FilterGroup) => item.serialize(writer));
            if (this.orderBy.length)
                writer.writeString(4, this.orderBy);
            if (this.orderAsc != false)
                writer.writeBool(5, this.orderAsc);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Filters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Filters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.limit = reader.readInt32();
                        break;
                    case 2:
                        message.offset = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.filterGroups, () => pb_1.Message.addToRepeatedWrapperField(message, 3, FilterGroup.deserialize(reader), FilterGroup));
                        break;
                    case 4:
                        message.orderBy = reader.readString();
                        break;
                    case 5:
                        message.orderAsc = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Filters {
            return Filters.deserialize(bytes);
        }
    }
    export class FieldFilter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            filterField?: string;
            filterValue?: string;
            filterOperator?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filterField" in data && data.filterField != undefined) {
                    this.filterField = data.filterField;
                }
                if ("filterValue" in data && data.filterValue != undefined) {
                    this.filterValue = data.filterValue;
                }
                if ("filterOperator" in data && data.filterOperator != undefined) {
                    this.filterOperator = data.filterOperator;
                }
            }
        }
        get filterField() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set filterField(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get filterValue() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set filterValue(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get filterOperator() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set filterOperator(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            filterField?: string;
            filterValue?: string;
            filterOperator?: string;
        }): FieldFilter {
            const message = new FieldFilter({});
            if (data.filterField != null) {
                message.filterField = data.filterField;
            }
            if (data.filterValue != null) {
                message.filterValue = data.filterValue;
            }
            if (data.filterOperator != null) {
                message.filterOperator = data.filterOperator;
            }
            return message;
        }
        toObject() {
            const data: {
                filterField?: string;
                filterValue?: string;
                filterOperator?: string;
            } = {};
            if (this.filterField != null) {
                data.filterField = this.filterField;
            }
            if (this.filterValue != null) {
                data.filterValue = this.filterValue;
            }
            if (this.filterOperator != null) {
                data.filterOperator = this.filterOperator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.filterField.length)
                writer.writeString(1, this.filterField);
            if (this.filterValue.length)
                writer.writeString(2, this.filterValue);
            if (this.filterOperator.length)
                writer.writeString(3, this.filterOperator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldFilter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldFilter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.filterField = reader.readString();
                        break;
                    case 2:
                        message.filterValue = reader.readString();
                        break;
                    case 3:
                        message.filterOperator = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FieldFilter {
            return FieldFilter.deserialize(bytes);
        }
    }
    export class FilterGroup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            condition?: Operator;
            fieldFilters?: FieldFilter[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("condition" in data && data.condition != undefined) {
                    this.condition = data.condition;
                }
                if ("fieldFilters" in data && data.fieldFilters != undefined) {
                    this.fieldFilters = data.fieldFilters;
                }
            }
        }
        get condition() {
            return pb_1.Message.getFieldWithDefault(this, 1, Operator.AND) as Operator;
        }
        set condition(value: Operator) {
            pb_1.Message.setField(this, 1, value);
        }
        get fieldFilters() {
            return pb_1.Message.getRepeatedWrapperField(this, FieldFilter, 2) as FieldFilter[];
        }
        set fieldFilters(value: FieldFilter[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            condition?: Operator;
            fieldFilters?: ReturnType<typeof FieldFilter.prototype.toObject>[];
        }): FilterGroup {
            const message = new FilterGroup({});
            if (data.condition != null) {
                message.condition = data.condition;
            }
            if (data.fieldFilters != null) {
                message.fieldFilters = data.fieldFilters.map(item => FieldFilter.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                condition?: Operator;
                fieldFilters?: ReturnType<typeof FieldFilter.prototype.toObject>[];
            } = {};
            if (this.condition != null) {
                data.condition = this.condition;
            }
            if (this.fieldFilters != null) {
                data.fieldFilters = this.fieldFilters.map((item: FieldFilter) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.condition != Operator.AND)
                writer.writeEnum(1, this.condition);
            if (this.fieldFilters.length)
                writer.writeRepeatedMessage(2, this.fieldFilters, (item: FieldFilter) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FilterGroup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FilterGroup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.condition = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.fieldFilters, () => pb_1.Message.addToRepeatedWrapperField(message, 2, FieldFilter.deserialize(reader), FieldFilter));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FilterGroup {
            return FilterGroup.deserialize(bytes);
        }
    }
}
