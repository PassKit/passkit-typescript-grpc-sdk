/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/pass.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../image/image";
import * as dependency_2 from "./links";
import * as dependency_3 from "./metrics";
import * as dependency_4 from "./personal";
import * as dependency_5 from "./protocols";
import * as dependency_6 from "./proximity";
import * as dependency_7 from "./template";
import * as dependency_8 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace io {
    export class PassOverrides extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            imageIds?: dependency_1.io.ImageIds;
            locations?: dependency_6.io.GPSLocation[];
            beacons?: dependency_6.io.Beacon[];
            links?: dependency_2.io.Link[];
            colors?: dependency_7.io.Colors;
            associatedStoreIdentifiers?: number[];
            appStoreIdentifiers?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5, 7, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("imageIds" in data && data.imageIds != undefined) {
                    this.imageIds = data.imageIds;
                }
                if ("locations" in data && data.locations != undefined) {
                    this.locations = data.locations;
                }
                if ("beacons" in data && data.beacons != undefined) {
                    this.beacons = data.beacons;
                }
                if ("links" in data && data.links != undefined) {
                    this.links = data.links;
                }
                if ("colors" in data && data.colors != undefined) {
                    this.colors = data.colors;
                }
                if ("associatedStoreIdentifiers" in data && data.associatedStoreIdentifiers != undefined) {
                    this.associatedStoreIdentifiers = data.associatedStoreIdentifiers;
                }
                if ("appStoreIdentifiers" in data && data.appStoreIdentifiers != undefined) {
                    this.appStoreIdentifiers = data.appStoreIdentifiers;
                }
            }
        }
        get imageIds() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.ImageIds, 1) as dependency_1.io.ImageIds;
        }
        set imageIds(value: dependency_1.io.ImageIds) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasImageIds() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get locations() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.io.GPSLocation, 3) as dependency_6.io.GPSLocation[];
        }
        set locations(value: dependency_6.io.GPSLocation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get beacons() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.io.Beacon, 4) as dependency_6.io.Beacon[];
        }
        set beacons(value: dependency_6.io.Beacon[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get links() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.io.Link, 5) as dependency_2.io.Link[];
        }
        set links(value: dependency_2.io.Link[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get colors() {
            return pb_1.Message.getWrapperField(this, dependency_7.io.Colors, 6) as dependency_7.io.Colors;
        }
        set colors(value: dependency_7.io.Colors) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasColors() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get associatedStoreIdentifiers() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
        }
        set associatedStoreIdentifiers(value: number[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get appStoreIdentifiers() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
        }
        set appStoreIdentifiers(value: number[]) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            imageIds?: ReturnType<typeof dependency_1.io.ImageIds.prototype.toObject>;
            locations?: ReturnType<typeof dependency_6.io.GPSLocation.prototype.toObject>[];
            beacons?: ReturnType<typeof dependency_6.io.Beacon.prototype.toObject>[];
            links?: ReturnType<typeof dependency_2.io.Link.prototype.toObject>[];
            colors?: ReturnType<typeof dependency_7.io.Colors.prototype.toObject>;
            associatedStoreIdentifiers?: number[];
            appStoreIdentifiers?: number[];
        }): PassOverrides {
            const message = new PassOverrides({});
            if (data.imageIds != null) {
                message.imageIds = dependency_1.io.ImageIds.fromObject(data.imageIds);
            }
            if (data.locations != null) {
                message.locations = data.locations.map(item => dependency_6.io.GPSLocation.fromObject(item));
            }
            if (data.beacons != null) {
                message.beacons = data.beacons.map(item => dependency_6.io.Beacon.fromObject(item));
            }
            if (data.links != null) {
                message.links = data.links.map(item => dependency_2.io.Link.fromObject(item));
            }
            if (data.colors != null) {
                message.colors = dependency_7.io.Colors.fromObject(data.colors);
            }
            if (data.associatedStoreIdentifiers != null) {
                message.associatedStoreIdentifiers = data.associatedStoreIdentifiers;
            }
            if (data.appStoreIdentifiers != null) {
                message.appStoreIdentifiers = data.appStoreIdentifiers;
            }
            return message;
        }
        toObject() {
            const data: {
                imageIds?: ReturnType<typeof dependency_1.io.ImageIds.prototype.toObject>;
                locations?: ReturnType<typeof dependency_6.io.GPSLocation.prototype.toObject>[];
                beacons?: ReturnType<typeof dependency_6.io.Beacon.prototype.toObject>[];
                links?: ReturnType<typeof dependency_2.io.Link.prototype.toObject>[];
                colors?: ReturnType<typeof dependency_7.io.Colors.prototype.toObject>;
                associatedStoreIdentifiers?: number[];
                appStoreIdentifiers?: number[];
            } = {};
            if (this.imageIds != null) {
                data.imageIds = this.imageIds.toObject();
            }
            if (this.locations != null) {
                data.locations = this.locations.map((item: dependency_6.io.GPSLocation) => item.toObject());
            }
            if (this.beacons != null) {
                data.beacons = this.beacons.map((item: dependency_6.io.Beacon) => item.toObject());
            }
            if (this.links != null) {
                data.links = this.links.map((item: dependency_2.io.Link) => item.toObject());
            }
            if (this.colors != null) {
                data.colors = this.colors.toObject();
            }
            if (this.associatedStoreIdentifiers != null) {
                data.associatedStoreIdentifiers = this.associatedStoreIdentifiers;
            }
            if (this.appStoreIdentifiers != null) {
                data.appStoreIdentifiers = this.appStoreIdentifiers;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasImageIds)
                writer.writeMessage(1, this.imageIds, () => this.imageIds.serialize(writer));
            if (this.locations.length)
                writer.writeRepeatedMessage(3, this.locations, (item: dependency_6.io.GPSLocation) => item.serialize(writer));
            if (this.beacons.length)
                writer.writeRepeatedMessage(4, this.beacons, (item: dependency_6.io.Beacon) => item.serialize(writer));
            if (this.links.length)
                writer.writeRepeatedMessage(5, this.links, (item: dependency_2.io.Link) => item.serialize(writer));
            if (this.hasColors)
                writer.writeMessage(6, this.colors, () => this.colors.serialize(writer));
            if (this.associatedStoreIdentifiers.length)
                writer.writePackedUint32(7, this.associatedStoreIdentifiers);
            if (this.appStoreIdentifiers.length)
                writer.writePackedUint64(8, this.appStoreIdentifiers);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PassOverrides {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PassOverrides();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.imageIds, () => message.imageIds = dependency_1.io.ImageIds.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.locations, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_6.io.GPSLocation.deserialize(reader), dependency_6.io.GPSLocation));
                        break;
                    case 4:
                        reader.readMessage(message.beacons, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_6.io.Beacon.deserialize(reader), dependency_6.io.Beacon));
                        break;
                    case 5:
                        reader.readMessage(message.links, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_2.io.Link.deserialize(reader), dependency_2.io.Link));
                        break;
                    case 6:
                        reader.readMessage(message.colors, () => message.colors = dependency_7.io.Colors.deserialize(reader));
                        break;
                    case 7:
                        message.associatedStoreIdentifiers = reader.readPackedUint32();
                        break;
                    case 8:
                        message.appStoreIdentifiers = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PassOverrides {
            return PassOverrides.deserialize(bytes);
        }
    }
    export class PassOptions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            apple?: dependency_7.io.AppleWalletSettings;
            google?: dependency_7.io.GooglePaySettings;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("apple" in data && data.apple != undefined) {
                    this.apple = data.apple;
                }
                if ("google" in data && data.google != undefined) {
                    this.google = data.google;
                }
            }
        }
        get apple() {
            return pb_1.Message.getWrapperField(this, dependency_7.io.AppleWalletSettings, 1) as dependency_7.io.AppleWalletSettings;
        }
        set apple(value: dependency_7.io.AppleWalletSettings) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasApple() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get google() {
            return pb_1.Message.getWrapperField(this, dependency_7.io.GooglePaySettings, 2) as dependency_7.io.GooglePaySettings;
        }
        set google(value: dependency_7.io.GooglePaySettings) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasGoogle() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            apple?: ReturnType<typeof dependency_7.io.AppleWalletSettings.prototype.toObject>;
            google?: ReturnType<typeof dependency_7.io.GooglePaySettings.prototype.toObject>;
        }): PassOptions {
            const message = new PassOptions({});
            if (data.apple != null) {
                message.apple = dependency_7.io.AppleWalletSettings.fromObject(data.apple);
            }
            if (data.google != null) {
                message.google = dependency_7.io.GooglePaySettings.fromObject(data.google);
            }
            return message;
        }
        toObject() {
            const data: {
                apple?: ReturnType<typeof dependency_7.io.AppleWalletSettings.prototype.toObject>;
                google?: ReturnType<typeof dependency_7.io.GooglePaySettings.prototype.toObject>;
            } = {};
            if (this.apple != null) {
                data.apple = this.apple.toObject();
            }
            if (this.google != null) {
                data.google = this.google.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasApple)
                writer.writeMessage(1, this.apple, () => this.apple.serialize(writer));
            if (this.hasGoogle)
                writer.writeMessage(2, this.google, () => this.google.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PassOptions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PassOptions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.apple, () => message.apple = dependency_7.io.AppleWalletSettings.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.google, () => message.google = dependency_7.io.GooglePaySettings.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PassOptions {
            return PassOptions.deserialize(bytes);
        }
    }
    export class Pass extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            classId?: string;
            protocol?: dependency_5.io.PassProtocol;
            personDetails?: dependency_4.io.Person;
            metadata?: dependency_3.io.Metadata;
            recordData?: Map<string, string>;
            externalId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("classId" in data && data.classId != undefined) {
                    this.classId = data.classId;
                }
                if ("protocol" in data && data.protocol != undefined) {
                    this.protocol = data.protocol;
                }
                if ("personDetails" in data && data.personDetails != undefined) {
                    this.personDetails = data.personDetails;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
                if ("recordData" in data && data.recordData != undefined) {
                    this.recordData = data.recordData;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
            }
            if (!this.recordData)
                this.recordData = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get classId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set classId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get protocol() {
            return pb_1.Message.getFieldWithDefault(this, 3, dependency_5.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE) as dependency_5.io.PassProtocol;
        }
        set protocol(value: dependency_5.io.PassProtocol) {
            pb_1.Message.setField(this, 3, value);
        }
        get personDetails() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.Person, 4) as dependency_4.io.Person;
        }
        set personDetails(value: dependency_4.io.Person) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasPersonDetails() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, dependency_3.io.Metadata, 5) as dependency_3.io.Metadata;
        }
        set metadata(value: dependency_3.io.Metadata) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasMetadata() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get recordData() {
            return pb_1.Message.getField(this, 6) as any as Map<string, string>;
        }
        set recordData(value: Map<string, string>) {
            pb_1.Message.setField(this, 6, value as any);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: string;
            classId?: string;
            protocol?: dependency_5.io.PassProtocol;
            personDetails?: ReturnType<typeof dependency_4.io.Person.prototype.toObject>;
            metadata?: ReturnType<typeof dependency_3.io.Metadata.prototype.toObject>;
            recordData?: {
                [key: string]: string;
            };
            externalId?: string;
        }): Pass {
            const message = new Pass({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.classId != null) {
                message.classId = data.classId;
            }
            if (data.protocol != null) {
                message.protocol = data.protocol;
            }
            if (data.personDetails != null) {
                message.personDetails = dependency_4.io.Person.fromObject(data.personDetails);
            }
            if (data.metadata != null) {
                message.metadata = dependency_3.io.Metadata.fromObject(data.metadata);
            }
            if (typeof data.recordData == "object") {
                message.recordData = new Map(Object.entries(data.recordData));
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                classId?: string;
                protocol?: dependency_5.io.PassProtocol;
                personDetails?: ReturnType<typeof dependency_4.io.Person.prototype.toObject>;
                metadata?: ReturnType<typeof dependency_3.io.Metadata.prototype.toObject>;
                recordData?: {
                    [key: string]: string;
                };
                externalId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.classId != null) {
                data.classId = this.classId;
            }
            if (this.protocol != null) {
                data.protocol = this.protocol;
            }
            if (this.personDetails != null) {
                data.personDetails = this.personDetails.toObject();
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            if (this.recordData != null) {
                data.recordData = (Object.fromEntries)(this.recordData);
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.classId.length)
                writer.writeString(2, this.classId);
            if (this.protocol != dependency_5.io.PassProtocol.PASS_PROTOCOL_DO_NOT_USE)
                writer.writeEnum(3, this.protocol);
            if (this.hasPersonDetails)
                writer.writeMessage(4, this.personDetails, () => this.personDetails.serialize(writer));
            if (this.hasMetadata)
                writer.writeMessage(5, this.metadata, () => this.metadata.serialize(writer));
            for (const [key, value] of this.recordData) {
                writer.writeMessage(6, this.recordData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.externalId.length)
                writer.writeString(7, this.externalId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pass {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pass();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.classId = reader.readString();
                        break;
                    case 3:
                        message.protocol = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.personDetails, () => message.personDetails = dependency_4.io.Person.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.metadata, () => message.metadata = dependency_3.io.Metadata.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.recordData as any, reader, reader.readString, reader.readString));
                        break;
                    case 7:
                        message.externalId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Pass {
            return Pass.deserialize(bytes);
        }
    }
}
