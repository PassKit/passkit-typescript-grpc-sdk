/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/user/user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./../common/personal";
import * as dependency_3 from "./../common/attributes";
import * as pb_1 from "google-protobuf";
export namespace io {
    export enum OAuth2Provider {
        OAUTH_DO_NOT_USE = 0,
        OAUTH_PATREON = 10,
        OAUTH_SPROUT = 50,
        OAUTH_MAILCHIMP = 100,
        OAUTH_XERO = 150
    }
    export enum ScannerMembershipPermissions {
        MEMBERSHIP_PERMISSION_NONE = 0,
        MEMBERSHIP_PERMISSION_VIEW_MEMBER = 1,
        MEMBERSHIP_PERMISSION_EDIT_MEMBER = 2,
        MEMBERSHIP_PERMISSION_EARN_POINTS = 4,
        MEMBERSHIP_PERMISSION_BURN_POINTS = 8,
        MEMBERSHIP_PERMISSION_SET_POINTS = 16,
        MEMBERSHIP_PERMISSION_CHANGE_TIER = 32,
        MEMBERSHIP_PERMISSION_VIEW_EVENTS = 64,
        MEMBERSHIP_PERMISSION_CHANGE_EXPIRY = 128,
        MEMBERSHIP_PERMISSION_CHECK_IN_OUT = 256,
        MEMBERSHIP_PERMISSION_VALIDATE = 512
    }
    export enum ScannerCouponPermissions {
        COUPON_PERMISSION_NONE = 0,
        COUPON_PERMISSION_VIEW_COUPON = 1,
        COUPON_PERMISSION_EDIT_COUPON = 2,
        COUPON_PERMISSION_REDEEM = 4,
        COUPON_PERMISSION_VIEW_EVENTS = 8,
        COUPON_PERMISSION_CHANGE_EXPIRY = 16,
        COUPON_PERMISSION_VALIDATE = 32
    }
    export enum DefaultMembershipScanAction {
        MEMBERSHIP_DEFAULT_NONE = 0,
        MEMBERSHIP_DEFAULT_EARN_POINTS = 1,
        MEMBERSHIP_DEFAULT_BURN_POINTS = 2,
        MEMBERSHIP_DEFAULT_CHECK_IN_OUT = 4,
        MEMBERSHIP_DEFAULT_VALIDATE = 8
    }
    export enum DefaultCouponScanAction {
        COUPON_DEFAULT_NONE = 0,
        COUPON_DEFAULT_REDEEM = 1,
        COUPON_DEFAULT_VALIDATE = 2
    }
    export enum PermissionScope {
        PERMISSION_NONE = 0,
        WEB_ACCESS = 1,
        APP_ACCESS = 2,
        ALL_PROJECTS = 4,
        ALL_CERTIFICATES = 8,
        BILLING_ACCESS = 16,
        CERTIFICATES_ACCESS = 32,
        MEMBERS_ACCESS = 64,
        COUPONS_ACCESS = 128,
        EVENTS_ACCESS = 256,
        FLIGHTS_ACCESS = 512
    }
    export enum TeamMemberStatus {
        STATUS_NONE = 0,
        TEAM_MEMBER_ACTIVE = 1,
        TEAM_MEMBER_DISABLED = 2,
        TEAM_MEMBER_EXPIRED = 4,
        TEAM_MEMBER_PENDING = 8
    }
    export class AuditLog extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timestamp?: dependency_1.google.protobuf.Timestamp;
            companyId?: string;
            username?: string;
            userType?: dependency_3.io.UserType;
            authentication?: dependency_3.io.Authentication;
            channel?: dependency_3.io.Channel;
            ipAddress?: string;
            endpoint?: string;
            payload?: string;
            statusCode?: number;
            status?: string;
            response?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("companyId" in data && data.companyId != undefined) {
                    this.companyId = data.companyId;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("userType" in data && data.userType != undefined) {
                    this.userType = data.userType;
                }
                if ("authentication" in data && data.authentication != undefined) {
                    this.authentication = data.authentication;
                }
                if ("channel" in data && data.channel != undefined) {
                    this.channel = data.channel;
                }
                if ("ipAddress" in data && data.ipAddress != undefined) {
                    this.ipAddress = data.ipAddress;
                }
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
                if ("payload" in data && data.payload != undefined) {
                    this.payload = data.payload;
                }
                if ("statusCode" in data && data.statusCode != undefined) {
                    this.statusCode = data.statusCode;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("response" in data && data.response != undefined) {
                    this.response = data.response;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set timestamp(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasTimestamp() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get companyId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set companyId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get userType() {
            return pb_1.Message.getFieldWithDefault(this, 4, dependency_3.io.UserType.UnknownUserType) as dependency_3.io.UserType;
        }
        set userType(value: dependency_3.io.UserType) {
            pb_1.Message.setField(this, 4, value);
        }
        get authentication() {
            return pb_1.Message.getFieldWithDefault(this, 5, dependency_3.io.Authentication.Unauthenticated) as dependency_3.io.Authentication;
        }
        set authentication(value: dependency_3.io.Authentication) {
            pb_1.Message.setField(this, 5, value);
        }
        get channel() {
            return pb_1.Message.getFieldWithDefault(this, 6, dependency_3.io.Channel.UnknownChannel) as dependency_3.io.Channel;
        }
        set channel(value: dependency_3.io.Channel) {
            pb_1.Message.setField(this, 6, value);
        }
        get ipAddress() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set ipAddress(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set endpoint(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get payload() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set payload(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get statusCode() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set statusCode(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get response() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set response(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        static fromObject(data: {
            timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            companyId?: string;
            username?: string;
            userType?: dependency_3.io.UserType;
            authentication?: dependency_3.io.Authentication;
            channel?: dependency_3.io.Channel;
            ipAddress?: string;
            endpoint?: string;
            payload?: string;
            statusCode?: number;
            status?: string;
            response?: string;
        }): AuditLog {
            const message = new AuditLog({});
            if (data.timestamp != null) {
                message.timestamp = dependency_1.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.companyId != null) {
                message.companyId = data.companyId;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.userType != null) {
                message.userType = data.userType;
            }
            if (data.authentication != null) {
                message.authentication = data.authentication;
            }
            if (data.channel != null) {
                message.channel = data.channel;
            }
            if (data.ipAddress != null) {
                message.ipAddress = data.ipAddress;
            }
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            if (data.payload != null) {
                message.payload = data.payload;
            }
            if (data.statusCode != null) {
                message.statusCode = data.statusCode;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.response != null) {
                message.response = data.response;
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                companyId?: string;
                username?: string;
                userType?: dependency_3.io.UserType;
                authentication?: dependency_3.io.Authentication;
                channel?: dependency_3.io.Channel;
                ipAddress?: string;
                endpoint?: string;
                payload?: string;
                statusCode?: number;
                status?: string;
                response?: string;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp.toObject();
            }
            if (this.companyId != null) {
                data.companyId = this.companyId;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.userType != null) {
                data.userType = this.userType;
            }
            if (this.authentication != null) {
                data.authentication = this.authentication;
            }
            if (this.channel != null) {
                data.channel = this.channel;
            }
            if (this.ipAddress != null) {
                data.ipAddress = this.ipAddress;
            }
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            if (this.payload != null) {
                data.payload = this.payload;
            }
            if (this.statusCode != null) {
                data.statusCode = this.statusCode;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.response != null) {
                data.response = this.response;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasTimestamp)
                writer.writeMessage(1, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.companyId.length)
                writer.writeString(2, this.companyId);
            if (this.username.length)
                writer.writeString(3, this.username);
            if (this.userType != dependency_3.io.UserType.UnknownUserType)
                writer.writeEnum(4, this.userType);
            if (this.authentication != dependency_3.io.Authentication.Unauthenticated)
                writer.writeEnum(5, this.authentication);
            if (this.channel != dependency_3.io.Channel.UnknownChannel)
                writer.writeEnum(6, this.channel);
            if (this.ipAddress.length)
                writer.writeString(7, this.ipAddress);
            if (this.endpoint.length)
                writer.writeString(8, this.endpoint);
            if (this.payload.length)
                writer.writeString(9, this.payload);
            if (this.statusCode != 0)
                writer.writeUint32(10, this.statusCode);
            if (this.status.length)
                writer.writeString(11, this.status);
            if (this.response.length)
                writer.writeString(12, this.response);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuditLog {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuditLog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.timestamp, () => message.timestamp = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.companyId = reader.readString();
                        break;
                    case 3:
                        message.username = reader.readString();
                        break;
                    case 4:
                        message.userType = reader.readEnum();
                        break;
                    case 5:
                        message.authentication = reader.readEnum();
                        break;
                    case 6:
                        message.channel = reader.readEnum();
                        break;
                    case 7:
                        message.ipAddress = reader.readString();
                        break;
                    case 8:
                        message.endpoint = reader.readString();
                        break;
                    case 9:
                        message.payload = reader.readString();
                        break;
                    case 10:
                        message.statusCode = reader.readUint32();
                        break;
                    case 11:
                        message.status = reader.readString();
                        break;
                    case 12:
                        message.response = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuditLog {
            return AuditLog.deserialize(bytes);
        }
    }
    export class AuditLogRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            beforeTime?: dependency_1.google.protobuf.Timestamp;
            limit?: number;
            errorsOnly?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("beforeTime" in data && data.beforeTime != undefined) {
                    this.beforeTime = data.beforeTime;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("errorsOnly" in data && data.errorsOnly != undefined) {
                    this.errorsOnly = data.errorsOnly;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get beforeTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set beforeTime(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasBeforeTime() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get errorsOnly() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set errorsOnly(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            username?: string;
            beforeTime?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            limit?: number;
            errorsOnly?: boolean;
        }): AuditLogRequest {
            const message = new AuditLogRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.beforeTime != null) {
                message.beforeTime = dependency_1.google.protobuf.Timestamp.fromObject(data.beforeTime);
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.errorsOnly != null) {
                message.errorsOnly = data.errorsOnly;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                beforeTime?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                limit?: number;
                errorsOnly?: boolean;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.beforeTime != null) {
                data.beforeTime = this.beforeTime.toObject();
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.errorsOnly != null) {
                data.errorsOnly = this.errorsOnly;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.hasBeforeTime)
                writer.writeMessage(2, this.beforeTime, () => this.beforeTime.serialize(writer));
            if (this.limit != 0)
                writer.writeUint32(3, this.limit);
            if (this.errorsOnly != false)
                writer.writeBool(4, this.errorsOnly);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuditLogRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuditLogRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.beforeTime, () => message.beforeTime = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 3:
                        message.limit = reader.readUint32();
                        break;
                    case 4:
                        message.errorsOnly = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuditLogRequest {
            return AuditLogRequest.deserialize(bytes);
        }
    }
    export class NewUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            companyId?: string;
            username?: string;
            emailAddress?: string;
            secret?: string;
            certificate?: string;
            privateKey?: string;
            javaPrivateKey?: string;
            expiresAt?: dependency_1.google.protobuf.Timestamp;
            regionId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("companyId" in data && data.companyId != undefined) {
                    this.companyId = data.companyId;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("emailAddress" in data && data.emailAddress != undefined) {
                    this.emailAddress = data.emailAddress;
                }
                if ("secret" in data && data.secret != undefined) {
                    this.secret = data.secret;
                }
                if ("certificate" in data && data.certificate != undefined) {
                    this.certificate = data.certificate;
                }
                if ("privateKey" in data && data.privateKey != undefined) {
                    this.privateKey = data.privateKey;
                }
                if ("javaPrivateKey" in data && data.javaPrivateKey != undefined) {
                    this.javaPrivateKey = data.javaPrivateKey;
                }
                if ("expiresAt" in data && data.expiresAt != undefined) {
                    this.expiresAt = data.expiresAt;
                }
                if ("regionId" in data && data.regionId != undefined) {
                    this.regionId = data.regionId;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get companyId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set companyId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get emailAddress() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set emailAddress(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get secret() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set secret(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get certificate() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set certificate(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get privateKey() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set privateKey(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get javaPrivateKey() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set javaPrivateKey(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get expiresAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 9) as dependency_1.google.protobuf.Timestamp;
        }
        set expiresAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get hasExpiresAt() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get regionId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set regionId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            userId?: string;
            companyId?: string;
            username?: string;
            emailAddress?: string;
            secret?: string;
            certificate?: string;
            privateKey?: string;
            javaPrivateKey?: string;
            expiresAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            regionId?: string;
        }): NewUserResponse {
            const message = new NewUserResponse({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.companyId != null) {
                message.companyId = data.companyId;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.emailAddress != null) {
                message.emailAddress = data.emailAddress;
            }
            if (data.secret != null) {
                message.secret = data.secret;
            }
            if (data.certificate != null) {
                message.certificate = data.certificate;
            }
            if (data.privateKey != null) {
                message.privateKey = data.privateKey;
            }
            if (data.javaPrivateKey != null) {
                message.javaPrivateKey = data.javaPrivateKey;
            }
            if (data.expiresAt != null) {
                message.expiresAt = dependency_1.google.protobuf.Timestamp.fromObject(data.expiresAt);
            }
            if (data.regionId != null) {
                message.regionId = data.regionId;
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                companyId?: string;
                username?: string;
                emailAddress?: string;
                secret?: string;
                certificate?: string;
                privateKey?: string;
                javaPrivateKey?: string;
                expiresAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                regionId?: string;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.companyId != null) {
                data.companyId = this.companyId;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.emailAddress != null) {
                data.emailAddress = this.emailAddress;
            }
            if (this.secret != null) {
                data.secret = this.secret;
            }
            if (this.certificate != null) {
                data.certificate = this.certificate;
            }
            if (this.privateKey != null) {
                data.privateKey = this.privateKey;
            }
            if (this.javaPrivateKey != null) {
                data.javaPrivateKey = this.javaPrivateKey;
            }
            if (this.expiresAt != null) {
                data.expiresAt = this.expiresAt.toObject();
            }
            if (this.regionId != null) {
                data.regionId = this.regionId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.companyId.length)
                writer.writeString(2, this.companyId);
            if (this.username.length)
                writer.writeString(3, this.username);
            if (this.emailAddress.length)
                writer.writeString(4, this.emailAddress);
            if (this.secret.length)
                writer.writeString(5, this.secret);
            if (this.certificate.length)
                writer.writeString(6, this.certificate);
            if (this.privateKey.length)
                writer.writeString(7, this.privateKey);
            if (this.javaPrivateKey.length)
                writer.writeString(8, this.javaPrivateKey);
            if (this.hasExpiresAt)
                writer.writeMessage(9, this.expiresAt, () => this.expiresAt.serialize(writer));
            if (this.regionId.length)
                writer.writeString(10, this.regionId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.companyId = reader.readString();
                        break;
                    case 3:
                        message.username = reader.readString();
                        break;
                    case 4:
                        message.emailAddress = reader.readString();
                        break;
                    case 5:
                        message.secret = reader.readString();
                        break;
                    case 6:
                        message.certificate = reader.readString();
                        break;
                    case 7:
                        message.privateKey = reader.readString();
                        break;
                    case 8:
                        message.javaPrivateKey = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.expiresAt, () => message.expiresAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 10:
                        message.regionId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewUserResponse {
            return NewUserResponse.deserialize(bytes);
        }
    }
    export class NewUser extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
            emailAddress?: string;
            sendEmail?: boolean;
            companyName?: string;
            mobileNumber?: string;
            twoFactorAuth?: boolean;
            isOwner?: boolean;
            readOnly?: boolean;
            teamMember?: boolean;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("emailAddress" in data && data.emailAddress != undefined) {
                    this.emailAddress = data.emailAddress;
                }
                if ("sendEmail" in data && data.sendEmail != undefined) {
                    this.sendEmail = data.sendEmail;
                }
                if ("companyName" in data && data.companyName != undefined) {
                    this.companyName = data.companyName;
                }
                if ("mobileNumber" in data && data.mobileNumber != undefined) {
                    this.mobileNumber = data.mobileNumber;
                }
                if ("twoFactorAuth" in data && data.twoFactorAuth != undefined) {
                    this.twoFactorAuth = data.twoFactorAuth;
                }
                if ("isOwner" in data && data.isOwner != undefined) {
                    this.isOwner = data.isOwner;
                }
                if ("readOnly" in data && data.readOnly != undefined) {
                    this.readOnly = data.readOnly;
                }
                if ("teamMember" in data && data.teamMember != undefined) {
                    this.teamMember = data.teamMember;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get emailAddress() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set emailAddress(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get sendEmail() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set sendEmail(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get companyName() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set companyName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get mobileNumber() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set mobileNumber(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get twoFactorAuth() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set twoFactorAuth(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get isOwner() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set isOwner(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get readOnly() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set readOnly(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get teamMember() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set teamMember(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
            emailAddress?: string;
            sendEmail?: boolean;
            companyName?: string;
            mobileNumber?: string;
            twoFactorAuth?: boolean;
            isOwner?: boolean;
            readOnly?: boolean;
            teamMember?: boolean;
            token?: string;
        }): NewUser {
            const message = new NewUser({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.emailAddress != null) {
                message.emailAddress = data.emailAddress;
            }
            if (data.sendEmail != null) {
                message.sendEmail = data.sendEmail;
            }
            if (data.companyName != null) {
                message.companyName = data.companyName;
            }
            if (data.mobileNumber != null) {
                message.mobileNumber = data.mobileNumber;
            }
            if (data.twoFactorAuth != null) {
                message.twoFactorAuth = data.twoFactorAuth;
            }
            if (data.isOwner != null) {
                message.isOwner = data.isOwner;
            }
            if (data.readOnly != null) {
                message.readOnly = data.readOnly;
            }
            if (data.teamMember != null) {
                message.teamMember = data.teamMember;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
                emailAddress?: string;
                sendEmail?: boolean;
                companyName?: string;
                mobileNumber?: string;
                twoFactorAuth?: boolean;
                isOwner?: boolean;
                readOnly?: boolean;
                teamMember?: boolean;
                token?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.emailAddress != null) {
                data.emailAddress = this.emailAddress;
            }
            if (this.sendEmail != null) {
                data.sendEmail = this.sendEmail;
            }
            if (this.companyName != null) {
                data.companyName = this.companyName;
            }
            if (this.mobileNumber != null) {
                data.mobileNumber = this.mobileNumber;
            }
            if (this.twoFactorAuth != null) {
                data.twoFactorAuth = this.twoFactorAuth;
            }
            if (this.isOwner != null) {
                data.isOwner = this.isOwner;
            }
            if (this.readOnly != null) {
                data.readOnly = this.readOnly;
            }
            if (this.teamMember != null) {
                data.teamMember = this.teamMember;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.emailAddress.length)
                writer.writeString(3, this.emailAddress);
            if (this.sendEmail != false)
                writer.writeBool(4, this.sendEmail);
            if (this.companyName.length)
                writer.writeString(5, this.companyName);
            if (this.mobileNumber.length)
                writer.writeString(6, this.mobileNumber);
            if (this.twoFactorAuth != false)
                writer.writeBool(7, this.twoFactorAuth);
            if (this.isOwner != false)
                writer.writeBool(8, this.isOwner);
            if (this.readOnly != false)
                writer.writeBool(9, this.readOnly);
            if (this.teamMember != false)
                writer.writeBool(10, this.teamMember);
            if (this.token.length)
                writer.writeString(11, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewUser {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewUser();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.emailAddress = reader.readString();
                        break;
                    case 4:
                        message.sendEmail = reader.readBool();
                        break;
                    case 5:
                        message.companyName = reader.readString();
                        break;
                    case 6:
                        message.mobileNumber = reader.readString();
                        break;
                    case 7:
                        message.twoFactorAuth = reader.readBool();
                        break;
                    case 8:
                        message.isOwner = reader.readBool();
                        break;
                    case 9:
                        message.readOnly = reader.readBool();
                        break;
                    case 10:
                        message.teamMember = reader.readBool();
                        break;
                    case 11:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewUser {
            return NewUser.deserialize(bytes);
        }
    }
    export class GetUserResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            username?: string;
            companyId?: string;
            companyName?: string;
            companyStatus?: number;
            createdAt?: dependency_1.google.protobuf.Timestamp;
            expiresAt?: dependency_1.google.protobuf.Timestamp;
            regionId?: string;
            userStatus?: number;
            userPermissions?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("companyId" in data && data.companyId != undefined) {
                    this.companyId = data.companyId;
                }
                if ("companyName" in data && data.companyName != undefined) {
                    this.companyName = data.companyName;
                }
                if ("companyStatus" in data && data.companyStatus != undefined) {
                    this.companyStatus = data.companyStatus;
                }
                if ("createdAt" in data && data.createdAt != undefined) {
                    this.createdAt = data.createdAt;
                }
                if ("expiresAt" in data && data.expiresAt != undefined) {
                    this.expiresAt = data.expiresAt;
                }
                if ("regionId" in data && data.regionId != undefined) {
                    this.regionId = data.regionId;
                }
                if ("userStatus" in data && data.userStatus != undefined) {
                    this.userStatus = data.userStatus;
                }
                if ("userPermissions" in data && data.userPermissions != undefined) {
                    this.userPermissions = data.userPermissions;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get companyId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set companyId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get companyName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set companyName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get companyStatus() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set companyStatus(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get createdAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set createdAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasCreatedAt() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get expiresAt() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 7) as dependency_1.google.protobuf.Timestamp;
        }
        set expiresAt(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasExpiresAt() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get regionId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set regionId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get userStatus() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set userStatus(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get userPermissions() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set userPermissions(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            email?: string;
            username?: string;
            companyId?: string;
            companyName?: string;
            companyStatus?: number;
            createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            expiresAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            regionId?: string;
            userStatus?: number;
            userPermissions?: number;
        }): GetUserResponse {
            const message = new GetUserResponse({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.companyId != null) {
                message.companyId = data.companyId;
            }
            if (data.companyName != null) {
                message.companyName = data.companyName;
            }
            if (data.companyStatus != null) {
                message.companyStatus = data.companyStatus;
            }
            if (data.createdAt != null) {
                message.createdAt = dependency_1.google.protobuf.Timestamp.fromObject(data.createdAt);
            }
            if (data.expiresAt != null) {
                message.expiresAt = dependency_1.google.protobuf.Timestamp.fromObject(data.expiresAt);
            }
            if (data.regionId != null) {
                message.regionId = data.regionId;
            }
            if (data.userStatus != null) {
                message.userStatus = data.userStatus;
            }
            if (data.userPermissions != null) {
                message.userPermissions = data.userPermissions;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                username?: string;
                companyId?: string;
                companyName?: string;
                companyStatus?: number;
                createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                expiresAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                regionId?: string;
                userStatus?: number;
                userPermissions?: number;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.companyId != null) {
                data.companyId = this.companyId;
            }
            if (this.companyName != null) {
                data.companyName = this.companyName;
            }
            if (this.companyStatus != null) {
                data.companyStatus = this.companyStatus;
            }
            if (this.createdAt != null) {
                data.createdAt = this.createdAt.toObject();
            }
            if (this.expiresAt != null) {
                data.expiresAt = this.expiresAt.toObject();
            }
            if (this.regionId != null) {
                data.regionId = this.regionId;
            }
            if (this.userStatus != null) {
                data.userStatus = this.userStatus;
            }
            if (this.userPermissions != null) {
                data.userPermissions = this.userPermissions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.username.length)
                writer.writeString(2, this.username);
            if (this.companyId.length)
                writer.writeString(3, this.companyId);
            if (this.companyName.length)
                writer.writeString(4, this.companyName);
            if (this.companyStatus != 0)
                writer.writeUint64(5, this.companyStatus);
            if (this.hasCreatedAt)
                writer.writeMessage(6, this.createdAt, () => this.createdAt.serialize(writer));
            if (this.hasExpiresAt)
                writer.writeMessage(7, this.expiresAt, () => this.expiresAt.serialize(writer));
            if (this.regionId.length)
                writer.writeString(8, this.regionId);
            if (this.userStatus != 0)
                writer.writeUint64(9, this.userStatus);
            if (this.userPermissions != 0)
                writer.writeUint64(10, this.userPermissions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.username = reader.readString();
                        break;
                    case 3:
                        message.companyId = reader.readString();
                        break;
                    case 4:
                        message.companyName = reader.readString();
                        break;
                    case 5:
                        message.companyStatus = reader.readUint64();
                        break;
                    case 6:
                        reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.expiresAt, () => message.expiresAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 8:
                        message.regionId = reader.readString();
                        break;
                    case 9:
                        message.userStatus = reader.readUint64();
                        break;
                    case 10:
                        message.userPermissions = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserResponse {
            return GetUserResponse.deserialize(bytes);
        }
    }
    export class BillingMeta extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            companyName?: string;
            taxId?: string;
            reference?: string;
            billingAddress?: dependency_2.io.Address;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("companyName" in data && data.companyName != undefined) {
                    this.companyName = data.companyName;
                }
                if ("taxId" in data && data.taxId != undefined) {
                    this.taxId = data.taxId;
                }
                if ("reference" in data && data.reference != undefined) {
                    this.reference = data.reference;
                }
                if ("billingAddress" in data && data.billingAddress != undefined) {
                    this.billingAddress = data.billingAddress;
                }
            }
        }
        get companyName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set companyName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get taxId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set taxId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get reference() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set reference(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get billingAddress() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.Address, 4) as dependency_2.io.Address;
        }
        set billingAddress(value: dependency_2.io.Address) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasBillingAddress() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            companyName?: string;
            taxId?: string;
            reference?: string;
            billingAddress?: ReturnType<typeof dependency_2.io.Address.prototype.toObject>;
        }): BillingMeta {
            const message = new BillingMeta({});
            if (data.companyName != null) {
                message.companyName = data.companyName;
            }
            if (data.taxId != null) {
                message.taxId = data.taxId;
            }
            if (data.reference != null) {
                message.reference = data.reference;
            }
            if (data.billingAddress != null) {
                message.billingAddress = dependency_2.io.Address.fromObject(data.billingAddress);
            }
            return message;
        }
        toObject() {
            const data: {
                companyName?: string;
                taxId?: string;
                reference?: string;
                billingAddress?: ReturnType<typeof dependency_2.io.Address.prototype.toObject>;
            } = {};
            if (this.companyName != null) {
                data.companyName = this.companyName;
            }
            if (this.taxId != null) {
                data.taxId = this.taxId;
            }
            if (this.reference != null) {
                data.reference = this.reference;
            }
            if (this.billingAddress != null) {
                data.billingAddress = this.billingAddress.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.companyName.length)
                writer.writeString(1, this.companyName);
            if (this.taxId.length)
                writer.writeString(2, this.taxId);
            if (this.reference.length)
                writer.writeString(3, this.reference);
            if (this.hasBillingAddress)
                writer.writeMessage(4, this.billingAddress, () => this.billingAddress.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BillingMeta {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BillingMeta();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.companyName = reader.readString();
                        break;
                    case 2:
                        message.taxId = reader.readString();
                        break;
                    case 3:
                        message.reference = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.billingAddress, () => message.billingAddress = dependency_2.io.Address.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BillingMeta {
            return BillingMeta.deserialize(bytes);
        }
    }
    export class Credentials extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
            twoFAToken?: string;
            twoFACode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("twoFAToken" in data && data.twoFAToken != undefined) {
                    this.twoFAToken = data.twoFAToken;
                }
                if ("twoFACode" in data && data.twoFACode != undefined) {
                    this.twoFACode = data.twoFACode;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get twoFAToken() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set twoFAToken(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get twoFACode() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set twoFACode(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
            twoFAToken?: string;
            twoFACode?: string;
        }): Credentials {
            const message = new Credentials({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.twoFAToken != null) {
                message.twoFAToken = data.twoFAToken;
            }
            if (data.twoFACode != null) {
                message.twoFACode = data.twoFACode;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
                twoFAToken?: string;
                twoFACode?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.twoFAToken != null) {
                data.twoFAToken = this.twoFAToken;
            }
            if (this.twoFACode != null) {
                data.twoFACode = this.twoFACode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.twoFAToken.length)
                writer.writeString(3, this.twoFAToken);
            if (this.twoFACode.length)
                writer.writeString(4, this.twoFACode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Credentials {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Credentials();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.twoFAToken = reader.readString();
                        break;
                    case 4:
                        message.twoFACode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Credentials {
            return Credentials.deserialize(bytes);
        }
    }
    export class VerifyRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uid?: string;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            uid?: string;
            token?: string;
        }): VerifyRequest {
            const message = new VerifyRequest({});
            if (data.uid != null) {
                message.uid = data.uid;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                uid?: string;
                token?: string;
            } = {};
            if (this.uid != null) {
                data.uid = this.uid;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uid.length)
                writer.writeString(1, this.uid);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readString();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyRequest {
            return VerifyRequest.deserialize(bytes);
        }
    }
    export class JWT extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): JWT {
            const message = new JWT({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JWT {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JWT();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JWT {
            return JWT.deserialize(bytes);
        }
    }
    export class PasswordResetInput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            registeredEmail?: string;
            newPassword?: string;
            confirmNewPassword?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("registeredEmail" in data && data.registeredEmail != undefined) {
                    this.registeredEmail = data.registeredEmail;
                }
                if ("newPassword" in data && data.newPassword != undefined) {
                    this.newPassword = data.newPassword;
                }
                if ("confirmNewPassword" in data && data.confirmNewPassword != undefined) {
                    this.confirmNewPassword = data.confirmNewPassword;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get registeredEmail() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set registeredEmail(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get newPassword() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set newPassword(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get confirmNewPassword() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set confirmNewPassword(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            registeredEmail?: string;
            newPassword?: string;
            confirmNewPassword?: string;
        }): PasswordResetInput {
            const message = new PasswordResetInput({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.registeredEmail != null) {
                message.registeredEmail = data.registeredEmail;
            }
            if (data.newPassword != null) {
                message.newPassword = data.newPassword;
            }
            if (data.confirmNewPassword != null) {
                message.confirmNewPassword = data.confirmNewPassword;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                registeredEmail?: string;
                newPassword?: string;
                confirmNewPassword?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.registeredEmail != null) {
                data.registeredEmail = this.registeredEmail;
            }
            if (this.newPassword != null) {
                data.newPassword = this.newPassword;
            }
            if (this.confirmNewPassword != null) {
                data.confirmNewPassword = this.confirmNewPassword;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.registeredEmail.length)
                writer.writeString(2, this.registeredEmail);
            if (this.newPassword.length)
                writer.writeString(3, this.newPassword);
            if (this.confirmNewPassword.length)
                writer.writeString(4, this.confirmNewPassword);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PasswordResetInput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PasswordResetInput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.registeredEmail = reader.readString();
                        break;
                    case 3:
                        message.newPassword = reader.readString();
                        break;
                    case 4:
                        message.confirmNewPassword = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PasswordResetInput {
            return PasswordResetInput.deserialize(bytes);
        }
    }
    export class Username extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            username?: string;
        }): Username {
            const message = new Username({});
            if (data.username != null) {
                message.username = data.username;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Username {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Username();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Username {
            return Username.deserialize(bytes);
        }
    }
    export class OAuth2AuthorizationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            clientCode?: string;
            provider?: OAuth2Provider;
            redirectUri?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("clientCode" in data && data.clientCode != undefined) {
                    this.clientCode = data.clientCode;
                }
                if ("provider" in data && data.provider != undefined) {
                    this.provider = data.provider;
                }
                if ("redirectUri" in data && data.redirectUri != undefined) {
                    this.redirectUri = data.redirectUri;
                }
            }
        }
        get clientCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set clientCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get provider() {
            return pb_1.Message.getFieldWithDefault(this, 2, OAuth2Provider.OAUTH_DO_NOT_USE) as OAuth2Provider;
        }
        set provider(value: OAuth2Provider) {
            pb_1.Message.setField(this, 2, value);
        }
        get redirectUri() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set redirectUri(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            clientCode?: string;
            provider?: OAuth2Provider;
            redirectUri?: string;
        }): OAuth2AuthorizationRequest {
            const message = new OAuth2AuthorizationRequest({});
            if (data.clientCode != null) {
                message.clientCode = data.clientCode;
            }
            if (data.provider != null) {
                message.provider = data.provider;
            }
            if (data.redirectUri != null) {
                message.redirectUri = data.redirectUri;
            }
            return message;
        }
        toObject() {
            const data: {
                clientCode?: string;
                provider?: OAuth2Provider;
                redirectUri?: string;
            } = {};
            if (this.clientCode != null) {
                data.clientCode = this.clientCode;
            }
            if (this.provider != null) {
                data.provider = this.provider;
            }
            if (this.redirectUri != null) {
                data.redirectUri = this.redirectUri;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.clientCode.length)
                writer.writeString(1, this.clientCode);
            if (this.provider != OAuth2Provider.OAUTH_DO_NOT_USE)
                writer.writeEnum(2, this.provider);
            if (this.redirectUri.length)
                writer.writeString(3, this.redirectUri);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OAuth2AuthorizationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OAuth2AuthorizationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.clientCode = reader.readString();
                        break;
                    case 2:
                        message.provider = reader.readEnum();
                        break;
                    case 3:
                        message.redirectUri = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OAuth2AuthorizationRequest {
            return OAuth2AuthorizationRequest.deserialize(bytes);
        }
    }
    export class ScannerConfiguration extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            membershipPermissions?: ScannerMembershipPermissions[];
            couponPermissions?: ScannerCouponPermissions[];
            defaultMembershipAction?: DefaultMembershipScanAction[];
            defaultCouponAction?: DefaultCouponScanAction[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("membershipPermissions" in data && data.membershipPermissions != undefined) {
                    this.membershipPermissions = data.membershipPermissions;
                }
                if ("couponPermissions" in data && data.couponPermissions != undefined) {
                    this.couponPermissions = data.couponPermissions;
                }
                if ("defaultMembershipAction" in data && data.defaultMembershipAction != undefined) {
                    this.defaultMembershipAction = data.defaultMembershipAction;
                }
                if ("defaultCouponAction" in data && data.defaultCouponAction != undefined) {
                    this.defaultCouponAction = data.defaultCouponAction;
                }
            }
        }
        get membershipPermissions() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as ScannerMembershipPermissions[];
        }
        set membershipPermissions(value: ScannerMembershipPermissions[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get couponPermissions() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as ScannerCouponPermissions[];
        }
        set couponPermissions(value: ScannerCouponPermissions[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get defaultMembershipAction() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as DefaultMembershipScanAction[];
        }
        set defaultMembershipAction(value: DefaultMembershipScanAction[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get defaultCouponAction() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as DefaultCouponScanAction[];
        }
        set defaultCouponAction(value: DefaultCouponScanAction[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            membershipPermissions?: ScannerMembershipPermissions[];
            couponPermissions?: ScannerCouponPermissions[];
            defaultMembershipAction?: DefaultMembershipScanAction[];
            defaultCouponAction?: DefaultCouponScanAction[];
        }): ScannerConfiguration {
            const message = new ScannerConfiguration({});
            if (data.membershipPermissions != null) {
                message.membershipPermissions = data.membershipPermissions;
            }
            if (data.couponPermissions != null) {
                message.couponPermissions = data.couponPermissions;
            }
            if (data.defaultMembershipAction != null) {
                message.defaultMembershipAction = data.defaultMembershipAction;
            }
            if (data.defaultCouponAction != null) {
                message.defaultCouponAction = data.defaultCouponAction;
            }
            return message;
        }
        toObject() {
            const data: {
                membershipPermissions?: ScannerMembershipPermissions[];
                couponPermissions?: ScannerCouponPermissions[];
                defaultMembershipAction?: DefaultMembershipScanAction[];
                defaultCouponAction?: DefaultCouponScanAction[];
            } = {};
            if (this.membershipPermissions != null) {
                data.membershipPermissions = this.membershipPermissions;
            }
            if (this.couponPermissions != null) {
                data.couponPermissions = this.couponPermissions;
            }
            if (this.defaultMembershipAction != null) {
                data.defaultMembershipAction = this.defaultMembershipAction;
            }
            if (this.defaultCouponAction != null) {
                data.defaultCouponAction = this.defaultCouponAction;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.membershipPermissions.length)
                writer.writePackedEnum(1, this.membershipPermissions);
            if (this.couponPermissions.length)
                writer.writePackedEnum(2, this.couponPermissions);
            if (this.defaultMembershipAction.length)
                writer.writePackedEnum(3, this.defaultMembershipAction);
            if (this.defaultCouponAction.length)
                writer.writePackedEnum(4, this.defaultCouponAction);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScannerConfiguration {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScannerConfiguration();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.membershipPermissions = reader.readPackedEnum();
                        break;
                    case 2:
                        message.couponPermissions = reader.readPackedEnum();
                        break;
                    case 3:
                        message.defaultMembershipAction = reader.readPackedEnum();
                        break;
                    case 4:
                        message.defaultCouponAction = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ScannerConfiguration {
            return ScannerConfiguration.deserialize(bytes);
        }
    }
    export class Email extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            email?: string;
        }): Email {
            const message = new Email({});
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Email {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Email();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Email {
            return Email.deserialize(bytes);
        }
    }
    export class ConfirmEmailChangeInput extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
            token?: string;
        }): ConfirmEmailChangeInput {
            const message = new ConfirmEmailChangeInput({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
                token?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfirmEmailChangeInput {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfirmEmailChangeInput();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfirmEmailChangeInput {
            return ConfirmEmailChangeInput.deserialize(bytes);
        }
    }
    export class CompanyName extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            companyName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("companyName" in data && data.companyName != undefined) {
                    this.companyName = data.companyName;
                }
            }
        }
        get companyName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set companyName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            companyName?: string;
        }): CompanyName {
            const message = new CompanyName({});
            if (data.companyName != null) {
                message.companyName = data.companyName;
            }
            return message;
        }
        toObject() {
            const data: {
                companyName?: string;
            } = {};
            if (this.companyName != null) {
                data.companyName = this.companyName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.companyName.length)
                writer.writeString(1, this.companyName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompanyName {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompanyName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.companyName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompanyName {
            return CompanyName.deserialize(bytes);
        }
    }
    export class DeleteAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
            confirmPermanentDelete?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("confirmPermanentDelete" in data && data.confirmPermanentDelete != undefined) {
                    this.confirmPermanentDelete = data.confirmPermanentDelete;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get confirmPermanentDelete() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set confirmPermanentDelete(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
            confirmPermanentDelete?: boolean;
        }): DeleteAccountRequest {
            const message = new DeleteAccountRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.confirmPermanentDelete != null) {
                message.confirmPermanentDelete = data.confirmPermanentDelete;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
                confirmPermanentDelete?: boolean;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.confirmPermanentDelete != null) {
                data.confirmPermanentDelete = this.confirmPermanentDelete;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.confirmPermanentDelete != false)
                writer.writeBool(3, this.confirmPermanentDelete);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        message.confirmPermanentDelete = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteAccountRequest {
            return DeleteAccountRequest.deserialize(bytes);
        }
    }
    export class ProjectsList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            projects?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("projects" in data && data.projects != undefined) {
                    this.projects = data.projects;
                }
            }
        }
        get projects() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set projects(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            projects?: string[];
        }): ProjectsList {
            const message = new ProjectsList({});
            if (data.projects != null) {
                message.projects = data.projects;
            }
            return message;
        }
        toObject() {
            const data: {
                projects?: string[];
            } = {};
            if (this.projects != null) {
                data.projects = this.projects;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.projects.length)
                writer.writeRepeatedString(1, this.projects);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProjectsList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProjectsList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProjectsList {
            return ProjectsList.deserialize(bytes);
        }
    }
    export class CertificatesList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            certificates?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("certificates" in data && data.certificates != undefined) {
                    this.certificates = data.certificates;
                }
            }
        }
        get certificates() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set certificates(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            certificates?: string[];
        }): CertificatesList {
            const message = new CertificatesList({});
            if (data.certificates != null) {
                message.certificates = data.certificates;
            }
            return message;
        }
        toObject() {
            const data: {
                certificates?: string[];
            } = {};
            if (this.certificates != null) {
                data.certificates = this.certificates;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.certificates.length)
                writer.writeRepeatedString(1, this.certificates);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CertificatesList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CertificatesList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CertificatesList {
            return CertificatesList.deserialize(bytes);
        }
    }
    export class ProtocolList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            classIds?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("classIds" in data && data.classIds != undefined) {
                    this.classIds = data.classIds;
                }
            }
        }
        get classIds() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set classIds(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            classIds?: string[];
        }): ProtocolList {
            const message = new ProtocolList({});
            if (data.classIds != null) {
                message.classIds = data.classIds;
            }
            return message;
        }
        toObject() {
            const data: {
                classIds?: string[];
            } = {};
            if (this.classIds != null) {
                data.classIds = this.classIds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.classIds.length)
                writer.writeRepeatedString(1, this.classIds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtocolList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtocolList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtocolList {
            return ProtocolList.deserialize(bytes);
        }
    }
    export class ResourcePermissions extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2], [3, 4], [5, 6]];
        constructor(data?: any[] | ({} & (({
            allowedProjects?: ProjectsList;
            disallowedProjects?: never;
        } | {
            allowedProjects?: never;
            disallowedProjects?: ProjectsList;
        }) | ({
            allowedCertificates?: CertificatesList;
            disallowedCertificates?: never;
        } | {
            allowedCertificates?: never;
            disallowedCertificates?: CertificatesList;
        }) | ({
            allowedPrograms?: ProtocolList;
            disallowedPrograms?: never;
        } | {
            allowedPrograms?: never;
            disallowedPrograms?: ProtocolList;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("allowedProjects" in data && data.allowedProjects != undefined) {
                    this.allowedProjects = data.allowedProjects;
                }
                if ("disallowedProjects" in data && data.disallowedProjects != undefined) {
                    this.disallowedProjects = data.disallowedProjects;
                }
                if ("allowedCertificates" in data && data.allowedCertificates != undefined) {
                    this.allowedCertificates = data.allowedCertificates;
                }
                if ("disallowedCertificates" in data && data.disallowedCertificates != undefined) {
                    this.disallowedCertificates = data.disallowedCertificates;
                }
                if ("allowedPrograms" in data && data.allowedPrograms != undefined) {
                    this.allowedPrograms = data.allowedPrograms;
                }
                if ("disallowedPrograms" in data && data.disallowedPrograms != undefined) {
                    this.disallowedPrograms = data.disallowedPrograms;
                }
            }
        }
        get allowedProjects() {
            return pb_1.Message.getWrapperField(this, ProjectsList, 1) as ProjectsList;
        }
        set allowedProjects(value: ProjectsList) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get hasAllowedProjects() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get disallowedProjects() {
            return pb_1.Message.getWrapperField(this, ProjectsList, 2) as ProjectsList;
        }
        set disallowedProjects(value: ProjectsList) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get hasDisallowedProjects() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get allowedCertificates() {
            return pb_1.Message.getWrapperField(this, CertificatesList, 3) as CertificatesList;
        }
        set allowedCertificates(value: CertificatesList) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[1], value);
        }
        get hasAllowedCertificates() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get disallowedCertificates() {
            return pb_1.Message.getWrapperField(this, CertificatesList, 4) as CertificatesList;
        }
        set disallowedCertificates(value: CertificatesList) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[1], value);
        }
        get hasDisallowedCertificates() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get allowedPrograms() {
            return pb_1.Message.getWrapperField(this, ProtocolList, 5) as ProtocolList;
        }
        set allowedPrograms(value: ProtocolList) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[2], value);
        }
        get hasAllowedPrograms() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get disallowedPrograms() {
            return pb_1.Message.getWrapperField(this, ProtocolList, 6) as ProtocolList;
        }
        set disallowedPrograms(value: ProtocolList) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[2], value);
        }
        get hasDisallowedPrograms() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get ProjectPermissions() {
            const cases: {
                [index: number]: "none" | "allowedProjects" | "disallowedProjects";
            } = {
                0: "none",
                1: "allowedProjects",
                2: "disallowedProjects"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        get CertificatePermissions() {
            const cases: {
                [index: number]: "none" | "allowedCertificates" | "disallowedCertificates";
            } = {
                0: "none",
                3: "allowedCertificates",
                4: "disallowedCertificates"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3, 4])];
        }
        get MembershipProgramPermissions() {
            const cases: {
                [index: number]: "none" | "allowedPrograms" | "disallowedPrograms";
            } = {
                0: "none",
                5: "allowedPrograms",
                6: "disallowedPrograms"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5, 6])];
        }
        static fromObject(data: {
            allowedProjects?: ReturnType<typeof ProjectsList.prototype.toObject>;
            disallowedProjects?: ReturnType<typeof ProjectsList.prototype.toObject>;
            allowedCertificates?: ReturnType<typeof CertificatesList.prototype.toObject>;
            disallowedCertificates?: ReturnType<typeof CertificatesList.prototype.toObject>;
            allowedPrograms?: ReturnType<typeof ProtocolList.prototype.toObject>;
            disallowedPrograms?: ReturnType<typeof ProtocolList.prototype.toObject>;
        }): ResourcePermissions {
            const message = new ResourcePermissions({});
            if (data.allowedProjects != null) {
                message.allowedProjects = ProjectsList.fromObject(data.allowedProjects);
            }
            if (data.disallowedProjects != null) {
                message.disallowedProjects = ProjectsList.fromObject(data.disallowedProjects);
            }
            if (data.allowedCertificates != null) {
                message.allowedCertificates = CertificatesList.fromObject(data.allowedCertificates);
            }
            if (data.disallowedCertificates != null) {
                message.disallowedCertificates = CertificatesList.fromObject(data.disallowedCertificates);
            }
            if (data.allowedPrograms != null) {
                message.allowedPrograms = ProtocolList.fromObject(data.allowedPrograms);
            }
            if (data.disallowedPrograms != null) {
                message.disallowedPrograms = ProtocolList.fromObject(data.disallowedPrograms);
            }
            return message;
        }
        toObject() {
            const data: {
                allowedProjects?: ReturnType<typeof ProjectsList.prototype.toObject>;
                disallowedProjects?: ReturnType<typeof ProjectsList.prototype.toObject>;
                allowedCertificates?: ReturnType<typeof CertificatesList.prototype.toObject>;
                disallowedCertificates?: ReturnType<typeof CertificatesList.prototype.toObject>;
                allowedPrograms?: ReturnType<typeof ProtocolList.prototype.toObject>;
                disallowedPrograms?: ReturnType<typeof ProtocolList.prototype.toObject>;
            } = {};
            if (this.allowedProjects != null) {
                data.allowedProjects = this.allowedProjects.toObject();
            }
            if (this.disallowedProjects != null) {
                data.disallowedProjects = this.disallowedProjects.toObject();
            }
            if (this.allowedCertificates != null) {
                data.allowedCertificates = this.allowedCertificates.toObject();
            }
            if (this.disallowedCertificates != null) {
                data.disallowedCertificates = this.disallowedCertificates.toObject();
            }
            if (this.allowedPrograms != null) {
                data.allowedPrograms = this.allowedPrograms.toObject();
            }
            if (this.disallowedPrograms != null) {
                data.disallowedPrograms = this.disallowedPrograms.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasAllowedProjects)
                writer.writeMessage(1, this.allowedProjects, () => this.allowedProjects.serialize(writer));
            if (this.hasDisallowedProjects)
                writer.writeMessage(2, this.disallowedProjects, () => this.disallowedProjects.serialize(writer));
            if (this.hasAllowedCertificates)
                writer.writeMessage(3, this.allowedCertificates, () => this.allowedCertificates.serialize(writer));
            if (this.hasDisallowedCertificates)
                writer.writeMessage(4, this.disallowedCertificates, () => this.disallowedCertificates.serialize(writer));
            if (this.hasAllowedPrograms)
                writer.writeMessage(5, this.allowedPrograms, () => this.allowedPrograms.serialize(writer));
            if (this.hasDisallowedPrograms)
                writer.writeMessage(6, this.disallowedPrograms, () => this.disallowedPrograms.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourcePermissions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourcePermissions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.allowedProjects, () => message.allowedProjects = ProjectsList.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.disallowedProjects, () => message.disallowedProjects = ProjectsList.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.allowedCertificates, () => message.allowedCertificates = CertificatesList.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.disallowedCertificates, () => message.disallowedCertificates = CertificatesList.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.allowedPrograms, () => message.allowedPrograms = ProtocolList.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.disallowedPrograms, () => message.disallowedPrograms = ProtocolList.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourcePermissions {
            return ResourcePermissions.deserialize(bytes);
        }
    }
    export class TeamMemberPermissions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            userId?: string;
            permissionScope?: PermissionScope;
            status?: TeamMemberStatus;
            resourcePermissions?: ResourcePermissions;
            created?: dependency_1.google.protobuf.Timestamp;
            updated?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("permissionScope" in data && data.permissionScope != undefined) {
                    this.permissionScope = data.permissionScope;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("resourcePermissions" in data && data.resourcePermissions != undefined) {
                    this.resourcePermissions = data.resourcePermissions;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get permissionScope() {
            return pb_1.Message.getFieldWithDefault(this, 3, PermissionScope.PERMISSION_NONE) as PermissionScope;
        }
        set permissionScope(value: PermissionScope) {
            pb_1.Message.setField(this, 3, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 4, TeamMemberStatus.STATUS_NONE) as TeamMemberStatus;
        }
        set status(value: TeamMemberStatus) {
            pb_1.Message.setField(this, 4, value);
        }
        get resourcePermissions() {
            return pb_1.Message.getWrapperField(this, ResourcePermissions, 5) as ResourcePermissions;
        }
        set resourcePermissions(value: ResourcePermissions) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasResourcePermissions() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 6) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 7) as dependency_1.google.protobuf.Timestamp;
        }
        set updated(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasUpdated() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            id?: string;
            userId?: string;
            permissionScope?: PermissionScope;
            status?: TeamMemberStatus;
            resourcePermissions?: ReturnType<typeof ResourcePermissions.prototype.toObject>;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): TeamMemberPermissions {
            const message = new TeamMemberPermissions({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.permissionScope != null) {
                message.permissionScope = data.permissionScope;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.resourcePermissions != null) {
                message.resourcePermissions = ResourcePermissions.fromObject(data.resourcePermissions);
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            if (data.updated != null) {
                message.updated = dependency_1.google.protobuf.Timestamp.fromObject(data.updated);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                userId?: string;
                permissionScope?: PermissionScope;
                status?: TeamMemberStatus;
                resourcePermissions?: ReturnType<typeof ResourcePermissions.prototype.toObject>;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                updated?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.permissionScope != null) {
                data.permissionScope = this.permissionScope;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.resourcePermissions != null) {
                data.resourcePermissions = this.resourcePermissions.toObject();
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.userId.length)
                writer.writeString(2, this.userId);
            if (this.permissionScope != PermissionScope.PERMISSION_NONE)
                writer.writeEnum(3, this.permissionScope);
            if (this.status != TeamMemberStatus.STATUS_NONE)
                writer.writeEnum(4, this.status);
            if (this.hasResourcePermissions)
                writer.writeMessage(5, this.resourcePermissions, () => this.resourcePermissions.serialize(writer));
            if (this.hasCreated)
                writer.writeMessage(6, this.created, () => this.created.serialize(writer));
            if (this.hasUpdated)
                writer.writeMessage(7, this.updated, () => this.updated.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TeamMemberPermissions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TeamMemberPermissions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readString();
                        break;
                    case 3:
                        message.permissionScope = reader.readEnum();
                        break;
                    case 4:
                        message.status = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.resourcePermissions, () => message.resourcePermissions = ResourcePermissions.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.updated, () => message.updated = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TeamMemberPermissions {
            return TeamMemberPermissions.deserialize(bytes);
        }
    }
    export class NewTeamMember extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: NewUser;
            permissions?: TeamMemberPermissions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("permissions" in data && data.permissions != undefined) {
                    this.permissions = data.permissions;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, NewUser, 1) as NewUser;
        }
        set user(value: NewUser) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasUser() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get permissions() {
            return pb_1.Message.getWrapperField(this, TeamMemberPermissions, 2) as TeamMemberPermissions;
        }
        set permissions(value: TeamMemberPermissions) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasPermissions() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof NewUser.prototype.toObject>;
            permissions?: ReturnType<typeof TeamMemberPermissions.prototype.toObject>;
        }): NewTeamMember {
            const message = new NewTeamMember({});
            if (data.user != null) {
                message.user = NewUser.fromObject(data.user);
            }
            if (data.permissions != null) {
                message.permissions = TeamMemberPermissions.fromObject(data.permissions);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof NewUser.prototype.toObject>;
                permissions?: ReturnType<typeof TeamMemberPermissions.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.permissions != null) {
                data.permissions = this.permissions.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasUser)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.hasPermissions)
                writer.writeMessage(2, this.permissions, () => this.permissions.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewTeamMember {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewTeamMember();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = NewUser.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.permissions, () => message.permissions = TeamMemberPermissions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): NewTeamMember {
            return NewTeamMember.deserialize(bytes);
        }
    }
    export class GetTeamMemberResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: GetUserResponse;
            permissions?: TeamMemberPermissions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("permissions" in data && data.permissions != undefined) {
                    this.permissions = data.permissions;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, GetUserResponse, 1) as GetUserResponse;
        }
        set user(value: GetUserResponse) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasUser() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get permissions() {
            return pb_1.Message.getWrapperField(this, TeamMemberPermissions, 2) as TeamMemberPermissions;
        }
        set permissions(value: TeamMemberPermissions) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasPermissions() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof GetUserResponse.prototype.toObject>;
            permissions?: ReturnType<typeof TeamMemberPermissions.prototype.toObject>;
        }): GetTeamMemberResponse {
            const message = new GetTeamMemberResponse({});
            if (data.user != null) {
                message.user = GetUserResponse.fromObject(data.user);
            }
            if (data.permissions != null) {
                message.permissions = TeamMemberPermissions.fromObject(data.permissions);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof GetUserResponse.prototype.toObject>;
                permissions?: ReturnType<typeof TeamMemberPermissions.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.permissions != null) {
                data.permissions = this.permissions.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasUser)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.hasPermissions)
                writer.writeMessage(2, this.permissions, () => this.permissions.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetTeamMemberResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetTeamMemberResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = GetUserResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.permissions, () => message.permissions = TeamMemberPermissions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetTeamMemberResponse {
            return GetTeamMemberResponse.deserialize(bytes);
        }
    }
    export class ListTeamMembersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uid?: string;
            email?: string;
            status?: TeamMemberStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get uid() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, TeamMemberStatus.STATUS_NONE) as TeamMemberStatus;
        }
        set status(value: TeamMemberStatus) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            uid?: string;
            email?: string;
            status?: TeamMemberStatus;
        }): ListTeamMembersResponse {
            const message = new ListTeamMembersResponse({});
            if (data.uid != null) {
                message.uid = data.uid;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                uid?: string;
                email?: string;
                status?: TeamMemberStatus;
            } = {};
            if (this.uid != null) {
                data.uid = this.uid;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uid.length)
                writer.writeString(1, this.uid);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (this.status != TeamMemberStatus.STATUS_NONE)
                writer.writeEnum(3, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListTeamMembersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListTeamMembersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    case 3:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListTeamMembersResponse {
            return ListTeamMembersResponse.deserialize(bytes);
        }
    }
    export class Recaptcha extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): Recaptcha {
            const message = new Recaptcha({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Recaptcha {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Recaptcha();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Recaptcha {
            return Recaptcha.deserialize(bytes);
        }
    }
}
