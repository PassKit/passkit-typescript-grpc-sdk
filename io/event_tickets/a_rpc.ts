/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/event_tickets/a_rpc.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/empty";
import * as dependency_2 from "./../../google/api/annotations";
import * as dependency_3 from "./../common/common_objects";
import * as dependency_4 from "./../common/filter";
import * as dependency_5 from "./../common/reporting";
import * as dependency_6 from "./event";
import * as dependency_7 from "./production";
import * as dependency_8 from "./ticket_type";
import * as dependency_9 from "./ticket";
import * as dependency_10 from "./venue";
import * as dependency_11 from "./../../protoc-gen-openapiv2/options/annotations";
import * as grpc_1 from "@grpc/grpc-js";
export namespace event_tickets {
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedEventTicketsService {
        static definition = {
            createProduction: {
                path: "/event_tickets.EventTickets/createProduction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_7.event_tickets.Production) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_7.event_tickets.Production.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes))
            },
            patchProduction: {
                path: "/event_tickets.EventTickets/patchProduction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_7.event_tickets.Production) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_7.event_tickets.Production.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_7.event_tickets.Production) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_7.event_tickets.Production.deserialize(new Uint8Array(bytes))
            },
            updateProduction: {
                path: "/event_tickets.EventTickets/updateProduction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_7.event_tickets.Production) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_7.event_tickets.Production.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_7.event_tickets.Production) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_7.event_tickets.Production.deserialize(new Uint8Array(bytes))
            },
            getProduction: {
                path: "/event_tickets.EventTickets/getProduction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_7.event_tickets.Production) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_7.event_tickets.Production.deserialize(new Uint8Array(bytes))
            },
            deleteProduction: {
                path: "/event_tickets.EventTickets/deleteProduction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_7.event_tickets.Production) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_7.event_tickets.Production.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            listProductions: {
                path: "/event_tickets.EventTickets/listProductions",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: dependency_4.io.Filters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_4.io.Filters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_7.event_tickets.Production) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_7.event_tickets.Production.deserialize(new Uint8Array(bytes))
            },
            getAnalytics: {
                path: "/event_tickets.EventTickets/getAnalytics",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_5.io.AnalyticsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_5.io.AnalyticsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_7.event_tickets.ProductionAnalyticsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_7.event_tickets.ProductionAnalyticsResponse.deserialize(new Uint8Array(bytes))
            },
            copyProduction: {
                path: "/event_tickets.EventTickets/copyProduction",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_7.event_tickets.ProductionCopyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_7.event_tickets.ProductionCopyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes))
            },
            createVenue: {
                path: "/event_tickets.EventTickets/createVenue",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_10.event_tickets.Venue) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_10.event_tickets.Venue.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes))
            },
            updateVenue: {
                path: "/event_tickets.EventTickets/updateVenue",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_10.event_tickets.Venue) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_10.event_tickets.Venue.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_10.event_tickets.Venue) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_10.event_tickets.Venue.deserialize(new Uint8Array(bytes))
            },
            patchVenue: {
                path: "/event_tickets.EventTickets/patchVenue",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_10.event_tickets.Venue) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_10.event_tickets.Venue.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_10.event_tickets.Venue) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_10.event_tickets.Venue.deserialize(new Uint8Array(bytes))
            },
            getVenueById: {
                path: "/event_tickets.EventTickets/getVenueById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_10.event_tickets.Venue) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_10.event_tickets.Venue.deserialize(new Uint8Array(bytes))
            },
            deleteVenue: {
                path: "/event_tickets.EventTickets/deleteVenue",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_10.event_tickets.Venue) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_10.event_tickets.Venue.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            listVenues: {
                path: "/event_tickets.EventTickets/listVenues",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: dependency_4.io.Filters) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_4.io.Filters.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_10.event_tickets.Venue) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_10.event_tickets.Venue.deserialize(new Uint8Array(bytes))
            },
            createEvent: {
                path: "/event_tickets.EventTickets/createEvent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_6.event_tickets.Event) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_6.event_tickets.Event.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes))
            },
            updateEvent: {
                path: "/event_tickets.EventTickets/updateEvent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_6.event_tickets.Event) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_6.event_tickets.Event.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.event_tickets.Event) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.event_tickets.Event.deserialize(new Uint8Array(bytes))
            },
            patchEvent: {
                path: "/event_tickets.EventTickets/patchEvent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_6.event_tickets.Event) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_6.event_tickets.Event.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.event_tickets.Event) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.event_tickets.Event.deserialize(new Uint8Array(bytes))
            },
            getEventById: {
                path: "/event_tickets.EventTickets/getEventById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.event_tickets.Event) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.event_tickets.Event.deserialize(new Uint8Array(bytes))
            },
            getEventByStartDateAndVenue: {
                path: "/event_tickets.EventTickets/getEventByStartDateAndVenue",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_6.event_tickets.GetEventRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_6.event_tickets.GetEventRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.event_tickets.Event) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.event_tickets.Event.deserialize(new Uint8Array(bytes))
            },
            deleteEvent: {
                path: "/event_tickets.EventTickets/deleteEvent",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_6.event_tickets.Event) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_6.event_tickets.Event.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            listEvents: {
                path: "/event_tickets.EventTickets/listEvents",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: dependency_6.event_tickets.EventListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_6.event_tickets.EventListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_6.event_tickets.EventListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_6.event_tickets.EventListResponse.deserialize(new Uint8Array(bytes))
            },
            createTicketType: {
                path: "/event_tickets.EventTickets/createTicketType",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.event_tickets.TicketType) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.event_tickets.TicketType.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes))
            },
            updateTicketType: {
                path: "/event_tickets.EventTickets/updateTicketType",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.event_tickets.TicketType) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.event_tickets.TicketType.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_8.event_tickets.TicketType) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_8.event_tickets.TicketType.deserialize(new Uint8Array(bytes))
            },
            patchTicketType: {
                path: "/event_tickets.EventTickets/patchTicketType",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.event_tickets.TicketType) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.event_tickets.TicketType.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_8.event_tickets.TicketType) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_8.event_tickets.TicketType.deserialize(new Uint8Array(bytes))
            },
            getTicketTypeById: {
                path: "/event_tickets.EventTickets/getTicketTypeById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_8.event_tickets.TicketType) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_8.event_tickets.TicketType.deserialize(new Uint8Array(bytes))
            },
            getTicketTypeByUserDefinedId: {
                path: "/event_tickets.EventTickets/getTicketTypeByUserDefinedId",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.event_tickets.GetByUidRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.event_tickets.GetByUidRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_8.event_tickets.TicketType) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_8.event_tickets.TicketType.deserialize(new Uint8Array(bytes))
            },
            deleteTicketType: {
                path: "/event_tickets.EventTickets/deleteTicketType",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_8.event_tickets.TicketType) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.event_tickets.TicketType.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            listTicketTypes: {
                path: "/event_tickets.EventTickets/listTicketTypes",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: dependency_8.event_tickets.TicketTypeListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_8.event_tickets.TicketTypeListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_8.event_tickets.TicketType) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_8.event_tickets.TicketType.deserialize(new Uint8Array(bytes))
            },
            issueTicket: {
                path: "/event_tickets.EventTickets/issueTicket",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.event_tickets.IssueTicketRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.IssueTicketRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes))
            },
            issueTicketById: {
                path: "/event_tickets.EventTickets/issueTicketById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.event_tickets.Ticket) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.Ticket.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_9.event_tickets.IssueTicketResponseIds) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_9.event_tickets.IssueTicketResponseIds.deserialize(new Uint8Array(bytes))
            },
            updateTicket: {
                path: "/event_tickets.EventTickets/updateTicket",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.event_tickets.Ticket) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.Ticket.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes))
            },
            patchPerson: {
                path: "/event_tickets.EventTickets/patchPerson",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.event_tickets.EventTicketPerson) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.EventTicketPerson.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes))
            },
            validateTicket: {
                path: "/event_tickets.EventTickets/validateTicket",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.event_tickets.ValidateTicketRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.ValidateTicketRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_9.event_tickets.ValidateTicketResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_9.event_tickets.ValidateTicketResponse.deserialize(new Uint8Array(bytes))
            },
            redeemTicket: {
                path: "/event_tickets.EventTickets/redeemTicket",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.event_tickets.RedeemTicketRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.RedeemTicketRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes))
            },
            redeemTicketsByOrderNumber: {
                path: "/event_tickets.EventTickets/redeemTicketsByOrderNumber",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.event_tickets.RedeemByOrderNumber) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.RedeemByOrderNumber.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.Ids) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.Ids.deserialize(new Uint8Array(bytes))
            },
            getTicketById: {
                path: "/event_tickets.EventTickets/getTicketById",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.io.Id) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.io.Id.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_9.event_tickets.Ticket) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_9.event_tickets.Ticket.deserialize(new Uint8Array(bytes))
            },
            getTicketByTicketNumber: {
                path: "/event_tickets.EventTickets/getTicketByTicketNumber",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.event_tickets.TicketNumberRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.TicketNumberRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_9.event_tickets.Ticket) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_9.event_tickets.Ticket.deserialize(new Uint8Array(bytes))
            },
            getTicketsByOrderNumber: {
                path: "/event_tickets.EventTickets/getTicketsByOrderNumber",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.event_tickets.OrderNumberRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.OrderNumberRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_9.event_tickets.Tickets) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_9.event_tickets.Tickets.deserialize(new Uint8Array(bytes))
            },
            getEventTicketPass: {
                path: "/event_tickets.EventTickets/getEventTicketPass",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.event_tickets.EventTicketPassRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.EventTicketPassRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.PassBundles) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.PassBundles.deserialize(new Uint8Array(bytes))
            },
            deleteTicket: {
                path: "/event_tickets.EventTickets/deleteTicket",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.event_tickets.TicketId) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.TicketId.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            bulkDeleteTickets: {
                path: "/event_tickets.EventTickets/bulkDeleteTickets",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_3.io.BulkPassActionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_3.io.BulkPassActionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            deleteTicketsByOrderNumber: {
                path: "/event_tickets.EventTickets/deleteTicketsByOrderNumber",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.event_tickets.OrderNumberRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.OrderNumberRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            listTickets: {
                path: "/event_tickets.EventTickets/listTickets",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: dependency_9.event_tickets.TicketListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.TicketListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_9.event_tickets.TicketLimitedFields) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_9.event_tickets.TicketLimitedFields.deserialize(new Uint8Array(bytes))
            },
            countTickets: {
                path: "/event_tickets.EventTickets/countTickets",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_9.event_tickets.TicketListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_9.event_tickets.TicketListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_3.io.Count) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_3.io.Count.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract createProduction(call: grpc_1.ServerUnaryCall<dependency_7.event_tickets.Production, dependency_3.io.Id>, callback: grpc_1.sendUnaryData<dependency_3.io.Id>): void;
        abstract patchProduction(call: grpc_1.ServerUnaryCall<dependency_7.event_tickets.Production, dependency_7.event_tickets.Production>, callback: grpc_1.sendUnaryData<dependency_7.event_tickets.Production>): void;
        abstract updateProduction(call: grpc_1.ServerUnaryCall<dependency_7.event_tickets.Production, dependency_7.event_tickets.Production>, callback: grpc_1.sendUnaryData<dependency_7.event_tickets.Production>): void;
        abstract getProduction(call: grpc_1.ServerUnaryCall<dependency_3.io.Id, dependency_7.event_tickets.Production>, callback: grpc_1.sendUnaryData<dependency_7.event_tickets.Production>): void;
        abstract deleteProduction(call: grpc_1.ServerUnaryCall<dependency_7.event_tickets.Production, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract listProductions(call: grpc_1.ServerWritableStream<dependency_4.io.Filters, dependency_7.event_tickets.Production>): void;
        abstract getAnalytics(call: grpc_1.ServerUnaryCall<dependency_5.io.AnalyticsRequest, dependency_7.event_tickets.ProductionAnalyticsResponse>, callback: grpc_1.sendUnaryData<dependency_7.event_tickets.ProductionAnalyticsResponse>): void;
        abstract copyProduction(call: grpc_1.ServerUnaryCall<dependency_7.event_tickets.ProductionCopyRequest, dependency_3.io.Id>, callback: grpc_1.sendUnaryData<dependency_3.io.Id>): void;
        abstract createVenue(call: grpc_1.ServerUnaryCall<dependency_10.event_tickets.Venue, dependency_3.io.Id>, callback: grpc_1.sendUnaryData<dependency_3.io.Id>): void;
        abstract updateVenue(call: grpc_1.ServerUnaryCall<dependency_10.event_tickets.Venue, dependency_10.event_tickets.Venue>, callback: grpc_1.sendUnaryData<dependency_10.event_tickets.Venue>): void;
        abstract patchVenue(call: grpc_1.ServerUnaryCall<dependency_10.event_tickets.Venue, dependency_10.event_tickets.Venue>, callback: grpc_1.sendUnaryData<dependency_10.event_tickets.Venue>): void;
        abstract getVenueById(call: grpc_1.ServerUnaryCall<dependency_3.io.Id, dependency_10.event_tickets.Venue>, callback: grpc_1.sendUnaryData<dependency_10.event_tickets.Venue>): void;
        abstract deleteVenue(call: grpc_1.ServerUnaryCall<dependency_10.event_tickets.Venue, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract listVenues(call: grpc_1.ServerWritableStream<dependency_4.io.Filters, dependency_10.event_tickets.Venue>): void;
        abstract createEvent(call: grpc_1.ServerUnaryCall<dependency_6.event_tickets.Event, dependency_3.io.Id>, callback: grpc_1.sendUnaryData<dependency_3.io.Id>): void;
        abstract updateEvent(call: grpc_1.ServerUnaryCall<dependency_6.event_tickets.Event, dependency_6.event_tickets.Event>, callback: grpc_1.sendUnaryData<dependency_6.event_tickets.Event>): void;
        abstract patchEvent(call: grpc_1.ServerUnaryCall<dependency_6.event_tickets.Event, dependency_6.event_tickets.Event>, callback: grpc_1.sendUnaryData<dependency_6.event_tickets.Event>): void;
        abstract getEventById(call: grpc_1.ServerUnaryCall<dependency_3.io.Id, dependency_6.event_tickets.Event>, callback: grpc_1.sendUnaryData<dependency_6.event_tickets.Event>): void;
        abstract getEventByStartDateAndVenue(call: grpc_1.ServerUnaryCall<dependency_6.event_tickets.GetEventRequest, dependency_6.event_tickets.Event>, callback: grpc_1.sendUnaryData<dependency_6.event_tickets.Event>): void;
        abstract deleteEvent(call: grpc_1.ServerUnaryCall<dependency_6.event_tickets.Event, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract listEvents(call: grpc_1.ServerWritableStream<dependency_6.event_tickets.EventListRequest, dependency_6.event_tickets.EventListResponse>): void;
        abstract createTicketType(call: grpc_1.ServerUnaryCall<dependency_8.event_tickets.TicketType, dependency_3.io.Id>, callback: grpc_1.sendUnaryData<dependency_3.io.Id>): void;
        abstract updateTicketType(call: grpc_1.ServerUnaryCall<dependency_8.event_tickets.TicketType, dependency_8.event_tickets.TicketType>, callback: grpc_1.sendUnaryData<dependency_8.event_tickets.TicketType>): void;
        abstract patchTicketType(call: grpc_1.ServerUnaryCall<dependency_8.event_tickets.TicketType, dependency_8.event_tickets.TicketType>, callback: grpc_1.sendUnaryData<dependency_8.event_tickets.TicketType>): void;
        abstract getTicketTypeById(call: grpc_1.ServerUnaryCall<dependency_3.io.Id, dependency_8.event_tickets.TicketType>, callback: grpc_1.sendUnaryData<dependency_8.event_tickets.TicketType>): void;
        abstract getTicketTypeByUserDefinedId(call: grpc_1.ServerUnaryCall<dependency_8.event_tickets.GetByUidRequest, dependency_8.event_tickets.TicketType>, callback: grpc_1.sendUnaryData<dependency_8.event_tickets.TicketType>): void;
        abstract deleteTicketType(call: grpc_1.ServerUnaryCall<dependency_8.event_tickets.TicketType, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract listTicketTypes(call: grpc_1.ServerWritableStream<dependency_8.event_tickets.TicketTypeListRequest, dependency_8.event_tickets.TicketType>): void;
        abstract issueTicket(call: grpc_1.ServerUnaryCall<dependency_9.event_tickets.IssueTicketRequest, dependency_3.io.Id>, callback: grpc_1.sendUnaryData<dependency_3.io.Id>): void;
        abstract issueTicketById(call: grpc_1.ServerUnaryCall<dependency_9.event_tickets.Ticket, dependency_9.event_tickets.IssueTicketResponseIds>, callback: grpc_1.sendUnaryData<dependency_9.event_tickets.IssueTicketResponseIds>): void;
        abstract updateTicket(call: grpc_1.ServerUnaryCall<dependency_9.event_tickets.Ticket, dependency_3.io.Id>, callback: grpc_1.sendUnaryData<dependency_3.io.Id>): void;
        abstract patchPerson(call: grpc_1.ServerUnaryCall<dependency_9.event_tickets.EventTicketPerson, dependency_3.io.Id>, callback: grpc_1.sendUnaryData<dependency_3.io.Id>): void;
        abstract validateTicket(call: grpc_1.ServerUnaryCall<dependency_9.event_tickets.ValidateTicketRequest, dependency_9.event_tickets.ValidateTicketResponse>, callback: grpc_1.sendUnaryData<dependency_9.event_tickets.ValidateTicketResponse>): void;
        abstract redeemTicket(call: grpc_1.ServerUnaryCall<dependency_9.event_tickets.RedeemTicketRequest, dependency_3.io.Id>, callback: grpc_1.sendUnaryData<dependency_3.io.Id>): void;
        abstract redeemTicketsByOrderNumber(call: grpc_1.ServerUnaryCall<dependency_9.event_tickets.RedeemByOrderNumber, dependency_3.io.Ids>, callback: grpc_1.sendUnaryData<dependency_3.io.Ids>): void;
        abstract getTicketById(call: grpc_1.ServerUnaryCall<dependency_3.io.Id, dependency_9.event_tickets.Ticket>, callback: grpc_1.sendUnaryData<dependency_9.event_tickets.Ticket>): void;
        abstract getTicketByTicketNumber(call: grpc_1.ServerUnaryCall<dependency_9.event_tickets.TicketNumberRequest, dependency_9.event_tickets.Ticket>, callback: grpc_1.sendUnaryData<dependency_9.event_tickets.Ticket>): void;
        abstract getTicketsByOrderNumber(call: grpc_1.ServerUnaryCall<dependency_9.event_tickets.OrderNumberRequest, dependency_9.event_tickets.Tickets>, callback: grpc_1.sendUnaryData<dependency_9.event_tickets.Tickets>): void;
        abstract getEventTicketPass(call: grpc_1.ServerUnaryCall<dependency_9.event_tickets.EventTicketPassRequest, dependency_3.io.PassBundles>, callback: grpc_1.sendUnaryData<dependency_3.io.PassBundles>): void;
        abstract deleteTicket(call: grpc_1.ServerUnaryCall<dependency_9.event_tickets.TicketId, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract bulkDeleteTickets(call: grpc_1.ServerUnaryCall<dependency_3.io.BulkPassActionRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract deleteTicketsByOrderNumber(call: grpc_1.ServerUnaryCall<dependency_9.event_tickets.OrderNumberRequest, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract listTickets(call: grpc_1.ServerWritableStream<dependency_9.event_tickets.TicketListRequest, dependency_9.event_tickets.TicketLimitedFields>): void;
        abstract countTickets(call: grpc_1.ServerUnaryCall<dependency_9.event_tickets.TicketListRequest, dependency_3.io.Count>, callback: grpc_1.sendUnaryData<dependency_3.io.Count>): void;
    }
    export class EventTicketsClient extends grpc_1.makeGenericClientConstructor(UnimplementedEventTicketsService.definition, "EventTickets", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        createProduction: GrpcPromiseServiceInterface<dependency_7.event_tickets.Production, dependency_3.io.Id> = (message: dependency_7.event_tickets.Production, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.Id> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.createProduction(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.Id) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        patchProduction: GrpcPromiseServiceInterface<dependency_7.event_tickets.Production, dependency_7.event_tickets.Production> = (message: dependency_7.event_tickets.Production, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_7.event_tickets.Production> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.patchProduction(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_7.event_tickets.Production) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        updateProduction: GrpcPromiseServiceInterface<dependency_7.event_tickets.Production, dependency_7.event_tickets.Production> = (message: dependency_7.event_tickets.Production, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_7.event_tickets.Production> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.updateProduction(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_7.event_tickets.Production) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        getProduction: GrpcPromiseServiceInterface<dependency_3.io.Id, dependency_7.event_tickets.Production> = (message: dependency_3.io.Id, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_7.event_tickets.Production> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getProduction(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_7.event_tickets.Production) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        deleteProduction: GrpcPromiseServiceInterface<dependency_7.event_tickets.Production, dependency_1.google.protobuf.Empty> = (message: dependency_7.event_tickets.Production, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.google.protobuf.Empty> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.deleteProduction(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.google.protobuf.Empty) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        listProductions: GrpcStreamServiceInterface<dependency_4.io.Filters, dependency_7.event_tickets.Production> = (message: dependency_4.io.Filters, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_7.event_tickets.Production> => {
            return super.listProductions(message, metadata, options);
        };
        getAnalytics: GrpcPromiseServiceInterface<dependency_5.io.AnalyticsRequest, dependency_7.event_tickets.ProductionAnalyticsResponse> = (message: dependency_5.io.AnalyticsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_7.event_tickets.ProductionAnalyticsResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getAnalytics(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_7.event_tickets.ProductionAnalyticsResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        copyProduction: GrpcPromiseServiceInterface<dependency_7.event_tickets.ProductionCopyRequest, dependency_3.io.Id> = (message: dependency_7.event_tickets.ProductionCopyRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.Id> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.copyProduction(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.Id) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        createVenue: GrpcPromiseServiceInterface<dependency_10.event_tickets.Venue, dependency_3.io.Id> = (message: dependency_10.event_tickets.Venue, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.Id> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.createVenue(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.Id) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        updateVenue: GrpcPromiseServiceInterface<dependency_10.event_tickets.Venue, dependency_10.event_tickets.Venue> = (message: dependency_10.event_tickets.Venue, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_10.event_tickets.Venue> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.updateVenue(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_10.event_tickets.Venue) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        patchVenue: GrpcPromiseServiceInterface<dependency_10.event_tickets.Venue, dependency_10.event_tickets.Venue> = (message: dependency_10.event_tickets.Venue, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_10.event_tickets.Venue> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.patchVenue(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_10.event_tickets.Venue) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        getVenueById: GrpcPromiseServiceInterface<dependency_3.io.Id, dependency_10.event_tickets.Venue> = (message: dependency_3.io.Id, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_10.event_tickets.Venue> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getVenueById(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_10.event_tickets.Venue) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        deleteVenue: GrpcPromiseServiceInterface<dependency_10.event_tickets.Venue, dependency_1.google.protobuf.Empty> = (message: dependency_10.event_tickets.Venue, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.google.protobuf.Empty> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.deleteVenue(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.google.protobuf.Empty) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        listVenues: GrpcStreamServiceInterface<dependency_4.io.Filters, dependency_10.event_tickets.Venue> = (message: dependency_4.io.Filters, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_10.event_tickets.Venue> => {
            return super.listVenues(message, metadata, options);
        };
        createEvent: GrpcPromiseServiceInterface<dependency_6.event_tickets.Event, dependency_3.io.Id> = (message: dependency_6.event_tickets.Event, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.Id> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.createEvent(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.Id) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        updateEvent: GrpcPromiseServiceInterface<dependency_6.event_tickets.Event, dependency_6.event_tickets.Event> = (message: dependency_6.event_tickets.Event, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_6.event_tickets.Event> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.updateEvent(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_6.event_tickets.Event) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        patchEvent: GrpcPromiseServiceInterface<dependency_6.event_tickets.Event, dependency_6.event_tickets.Event> = (message: dependency_6.event_tickets.Event, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_6.event_tickets.Event> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.patchEvent(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_6.event_tickets.Event) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        getEventById: GrpcPromiseServiceInterface<dependency_3.io.Id, dependency_6.event_tickets.Event> = (message: dependency_3.io.Id, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_6.event_tickets.Event> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getEventById(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_6.event_tickets.Event) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        getEventByStartDateAndVenue: GrpcPromiseServiceInterface<dependency_6.event_tickets.GetEventRequest, dependency_6.event_tickets.Event> = (message: dependency_6.event_tickets.GetEventRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_6.event_tickets.Event> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getEventByStartDateAndVenue(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_6.event_tickets.Event) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        deleteEvent: GrpcPromiseServiceInterface<dependency_6.event_tickets.Event, dependency_1.google.protobuf.Empty> = (message: dependency_6.event_tickets.Event, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.google.protobuf.Empty> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.deleteEvent(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.google.protobuf.Empty) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        listEvents: GrpcStreamServiceInterface<dependency_6.event_tickets.EventListRequest, dependency_6.event_tickets.EventListResponse> = (message: dependency_6.event_tickets.EventListRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_6.event_tickets.EventListResponse> => {
            return super.listEvents(message, metadata, options);
        };
        createTicketType: GrpcPromiseServiceInterface<dependency_8.event_tickets.TicketType, dependency_3.io.Id> = (message: dependency_8.event_tickets.TicketType, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.Id> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.createTicketType(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.Id) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        updateTicketType: GrpcPromiseServiceInterface<dependency_8.event_tickets.TicketType, dependency_8.event_tickets.TicketType> = (message: dependency_8.event_tickets.TicketType, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_8.event_tickets.TicketType> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.updateTicketType(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_8.event_tickets.TicketType) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        patchTicketType: GrpcPromiseServiceInterface<dependency_8.event_tickets.TicketType, dependency_8.event_tickets.TicketType> = (message: dependency_8.event_tickets.TicketType, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_8.event_tickets.TicketType> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.patchTicketType(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_8.event_tickets.TicketType) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        getTicketTypeById: GrpcPromiseServiceInterface<dependency_3.io.Id, dependency_8.event_tickets.TicketType> = (message: dependency_3.io.Id, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_8.event_tickets.TicketType> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getTicketTypeById(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_8.event_tickets.TicketType) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        getTicketTypeByUserDefinedId: GrpcPromiseServiceInterface<dependency_8.event_tickets.GetByUidRequest, dependency_8.event_tickets.TicketType> = (message: dependency_8.event_tickets.GetByUidRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_8.event_tickets.TicketType> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getTicketTypeByUserDefinedId(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_8.event_tickets.TicketType) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        deleteTicketType: GrpcPromiseServiceInterface<dependency_8.event_tickets.TicketType, dependency_1.google.protobuf.Empty> = (message: dependency_8.event_tickets.TicketType, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.google.protobuf.Empty> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.deleteTicketType(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.google.protobuf.Empty) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        listTicketTypes: GrpcStreamServiceInterface<dependency_8.event_tickets.TicketTypeListRequest, dependency_8.event_tickets.TicketType> = (message: dependency_8.event_tickets.TicketTypeListRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_8.event_tickets.TicketType> => {
            return super.listTicketTypes(message, metadata, options);
        };
        issueTicket: GrpcPromiseServiceInterface<dependency_9.event_tickets.IssueTicketRequest, dependency_3.io.Id> = (message: dependency_9.event_tickets.IssueTicketRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.Id> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.issueTicket(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.Id) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        issueTicketById: GrpcPromiseServiceInterface<dependency_9.event_tickets.Ticket, dependency_9.event_tickets.IssueTicketResponseIds> = (message: dependency_9.event_tickets.Ticket, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_9.event_tickets.IssueTicketResponseIds> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.issueTicketById(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_9.event_tickets.IssueTicketResponseIds) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        updateTicket: GrpcPromiseServiceInterface<dependency_9.event_tickets.Ticket, dependency_3.io.Id> = (message: dependency_9.event_tickets.Ticket, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.Id> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.updateTicket(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.Id) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        patchPerson: GrpcPromiseServiceInterface<dependency_9.event_tickets.EventTicketPerson, dependency_3.io.Id> = (message: dependency_9.event_tickets.EventTicketPerson, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.Id> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.patchPerson(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.Id) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        validateTicket: GrpcPromiseServiceInterface<dependency_9.event_tickets.ValidateTicketRequest, dependency_9.event_tickets.ValidateTicketResponse> = (message: dependency_9.event_tickets.ValidateTicketRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_9.event_tickets.ValidateTicketResponse> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.validateTicket(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_9.event_tickets.ValidateTicketResponse) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        redeemTicket: GrpcPromiseServiceInterface<dependency_9.event_tickets.RedeemTicketRequest, dependency_3.io.Id> = (message: dependency_9.event_tickets.RedeemTicketRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.Id> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.redeemTicket(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.Id) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        redeemTicketsByOrderNumber: GrpcPromiseServiceInterface<dependency_9.event_tickets.RedeemByOrderNumber, dependency_3.io.Ids> = (message: dependency_9.event_tickets.RedeemByOrderNumber, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.Ids> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.redeemTicketsByOrderNumber(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.Ids) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        getTicketById: GrpcPromiseServiceInterface<dependency_3.io.Id, dependency_9.event_tickets.Ticket> = (message: dependency_3.io.Id, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_9.event_tickets.Ticket> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getTicketById(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_9.event_tickets.Ticket) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        getTicketByTicketNumber: GrpcPromiseServiceInterface<dependency_9.event_tickets.TicketNumberRequest, dependency_9.event_tickets.Ticket> = (message: dependency_9.event_tickets.TicketNumberRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_9.event_tickets.Ticket> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getTicketByTicketNumber(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_9.event_tickets.Ticket) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        getTicketsByOrderNumber: GrpcPromiseServiceInterface<dependency_9.event_tickets.OrderNumberRequest, dependency_9.event_tickets.Tickets> = (message: dependency_9.event_tickets.OrderNumberRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_9.event_tickets.Tickets> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getTicketsByOrderNumber(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_9.event_tickets.Tickets) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        getEventTicketPass: GrpcPromiseServiceInterface<dependency_9.event_tickets.EventTicketPassRequest, dependency_3.io.PassBundles> = (message: dependency_9.event_tickets.EventTicketPassRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.PassBundles> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.getEventTicketPass(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.PassBundles) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        deleteTicket: GrpcPromiseServiceInterface<dependency_9.event_tickets.TicketId, dependency_1.google.protobuf.Empty> = (message: dependency_9.event_tickets.TicketId, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.google.protobuf.Empty> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.deleteTicket(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.google.protobuf.Empty) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        bulkDeleteTickets: GrpcPromiseServiceInterface<dependency_3.io.BulkPassActionRequest, dependency_1.google.protobuf.Empty> = (message: dependency_3.io.BulkPassActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.google.protobuf.Empty> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.bulkDeleteTickets(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.google.protobuf.Empty) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        deleteTicketsByOrderNumber: GrpcPromiseServiceInterface<dependency_9.event_tickets.OrderNumberRequest, dependency_1.google.protobuf.Empty> = (message: dependency_9.event_tickets.OrderNumberRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.google.protobuf.Empty> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.deleteTicketsByOrderNumber(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.google.protobuf.Empty) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
        listTickets: GrpcStreamServiceInterface<dependency_9.event_tickets.TicketListRequest, dependency_9.event_tickets.TicketLimitedFields> = (message: dependency_9.event_tickets.TicketListRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_9.event_tickets.TicketLimitedFields> => {
            return super.listTickets(message, metadata, options);
        };
        countTickets: GrpcPromiseServiceInterface<dependency_9.event_tickets.TicketListRequest, dependency_3.io.Count> = (message: dependency_9.event_tickets.TicketListRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_3.io.Count> => { if (!metadata) {
            metadata = new grpc_1.Metadata;
        } if (!options) {
            options = {};
        } return new Promise((resolve, reject) => super.countTickets(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_3.io.Count) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(response);
            }
        })); };
    }
}
