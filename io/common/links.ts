/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/links.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common_objects";
import * as dependency_2 from "./localization";
import * as pb_1 from "google-protobuf";
export namespace io {
    export enum LinkType {
        URI_DO_NOT_USE = 0,
        URI_WEB = 1,
        URI_TEL = 2,
        URI_EMAIL = 3,
        URI_LOCATION = 4,
        URI_CALENDAR = 5
    }
    export class Link extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            url?: string;
            title?: string;
            type?: LinkType;
            localizedLink?: dependency_2.io.LocalizedString;
            localizedTitle?: dependency_2.io.LocalizedString;
            usage?: dependency_1.io.UsageType[];
            position?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("localizedLink" in data && data.localizedLink != undefined) {
                    this.localizedLink = data.localizedLink;
                }
                if ("localizedTitle" in data && data.localizedTitle != undefined) {
                    this.localizedTitle = data.localizedTitle;
                }
                if ("usage" in data && data.usage != undefined) {
                    this.usage = data.usage;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 4, LinkType.URI_DO_NOT_USE) as LinkType;
        }
        set type(value: LinkType) {
            pb_1.Message.setField(this, 4, value);
        }
        get localizedLink() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 5) as dependency_2.io.LocalizedString;
        }
        set localizedLink(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasLocalizedLink() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get localizedTitle() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 6) as dependency_2.io.LocalizedString;
        }
        set localizedTitle(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasLocalizedTitle() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get usage() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as dependency_1.io.UsageType[];
        }
        set usage(value: dependency_1.io.UsageType[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get position() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set position(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            url?: string;
            title?: string;
            type?: LinkType;
            localizedLink?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            localizedTitle?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            usage?: dependency_1.io.UsageType[];
            position?: number;
        }): Link {
            const message = new Link({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.localizedLink != null) {
                message.localizedLink = dependency_2.io.LocalizedString.fromObject(data.localizedLink);
            }
            if (data.localizedTitle != null) {
                message.localizedTitle = dependency_2.io.LocalizedString.fromObject(data.localizedTitle);
            }
            if (data.usage != null) {
                message.usage = data.usage;
            }
            if (data.position != null) {
                message.position = data.position;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                url?: string;
                title?: string;
                type?: LinkType;
                localizedLink?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                localizedTitle?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                usage?: dependency_1.io.UsageType[];
                position?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.localizedLink != null) {
                data.localizedLink = this.localizedLink.toObject();
            }
            if (this.localizedTitle != null) {
                data.localizedTitle = this.localizedTitle.toObject();
            }
            if (this.usage != null) {
                data.usage = this.usage;
            }
            if (this.position != null) {
                data.position = this.position;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.url.length)
                writer.writeString(2, this.url);
            if (this.title.length)
                writer.writeString(3, this.title);
            if (this.type != LinkType.URI_DO_NOT_USE)
                writer.writeEnum(4, this.type);
            if (this.hasLocalizedLink)
                writer.writeMessage(5, this.localizedLink, () => this.localizedLink.serialize(writer));
            if (this.hasLocalizedTitle)
                writer.writeMessage(6, this.localizedTitle, () => this.localizedTitle.serialize(writer));
            if (this.usage.length)
                writer.writePackedEnum(7, this.usage);
            if (this.position != 0)
                writer.writeUint32(8, this.position);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Link {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Link();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.url = reader.readString();
                        break;
                    case 3:
                        message.title = reader.readString();
                        break;
                    case 4:
                        message.type = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.localizedLink, () => message.localizedLink = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.localizedTitle, () => message.localizedTitle = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 7:
                        message.usage = reader.readPackedEnum();
                        break;
                    case 8:
                        message.position = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Link {
            return Link.deserialize(bytes);
        }
    }
    export class DbLink extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            links?: Link[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("links" in data && data.links != undefined) {
                    this.links = data.links;
                }
            }
        }
        get links() {
            return pb_1.Message.getRepeatedWrapperField(this, Link, 1) as Link[];
        }
        set links(value: Link[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            links?: ReturnType<typeof Link.prototype.toObject>[];
        }): DbLink {
            const message = new DbLink({});
            if (data.links != null) {
                message.links = data.links.map(item => Link.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                links?: ReturnType<typeof Link.prototype.toObject>[];
            } = {};
            if (this.links != null) {
                data.links = this.links.map((item: Link) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.links.length)
                writer.writeRepeatedMessage(1, this.links, (item: Link) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DbLink {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DbLink();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.links, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Link.deserialize(reader), Link));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DbLink {
            return DbLink.deserialize(bytes);
        }
    }
}
