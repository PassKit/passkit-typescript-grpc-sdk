/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/proximity.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./localization";
import * as dependency_2 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace io {
    export class Beacon extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            uuid?: string;
            name?: string;
            major?: number;
            minor?: number;
            lockScreenMessage?: string;
            localizedLockScreenMessage?: dependency_1.io.LocalizedString;
            position?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("uuid" in data && data.uuid != undefined) {
                    this.uuid = data.uuid;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("major" in data && data.major != undefined) {
                    this.major = data.major;
                }
                if ("minor" in data && data.minor != undefined) {
                    this.minor = data.minor;
                }
                if ("lockScreenMessage" in data && data.lockScreenMessage != undefined) {
                    this.lockScreenMessage = data.lockScreenMessage;
                }
                if ("localizedLockScreenMessage" in data && data.localizedLockScreenMessage != undefined) {
                    this.localizedLockScreenMessage = data.localizedLockScreenMessage;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get uuid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set uuid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get major() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set major(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get minor() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set minor(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get lockScreenMessage() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set lockScreenMessage(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get localizedLockScreenMessage() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 7) as dependency_1.io.LocalizedString;
        }
        set localizedLockScreenMessage(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasLocalizedLockScreenMessage() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get position() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set position(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            uuid?: string;
            name?: string;
            major?: number;
            minor?: number;
            lockScreenMessage?: string;
            localizedLockScreenMessage?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            position?: number;
        }): Beacon {
            const message = new Beacon({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.uuid != null) {
                message.uuid = data.uuid;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.major != null) {
                message.major = data.major;
            }
            if (data.minor != null) {
                message.minor = data.minor;
            }
            if (data.lockScreenMessage != null) {
                message.lockScreenMessage = data.lockScreenMessage;
            }
            if (data.localizedLockScreenMessage != null) {
                message.localizedLockScreenMessage = dependency_1.io.LocalizedString.fromObject(data.localizedLockScreenMessage);
            }
            if (data.position != null) {
                message.position = data.position;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                uuid?: string;
                name?: string;
                major?: number;
                minor?: number;
                lockScreenMessage?: string;
                localizedLockScreenMessage?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                position?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.uuid != null) {
                data.uuid = this.uuid;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.major != null) {
                data.major = this.major;
            }
            if (this.minor != null) {
                data.minor = this.minor;
            }
            if (this.lockScreenMessage != null) {
                data.lockScreenMessage = this.lockScreenMessage;
            }
            if (this.localizedLockScreenMessage != null) {
                data.localizedLockScreenMessage = this.localizedLockScreenMessage.toObject();
            }
            if (this.position != null) {
                data.position = this.position;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.uuid.length)
                writer.writeString(2, this.uuid);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.major != 0)
                writer.writeUint32(4, this.major);
            if (this.minor != 0)
                writer.writeUint32(5, this.minor);
            if (this.lockScreenMessage.length)
                writer.writeString(6, this.lockScreenMessage);
            if (this.hasLocalizedLockScreenMessage)
                writer.writeMessage(7, this.localizedLockScreenMessage, () => this.localizedLockScreenMessage.serialize(writer));
            if (this.position != 0)
                writer.writeUint32(8, this.position);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Beacon {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Beacon();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.uuid = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.major = reader.readUint32();
                        break;
                    case 5:
                        message.minor = reader.readUint32();
                        break;
                    case 6:
                        message.lockScreenMessage = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.localizedLockScreenMessage, () => message.localizedLockScreenMessage = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 8:
                        message.position = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Beacon {
            return Beacon.deserialize(bytes);
        }
    }
    export class GPSLocation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            lat?: number;
            lon?: number;
            alt?: number;
            lockScreenMessage?: string;
            localizedLockScreenMessage?: dependency_1.io.LocalizedString;
            position?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("lat" in data && data.lat != undefined) {
                    this.lat = data.lat;
                }
                if ("lon" in data && data.lon != undefined) {
                    this.lon = data.lon;
                }
                if ("alt" in data && data.alt != undefined) {
                    this.alt = data.alt;
                }
                if ("lockScreenMessage" in data && data.lockScreenMessage != undefined) {
                    this.lockScreenMessage = data.lockScreenMessage;
                }
                if ("localizedLockScreenMessage" in data && data.localizedLockScreenMessage != undefined) {
                    this.localizedLockScreenMessage = data.localizedLockScreenMessage;
                }
                if ("position" in data && data.position != undefined) {
                    this.position = data.position;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get lat() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set lat(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get lon() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set lon(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get alt() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set alt(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get lockScreenMessage() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set lockScreenMessage(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get localizedLockScreenMessage() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 7) as dependency_1.io.LocalizedString;
        }
        set localizedLockScreenMessage(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasLocalizedLockScreenMessage() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get position() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set position(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            lat?: number;
            lon?: number;
            alt?: number;
            lockScreenMessage?: string;
            localizedLockScreenMessage?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            position?: number;
        }): GPSLocation {
            const message = new GPSLocation({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.lat != null) {
                message.lat = data.lat;
            }
            if (data.lon != null) {
                message.lon = data.lon;
            }
            if (data.alt != null) {
                message.alt = data.alt;
            }
            if (data.lockScreenMessage != null) {
                message.lockScreenMessage = data.lockScreenMessage;
            }
            if (data.localizedLockScreenMessage != null) {
                message.localizedLockScreenMessage = dependency_1.io.LocalizedString.fromObject(data.localizedLockScreenMessage);
            }
            if (data.position != null) {
                message.position = data.position;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                lat?: number;
                lon?: number;
                alt?: number;
                lockScreenMessage?: string;
                localizedLockScreenMessage?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                position?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.lat != null) {
                data.lat = this.lat;
            }
            if (this.lon != null) {
                data.lon = this.lon;
            }
            if (this.alt != null) {
                data.alt = this.alt;
            }
            if (this.lockScreenMessage != null) {
                data.lockScreenMessage = this.lockScreenMessage;
            }
            if (this.localizedLockScreenMessage != null) {
                data.localizedLockScreenMessage = this.localizedLockScreenMessage.toObject();
            }
            if (this.position != null) {
                data.position = this.position;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.lat != 0)
                writer.writeDouble(3, this.lat);
            if (this.lon != 0)
                writer.writeDouble(4, this.lon);
            if (this.alt != 0)
                writer.writeInt32(5, this.alt);
            if (this.lockScreenMessage.length)
                writer.writeString(6, this.lockScreenMessage);
            if (this.hasLocalizedLockScreenMessage)
                writer.writeMessage(7, this.localizedLockScreenMessage, () => this.localizedLockScreenMessage.serialize(writer));
            if (this.position != 0)
                writer.writeUint32(8, this.position);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GPSLocation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GPSLocation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.lat = reader.readDouble();
                        break;
                    case 4:
                        message.lon = reader.readDouble();
                        break;
                    case 5:
                        message.alt = reader.readInt32();
                        break;
                    case 6:
                        message.lockScreenMessage = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.localizedLockScreenMessage, () => message.localizedLockScreenMessage = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 8:
                        message.position = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GPSLocation {
            return GPSLocation.deserialize(bytes);
        }
    }
    export class RelevantDate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            timestamp?: number;
        }): RelevantDate {
            const message = new RelevantDate({});
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                timestamp?: number;
            } = {};
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.timestamp != 0)
                writer.writeUint32(1, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RelevantDate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RelevantDate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.timestamp = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RelevantDate {
            return RelevantDate.deserialize(bytes);
        }
    }
}
