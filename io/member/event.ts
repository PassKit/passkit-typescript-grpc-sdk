/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/member/event.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace members {
    export class EventDetails extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            lat?: number;
            lon?: number;
            alt?: number;
            externalEventId?: string;
            externalDeviceId?: string;
            externalServiceId?: string;
            metaData?: Map<string, string>;
            notes?: string;
            externalUserId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("lat" in data && data.lat != undefined) {
                    this.lat = data.lat;
                }
                if ("lon" in data && data.lon != undefined) {
                    this.lon = data.lon;
                }
                if ("alt" in data && data.alt != undefined) {
                    this.alt = data.alt;
                }
                if ("externalEventId" in data && data.externalEventId != undefined) {
                    this.externalEventId = data.externalEventId;
                }
                if ("externalDeviceId" in data && data.externalDeviceId != undefined) {
                    this.externalDeviceId = data.externalDeviceId;
                }
                if ("externalServiceId" in data && data.externalServiceId != undefined) {
                    this.externalServiceId = data.externalServiceId;
                }
                if ("metaData" in data && data.metaData != undefined) {
                    this.metaData = data.metaData;
                }
                if ("notes" in data && data.notes != undefined) {
                    this.notes = data.notes;
                }
                if ("externalUserId" in data && data.externalUserId != undefined) {
                    this.externalUserId = data.externalUserId;
                }
            }
            if (!this.metaData)
                this.metaData = new Map();
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get lat() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set lat(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get lon() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set lon(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get alt() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set alt(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get externalEventId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set externalEventId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get externalDeviceId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set externalDeviceId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get externalServiceId() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set externalServiceId(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get metaData() {
            return pb_1.Message.getField(this, 8) as any as Map<string, string>;
        }
        set metaData(value: Map<string, string>) {
            pb_1.Message.setField(this, 8, value as any);
        }
        get notes() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set notes(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get externalUserId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set externalUserId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            address?: string;
            lat?: number;
            lon?: number;
            alt?: number;
            externalEventId?: string;
            externalDeviceId?: string;
            externalServiceId?: string;
            metaData?: {
                [key: string]: string;
            };
            notes?: string;
            externalUserId?: string;
        }): EventDetails {
            const message = new EventDetails({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.lat != null) {
                message.lat = data.lat;
            }
            if (data.lon != null) {
                message.lon = data.lon;
            }
            if (data.alt != null) {
                message.alt = data.alt;
            }
            if (data.externalEventId != null) {
                message.externalEventId = data.externalEventId;
            }
            if (data.externalDeviceId != null) {
                message.externalDeviceId = data.externalDeviceId;
            }
            if (data.externalServiceId != null) {
                message.externalServiceId = data.externalServiceId;
            }
            if (typeof data.metaData == "object") {
                message.metaData = new Map(Object.entries(data.metaData));
            }
            if (data.notes != null) {
                message.notes = data.notes;
            }
            if (data.externalUserId != null) {
                message.externalUserId = data.externalUserId;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                lat?: number;
                lon?: number;
                alt?: number;
                externalEventId?: string;
                externalDeviceId?: string;
                externalServiceId?: string;
                metaData?: {
                    [key: string]: string;
                };
                notes?: string;
                externalUserId?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.lat != null) {
                data.lat = this.lat;
            }
            if (this.lon != null) {
                data.lon = this.lon;
            }
            if (this.alt != null) {
                data.alt = this.alt;
            }
            if (this.externalEventId != null) {
                data.externalEventId = this.externalEventId;
            }
            if (this.externalDeviceId != null) {
                data.externalDeviceId = this.externalDeviceId;
            }
            if (this.externalServiceId != null) {
                data.externalServiceId = this.externalServiceId;
            }
            if (this.metaData != null) {
                data.metaData = (Object.fromEntries)(this.metaData);
            }
            if (this.notes != null) {
                data.notes = this.notes;
            }
            if (this.externalUserId != null) {
                data.externalUserId = this.externalUserId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.lat != 0)
                writer.writeDouble(2, this.lat);
            if (this.lon != 0)
                writer.writeDouble(3, this.lon);
            if (this.alt != 0)
                writer.writeInt32(4, this.alt);
            if (this.externalEventId.length)
                writer.writeString(5, this.externalEventId);
            if (this.externalDeviceId.length)
                writer.writeString(6, this.externalDeviceId);
            if (this.externalServiceId.length)
                writer.writeString(7, this.externalServiceId);
            for (const [key, value] of this.metaData) {
                writer.writeMessage(8, this.metaData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.notes.length)
                writer.writeString(9, this.notes);
            if (this.externalUserId.length)
                writer.writeString(10, this.externalUserId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventDetails {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventDetails();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.lat = reader.readDouble();
                        break;
                    case 3:
                        message.lon = reader.readDouble();
                        break;
                    case 4:
                        message.alt = reader.readInt32();
                        break;
                    case 5:
                        message.externalEventId = reader.readString();
                        break;
                    case 6:
                        message.externalDeviceId = reader.readString();
                        break;
                    case 7:
                        message.externalServiceId = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metaData as any, reader, reader.readString, reader.readString));
                        break;
                    case 9:
                        message.notes = reader.readString();
                        break;
                    case 10:
                        message.externalUserId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventDetails {
            return EventDetails.deserialize(bytes);
        }
    }
}
