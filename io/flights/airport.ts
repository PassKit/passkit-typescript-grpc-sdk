/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/flights/airport.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../common/localization";
import * as dependency_2 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace flights {
    export class Port extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            iataAirportCode?: string;
            icaoAirportCode?: string;
            cityName?: string;
            localizedCityName?: dependency_1.io.LocalizedString;
            airportName?: string;
            localizedAirportName?: dependency_1.io.LocalizedString;
            countryCode?: string;
            timezone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("iataAirportCode" in data && data.iataAirportCode != undefined) {
                    this.iataAirportCode = data.iataAirportCode;
                }
                if ("icaoAirportCode" in data && data.icaoAirportCode != undefined) {
                    this.icaoAirportCode = data.icaoAirportCode;
                }
                if ("cityName" in data && data.cityName != undefined) {
                    this.cityName = data.cityName;
                }
                if ("localizedCityName" in data && data.localizedCityName != undefined) {
                    this.localizedCityName = data.localizedCityName;
                }
                if ("airportName" in data && data.airportName != undefined) {
                    this.airportName = data.airportName;
                }
                if ("localizedAirportName" in data && data.localizedAirportName != undefined) {
                    this.localizedAirportName = data.localizedAirportName;
                }
                if ("countryCode" in data && data.countryCode != undefined) {
                    this.countryCode = data.countryCode;
                }
                if ("timezone" in data && data.timezone != undefined) {
                    this.timezone = data.timezone;
                }
            }
        }
        get iataAirportCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set iataAirportCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get icaoAirportCode() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set icaoAirportCode(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get cityName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set cityName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get localizedCityName() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 4) as dependency_1.io.LocalizedString;
        }
        set localizedCityName(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasLocalizedCityName() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get airportName() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set airportName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get localizedAirportName() {
            return pb_1.Message.getWrapperField(this, dependency_1.io.LocalizedString, 6) as dependency_1.io.LocalizedString;
        }
        set localizedAirportName(value: dependency_1.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasLocalizedAirportName() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get countryCode() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set countryCode(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get timezone() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set timezone(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            iataAirportCode?: string;
            icaoAirportCode?: string;
            cityName?: string;
            localizedCityName?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            airportName?: string;
            localizedAirportName?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
            countryCode?: string;
            timezone?: string;
        }): Port {
            const message = new Port({});
            if (data.iataAirportCode != null) {
                message.iataAirportCode = data.iataAirportCode;
            }
            if (data.icaoAirportCode != null) {
                message.icaoAirportCode = data.icaoAirportCode;
            }
            if (data.cityName != null) {
                message.cityName = data.cityName;
            }
            if (data.localizedCityName != null) {
                message.localizedCityName = dependency_1.io.LocalizedString.fromObject(data.localizedCityName);
            }
            if (data.airportName != null) {
                message.airportName = data.airportName;
            }
            if (data.localizedAirportName != null) {
                message.localizedAirportName = dependency_1.io.LocalizedString.fromObject(data.localizedAirportName);
            }
            if (data.countryCode != null) {
                message.countryCode = data.countryCode;
            }
            if (data.timezone != null) {
                message.timezone = data.timezone;
            }
            return message;
        }
        toObject() {
            const data: {
                iataAirportCode?: string;
                icaoAirportCode?: string;
                cityName?: string;
                localizedCityName?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                airportName?: string;
                localizedAirportName?: ReturnType<typeof dependency_1.io.LocalizedString.prototype.toObject>;
                countryCode?: string;
                timezone?: string;
            } = {};
            if (this.iataAirportCode != null) {
                data.iataAirportCode = this.iataAirportCode;
            }
            if (this.icaoAirportCode != null) {
                data.icaoAirportCode = this.icaoAirportCode;
            }
            if (this.cityName != null) {
                data.cityName = this.cityName;
            }
            if (this.localizedCityName != null) {
                data.localizedCityName = this.localizedCityName.toObject();
            }
            if (this.airportName != null) {
                data.airportName = this.airportName;
            }
            if (this.localizedAirportName != null) {
                data.localizedAirportName = this.localizedAirportName.toObject();
            }
            if (this.countryCode != null) {
                data.countryCode = this.countryCode;
            }
            if (this.timezone != null) {
                data.timezone = this.timezone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.iataAirportCode.length)
                writer.writeString(1, this.iataAirportCode);
            if (this.icaoAirportCode.length)
                writer.writeString(2, this.icaoAirportCode);
            if (this.cityName.length)
                writer.writeString(3, this.cityName);
            if (this.hasLocalizedCityName)
                writer.writeMessage(4, this.localizedCityName, () => this.localizedCityName.serialize(writer));
            if (this.airportName.length)
                writer.writeString(5, this.airportName);
            if (this.hasLocalizedAirportName)
                writer.writeMessage(6, this.localizedAirportName, () => this.localizedAirportName.serialize(writer));
            if (this.countryCode.length)
                writer.writeString(7, this.countryCode);
            if (this.timezone.length)
                writer.writeString(8, this.timezone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Port {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Port();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.iataAirportCode = reader.readString();
                        break;
                    case 2:
                        message.icaoAirportCode = reader.readString();
                        break;
                    case 3:
                        message.cityName = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.localizedCityName, () => message.localizedCityName = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 5:
                        message.airportName = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.localizedAirportName, () => message.localizedAirportName = dependency_1.io.LocalizedString.deserialize(reader));
                        break;
                    case 7:
                        message.countryCode = reader.readString();
                        break;
                    case 8:
                        message.timezone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Port {
            return Port.deserialize(bytes);
        }
    }
    export class AirportCode extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            airportCode?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("airportCode" in data && data.airportCode != undefined) {
                    this.airportCode = data.airportCode;
                }
            }
        }
        get airportCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set airportCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            airportCode?: string;
        }): AirportCode {
            const message = new AirportCode({});
            if (data.airportCode != null) {
                message.airportCode = data.airportCode;
            }
            return message;
        }
        toObject() {
            const data: {
                airportCode?: string;
            } = {};
            if (this.airportCode != null) {
                data.airportCode = this.airportCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.airportCode.length)
                writer.writeString(1, this.airportCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AirportCode {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AirportCode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.airportCode = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AirportCode {
            return AirportCode.deserialize(bytes);
        }
    }
}
