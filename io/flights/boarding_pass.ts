/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/flights/boarding_pass.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./passenger";
import * as dependency_2 from "./barcode";
import * as dependency_3 from "./cabin_codes/cabin_codes";
import * as dependency_4 from "./../common/common_objects";
import * as dependency_5 from "./../common/proximity";
import * as dependency_6 from "./../common/links";
import * as dependency_7 from "./../common/metrics";
import * as dependency_8 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace flights {
    export class BoardingPassRecord extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            operatingCarrierPNR?: string;
            relatedPNRs?: string[];
            ticketNumber?: string;
            ticketLeg?: number;
            boardingPoint?: string;
            deplaningPoint?: string;
            carrierCode?: string;
            flightNumber?: string;
            departureDate?: dependency_4.io.Date;
            passenger?: dependency_1.flights.Passenger;
            class?: string;
            compartmentCode?: dependency_3.cabin_codes.CompartmentCode;
            seatNumber?: string;
            sequenceNumber?: number;
            boardingGroup?: string;
            boardingPosition?: string;
            freeBaggageAllowance?: string;
            carryOnAllowance?: string;
            ssrCodes?: string[];
            osi?: string;
            remarks?: string;
            passengerStatus?: dependency_2.flights.PassengerStatus;
            conditionalItems?: dependency_2.flights.ConditionalItems;
            barcodePayload?: string;
            securityImage?: string;
            privilegeImage?: string;
            footerImage?: string;
            locationMessages?: dependency_5.io.GPSLocation[];
            beaconMessages?: dependency_5.io.Beacon[];
            links?: dependency_6.io.Link[];
            barcodeAdditionalData?: string;
            infantPassId?: string;
            additionalDataItems?: dependency_4.io.DataItems;
            metadata?: dependency_7.io.Metadata;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 21, 30, 31, 32], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("operatingCarrierPNR" in data && data.operatingCarrierPNR != undefined) {
                    this.operatingCarrierPNR = data.operatingCarrierPNR;
                }
                if ("relatedPNRs" in data && data.relatedPNRs != undefined) {
                    this.relatedPNRs = data.relatedPNRs;
                }
                if ("ticketNumber" in data && data.ticketNumber != undefined) {
                    this.ticketNumber = data.ticketNumber;
                }
                if ("ticketLeg" in data && data.ticketLeg != undefined) {
                    this.ticketLeg = data.ticketLeg;
                }
                if ("boardingPoint" in data && data.boardingPoint != undefined) {
                    this.boardingPoint = data.boardingPoint;
                }
                if ("deplaningPoint" in data && data.deplaningPoint != undefined) {
                    this.deplaningPoint = data.deplaningPoint;
                }
                if ("carrierCode" in data && data.carrierCode != undefined) {
                    this.carrierCode = data.carrierCode;
                }
                if ("flightNumber" in data && data.flightNumber != undefined) {
                    this.flightNumber = data.flightNumber;
                }
                if ("departureDate" in data && data.departureDate != undefined) {
                    this.departureDate = data.departureDate;
                }
                if ("passenger" in data && data.passenger != undefined) {
                    this.passenger = data.passenger;
                }
                if ("class" in data && data.class != undefined) {
                    this.class = data.class;
                }
                if ("compartmentCode" in data && data.compartmentCode != undefined) {
                    this.compartmentCode = data.compartmentCode;
                }
                if ("seatNumber" in data && data.seatNumber != undefined) {
                    this.seatNumber = data.seatNumber;
                }
                if ("sequenceNumber" in data && data.sequenceNumber != undefined) {
                    this.sequenceNumber = data.sequenceNumber;
                }
                if ("boardingGroup" in data && data.boardingGroup != undefined) {
                    this.boardingGroup = data.boardingGroup;
                }
                if ("boardingPosition" in data && data.boardingPosition != undefined) {
                    this.boardingPosition = data.boardingPosition;
                }
                if ("freeBaggageAllowance" in data && data.freeBaggageAllowance != undefined) {
                    this.freeBaggageAllowance = data.freeBaggageAllowance;
                }
                if ("carryOnAllowance" in data && data.carryOnAllowance != undefined) {
                    this.carryOnAllowance = data.carryOnAllowance;
                }
                if ("ssrCodes" in data && data.ssrCodes != undefined) {
                    this.ssrCodes = data.ssrCodes;
                }
                if ("osi" in data && data.osi != undefined) {
                    this.osi = data.osi;
                }
                if ("remarks" in data && data.remarks != undefined) {
                    this.remarks = data.remarks;
                }
                if ("passengerStatus" in data && data.passengerStatus != undefined) {
                    this.passengerStatus = data.passengerStatus;
                }
                if ("conditionalItems" in data && data.conditionalItems != undefined) {
                    this.conditionalItems = data.conditionalItems;
                }
                if ("barcodePayload" in data && data.barcodePayload != undefined) {
                    this.barcodePayload = data.barcodePayload;
                }
                if ("securityImage" in data && data.securityImage != undefined) {
                    this.securityImage = data.securityImage;
                }
                if ("privilegeImage" in data && data.privilegeImage != undefined) {
                    this.privilegeImage = data.privilegeImage;
                }
                if ("footerImage" in data && data.footerImage != undefined) {
                    this.footerImage = data.footerImage;
                }
                if ("locationMessages" in data && data.locationMessages != undefined) {
                    this.locationMessages = data.locationMessages;
                }
                if ("beaconMessages" in data && data.beaconMessages != undefined) {
                    this.beaconMessages = data.beaconMessages;
                }
                if ("links" in data && data.links != undefined) {
                    this.links = data.links;
                }
                if ("barcodeAdditionalData" in data && data.barcodeAdditionalData != undefined) {
                    this.barcodeAdditionalData = data.barcodeAdditionalData;
                }
                if ("infantPassId" in data && data.infantPassId != undefined) {
                    this.infantPassId = data.infantPassId;
                }
                if ("additionalDataItems" in data && data.additionalDataItems != undefined) {
                    this.additionalDataItems = data.additionalDataItems;
                }
                if ("metadata" in data && data.metadata != undefined) {
                    this.metadata = data.metadata;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get operatingCarrierPNR() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set operatingCarrierPNR(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get relatedPNRs() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set relatedPNRs(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get ticketNumber() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ticketNumber(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ticketLeg() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set ticketLeg(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get boardingPoint() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set boardingPoint(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get deplaningPoint() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set deplaningPoint(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get carrierCode() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set carrierCode(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get flightNumber() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set flightNumber(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get departureDate() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.Date, 11) as dependency_4.io.Date;
        }
        set departureDate(value: dependency_4.io.Date) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasDepartureDate() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get passenger() {
            return pb_1.Message.getWrapperField(this, dependency_1.flights.Passenger, 12) as dependency_1.flights.Passenger;
        }
        set passenger(value: dependency_1.flights.Passenger) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get hasPassenger() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get class() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set class(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get compartmentCode() {
            return pb_1.Message.getFieldWithDefault(this, 14, dependency_3.cabin_codes.CompartmentCode.NONE) as dependency_3.cabin_codes.CompartmentCode;
        }
        set compartmentCode(value: dependency_3.cabin_codes.CompartmentCode) {
            pb_1.Message.setField(this, 14, value);
        }
        get seatNumber() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set seatNumber(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get sequenceNumber() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set sequenceNumber(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get boardingGroup() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set boardingGroup(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get boardingPosition() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set boardingPosition(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get freeBaggageAllowance() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set freeBaggageAllowance(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get carryOnAllowance() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set carryOnAllowance(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get ssrCodes() {
            return pb_1.Message.getFieldWithDefault(this, 21, []) as string[];
        }
        set ssrCodes(value: string[]) {
            pb_1.Message.setField(this, 21, value);
        }
        get osi() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set osi(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get remarks() {
            return pb_1.Message.getFieldWithDefault(this, 23, "") as string;
        }
        set remarks(value: string) {
            pb_1.Message.setField(this, 23, value);
        }
        get passengerStatus() {
            return pb_1.Message.getFieldWithDefault(this, 24, dependency_2.flights.PassengerStatus.ISSUED_NOT_CHECKED_IN) as dependency_2.flights.PassengerStatus;
        }
        set passengerStatus(value: dependency_2.flights.PassengerStatus) {
            pb_1.Message.setField(this, 24, value);
        }
        get conditionalItems() {
            return pb_1.Message.getWrapperField(this, dependency_2.flights.ConditionalItems, 25) as dependency_2.flights.ConditionalItems;
        }
        set conditionalItems(value: dependency_2.flights.ConditionalItems) {
            pb_1.Message.setWrapperField(this, 25, value);
        }
        get hasConditionalItems() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get barcodePayload() {
            return pb_1.Message.getFieldWithDefault(this, 26, "") as string;
        }
        set barcodePayload(value: string) {
            pb_1.Message.setField(this, 26, value);
        }
        get securityImage() {
            return pb_1.Message.getFieldWithDefault(this, 27, "") as string;
        }
        set securityImage(value: string) {
            pb_1.Message.setField(this, 27, value);
        }
        get privilegeImage() {
            return pb_1.Message.getFieldWithDefault(this, 28, "") as string;
        }
        set privilegeImage(value: string) {
            pb_1.Message.setField(this, 28, value);
        }
        get footerImage() {
            return pb_1.Message.getFieldWithDefault(this, 29, "") as string;
        }
        set footerImage(value: string) {
            pb_1.Message.setField(this, 29, value);
        }
        get locationMessages() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.io.GPSLocation, 30) as dependency_5.io.GPSLocation[];
        }
        set locationMessages(value: dependency_5.io.GPSLocation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 30, value);
        }
        get beaconMessages() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.io.Beacon, 31) as dependency_5.io.Beacon[];
        }
        set beaconMessages(value: dependency_5.io.Beacon[]) {
            pb_1.Message.setRepeatedWrapperField(this, 31, value);
        }
        get links() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.io.Link, 32) as dependency_6.io.Link[];
        }
        set links(value: dependency_6.io.Link[]) {
            pb_1.Message.setRepeatedWrapperField(this, 32, value);
        }
        get barcodeAdditionalData() {
            return pb_1.Message.getFieldWithDefault(this, 33, "") as string;
        }
        set barcodeAdditionalData(value: string) {
            pb_1.Message.setField(this, 33, value);
        }
        get infantPassId() {
            return pb_1.Message.getFieldWithDefault(this, 34, "") as string;
        }
        set infantPassId(value: string) {
            pb_1.Message.setField(this, 34, value);
        }
        get additionalDataItems() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.DataItems, 35) as dependency_4.io.DataItems;
        }
        set additionalDataItems(value: dependency_4.io.DataItems) {
            pb_1.Message.setWrapperField(this, 35, value);
        }
        get hasAdditionalDataItems() {
            return pb_1.Message.getField(this, 35) != null;
        }
        get metadata() {
            return pb_1.Message.getWrapperField(this, dependency_7.io.Metadata, 36) as dependency_7.io.Metadata;
        }
        set metadata(value: dependency_7.io.Metadata) {
            pb_1.Message.setWrapperField(this, 36, value);
        }
        get hasMetadata() {
            return pb_1.Message.getField(this, 36) != null;
        }
        static fromObject(data: {
            id?: string;
            operatingCarrierPNR?: string;
            relatedPNRs?: string[];
            ticketNumber?: string;
            ticketLeg?: number;
            boardingPoint?: string;
            deplaningPoint?: string;
            carrierCode?: string;
            flightNumber?: string;
            departureDate?: ReturnType<typeof dependency_4.io.Date.prototype.toObject>;
            passenger?: ReturnType<typeof dependency_1.flights.Passenger.prototype.toObject>;
            class?: string;
            compartmentCode?: dependency_3.cabin_codes.CompartmentCode;
            seatNumber?: string;
            sequenceNumber?: number;
            boardingGroup?: string;
            boardingPosition?: string;
            freeBaggageAllowance?: string;
            carryOnAllowance?: string;
            ssrCodes?: string[];
            osi?: string;
            remarks?: string;
            passengerStatus?: dependency_2.flights.PassengerStatus;
            conditionalItems?: ReturnType<typeof dependency_2.flights.ConditionalItems.prototype.toObject>;
            barcodePayload?: string;
            securityImage?: string;
            privilegeImage?: string;
            footerImage?: string;
            locationMessages?: ReturnType<typeof dependency_5.io.GPSLocation.prototype.toObject>[];
            beaconMessages?: ReturnType<typeof dependency_5.io.Beacon.prototype.toObject>[];
            links?: ReturnType<typeof dependency_6.io.Link.prototype.toObject>[];
            barcodeAdditionalData?: string;
            infantPassId?: string;
            additionalDataItems?: ReturnType<typeof dependency_4.io.DataItems.prototype.toObject>;
            metadata?: ReturnType<typeof dependency_7.io.Metadata.prototype.toObject>;
        }): BoardingPassRecord {
            const message = new BoardingPassRecord({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.operatingCarrierPNR != null) {
                message.operatingCarrierPNR = data.operatingCarrierPNR;
            }
            if (data.relatedPNRs != null) {
                message.relatedPNRs = data.relatedPNRs;
            }
            if (data.ticketNumber != null) {
                message.ticketNumber = data.ticketNumber;
            }
            if (data.ticketLeg != null) {
                message.ticketLeg = data.ticketLeg;
            }
            if (data.boardingPoint != null) {
                message.boardingPoint = data.boardingPoint;
            }
            if (data.deplaningPoint != null) {
                message.deplaningPoint = data.deplaningPoint;
            }
            if (data.carrierCode != null) {
                message.carrierCode = data.carrierCode;
            }
            if (data.flightNumber != null) {
                message.flightNumber = data.flightNumber;
            }
            if (data.departureDate != null) {
                message.departureDate = dependency_4.io.Date.fromObject(data.departureDate);
            }
            if (data.passenger != null) {
                message.passenger = dependency_1.flights.Passenger.fromObject(data.passenger);
            }
            if (data.class != null) {
                message.class = data.class;
            }
            if (data.compartmentCode != null) {
                message.compartmentCode = data.compartmentCode;
            }
            if (data.seatNumber != null) {
                message.seatNumber = data.seatNumber;
            }
            if (data.sequenceNumber != null) {
                message.sequenceNumber = data.sequenceNumber;
            }
            if (data.boardingGroup != null) {
                message.boardingGroup = data.boardingGroup;
            }
            if (data.boardingPosition != null) {
                message.boardingPosition = data.boardingPosition;
            }
            if (data.freeBaggageAllowance != null) {
                message.freeBaggageAllowance = data.freeBaggageAllowance;
            }
            if (data.carryOnAllowance != null) {
                message.carryOnAllowance = data.carryOnAllowance;
            }
            if (data.ssrCodes != null) {
                message.ssrCodes = data.ssrCodes;
            }
            if (data.osi != null) {
                message.osi = data.osi;
            }
            if (data.remarks != null) {
                message.remarks = data.remarks;
            }
            if (data.passengerStatus != null) {
                message.passengerStatus = data.passengerStatus;
            }
            if (data.conditionalItems != null) {
                message.conditionalItems = dependency_2.flights.ConditionalItems.fromObject(data.conditionalItems);
            }
            if (data.barcodePayload != null) {
                message.barcodePayload = data.barcodePayload;
            }
            if (data.securityImage != null) {
                message.securityImage = data.securityImage;
            }
            if (data.privilegeImage != null) {
                message.privilegeImage = data.privilegeImage;
            }
            if (data.footerImage != null) {
                message.footerImage = data.footerImage;
            }
            if (data.locationMessages != null) {
                message.locationMessages = data.locationMessages.map(item => dependency_5.io.GPSLocation.fromObject(item));
            }
            if (data.beaconMessages != null) {
                message.beaconMessages = data.beaconMessages.map(item => dependency_5.io.Beacon.fromObject(item));
            }
            if (data.links != null) {
                message.links = data.links.map(item => dependency_6.io.Link.fromObject(item));
            }
            if (data.barcodeAdditionalData != null) {
                message.barcodeAdditionalData = data.barcodeAdditionalData;
            }
            if (data.infantPassId != null) {
                message.infantPassId = data.infantPassId;
            }
            if (data.additionalDataItems != null) {
                message.additionalDataItems = dependency_4.io.DataItems.fromObject(data.additionalDataItems);
            }
            if (data.metadata != null) {
                message.metadata = dependency_7.io.Metadata.fromObject(data.metadata);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                operatingCarrierPNR?: string;
                relatedPNRs?: string[];
                ticketNumber?: string;
                ticketLeg?: number;
                boardingPoint?: string;
                deplaningPoint?: string;
                carrierCode?: string;
                flightNumber?: string;
                departureDate?: ReturnType<typeof dependency_4.io.Date.prototype.toObject>;
                passenger?: ReturnType<typeof dependency_1.flights.Passenger.prototype.toObject>;
                class?: string;
                compartmentCode?: dependency_3.cabin_codes.CompartmentCode;
                seatNumber?: string;
                sequenceNumber?: number;
                boardingGroup?: string;
                boardingPosition?: string;
                freeBaggageAllowance?: string;
                carryOnAllowance?: string;
                ssrCodes?: string[];
                osi?: string;
                remarks?: string;
                passengerStatus?: dependency_2.flights.PassengerStatus;
                conditionalItems?: ReturnType<typeof dependency_2.flights.ConditionalItems.prototype.toObject>;
                barcodePayload?: string;
                securityImage?: string;
                privilegeImage?: string;
                footerImage?: string;
                locationMessages?: ReturnType<typeof dependency_5.io.GPSLocation.prototype.toObject>[];
                beaconMessages?: ReturnType<typeof dependency_5.io.Beacon.prototype.toObject>[];
                links?: ReturnType<typeof dependency_6.io.Link.prototype.toObject>[];
                barcodeAdditionalData?: string;
                infantPassId?: string;
                additionalDataItems?: ReturnType<typeof dependency_4.io.DataItems.prototype.toObject>;
                metadata?: ReturnType<typeof dependency_7.io.Metadata.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.operatingCarrierPNR != null) {
                data.operatingCarrierPNR = this.operatingCarrierPNR;
            }
            if (this.relatedPNRs != null) {
                data.relatedPNRs = this.relatedPNRs;
            }
            if (this.ticketNumber != null) {
                data.ticketNumber = this.ticketNumber;
            }
            if (this.ticketLeg != null) {
                data.ticketLeg = this.ticketLeg;
            }
            if (this.boardingPoint != null) {
                data.boardingPoint = this.boardingPoint;
            }
            if (this.deplaningPoint != null) {
                data.deplaningPoint = this.deplaningPoint;
            }
            if (this.carrierCode != null) {
                data.carrierCode = this.carrierCode;
            }
            if (this.flightNumber != null) {
                data.flightNumber = this.flightNumber;
            }
            if (this.departureDate != null) {
                data.departureDate = this.departureDate.toObject();
            }
            if (this.passenger != null) {
                data.passenger = this.passenger.toObject();
            }
            if (this.class != null) {
                data.class = this.class;
            }
            if (this.compartmentCode != null) {
                data.compartmentCode = this.compartmentCode;
            }
            if (this.seatNumber != null) {
                data.seatNumber = this.seatNumber;
            }
            if (this.sequenceNumber != null) {
                data.sequenceNumber = this.sequenceNumber;
            }
            if (this.boardingGroup != null) {
                data.boardingGroup = this.boardingGroup;
            }
            if (this.boardingPosition != null) {
                data.boardingPosition = this.boardingPosition;
            }
            if (this.freeBaggageAllowance != null) {
                data.freeBaggageAllowance = this.freeBaggageAllowance;
            }
            if (this.carryOnAllowance != null) {
                data.carryOnAllowance = this.carryOnAllowance;
            }
            if (this.ssrCodes != null) {
                data.ssrCodes = this.ssrCodes;
            }
            if (this.osi != null) {
                data.osi = this.osi;
            }
            if (this.remarks != null) {
                data.remarks = this.remarks;
            }
            if (this.passengerStatus != null) {
                data.passengerStatus = this.passengerStatus;
            }
            if (this.conditionalItems != null) {
                data.conditionalItems = this.conditionalItems.toObject();
            }
            if (this.barcodePayload != null) {
                data.barcodePayload = this.barcodePayload;
            }
            if (this.securityImage != null) {
                data.securityImage = this.securityImage;
            }
            if (this.privilegeImage != null) {
                data.privilegeImage = this.privilegeImage;
            }
            if (this.footerImage != null) {
                data.footerImage = this.footerImage;
            }
            if (this.locationMessages != null) {
                data.locationMessages = this.locationMessages.map((item: dependency_5.io.GPSLocation) => item.toObject());
            }
            if (this.beaconMessages != null) {
                data.beaconMessages = this.beaconMessages.map((item: dependency_5.io.Beacon) => item.toObject());
            }
            if (this.links != null) {
                data.links = this.links.map((item: dependency_6.io.Link) => item.toObject());
            }
            if (this.barcodeAdditionalData != null) {
                data.barcodeAdditionalData = this.barcodeAdditionalData;
            }
            if (this.infantPassId != null) {
                data.infantPassId = this.infantPassId;
            }
            if (this.additionalDataItems != null) {
                data.additionalDataItems = this.additionalDataItems.toObject();
            }
            if (this.metadata != null) {
                data.metadata = this.metadata.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.operatingCarrierPNR.length)
                writer.writeString(2, this.operatingCarrierPNR);
            if (this.relatedPNRs.length)
                writer.writeRepeatedString(3, this.relatedPNRs);
            if (this.ticketNumber.length)
                writer.writeString(4, this.ticketNumber);
            if (this.ticketLeg != 0)
                writer.writeInt32(5, this.ticketLeg);
            if (this.boardingPoint.length)
                writer.writeString(6, this.boardingPoint);
            if (this.deplaningPoint.length)
                writer.writeString(7, this.deplaningPoint);
            if (this.carrierCode.length)
                writer.writeString(8, this.carrierCode);
            if (this.flightNumber.length)
                writer.writeString(9, this.flightNumber);
            if (this.hasDepartureDate)
                writer.writeMessage(11, this.departureDate, () => this.departureDate.serialize(writer));
            if (this.hasPassenger)
                writer.writeMessage(12, this.passenger, () => this.passenger.serialize(writer));
            if (this.class.length)
                writer.writeString(13, this.class);
            if (this.compartmentCode != dependency_3.cabin_codes.CompartmentCode.NONE)
                writer.writeEnum(14, this.compartmentCode);
            if (this.seatNumber.length)
                writer.writeString(15, this.seatNumber);
            if (this.sequenceNumber != 0)
                writer.writeInt32(16, this.sequenceNumber);
            if (this.boardingGroup.length)
                writer.writeString(17, this.boardingGroup);
            if (this.boardingPosition.length)
                writer.writeString(18, this.boardingPosition);
            if (this.freeBaggageAllowance.length)
                writer.writeString(19, this.freeBaggageAllowance);
            if (this.carryOnAllowance.length)
                writer.writeString(20, this.carryOnAllowance);
            if (this.ssrCodes.length)
                writer.writeRepeatedString(21, this.ssrCodes);
            if (this.osi.length)
                writer.writeString(22, this.osi);
            if (this.remarks.length)
                writer.writeString(23, this.remarks);
            if (this.passengerStatus != dependency_2.flights.PassengerStatus.ISSUED_NOT_CHECKED_IN)
                writer.writeEnum(24, this.passengerStatus);
            if (this.hasConditionalItems)
                writer.writeMessage(25, this.conditionalItems, () => this.conditionalItems.serialize(writer));
            if (this.barcodePayload.length)
                writer.writeString(26, this.barcodePayload);
            if (this.securityImage.length)
                writer.writeString(27, this.securityImage);
            if (this.privilegeImage.length)
                writer.writeString(28, this.privilegeImage);
            if (this.footerImage.length)
                writer.writeString(29, this.footerImage);
            if (this.locationMessages.length)
                writer.writeRepeatedMessage(30, this.locationMessages, (item: dependency_5.io.GPSLocation) => item.serialize(writer));
            if (this.beaconMessages.length)
                writer.writeRepeatedMessage(31, this.beaconMessages, (item: dependency_5.io.Beacon) => item.serialize(writer));
            if (this.links.length)
                writer.writeRepeatedMessage(32, this.links, (item: dependency_6.io.Link) => item.serialize(writer));
            if (this.barcodeAdditionalData.length)
                writer.writeString(33, this.barcodeAdditionalData);
            if (this.infantPassId.length)
                writer.writeString(34, this.infantPassId);
            if (this.hasAdditionalDataItems)
                writer.writeMessage(35, this.additionalDataItems, () => this.additionalDataItems.serialize(writer));
            if (this.hasMetadata)
                writer.writeMessage(36, this.metadata, () => this.metadata.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardingPassRecord {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardingPassRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.operatingCarrierPNR = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.ticketNumber = reader.readString();
                        break;
                    case 5:
                        message.ticketLeg = reader.readInt32();
                        break;
                    case 6:
                        message.boardingPoint = reader.readString();
                        break;
                    case 7:
                        message.deplaningPoint = reader.readString();
                        break;
                    case 8:
                        message.carrierCode = reader.readString();
                        break;
                    case 9:
                        message.flightNumber = reader.readString();
                        break;
                    case 11:
                        reader.readMessage(message.departureDate, () => message.departureDate = dependency_4.io.Date.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.passenger, () => message.passenger = dependency_1.flights.Passenger.deserialize(reader));
                        break;
                    case 13:
                        message.class = reader.readString();
                        break;
                    case 14:
                        message.compartmentCode = reader.readEnum();
                        break;
                    case 15:
                        message.seatNumber = reader.readString();
                        break;
                    case 16:
                        message.sequenceNumber = reader.readInt32();
                        break;
                    case 17:
                        message.boardingGroup = reader.readString();
                        break;
                    case 18:
                        message.boardingPosition = reader.readString();
                        break;
                    case 19:
                        message.freeBaggageAllowance = reader.readString();
                        break;
                    case 20:
                        message.carryOnAllowance = reader.readString();
                        break;
                    case 21:
                        pb_1.Message.addToRepeatedField(message, 21, reader.readString());
                        break;
                    case 22:
                        message.osi = reader.readString();
                        break;
                    case 23:
                        message.remarks = reader.readString();
                        break;
                    case 24:
                        message.passengerStatus = reader.readEnum();
                        break;
                    case 25:
                        reader.readMessage(message.conditionalItems, () => message.conditionalItems = dependency_2.flights.ConditionalItems.deserialize(reader));
                        break;
                    case 26:
                        message.barcodePayload = reader.readString();
                        break;
                    case 27:
                        message.securityImage = reader.readString();
                        break;
                    case 28:
                        message.privilegeImage = reader.readString();
                        break;
                    case 29:
                        message.footerImage = reader.readString();
                        break;
                    case 30:
                        reader.readMessage(message.locationMessages, () => pb_1.Message.addToRepeatedWrapperField(message, 30, dependency_5.io.GPSLocation.deserialize(reader), dependency_5.io.GPSLocation));
                        break;
                    case 31:
                        reader.readMessage(message.beaconMessages, () => pb_1.Message.addToRepeatedWrapperField(message, 31, dependency_5.io.Beacon.deserialize(reader), dependency_5.io.Beacon));
                        break;
                    case 32:
                        reader.readMessage(message.links, () => pb_1.Message.addToRepeatedWrapperField(message, 32, dependency_6.io.Link.deserialize(reader), dependency_6.io.Link));
                        break;
                    case 33:
                        message.barcodeAdditionalData = reader.readString();
                        break;
                    case 34:
                        message.infantPassId = reader.readString();
                        break;
                    case 35:
                        reader.readMessage(message.additionalDataItems, () => message.additionalDataItems = dependency_4.io.DataItems.deserialize(reader));
                        break;
                    case 36:
                        reader.readMessage(message.metadata, () => message.metadata = dependency_7.io.Metadata.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardingPassRecord {
            return BoardingPassRecord.deserialize(bytes);
        }
    }
    export class BoardingPassRecordRequestByTicketNumber extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ticketNumber?: string;
            ticketLeg?: number;
            boardingPoint?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ticketNumber" in data && data.ticketNumber != undefined) {
                    this.ticketNumber = data.ticketNumber;
                }
                if ("ticketLeg" in data && data.ticketLeg != undefined) {
                    this.ticketLeg = data.ticketLeg;
                }
                if ("boardingPoint" in data && data.boardingPoint != undefined) {
                    this.boardingPoint = data.boardingPoint;
                }
            }
        }
        get ticketNumber() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ticketNumber(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ticketLeg() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set ticketLeg(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get boardingPoint() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set boardingPoint(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            ticketNumber?: string;
            ticketLeg?: number;
            boardingPoint?: string;
        }): BoardingPassRecordRequestByTicketNumber {
            const message = new BoardingPassRecordRequestByTicketNumber({});
            if (data.ticketNumber != null) {
                message.ticketNumber = data.ticketNumber;
            }
            if (data.ticketLeg != null) {
                message.ticketLeg = data.ticketLeg;
            }
            if (data.boardingPoint != null) {
                message.boardingPoint = data.boardingPoint;
            }
            return message;
        }
        toObject() {
            const data: {
                ticketNumber?: string;
                ticketLeg?: number;
                boardingPoint?: string;
            } = {};
            if (this.ticketNumber != null) {
                data.ticketNumber = this.ticketNumber;
            }
            if (this.ticketLeg != null) {
                data.ticketLeg = this.ticketLeg;
            }
            if (this.boardingPoint != null) {
                data.boardingPoint = this.boardingPoint;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ticketNumber.length)
                writer.writeString(1, this.ticketNumber);
            if (this.ticketLeg != 0)
                writer.writeInt32(2, this.ticketLeg);
            if (this.boardingPoint.length)
                writer.writeString(3, this.boardingPoint);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardingPassRecordRequestByTicketNumber {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardingPassRecordRequestByTicketNumber();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ticketNumber = reader.readString();
                        break;
                    case 2:
                        message.ticketLeg = reader.readInt32();
                        break;
                    case 3:
                        message.boardingPoint = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardingPassRecordRequestByTicketNumber {
            return BoardingPassRecordRequestByTicketNumber.deserialize(bytes);
        }
    }
    export class BoardingPassRecordRequestByIndex extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            carrierCode?: string;
            flightNumber?: string;
            departureDate?: dependency_4.io.Date;
            boardingPoint?: string;
            sequenceNumber?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("carrierCode" in data && data.carrierCode != undefined) {
                    this.carrierCode = data.carrierCode;
                }
                if ("flightNumber" in data && data.flightNumber != undefined) {
                    this.flightNumber = data.flightNumber;
                }
                if ("departureDate" in data && data.departureDate != undefined) {
                    this.departureDate = data.departureDate;
                }
                if ("boardingPoint" in data && data.boardingPoint != undefined) {
                    this.boardingPoint = data.boardingPoint;
                }
                if ("sequenceNumber" in data && data.sequenceNumber != undefined) {
                    this.sequenceNumber = data.sequenceNumber;
                }
            }
        }
        get carrierCode() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set carrierCode(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get flightNumber() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set flightNumber(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get departureDate() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.Date, 3) as dependency_4.io.Date;
        }
        set departureDate(value: dependency_4.io.Date) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasDepartureDate() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get boardingPoint() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set boardingPoint(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get sequenceNumber() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set sequenceNumber(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            carrierCode?: string;
            flightNumber?: string;
            departureDate?: ReturnType<typeof dependency_4.io.Date.prototype.toObject>;
            boardingPoint?: string;
            sequenceNumber?: number;
        }): BoardingPassRecordRequestByIndex {
            const message = new BoardingPassRecordRequestByIndex({});
            if (data.carrierCode != null) {
                message.carrierCode = data.carrierCode;
            }
            if (data.flightNumber != null) {
                message.flightNumber = data.flightNumber;
            }
            if (data.departureDate != null) {
                message.departureDate = dependency_4.io.Date.fromObject(data.departureDate);
            }
            if (data.boardingPoint != null) {
                message.boardingPoint = data.boardingPoint;
            }
            if (data.sequenceNumber != null) {
                message.sequenceNumber = data.sequenceNumber;
            }
            return message;
        }
        toObject() {
            const data: {
                carrierCode?: string;
                flightNumber?: string;
                departureDate?: ReturnType<typeof dependency_4.io.Date.prototype.toObject>;
                boardingPoint?: string;
                sequenceNumber?: number;
            } = {};
            if (this.carrierCode != null) {
                data.carrierCode = this.carrierCode;
            }
            if (this.flightNumber != null) {
                data.flightNumber = this.flightNumber;
            }
            if (this.departureDate != null) {
                data.departureDate = this.departureDate.toObject();
            }
            if (this.boardingPoint != null) {
                data.boardingPoint = this.boardingPoint;
            }
            if (this.sequenceNumber != null) {
                data.sequenceNumber = this.sequenceNumber;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.carrierCode.length)
                writer.writeString(1, this.carrierCode);
            if (this.flightNumber.length)
                writer.writeString(2, this.flightNumber);
            if (this.hasDepartureDate)
                writer.writeMessage(3, this.departureDate, () => this.departureDate.serialize(writer));
            if (this.boardingPoint.length)
                writer.writeString(4, this.boardingPoint);
            if (this.sequenceNumber != 0)
                writer.writeInt32(5, this.sequenceNumber);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardingPassRecordRequestByIndex {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardingPassRecordRequestByIndex();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.carrierCode = reader.readString();
                        break;
                    case 2:
                        message.flightNumber = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.departureDate, () => message.departureDate = dependency_4.io.Date.deserialize(reader));
                        break;
                    case 4:
                        message.boardingPoint = reader.readString();
                        break;
                    case 5:
                        message.sequenceNumber = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardingPassRecordRequestByIndex {
            return BoardingPassRecordRequestByIndex.deserialize(bytes);
        }
    }
    export class BoardingPassRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4]];
        constructor(data?: any[] | ({
            format?: dependency_4.io.PassBundleFormat[];
        } & (({
            ticketNumber?: BoardingPassRecordRequestByTicketNumber;
            index?: never;
            pnr?: never;
            passId?: never;
        } | {
            ticketNumber?: never;
            index?: BoardingPassRecordRequestByIndex;
            pnr?: never;
            passId?: never;
        } | {
            ticketNumber?: never;
            index?: never;
            pnr?: BoardingPassesForBookingRequest;
            passId?: never;
        } | {
            ticketNumber?: never;
            index?: never;
            pnr?: never;
            passId?: dependency_4.io.Id;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ticketNumber" in data && data.ticketNumber != undefined) {
                    this.ticketNumber = data.ticketNumber;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("pnr" in data && data.pnr != undefined) {
                    this.pnr = data.pnr;
                }
                if ("passId" in data && data.passId != undefined) {
                    this.passId = data.passId;
                }
                if ("format" in data && data.format != undefined) {
                    this.format = data.format;
                }
            }
        }
        get ticketNumber() {
            return pb_1.Message.getWrapperField(this, BoardingPassRecordRequestByTicketNumber, 1) as BoardingPassRecordRequestByTicketNumber;
        }
        set ticketNumber(value: BoardingPassRecordRequestByTicketNumber) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get hasTicketNumber() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get index() {
            return pb_1.Message.getWrapperField(this, BoardingPassRecordRequestByIndex, 2) as BoardingPassRecordRequestByIndex;
        }
        set index(value: BoardingPassRecordRequestByIndex) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get hasIndex() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get pnr() {
            return pb_1.Message.getWrapperField(this, BoardingPassesForBookingRequest, 3) as BoardingPassesForBookingRequest;
        }
        set pnr(value: BoardingPassesForBookingRequest) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get hasPnr() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get passId() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.Id, 4) as dependency_4.io.Id;
        }
        set passId(value: dependency_4.io.Id) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get hasPassId() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get format() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as dependency_4.io.PassBundleFormat[];
        }
        set format(value: dependency_4.io.PassBundleFormat[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get request() {
            const cases: {
                [index: number]: "none" | "ticketNumber" | "index" | "pnr" | "passId";
            } = {
                0: "none",
                1: "ticketNumber",
                2: "index",
                3: "pnr",
                4: "passId"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
        }
        static fromObject(data: {
            ticketNumber?: ReturnType<typeof BoardingPassRecordRequestByTicketNumber.prototype.toObject>;
            index?: ReturnType<typeof BoardingPassRecordRequestByIndex.prototype.toObject>;
            pnr?: ReturnType<typeof BoardingPassesForBookingRequest.prototype.toObject>;
            passId?: ReturnType<typeof dependency_4.io.Id.prototype.toObject>;
            format?: dependency_4.io.PassBundleFormat[];
        }): BoardingPassRequest {
            const message = new BoardingPassRequest({});
            if (data.ticketNumber != null) {
                message.ticketNumber = BoardingPassRecordRequestByTicketNumber.fromObject(data.ticketNumber);
            }
            if (data.index != null) {
                message.index = BoardingPassRecordRequestByIndex.fromObject(data.index);
            }
            if (data.pnr != null) {
                message.pnr = BoardingPassesForBookingRequest.fromObject(data.pnr);
            }
            if (data.passId != null) {
                message.passId = dependency_4.io.Id.fromObject(data.passId);
            }
            if (data.format != null) {
                message.format = data.format;
            }
            return message;
        }
        toObject() {
            const data: {
                ticketNumber?: ReturnType<typeof BoardingPassRecordRequestByTicketNumber.prototype.toObject>;
                index?: ReturnType<typeof BoardingPassRecordRequestByIndex.prototype.toObject>;
                pnr?: ReturnType<typeof BoardingPassesForBookingRequest.prototype.toObject>;
                passId?: ReturnType<typeof dependency_4.io.Id.prototype.toObject>;
                format?: dependency_4.io.PassBundleFormat[];
            } = {};
            if (this.ticketNumber != null) {
                data.ticketNumber = this.ticketNumber.toObject();
            }
            if (this.index != null) {
                data.index = this.index.toObject();
            }
            if (this.pnr != null) {
                data.pnr = this.pnr.toObject();
            }
            if (this.passId != null) {
                data.passId = this.passId.toObject();
            }
            if (this.format != null) {
                data.format = this.format;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasTicketNumber)
                writer.writeMessage(1, this.ticketNumber, () => this.ticketNumber.serialize(writer));
            if (this.hasIndex)
                writer.writeMessage(2, this.index, () => this.index.serialize(writer));
            if (this.hasPnr)
                writer.writeMessage(3, this.pnr, () => this.pnr.serialize(writer));
            if (this.hasPassId)
                writer.writeMessage(4, this.passId, () => this.passId.serialize(writer));
            if (this.format.length)
                writer.writePackedEnum(5, this.format);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardingPassRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardingPassRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ticketNumber, () => message.ticketNumber = BoardingPassRecordRequestByTicketNumber.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.index, () => message.index = BoardingPassRecordRequestByIndex.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.pnr, () => message.pnr = BoardingPassesForBookingRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.passId, () => message.passId = dependency_4.io.Id.deserialize(reader));
                        break;
                    case 5:
                        message.format = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardingPassRequest {
            return BoardingPassRequest.deserialize(bytes);
        }
    }
    export class BoardingPassRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            ticketNumber?: BoardingPassRecordRequestByTicketNumber;
            index?: never;
            passId?: never;
        } | {
            ticketNumber?: never;
            index?: BoardingPassRecordRequestByIndex;
            passId?: never;
        } | {
            ticketNumber?: never;
            index?: never;
            passId?: dependency_4.io.Id;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ticketNumber" in data && data.ticketNumber != undefined) {
                    this.ticketNumber = data.ticketNumber;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
                if ("passId" in data && data.passId != undefined) {
                    this.passId = data.passId;
                }
            }
        }
        get ticketNumber() {
            return pb_1.Message.getWrapperField(this, BoardingPassRecordRequestByTicketNumber, 1) as BoardingPassRecordRequestByTicketNumber;
        }
        set ticketNumber(value: BoardingPassRecordRequestByTicketNumber) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get hasTicketNumber() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get index() {
            return pb_1.Message.getWrapperField(this, BoardingPassRecordRequestByIndex, 2) as BoardingPassRecordRequestByIndex;
        }
        set index(value: BoardingPassRecordRequestByIndex) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get hasIndex() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get passId() {
            return pb_1.Message.getWrapperField(this, dependency_4.io.Id, 3) as dependency_4.io.Id;
        }
        set passId(value: dependency_4.io.Id) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get hasPassId() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get request() {
            const cases: {
                [index: number]: "none" | "ticketNumber" | "index" | "passId";
            } = {
                0: "none",
                1: "ticketNumber",
                2: "index",
                3: "passId"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            ticketNumber?: ReturnType<typeof BoardingPassRecordRequestByTicketNumber.prototype.toObject>;
            index?: ReturnType<typeof BoardingPassRecordRequestByIndex.prototype.toObject>;
            passId?: ReturnType<typeof dependency_4.io.Id.prototype.toObject>;
        }): BoardingPassRecordRequest {
            const message = new BoardingPassRecordRequest({});
            if (data.ticketNumber != null) {
                message.ticketNumber = BoardingPassRecordRequestByTicketNumber.fromObject(data.ticketNumber);
            }
            if (data.index != null) {
                message.index = BoardingPassRecordRequestByIndex.fromObject(data.index);
            }
            if (data.passId != null) {
                message.passId = dependency_4.io.Id.fromObject(data.passId);
            }
            return message;
        }
        toObject() {
            const data: {
                ticketNumber?: ReturnType<typeof BoardingPassRecordRequestByTicketNumber.prototype.toObject>;
                index?: ReturnType<typeof BoardingPassRecordRequestByIndex.prototype.toObject>;
                passId?: ReturnType<typeof dependency_4.io.Id.prototype.toObject>;
            } = {};
            if (this.ticketNumber != null) {
                data.ticketNumber = this.ticketNumber.toObject();
            }
            if (this.index != null) {
                data.index = this.index.toObject();
            }
            if (this.passId != null) {
                data.passId = this.passId.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasTicketNumber)
                writer.writeMessage(1, this.ticketNumber, () => this.ticketNumber.serialize(writer));
            if (this.hasIndex)
                writer.writeMessage(2, this.index, () => this.index.serialize(writer));
            if (this.hasPassId)
                writer.writeMessage(3, this.passId, () => this.passId.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardingPassRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardingPassRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.ticketNumber, () => message.ticketNumber = BoardingPassRecordRequestByTicketNumber.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.index, () => message.index = BoardingPassRecordRequestByIndex.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.passId, () => message.passId = dependency_4.io.Id.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardingPassRecordRequest {
            return BoardingPassRecordRequest.deserialize(bytes);
        }
    }
    export class BoardingPassesForBookingRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pnr?: string;
            ticketLeg?: number;
            boardingPoint?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pnr" in data && data.pnr != undefined) {
                    this.pnr = data.pnr;
                }
                if ("ticketLeg" in data && data.ticketLeg != undefined) {
                    this.ticketLeg = data.ticketLeg;
                }
                if ("boardingPoint" in data && data.boardingPoint != undefined) {
                    this.boardingPoint = data.boardingPoint;
                }
            }
        }
        get pnr() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set pnr(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ticketLeg() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set ticketLeg(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get boardingPoint() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set boardingPoint(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            pnr?: string;
            ticketLeg?: number;
            boardingPoint?: string;
        }): BoardingPassesForBookingRequest {
            const message = new BoardingPassesForBookingRequest({});
            if (data.pnr != null) {
                message.pnr = data.pnr;
            }
            if (data.ticketLeg != null) {
                message.ticketLeg = data.ticketLeg;
            }
            if (data.boardingPoint != null) {
                message.boardingPoint = data.boardingPoint;
            }
            return message;
        }
        toObject() {
            const data: {
                pnr?: string;
                ticketLeg?: number;
                boardingPoint?: string;
            } = {};
            if (this.pnr != null) {
                data.pnr = this.pnr;
            }
            if (this.ticketLeg != null) {
                data.ticketLeg = this.ticketLeg;
            }
            if (this.boardingPoint != null) {
                data.boardingPoint = this.boardingPoint;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pnr.length)
                writer.writeString(1, this.pnr);
            if (this.ticketLeg != 0)
                writer.writeInt32(2, this.ticketLeg);
            if (this.boardingPoint.length)
                writer.writeString(3, this.boardingPoint);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardingPassesForBookingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardingPassesForBookingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pnr = reader.readString();
                        break;
                    case 2:
                        message.ticketLeg = reader.readInt32();
                        break;
                    case 3:
                        message.boardingPoint = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardingPassesForBookingRequest {
            return BoardingPassesForBookingRequest.deserialize(bytes);
        }
    }
    export class BoardingPassesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            boardingPasses?: dependency_4.io.PassBundle[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("boardingPasses" in data && data.boardingPasses != undefined) {
                    this.boardingPasses = data.boardingPasses;
                }
            }
        }
        get boardingPasses() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.io.PassBundle, 1) as dependency_4.io.PassBundle[];
        }
        set boardingPasses(value: dependency_4.io.PassBundle[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            boardingPasses?: ReturnType<typeof dependency_4.io.PassBundle.prototype.toObject>[];
        }): BoardingPassesResponse {
            const message = new BoardingPassesResponse({});
            if (data.boardingPasses != null) {
                message.boardingPasses = data.boardingPasses.map(item => dependency_4.io.PassBundle.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                boardingPasses?: ReturnType<typeof dependency_4.io.PassBundle.prototype.toObject>[];
            } = {};
            if (this.boardingPasses != null) {
                data.boardingPasses = this.boardingPasses.map((item: dependency_4.io.PassBundle) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.boardingPasses.length)
                writer.writeRepeatedMessage(1, this.boardingPasses, (item: dependency_4.io.PassBundle) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoardingPassesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoardingPassesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.boardingPasses, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.io.PassBundle.deserialize(reader), dependency_4.io.PassBundle));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoardingPassesResponse {
            return BoardingPassesResponse.deserialize(bytes);
        }
    }
}
