/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/semantics.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./localization";
import * as pb_1 from "google-protobuf";
export namespace io {
    export enum EventType {
        EVENT_TYPE_NONE = 0,
        EVENT_TYPE_GENERIC = 1,
        EVENT_TYPE_MOVIE = 2,
        EVENT_TYPE_CONFERENCE = 3,
        EVENT_TYPE_CONVENTION = 4,
        EVENT_TYPE_WORKSHOP = 5,
        EVENT_TYPE_SOCIAL_GATHERING = 6,
        EVENT_TYPE_SPORTS = 7,
        EVENT_TYPE_LIVE_PERFORMANCE = 8
    }
    export class SemanticCurrencyAmount extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: number;
            currencyCode?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("currencyCode" in data && data.currencyCode != undefined) {
                    this.currencyCode = data.currencyCode;
                }
            }
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get currencyCode() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set currencyCode(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            amount?: number;
            currencyCode?: number;
        }): SemanticCurrencyAmount {
            const message = new SemanticCurrencyAmount({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.currencyCode != null) {
                message.currencyCode = data.currencyCode;
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: number;
                currencyCode?: number;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.currencyCode != null) {
                data.currencyCode = this.currencyCode;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount != 0)
                writer.writeFloat(1, this.amount);
            if (this.currencyCode != 0)
                writer.writeInt32(2, this.currencyCode);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SemanticCurrencyAmount {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SemanticCurrencyAmount();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readFloat();
                        break;
                    case 2:
                        message.currencyCode = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SemanticCurrencyAmount {
            return SemanticCurrencyAmount.deserialize(bytes);
        }
    }
    export class SemanticLocation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            latitude?: number;
            longitude?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("latitude" in data && data.latitude != undefined) {
                    this.latitude = data.latitude;
                }
                if ("longitude" in data && data.longitude != undefined) {
                    this.longitude = data.longitude;
                }
            }
        }
        get latitude() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set latitude(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get longitude() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set longitude(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            latitude?: number;
            longitude?: number;
        }): SemanticLocation {
            const message = new SemanticLocation({});
            if (data.latitude != null) {
                message.latitude = data.latitude;
            }
            if (data.longitude != null) {
                message.longitude = data.longitude;
            }
            return message;
        }
        toObject() {
            const data: {
                latitude?: number;
                longitude?: number;
            } = {};
            if (this.latitude != null) {
                data.latitude = this.latitude;
            }
            if (this.longitude != null) {
                data.longitude = this.longitude;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.latitude != 0)
                writer.writeDouble(1, this.latitude);
            if (this.longitude != 0)
                writer.writeDouble(2, this.longitude);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SemanticLocation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SemanticLocation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.latitude = reader.readDouble();
                        break;
                    case 2:
                        message.longitude = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SemanticLocation {
            return SemanticLocation.deserialize(bytes);
        }
    }
    export class SemanticPersonName extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            familyName?: string;
            givenName?: string;
            middleName?: string;
            namePrefix?: string;
            nameSuffix?: string;
            nickname?: string;
            phoneticRepresentation?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("familyName" in data && data.familyName != undefined) {
                    this.familyName = data.familyName;
                }
                if ("givenName" in data && data.givenName != undefined) {
                    this.givenName = data.givenName;
                }
                if ("middleName" in data && data.middleName != undefined) {
                    this.middleName = data.middleName;
                }
                if ("namePrefix" in data && data.namePrefix != undefined) {
                    this.namePrefix = data.namePrefix;
                }
                if ("nameSuffix" in data && data.nameSuffix != undefined) {
                    this.nameSuffix = data.nameSuffix;
                }
                if ("nickname" in data && data.nickname != undefined) {
                    this.nickname = data.nickname;
                }
                if ("phoneticRepresentation" in data && data.phoneticRepresentation != undefined) {
                    this.phoneticRepresentation = data.phoneticRepresentation;
                }
            }
        }
        get familyName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set familyName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get givenName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set givenName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get middleName() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set middleName(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get namePrefix() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set namePrefix(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get nameSuffix() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set nameSuffix(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get nickname() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set nickname(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get phoneticRepresentation() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set phoneticRepresentation(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            familyName?: string;
            givenName?: string;
            middleName?: string;
            namePrefix?: string;
            nameSuffix?: string;
            nickname?: string;
            phoneticRepresentation?: string;
        }): SemanticPersonName {
            const message = new SemanticPersonName({});
            if (data.familyName != null) {
                message.familyName = data.familyName;
            }
            if (data.givenName != null) {
                message.givenName = data.givenName;
            }
            if (data.middleName != null) {
                message.middleName = data.middleName;
            }
            if (data.namePrefix != null) {
                message.namePrefix = data.namePrefix;
            }
            if (data.nameSuffix != null) {
                message.nameSuffix = data.nameSuffix;
            }
            if (data.nickname != null) {
                message.nickname = data.nickname;
            }
            if (data.phoneticRepresentation != null) {
                message.phoneticRepresentation = data.phoneticRepresentation;
            }
            return message;
        }
        toObject() {
            const data: {
                familyName?: string;
                givenName?: string;
                middleName?: string;
                namePrefix?: string;
                nameSuffix?: string;
                nickname?: string;
                phoneticRepresentation?: string;
            } = {};
            if (this.familyName != null) {
                data.familyName = this.familyName;
            }
            if (this.givenName != null) {
                data.givenName = this.givenName;
            }
            if (this.middleName != null) {
                data.middleName = this.middleName;
            }
            if (this.namePrefix != null) {
                data.namePrefix = this.namePrefix;
            }
            if (this.nameSuffix != null) {
                data.nameSuffix = this.nameSuffix;
            }
            if (this.nickname != null) {
                data.nickname = this.nickname;
            }
            if (this.phoneticRepresentation != null) {
                data.phoneticRepresentation = this.phoneticRepresentation;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.familyName.length)
                writer.writeString(1, this.familyName);
            if (this.givenName.length)
                writer.writeString(2, this.givenName);
            if (this.middleName.length)
                writer.writeString(3, this.middleName);
            if (this.namePrefix.length)
                writer.writeString(4, this.namePrefix);
            if (this.nameSuffix.length)
                writer.writeString(5, this.nameSuffix);
            if (this.nickname.length)
                writer.writeString(6, this.nickname);
            if (this.phoneticRepresentation.length)
                writer.writeString(7, this.phoneticRepresentation);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SemanticPersonName {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SemanticPersonName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.familyName = reader.readString();
                        break;
                    case 2:
                        message.givenName = reader.readString();
                        break;
                    case 3:
                        message.middleName = reader.readString();
                        break;
                    case 4:
                        message.namePrefix = reader.readString();
                        break;
                    case 5:
                        message.nameSuffix = reader.readString();
                        break;
                    case 6:
                        message.nickname = reader.readString();
                        break;
                    case 7:
                        message.phoneticRepresentation = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SemanticPersonName {
            return SemanticPersonName.deserialize(bytes);
        }
    }
    export class SemanticSeat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            seatDescription?: string;
            seatIdentifier?: string;
            seatNumber?: string;
            seatRow?: string;
            seatSection?: string;
            seatType?: string;
            seatSectionColor?: string;
            seatLevel?: string;
            seatAisle?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("seatDescription" in data && data.seatDescription != undefined) {
                    this.seatDescription = data.seatDescription;
                }
                if ("seatIdentifier" in data && data.seatIdentifier != undefined) {
                    this.seatIdentifier = data.seatIdentifier;
                }
                if ("seatNumber" in data && data.seatNumber != undefined) {
                    this.seatNumber = data.seatNumber;
                }
                if ("seatRow" in data && data.seatRow != undefined) {
                    this.seatRow = data.seatRow;
                }
                if ("seatSection" in data && data.seatSection != undefined) {
                    this.seatSection = data.seatSection;
                }
                if ("seatType" in data && data.seatType != undefined) {
                    this.seatType = data.seatType;
                }
                if ("seatSectionColor" in data && data.seatSectionColor != undefined) {
                    this.seatSectionColor = data.seatSectionColor;
                }
                if ("seatLevel" in data && data.seatLevel != undefined) {
                    this.seatLevel = data.seatLevel;
                }
                if ("seatAisle" in data && data.seatAisle != undefined) {
                    this.seatAisle = data.seatAisle;
                }
            }
        }
        get seatDescription() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set seatDescription(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get seatIdentifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set seatIdentifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get seatNumber() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set seatNumber(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get seatRow() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set seatRow(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get seatSection() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set seatSection(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get seatType() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set seatType(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get seatSectionColor() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set seatSectionColor(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get seatLevel() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set seatLevel(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get seatAisle() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set seatAisle(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            seatDescription?: string;
            seatIdentifier?: string;
            seatNumber?: string;
            seatRow?: string;
            seatSection?: string;
            seatType?: string;
            seatSectionColor?: string;
            seatLevel?: string;
            seatAisle?: string;
        }): SemanticSeat {
            const message = new SemanticSeat({});
            if (data.seatDescription != null) {
                message.seatDescription = data.seatDescription;
            }
            if (data.seatIdentifier != null) {
                message.seatIdentifier = data.seatIdentifier;
            }
            if (data.seatNumber != null) {
                message.seatNumber = data.seatNumber;
            }
            if (data.seatRow != null) {
                message.seatRow = data.seatRow;
            }
            if (data.seatSection != null) {
                message.seatSection = data.seatSection;
            }
            if (data.seatType != null) {
                message.seatType = data.seatType;
            }
            if (data.seatSectionColor != null) {
                message.seatSectionColor = data.seatSectionColor;
            }
            if (data.seatLevel != null) {
                message.seatLevel = data.seatLevel;
            }
            if (data.seatAisle != null) {
                message.seatAisle = data.seatAisle;
            }
            return message;
        }
        toObject() {
            const data: {
                seatDescription?: string;
                seatIdentifier?: string;
                seatNumber?: string;
                seatRow?: string;
                seatSection?: string;
                seatType?: string;
                seatSectionColor?: string;
                seatLevel?: string;
                seatAisle?: string;
            } = {};
            if (this.seatDescription != null) {
                data.seatDescription = this.seatDescription;
            }
            if (this.seatIdentifier != null) {
                data.seatIdentifier = this.seatIdentifier;
            }
            if (this.seatNumber != null) {
                data.seatNumber = this.seatNumber;
            }
            if (this.seatRow != null) {
                data.seatRow = this.seatRow;
            }
            if (this.seatSection != null) {
                data.seatSection = this.seatSection;
            }
            if (this.seatType != null) {
                data.seatType = this.seatType;
            }
            if (this.seatSectionColor != null) {
                data.seatSectionColor = this.seatSectionColor;
            }
            if (this.seatLevel != null) {
                data.seatLevel = this.seatLevel;
            }
            if (this.seatAisle != null) {
                data.seatAisle = this.seatAisle;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.seatDescription.length)
                writer.writeString(1, this.seatDescription);
            if (this.seatIdentifier.length)
                writer.writeString(2, this.seatIdentifier);
            if (this.seatNumber.length)
                writer.writeString(3, this.seatNumber);
            if (this.seatRow.length)
                writer.writeString(4, this.seatRow);
            if (this.seatSection.length)
                writer.writeString(5, this.seatSection);
            if (this.seatType.length)
                writer.writeString(6, this.seatType);
            if (this.seatSectionColor.length)
                writer.writeString(7, this.seatSectionColor);
            if (this.seatLevel.length)
                writer.writeString(8, this.seatLevel);
            if (this.seatAisle.length)
                writer.writeString(9, this.seatAisle);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SemanticSeat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SemanticSeat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.seatDescription = reader.readString();
                        break;
                    case 2:
                        message.seatIdentifier = reader.readString();
                        break;
                    case 3:
                        message.seatNumber = reader.readString();
                        break;
                    case 4:
                        message.seatRow = reader.readString();
                        break;
                    case 5:
                        message.seatSection = reader.readString();
                        break;
                    case 6:
                        message.seatType = reader.readString();
                        break;
                    case 7:
                        message.seatSectionColor = reader.readString();
                        break;
                    case 8:
                        message.seatLevel = reader.readString();
                        break;
                    case 9:
                        message.seatAisle = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SemanticSeat {
            return SemanticSeat.deserialize(bytes);
        }
    }
    export class SemanticWifiNetwork extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            password?: string;
            ssid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("ssid" in data && data.ssid != undefined) {
                    this.ssid = data.ssid;
                }
            }
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ssid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ssid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            password?: string;
            ssid?: string;
        }): SemanticWifiNetwork {
            const message = new SemanticWifiNetwork({});
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.ssid != null) {
                message.ssid = data.ssid;
            }
            return message;
        }
        toObject() {
            const data: {
                password?: string;
                ssid?: string;
            } = {};
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.ssid != null) {
                data.ssid = this.ssid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.password.length)
                writer.writeString(1, this.password);
            if (this.ssid.length)
                writer.writeString(2, this.ssid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SemanticWifiNetwork {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SemanticWifiNetwork();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.password = reader.readString();
                        break;
                    case 2:
                        message.ssid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SemanticWifiNetwork {
            return SemanticWifiNetwork.deserialize(bytes);
        }
    }
    export class SemanticEventDateInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            date?: dependency_1.google.protobuf.Timestamp;
            ignoreTimeComponents?: boolean;
            timeZone?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("date" in data && data.date != undefined) {
                    this.date = data.date;
                }
                if ("ignoreTimeComponents" in data && data.ignoreTimeComponents != undefined) {
                    this.ignoreTimeComponents = data.ignoreTimeComponents;
                }
                if ("timeZone" in data && data.timeZone != undefined) {
                    this.timeZone = data.timeZone;
                }
            }
        }
        get date() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 1) as dependency_1.google.protobuf.Timestamp;
        }
        set date(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get hasDate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ignoreTimeComponents() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set ignoreTimeComponents(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get timeZone() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set timeZone(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            ignoreTimeComponents?: boolean;
            timeZone?: string;
        }): SemanticEventDateInfo {
            const message = new SemanticEventDateInfo({});
            if (data.date != null) {
                message.date = dependency_1.google.protobuf.Timestamp.fromObject(data.date);
            }
            if (data.ignoreTimeComponents != null) {
                message.ignoreTimeComponents = data.ignoreTimeComponents;
            }
            if (data.timeZone != null) {
                message.timeZone = data.timeZone;
            }
            return message;
        }
        toObject() {
            const data: {
                date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                ignoreTimeComponents?: boolean;
                timeZone?: string;
            } = {};
            if (this.date != null) {
                data.date = this.date.toObject();
            }
            if (this.ignoreTimeComponents != null) {
                data.ignoreTimeComponents = this.ignoreTimeComponents;
            }
            if (this.timeZone != null) {
                data.timeZone = this.timeZone;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hasDate)
                writer.writeMessage(1, this.date, () => this.date.serialize(writer));
            if (this.ignoreTimeComponents != false)
                writer.writeBool(2, this.ignoreTimeComponents);
            if (this.timeZone.length)
                writer.writeString(3, this.timeZone);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SemanticEventDateInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SemanticEventDateInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.date, () => message.date = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 2:
                        message.ignoreTimeComponents = reader.readBool();
                        break;
                    case 3:
                        message.timeZone = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SemanticEventDateInfo {
            return SemanticEventDateInfo.deserialize(bytes);
        }
    }
    export class EventSemanticTags extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            artistIds?: string[];
            awayTeamAbbreviation?: string;
            localizedAwayTeamAbbreviation?: dependency_2.io.LocalizedString;
            awayTeamLocation?: string;
            localizedAwayTeamLocation?: dependency_2.io.LocalizedString;
            awayTeamName?: string;
            localizedAwayTeamName?: dependency_2.io.LocalizedString;
            eventEndDate?: dependency_1.google.protobuf.Timestamp;
            eventName?: string;
            localizedEventName?: dependency_2.io.LocalizedString;
            eventStartDate?: dependency_1.google.protobuf.Timestamp;
            genre?: string;
            localizedGenre?: dependency_2.io.LocalizedString;
            homeTeamAbbreviation?: string;
            localizedHomeTeamAbbreviation?: dependency_2.io.LocalizedString;
            homeTeamLocation?: string;
            localizedHomeTeamLocation?: dependency_2.io.LocalizedString;
            homeTeamName?: string;
            localizedHomeTeamName?: dependency_2.io.LocalizedString;
            leagueAbbreviation?: string;
            localizedLeagueAbbreviation?: dependency_2.io.LocalizedString;
            leagueName?: string;
            localizedLeagueName?: dependency_2.io.LocalizedString;
            performerNames?: string[];
            silenceRequested?: boolean;
            sportName?: string;
            localizedSportName?: dependency_2.io.LocalizedString;
            venueLocation?: SemanticLocation;
            venuePhoneNumber?: string;
            venueRoom?: string;
            localizedVenueRoom?: dependency_2.io.LocalizedString;
            wifiAccess?: SemanticWifiNetwork[];
            venueRegionName?: string;
            localizedVenueRegionName?: dependency_2.io.LocalizedString;
            tailgatingAllowed?: boolean;
            entranceDescription?: string;
            localizedEntranceDescription?: dependency_2.io.LocalizedString;
            venueGatesOpenDate?: dependency_1.google.protobuf.Timestamp;
            venueFanZoneOpenDate?: dependency_1.google.protobuf.Timestamp;
            venueParkingLotsOpenDate?: dependency_1.google.protobuf.Timestamp;
            venueBoxOfficeOpenDate?: dependency_1.google.protobuf.Timestamp;
            venueOpenDate?: dependency_1.google.protobuf.Timestamp;
            venueCloseDate?: dependency_1.google.protobuf.Timestamp;
            playlistIds?: string[];
            albumIds?: string[];
            eventStartDateInfo?: SemanticEventDateInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 24, 32, 44, 45], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("artistIds" in data && data.artistIds != undefined) {
                    this.artistIds = data.artistIds;
                }
                if ("awayTeamAbbreviation" in data && data.awayTeamAbbreviation != undefined) {
                    this.awayTeamAbbreviation = data.awayTeamAbbreviation;
                }
                if ("localizedAwayTeamAbbreviation" in data && data.localizedAwayTeamAbbreviation != undefined) {
                    this.localizedAwayTeamAbbreviation = data.localizedAwayTeamAbbreviation;
                }
                if ("awayTeamLocation" in data && data.awayTeamLocation != undefined) {
                    this.awayTeamLocation = data.awayTeamLocation;
                }
                if ("localizedAwayTeamLocation" in data && data.localizedAwayTeamLocation != undefined) {
                    this.localizedAwayTeamLocation = data.localizedAwayTeamLocation;
                }
                if ("awayTeamName" in data && data.awayTeamName != undefined) {
                    this.awayTeamName = data.awayTeamName;
                }
                if ("localizedAwayTeamName" in data && data.localizedAwayTeamName != undefined) {
                    this.localizedAwayTeamName = data.localizedAwayTeamName;
                }
                if ("eventEndDate" in data && data.eventEndDate != undefined) {
                    this.eventEndDate = data.eventEndDate;
                }
                if ("eventName" in data && data.eventName != undefined) {
                    this.eventName = data.eventName;
                }
                if ("localizedEventName" in data && data.localizedEventName != undefined) {
                    this.localizedEventName = data.localizedEventName;
                }
                if ("eventStartDate" in data && data.eventStartDate != undefined) {
                    this.eventStartDate = data.eventStartDate;
                }
                if ("genre" in data && data.genre != undefined) {
                    this.genre = data.genre;
                }
                if ("localizedGenre" in data && data.localizedGenre != undefined) {
                    this.localizedGenre = data.localizedGenre;
                }
                if ("homeTeamAbbreviation" in data && data.homeTeamAbbreviation != undefined) {
                    this.homeTeamAbbreviation = data.homeTeamAbbreviation;
                }
                if ("localizedHomeTeamAbbreviation" in data && data.localizedHomeTeamAbbreviation != undefined) {
                    this.localizedHomeTeamAbbreviation = data.localizedHomeTeamAbbreviation;
                }
                if ("homeTeamLocation" in data && data.homeTeamLocation != undefined) {
                    this.homeTeamLocation = data.homeTeamLocation;
                }
                if ("localizedHomeTeamLocation" in data && data.localizedHomeTeamLocation != undefined) {
                    this.localizedHomeTeamLocation = data.localizedHomeTeamLocation;
                }
                if ("homeTeamName" in data && data.homeTeamName != undefined) {
                    this.homeTeamName = data.homeTeamName;
                }
                if ("localizedHomeTeamName" in data && data.localizedHomeTeamName != undefined) {
                    this.localizedHomeTeamName = data.localizedHomeTeamName;
                }
                if ("leagueAbbreviation" in data && data.leagueAbbreviation != undefined) {
                    this.leagueAbbreviation = data.leagueAbbreviation;
                }
                if ("localizedLeagueAbbreviation" in data && data.localizedLeagueAbbreviation != undefined) {
                    this.localizedLeagueAbbreviation = data.localizedLeagueAbbreviation;
                }
                if ("leagueName" in data && data.leagueName != undefined) {
                    this.leagueName = data.leagueName;
                }
                if ("localizedLeagueName" in data && data.localizedLeagueName != undefined) {
                    this.localizedLeagueName = data.localizedLeagueName;
                }
                if ("performerNames" in data && data.performerNames != undefined) {
                    this.performerNames = data.performerNames;
                }
                if ("silenceRequested" in data && data.silenceRequested != undefined) {
                    this.silenceRequested = data.silenceRequested;
                }
                if ("sportName" in data && data.sportName != undefined) {
                    this.sportName = data.sportName;
                }
                if ("localizedSportName" in data && data.localizedSportName != undefined) {
                    this.localizedSportName = data.localizedSportName;
                }
                if ("venueLocation" in data && data.venueLocation != undefined) {
                    this.venueLocation = data.venueLocation;
                }
                if ("venuePhoneNumber" in data && data.venuePhoneNumber != undefined) {
                    this.venuePhoneNumber = data.venuePhoneNumber;
                }
                if ("venueRoom" in data && data.venueRoom != undefined) {
                    this.venueRoom = data.venueRoom;
                }
                if ("localizedVenueRoom" in data && data.localizedVenueRoom != undefined) {
                    this.localizedVenueRoom = data.localizedVenueRoom;
                }
                if ("wifiAccess" in data && data.wifiAccess != undefined) {
                    this.wifiAccess = data.wifiAccess;
                }
                if ("venueRegionName" in data && data.venueRegionName != undefined) {
                    this.venueRegionName = data.venueRegionName;
                }
                if ("localizedVenueRegionName" in data && data.localizedVenueRegionName != undefined) {
                    this.localizedVenueRegionName = data.localizedVenueRegionName;
                }
                if ("tailgatingAllowed" in data && data.tailgatingAllowed != undefined) {
                    this.tailgatingAllowed = data.tailgatingAllowed;
                }
                if ("entranceDescription" in data && data.entranceDescription != undefined) {
                    this.entranceDescription = data.entranceDescription;
                }
                if ("localizedEntranceDescription" in data && data.localizedEntranceDescription != undefined) {
                    this.localizedEntranceDescription = data.localizedEntranceDescription;
                }
                if ("venueGatesOpenDate" in data && data.venueGatesOpenDate != undefined) {
                    this.venueGatesOpenDate = data.venueGatesOpenDate;
                }
                if ("venueFanZoneOpenDate" in data && data.venueFanZoneOpenDate != undefined) {
                    this.venueFanZoneOpenDate = data.venueFanZoneOpenDate;
                }
                if ("venueParkingLotsOpenDate" in data && data.venueParkingLotsOpenDate != undefined) {
                    this.venueParkingLotsOpenDate = data.venueParkingLotsOpenDate;
                }
                if ("venueBoxOfficeOpenDate" in data && data.venueBoxOfficeOpenDate != undefined) {
                    this.venueBoxOfficeOpenDate = data.venueBoxOfficeOpenDate;
                }
                if ("venueOpenDate" in data && data.venueOpenDate != undefined) {
                    this.venueOpenDate = data.venueOpenDate;
                }
                if ("venueCloseDate" in data && data.venueCloseDate != undefined) {
                    this.venueCloseDate = data.venueCloseDate;
                }
                if ("playlistIds" in data && data.playlistIds != undefined) {
                    this.playlistIds = data.playlistIds;
                }
                if ("albumIds" in data && data.albumIds != undefined) {
                    this.albumIds = data.albumIds;
                }
                if ("eventStartDateInfo" in data && data.eventStartDateInfo != undefined) {
                    this.eventStartDateInfo = data.eventStartDateInfo;
                }
            }
        }
        get artistIds() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set artistIds(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get awayTeamAbbreviation() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set awayTeamAbbreviation(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get localizedAwayTeamAbbreviation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 3) as dependency_2.io.LocalizedString;
        }
        set localizedAwayTeamAbbreviation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get hasLocalizedAwayTeamAbbreviation() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get awayTeamLocation() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set awayTeamLocation(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get localizedAwayTeamLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 5) as dependency_2.io.LocalizedString;
        }
        set localizedAwayTeamLocation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get hasLocalizedAwayTeamLocation() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get awayTeamName() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set awayTeamName(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get localizedAwayTeamName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 7) as dependency_2.io.LocalizedString;
        }
        set localizedAwayTeamName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get hasLocalizedAwayTeamName() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get eventEndDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 8) as dependency_1.google.protobuf.Timestamp;
        }
        set eventEndDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasEventEndDate() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get eventName() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set eventName(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get localizedEventName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 10) as dependency_2.io.LocalizedString;
        }
        set localizedEventName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasLocalizedEventName() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get eventStartDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 11) as dependency_1.google.protobuf.Timestamp;
        }
        set eventStartDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 11, value);
        }
        get hasEventStartDate() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get genre() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set genre(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get localizedGenre() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 13) as dependency_2.io.LocalizedString;
        }
        set localizedGenre(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasLocalizedGenre() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get homeTeamAbbreviation() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set homeTeamAbbreviation(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get localizedHomeTeamAbbreviation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 15) as dependency_2.io.LocalizedString;
        }
        set localizedHomeTeamAbbreviation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get hasLocalizedHomeTeamAbbreviation() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get homeTeamLocation() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set homeTeamLocation(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get localizedHomeTeamLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 17) as dependency_2.io.LocalizedString;
        }
        set localizedHomeTeamLocation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get hasLocalizedHomeTeamLocation() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get homeTeamName() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set homeTeamName(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get localizedHomeTeamName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 19) as dependency_2.io.LocalizedString;
        }
        set localizedHomeTeamName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get hasLocalizedHomeTeamName() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get leagueAbbreviation() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set leagueAbbreviation(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get localizedLeagueAbbreviation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 21) as dependency_2.io.LocalizedString;
        }
        set localizedLeagueAbbreviation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 21, value);
        }
        get hasLocalizedLeagueAbbreviation() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get leagueName() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set leagueName(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get localizedLeagueName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 23) as dependency_2.io.LocalizedString;
        }
        set localizedLeagueName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 23, value);
        }
        get hasLocalizedLeagueName() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get performerNames() {
            return pb_1.Message.getFieldWithDefault(this, 24, []) as string[];
        }
        set performerNames(value: string[]) {
            pb_1.Message.setField(this, 24, value);
        }
        get silenceRequested() {
            return pb_1.Message.getFieldWithDefault(this, 25, false) as boolean;
        }
        set silenceRequested(value: boolean) {
            pb_1.Message.setField(this, 25, value);
        }
        get sportName() {
            return pb_1.Message.getFieldWithDefault(this, 26, "") as string;
        }
        set sportName(value: string) {
            pb_1.Message.setField(this, 26, value);
        }
        get localizedSportName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 27) as dependency_2.io.LocalizedString;
        }
        set localizedSportName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 27, value);
        }
        get hasLocalizedSportName() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get venueLocation() {
            return pb_1.Message.getWrapperField(this, SemanticLocation, 28) as SemanticLocation;
        }
        set venueLocation(value: SemanticLocation) {
            pb_1.Message.setWrapperField(this, 28, value);
        }
        get hasVenueLocation() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get venuePhoneNumber() {
            return pb_1.Message.getFieldWithDefault(this, 29, "") as string;
        }
        set venuePhoneNumber(value: string) {
            pb_1.Message.setField(this, 29, value);
        }
        get venueRoom() {
            return pb_1.Message.getFieldWithDefault(this, 30, "") as string;
        }
        set venueRoom(value: string) {
            pb_1.Message.setField(this, 30, value);
        }
        get localizedVenueRoom() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 31) as dependency_2.io.LocalizedString;
        }
        set localizedVenueRoom(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 31, value);
        }
        get hasLocalizedVenueRoom() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get wifiAccess() {
            return pb_1.Message.getRepeatedWrapperField(this, SemanticWifiNetwork, 32) as SemanticWifiNetwork[];
        }
        set wifiAccess(value: SemanticWifiNetwork[]) {
            pb_1.Message.setRepeatedWrapperField(this, 32, value);
        }
        get venueRegionName() {
            return pb_1.Message.getFieldWithDefault(this, 33, "") as string;
        }
        set venueRegionName(value: string) {
            pb_1.Message.setField(this, 33, value);
        }
        get localizedVenueRegionName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 34) as dependency_2.io.LocalizedString;
        }
        set localizedVenueRegionName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 34, value);
        }
        get hasLocalizedVenueRegionName() {
            return pb_1.Message.getField(this, 34) != null;
        }
        get tailgatingAllowed() {
            return pb_1.Message.getFieldWithDefault(this, 35, false) as boolean;
        }
        set tailgatingAllowed(value: boolean) {
            pb_1.Message.setField(this, 35, value);
        }
        get entranceDescription() {
            return pb_1.Message.getFieldWithDefault(this, 36, "") as string;
        }
        set entranceDescription(value: string) {
            pb_1.Message.setField(this, 36, value);
        }
        get localizedEntranceDescription() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 37) as dependency_2.io.LocalizedString;
        }
        set localizedEntranceDescription(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 37, value);
        }
        get hasLocalizedEntranceDescription() {
            return pb_1.Message.getField(this, 37) != null;
        }
        get venueGatesOpenDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 38) as dependency_1.google.protobuf.Timestamp;
        }
        set venueGatesOpenDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 38, value);
        }
        get hasVenueGatesOpenDate() {
            return pb_1.Message.getField(this, 38) != null;
        }
        get venueFanZoneOpenDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 39) as dependency_1.google.protobuf.Timestamp;
        }
        set venueFanZoneOpenDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 39, value);
        }
        get hasVenueFanZoneOpenDate() {
            return pb_1.Message.getField(this, 39) != null;
        }
        get venueParkingLotsOpenDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 40) as dependency_1.google.protobuf.Timestamp;
        }
        set venueParkingLotsOpenDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 40, value);
        }
        get hasVenueParkingLotsOpenDate() {
            return pb_1.Message.getField(this, 40) != null;
        }
        get venueBoxOfficeOpenDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 41) as dependency_1.google.protobuf.Timestamp;
        }
        set venueBoxOfficeOpenDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 41, value);
        }
        get hasVenueBoxOfficeOpenDate() {
            return pb_1.Message.getField(this, 41) != null;
        }
        get venueOpenDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 42) as dependency_1.google.protobuf.Timestamp;
        }
        set venueOpenDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 42, value);
        }
        get hasVenueOpenDate() {
            return pb_1.Message.getField(this, 42) != null;
        }
        get venueCloseDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 43) as dependency_1.google.protobuf.Timestamp;
        }
        set venueCloseDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 43, value);
        }
        get hasVenueCloseDate() {
            return pb_1.Message.getField(this, 43) != null;
        }
        get playlistIds() {
            return pb_1.Message.getFieldWithDefault(this, 44, []) as string[];
        }
        set playlistIds(value: string[]) {
            pb_1.Message.setField(this, 44, value);
        }
        get albumIds() {
            return pb_1.Message.getFieldWithDefault(this, 45, []) as string[];
        }
        set albumIds(value: string[]) {
            pb_1.Message.setField(this, 45, value);
        }
        get eventStartDateInfo() {
            return pb_1.Message.getWrapperField(this, SemanticEventDateInfo, 46) as SemanticEventDateInfo;
        }
        set eventStartDateInfo(value: SemanticEventDateInfo) {
            pb_1.Message.setWrapperField(this, 46, value);
        }
        get hasEventStartDateInfo() {
            return pb_1.Message.getField(this, 46) != null;
        }
        static fromObject(data: {
            artistIds?: string[];
            awayTeamAbbreviation?: string;
            localizedAwayTeamAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            awayTeamLocation?: string;
            localizedAwayTeamLocation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            awayTeamName?: string;
            localizedAwayTeamName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            eventEndDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            eventName?: string;
            localizedEventName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            eventStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            genre?: string;
            localizedGenre?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            homeTeamAbbreviation?: string;
            localizedHomeTeamAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            homeTeamLocation?: string;
            localizedHomeTeamLocation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            homeTeamName?: string;
            localizedHomeTeamName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            leagueAbbreviation?: string;
            localizedLeagueAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            leagueName?: string;
            localizedLeagueName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            performerNames?: string[];
            silenceRequested?: boolean;
            sportName?: string;
            localizedSportName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            venueLocation?: ReturnType<typeof SemanticLocation.prototype.toObject>;
            venuePhoneNumber?: string;
            venueRoom?: string;
            localizedVenueRoom?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            wifiAccess?: ReturnType<typeof SemanticWifiNetwork.prototype.toObject>[];
            venueRegionName?: string;
            localizedVenueRegionName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            tailgatingAllowed?: boolean;
            entranceDescription?: string;
            localizedEntranceDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            venueGatesOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            venueFanZoneOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            venueParkingLotsOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            venueBoxOfficeOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            venueOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            venueCloseDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            playlistIds?: string[];
            albumIds?: string[];
            eventStartDateInfo?: ReturnType<typeof SemanticEventDateInfo.prototype.toObject>;
        }): EventSemanticTags {
            const message = new EventSemanticTags({});
            if (data.artistIds != null) {
                message.artistIds = data.artistIds;
            }
            if (data.awayTeamAbbreviation != null) {
                message.awayTeamAbbreviation = data.awayTeamAbbreviation;
            }
            if (data.localizedAwayTeamAbbreviation != null) {
                message.localizedAwayTeamAbbreviation = dependency_2.io.LocalizedString.fromObject(data.localizedAwayTeamAbbreviation);
            }
            if (data.awayTeamLocation != null) {
                message.awayTeamLocation = data.awayTeamLocation;
            }
            if (data.localizedAwayTeamLocation != null) {
                message.localizedAwayTeamLocation = dependency_2.io.LocalizedString.fromObject(data.localizedAwayTeamLocation);
            }
            if (data.awayTeamName != null) {
                message.awayTeamName = data.awayTeamName;
            }
            if (data.localizedAwayTeamName != null) {
                message.localizedAwayTeamName = dependency_2.io.LocalizedString.fromObject(data.localizedAwayTeamName);
            }
            if (data.eventEndDate != null) {
                message.eventEndDate = dependency_1.google.protobuf.Timestamp.fromObject(data.eventEndDate);
            }
            if (data.eventName != null) {
                message.eventName = data.eventName;
            }
            if (data.localizedEventName != null) {
                message.localizedEventName = dependency_2.io.LocalizedString.fromObject(data.localizedEventName);
            }
            if (data.eventStartDate != null) {
                message.eventStartDate = dependency_1.google.protobuf.Timestamp.fromObject(data.eventStartDate);
            }
            if (data.genre != null) {
                message.genre = data.genre;
            }
            if (data.localizedGenre != null) {
                message.localizedGenre = dependency_2.io.LocalizedString.fromObject(data.localizedGenre);
            }
            if (data.homeTeamAbbreviation != null) {
                message.homeTeamAbbreviation = data.homeTeamAbbreviation;
            }
            if (data.localizedHomeTeamAbbreviation != null) {
                message.localizedHomeTeamAbbreviation = dependency_2.io.LocalizedString.fromObject(data.localizedHomeTeamAbbreviation);
            }
            if (data.homeTeamLocation != null) {
                message.homeTeamLocation = data.homeTeamLocation;
            }
            if (data.localizedHomeTeamLocation != null) {
                message.localizedHomeTeamLocation = dependency_2.io.LocalizedString.fromObject(data.localizedHomeTeamLocation);
            }
            if (data.homeTeamName != null) {
                message.homeTeamName = data.homeTeamName;
            }
            if (data.localizedHomeTeamName != null) {
                message.localizedHomeTeamName = dependency_2.io.LocalizedString.fromObject(data.localizedHomeTeamName);
            }
            if (data.leagueAbbreviation != null) {
                message.leagueAbbreviation = data.leagueAbbreviation;
            }
            if (data.localizedLeagueAbbreviation != null) {
                message.localizedLeagueAbbreviation = dependency_2.io.LocalizedString.fromObject(data.localizedLeagueAbbreviation);
            }
            if (data.leagueName != null) {
                message.leagueName = data.leagueName;
            }
            if (data.localizedLeagueName != null) {
                message.localizedLeagueName = dependency_2.io.LocalizedString.fromObject(data.localizedLeagueName);
            }
            if (data.performerNames != null) {
                message.performerNames = data.performerNames;
            }
            if (data.silenceRequested != null) {
                message.silenceRequested = data.silenceRequested;
            }
            if (data.sportName != null) {
                message.sportName = data.sportName;
            }
            if (data.localizedSportName != null) {
                message.localizedSportName = dependency_2.io.LocalizedString.fromObject(data.localizedSportName);
            }
            if (data.venueLocation != null) {
                message.venueLocation = SemanticLocation.fromObject(data.venueLocation);
            }
            if (data.venuePhoneNumber != null) {
                message.venuePhoneNumber = data.venuePhoneNumber;
            }
            if (data.venueRoom != null) {
                message.venueRoom = data.venueRoom;
            }
            if (data.localizedVenueRoom != null) {
                message.localizedVenueRoom = dependency_2.io.LocalizedString.fromObject(data.localizedVenueRoom);
            }
            if (data.wifiAccess != null) {
                message.wifiAccess = data.wifiAccess.map(item => SemanticWifiNetwork.fromObject(item));
            }
            if (data.venueRegionName != null) {
                message.venueRegionName = data.venueRegionName;
            }
            if (data.localizedVenueRegionName != null) {
                message.localizedVenueRegionName = dependency_2.io.LocalizedString.fromObject(data.localizedVenueRegionName);
            }
            if (data.tailgatingAllowed != null) {
                message.tailgatingAllowed = data.tailgatingAllowed;
            }
            if (data.entranceDescription != null) {
                message.entranceDescription = data.entranceDescription;
            }
            if (data.localizedEntranceDescription != null) {
                message.localizedEntranceDescription = dependency_2.io.LocalizedString.fromObject(data.localizedEntranceDescription);
            }
            if (data.venueGatesOpenDate != null) {
                message.venueGatesOpenDate = dependency_1.google.protobuf.Timestamp.fromObject(data.venueGatesOpenDate);
            }
            if (data.venueFanZoneOpenDate != null) {
                message.venueFanZoneOpenDate = dependency_1.google.protobuf.Timestamp.fromObject(data.venueFanZoneOpenDate);
            }
            if (data.venueParkingLotsOpenDate != null) {
                message.venueParkingLotsOpenDate = dependency_1.google.protobuf.Timestamp.fromObject(data.venueParkingLotsOpenDate);
            }
            if (data.venueBoxOfficeOpenDate != null) {
                message.venueBoxOfficeOpenDate = dependency_1.google.protobuf.Timestamp.fromObject(data.venueBoxOfficeOpenDate);
            }
            if (data.venueOpenDate != null) {
                message.venueOpenDate = dependency_1.google.protobuf.Timestamp.fromObject(data.venueOpenDate);
            }
            if (data.venueCloseDate != null) {
                message.venueCloseDate = dependency_1.google.protobuf.Timestamp.fromObject(data.venueCloseDate);
            }
            if (data.playlistIds != null) {
                message.playlistIds = data.playlistIds;
            }
            if (data.albumIds != null) {
                message.albumIds = data.albumIds;
            }
            if (data.eventStartDateInfo != null) {
                message.eventStartDateInfo = SemanticEventDateInfo.fromObject(data.eventStartDateInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                artistIds?: string[];
                awayTeamAbbreviation?: string;
                localizedAwayTeamAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                awayTeamLocation?: string;
                localizedAwayTeamLocation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                awayTeamName?: string;
                localizedAwayTeamName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                eventEndDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                eventName?: string;
                localizedEventName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                eventStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                genre?: string;
                localizedGenre?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                homeTeamAbbreviation?: string;
                localizedHomeTeamAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                homeTeamLocation?: string;
                localizedHomeTeamLocation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                homeTeamName?: string;
                localizedHomeTeamName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                leagueAbbreviation?: string;
                localizedLeagueAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                leagueName?: string;
                localizedLeagueName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                performerNames?: string[];
                silenceRequested?: boolean;
                sportName?: string;
                localizedSportName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                venueLocation?: ReturnType<typeof SemanticLocation.prototype.toObject>;
                venuePhoneNumber?: string;
                venueRoom?: string;
                localizedVenueRoom?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                wifiAccess?: ReturnType<typeof SemanticWifiNetwork.prototype.toObject>[];
                venueRegionName?: string;
                localizedVenueRegionName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                tailgatingAllowed?: boolean;
                entranceDescription?: string;
                localizedEntranceDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                venueGatesOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                venueFanZoneOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                venueParkingLotsOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                venueBoxOfficeOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                venueOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                venueCloseDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                playlistIds?: string[];
                albumIds?: string[];
                eventStartDateInfo?: ReturnType<typeof SemanticEventDateInfo.prototype.toObject>;
            } = {};
            if (this.artistIds != null) {
                data.artistIds = this.artistIds;
            }
            if (this.awayTeamAbbreviation != null) {
                data.awayTeamAbbreviation = this.awayTeamAbbreviation;
            }
            if (this.localizedAwayTeamAbbreviation != null) {
                data.localizedAwayTeamAbbreviation = this.localizedAwayTeamAbbreviation.toObject();
            }
            if (this.awayTeamLocation != null) {
                data.awayTeamLocation = this.awayTeamLocation;
            }
            if (this.localizedAwayTeamLocation != null) {
                data.localizedAwayTeamLocation = this.localizedAwayTeamLocation.toObject();
            }
            if (this.awayTeamName != null) {
                data.awayTeamName = this.awayTeamName;
            }
            if (this.localizedAwayTeamName != null) {
                data.localizedAwayTeamName = this.localizedAwayTeamName.toObject();
            }
            if (this.eventEndDate != null) {
                data.eventEndDate = this.eventEndDate.toObject();
            }
            if (this.eventName != null) {
                data.eventName = this.eventName;
            }
            if (this.localizedEventName != null) {
                data.localizedEventName = this.localizedEventName.toObject();
            }
            if (this.eventStartDate != null) {
                data.eventStartDate = this.eventStartDate.toObject();
            }
            if (this.genre != null) {
                data.genre = this.genre;
            }
            if (this.localizedGenre != null) {
                data.localizedGenre = this.localizedGenre.toObject();
            }
            if (this.homeTeamAbbreviation != null) {
                data.homeTeamAbbreviation = this.homeTeamAbbreviation;
            }
            if (this.localizedHomeTeamAbbreviation != null) {
                data.localizedHomeTeamAbbreviation = this.localizedHomeTeamAbbreviation.toObject();
            }
            if (this.homeTeamLocation != null) {
                data.homeTeamLocation = this.homeTeamLocation;
            }
            if (this.localizedHomeTeamLocation != null) {
                data.localizedHomeTeamLocation = this.localizedHomeTeamLocation.toObject();
            }
            if (this.homeTeamName != null) {
                data.homeTeamName = this.homeTeamName;
            }
            if (this.localizedHomeTeamName != null) {
                data.localizedHomeTeamName = this.localizedHomeTeamName.toObject();
            }
            if (this.leagueAbbreviation != null) {
                data.leagueAbbreviation = this.leagueAbbreviation;
            }
            if (this.localizedLeagueAbbreviation != null) {
                data.localizedLeagueAbbreviation = this.localizedLeagueAbbreviation.toObject();
            }
            if (this.leagueName != null) {
                data.leagueName = this.leagueName;
            }
            if (this.localizedLeagueName != null) {
                data.localizedLeagueName = this.localizedLeagueName.toObject();
            }
            if (this.performerNames != null) {
                data.performerNames = this.performerNames;
            }
            if (this.silenceRequested != null) {
                data.silenceRequested = this.silenceRequested;
            }
            if (this.sportName != null) {
                data.sportName = this.sportName;
            }
            if (this.localizedSportName != null) {
                data.localizedSportName = this.localizedSportName.toObject();
            }
            if (this.venueLocation != null) {
                data.venueLocation = this.venueLocation.toObject();
            }
            if (this.venuePhoneNumber != null) {
                data.venuePhoneNumber = this.venuePhoneNumber;
            }
            if (this.venueRoom != null) {
                data.venueRoom = this.venueRoom;
            }
            if (this.localizedVenueRoom != null) {
                data.localizedVenueRoom = this.localizedVenueRoom.toObject();
            }
            if (this.wifiAccess != null) {
                data.wifiAccess = this.wifiAccess.map((item: SemanticWifiNetwork) => item.toObject());
            }
            if (this.venueRegionName != null) {
                data.venueRegionName = this.venueRegionName;
            }
            if (this.localizedVenueRegionName != null) {
                data.localizedVenueRegionName = this.localizedVenueRegionName.toObject();
            }
            if (this.tailgatingAllowed != null) {
                data.tailgatingAllowed = this.tailgatingAllowed;
            }
            if (this.entranceDescription != null) {
                data.entranceDescription = this.entranceDescription;
            }
            if (this.localizedEntranceDescription != null) {
                data.localizedEntranceDescription = this.localizedEntranceDescription.toObject();
            }
            if (this.venueGatesOpenDate != null) {
                data.venueGatesOpenDate = this.venueGatesOpenDate.toObject();
            }
            if (this.venueFanZoneOpenDate != null) {
                data.venueFanZoneOpenDate = this.venueFanZoneOpenDate.toObject();
            }
            if (this.venueParkingLotsOpenDate != null) {
                data.venueParkingLotsOpenDate = this.venueParkingLotsOpenDate.toObject();
            }
            if (this.venueBoxOfficeOpenDate != null) {
                data.venueBoxOfficeOpenDate = this.venueBoxOfficeOpenDate.toObject();
            }
            if (this.venueOpenDate != null) {
                data.venueOpenDate = this.venueOpenDate.toObject();
            }
            if (this.venueCloseDate != null) {
                data.venueCloseDate = this.venueCloseDate.toObject();
            }
            if (this.playlistIds != null) {
                data.playlistIds = this.playlistIds;
            }
            if (this.albumIds != null) {
                data.albumIds = this.albumIds;
            }
            if (this.eventStartDateInfo != null) {
                data.eventStartDateInfo = this.eventStartDateInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.artistIds.length)
                writer.writeRepeatedString(1, this.artistIds);
            if (this.awayTeamAbbreviation.length)
                writer.writeString(2, this.awayTeamAbbreviation);
            if (this.hasLocalizedAwayTeamAbbreviation)
                writer.writeMessage(3, this.localizedAwayTeamAbbreviation, () => this.localizedAwayTeamAbbreviation.serialize(writer));
            if (this.awayTeamLocation.length)
                writer.writeString(4, this.awayTeamLocation);
            if (this.hasLocalizedAwayTeamLocation)
                writer.writeMessage(5, this.localizedAwayTeamLocation, () => this.localizedAwayTeamLocation.serialize(writer));
            if (this.awayTeamName.length)
                writer.writeString(6, this.awayTeamName);
            if (this.hasLocalizedAwayTeamName)
                writer.writeMessage(7, this.localizedAwayTeamName, () => this.localizedAwayTeamName.serialize(writer));
            if (this.hasEventEndDate)
                writer.writeMessage(8, this.eventEndDate, () => this.eventEndDate.serialize(writer));
            if (this.eventName.length)
                writer.writeString(9, this.eventName);
            if (this.hasLocalizedEventName)
                writer.writeMessage(10, this.localizedEventName, () => this.localizedEventName.serialize(writer));
            if (this.hasEventStartDate)
                writer.writeMessage(11, this.eventStartDate, () => this.eventStartDate.serialize(writer));
            if (this.genre.length)
                writer.writeString(12, this.genre);
            if (this.hasLocalizedGenre)
                writer.writeMessage(13, this.localizedGenre, () => this.localizedGenre.serialize(writer));
            if (this.homeTeamAbbreviation.length)
                writer.writeString(14, this.homeTeamAbbreviation);
            if (this.hasLocalizedHomeTeamAbbreviation)
                writer.writeMessage(15, this.localizedHomeTeamAbbreviation, () => this.localizedHomeTeamAbbreviation.serialize(writer));
            if (this.homeTeamLocation.length)
                writer.writeString(16, this.homeTeamLocation);
            if (this.hasLocalizedHomeTeamLocation)
                writer.writeMessage(17, this.localizedHomeTeamLocation, () => this.localizedHomeTeamLocation.serialize(writer));
            if (this.homeTeamName.length)
                writer.writeString(18, this.homeTeamName);
            if (this.hasLocalizedHomeTeamName)
                writer.writeMessage(19, this.localizedHomeTeamName, () => this.localizedHomeTeamName.serialize(writer));
            if (this.leagueAbbreviation.length)
                writer.writeString(20, this.leagueAbbreviation);
            if (this.hasLocalizedLeagueAbbreviation)
                writer.writeMessage(21, this.localizedLeagueAbbreviation, () => this.localizedLeagueAbbreviation.serialize(writer));
            if (this.leagueName.length)
                writer.writeString(22, this.leagueName);
            if (this.hasLocalizedLeagueName)
                writer.writeMessage(23, this.localizedLeagueName, () => this.localizedLeagueName.serialize(writer));
            if (this.performerNames.length)
                writer.writeRepeatedString(24, this.performerNames);
            if (this.silenceRequested != false)
                writer.writeBool(25, this.silenceRequested);
            if (this.sportName.length)
                writer.writeString(26, this.sportName);
            if (this.hasLocalizedSportName)
                writer.writeMessage(27, this.localizedSportName, () => this.localizedSportName.serialize(writer));
            if (this.hasVenueLocation)
                writer.writeMessage(28, this.venueLocation, () => this.venueLocation.serialize(writer));
            if (this.venuePhoneNumber.length)
                writer.writeString(29, this.venuePhoneNumber);
            if (this.venueRoom.length)
                writer.writeString(30, this.venueRoom);
            if (this.hasLocalizedVenueRoom)
                writer.writeMessage(31, this.localizedVenueRoom, () => this.localizedVenueRoom.serialize(writer));
            if (this.wifiAccess.length)
                writer.writeRepeatedMessage(32, this.wifiAccess, (item: SemanticWifiNetwork) => item.serialize(writer));
            if (this.venueRegionName.length)
                writer.writeString(33, this.venueRegionName);
            if (this.hasLocalizedVenueRegionName)
                writer.writeMessage(34, this.localizedVenueRegionName, () => this.localizedVenueRegionName.serialize(writer));
            if (this.tailgatingAllowed != false)
                writer.writeBool(35, this.tailgatingAllowed);
            if (this.entranceDescription.length)
                writer.writeString(36, this.entranceDescription);
            if (this.hasLocalizedEntranceDescription)
                writer.writeMessage(37, this.localizedEntranceDescription, () => this.localizedEntranceDescription.serialize(writer));
            if (this.hasVenueGatesOpenDate)
                writer.writeMessage(38, this.venueGatesOpenDate, () => this.venueGatesOpenDate.serialize(writer));
            if (this.hasVenueFanZoneOpenDate)
                writer.writeMessage(39, this.venueFanZoneOpenDate, () => this.venueFanZoneOpenDate.serialize(writer));
            if (this.hasVenueParkingLotsOpenDate)
                writer.writeMessage(40, this.venueParkingLotsOpenDate, () => this.venueParkingLotsOpenDate.serialize(writer));
            if (this.hasVenueBoxOfficeOpenDate)
                writer.writeMessage(41, this.venueBoxOfficeOpenDate, () => this.venueBoxOfficeOpenDate.serialize(writer));
            if (this.hasVenueOpenDate)
                writer.writeMessage(42, this.venueOpenDate, () => this.venueOpenDate.serialize(writer));
            if (this.hasVenueCloseDate)
                writer.writeMessage(43, this.venueCloseDate, () => this.venueCloseDate.serialize(writer));
            if (this.playlistIds.length)
                writer.writeRepeatedString(44, this.playlistIds);
            if (this.albumIds.length)
                writer.writeRepeatedString(45, this.albumIds);
            if (this.hasEventStartDateInfo)
                writer.writeMessage(46, this.eventStartDateInfo, () => this.eventStartDateInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventSemanticTags {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventSemanticTags();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.awayTeamAbbreviation = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.localizedAwayTeamAbbreviation, () => message.localizedAwayTeamAbbreviation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 4:
                        message.awayTeamLocation = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.localizedAwayTeamLocation, () => message.localizedAwayTeamLocation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 6:
                        message.awayTeamName = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.localizedAwayTeamName, () => message.localizedAwayTeamName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.eventEndDate, () => message.eventEndDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 9:
                        message.eventName = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.localizedEventName, () => message.localizedEventName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.eventStartDate, () => message.eventStartDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 12:
                        message.genre = reader.readString();
                        break;
                    case 13:
                        reader.readMessage(message.localizedGenre, () => message.localizedGenre = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 14:
                        message.homeTeamAbbreviation = reader.readString();
                        break;
                    case 15:
                        reader.readMessage(message.localizedHomeTeamAbbreviation, () => message.localizedHomeTeamAbbreviation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 16:
                        message.homeTeamLocation = reader.readString();
                        break;
                    case 17:
                        reader.readMessage(message.localizedHomeTeamLocation, () => message.localizedHomeTeamLocation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 18:
                        message.homeTeamName = reader.readString();
                        break;
                    case 19:
                        reader.readMessage(message.localizedHomeTeamName, () => message.localizedHomeTeamName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 20:
                        message.leagueAbbreviation = reader.readString();
                        break;
                    case 21:
                        reader.readMessage(message.localizedLeagueAbbreviation, () => message.localizedLeagueAbbreviation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 22:
                        message.leagueName = reader.readString();
                        break;
                    case 23:
                        reader.readMessage(message.localizedLeagueName, () => message.localizedLeagueName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 24:
                        pb_1.Message.addToRepeatedField(message, 24, reader.readString());
                        break;
                    case 25:
                        message.silenceRequested = reader.readBool();
                        break;
                    case 26:
                        message.sportName = reader.readString();
                        break;
                    case 27:
                        reader.readMessage(message.localizedSportName, () => message.localizedSportName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.venueLocation, () => message.venueLocation = SemanticLocation.deserialize(reader));
                        break;
                    case 29:
                        message.venuePhoneNumber = reader.readString();
                        break;
                    case 30:
                        message.venueRoom = reader.readString();
                        break;
                    case 31:
                        reader.readMessage(message.localizedVenueRoom, () => message.localizedVenueRoom = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 32:
                        reader.readMessage(message.wifiAccess, () => pb_1.Message.addToRepeatedWrapperField(message, 32, SemanticWifiNetwork.deserialize(reader), SemanticWifiNetwork));
                        break;
                    case 33:
                        message.venueRegionName = reader.readString();
                        break;
                    case 34:
                        reader.readMessage(message.localizedVenueRegionName, () => message.localizedVenueRegionName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 35:
                        message.tailgatingAllowed = reader.readBool();
                        break;
                    case 36:
                        message.entranceDescription = reader.readString();
                        break;
                    case 37:
                        reader.readMessage(message.localizedEntranceDescription, () => message.localizedEntranceDescription = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 38:
                        reader.readMessage(message.venueGatesOpenDate, () => message.venueGatesOpenDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 39:
                        reader.readMessage(message.venueFanZoneOpenDate, () => message.venueFanZoneOpenDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 40:
                        reader.readMessage(message.venueParkingLotsOpenDate, () => message.venueParkingLotsOpenDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 41:
                        reader.readMessage(message.venueBoxOfficeOpenDate, () => message.venueBoxOfficeOpenDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 42:
                        reader.readMessage(message.venueOpenDate, () => message.venueOpenDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 43:
                        reader.readMessage(message.venueCloseDate, () => message.venueCloseDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 44:
                        pb_1.Message.addToRepeatedField(message, 44, reader.readString());
                        break;
                    case 45:
                        pb_1.Message.addToRepeatedField(message, 45, reader.readString());
                        break;
                    case 46:
                        reader.readMessage(message.eventStartDateInfo, () => message.eventStartDateInfo = SemanticEventDateInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventSemanticTags {
            return EventSemanticTags.deserialize(bytes);
        }
    }
    export class SemanticTags extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            admissionLevel?: string;
            localizedAdmissionLevel?: dependency_2.io.LocalizedString;
            admissionLevelAbbreviation?: string;
            localizedAdmissionLevelAbbreviation?: dependency_2.io.LocalizedString;
            additionalTicketAttributes?: string;
            localizedAdditionalTicketAttributes?: dependency_2.io.LocalizedString;
            airlineCode?: string;
            localizedAirlineCode?: dependency_2.io.LocalizedString;
            attendeeName?: string;
            localizedAttendeeName?: dependency_2.io.LocalizedString;
            artistIds?: string[];
            awayTeamAbbreviation?: string;
            localizedAwayTeamAbbreviation?: dependency_2.io.LocalizedString;
            awayTeamLocation?: string;
            localizedAwayTeamLocation?: dependency_2.io.LocalizedString;
            awayTeamName?: string;
            localizedAwayTeamName?: dependency_2.io.LocalizedString;
            balance?: SemanticCurrencyAmount;
            boardingGroup?: string;
            localizedBoardingGroup?: dependency_2.io.LocalizedString;
            boardingSequenceNumber?: string;
            carNumber?: string;
            localizedCarNumber?: dependency_2.io.LocalizedString;
            confirmationNumber?: string;
            localizedConfirmationNumber?: dependency_2.io.LocalizedString;
            currentArrivalDate?: dependency_1.google.protobuf.Timestamp;
            currentBoardingDate?: dependency_1.google.protobuf.Timestamp;
            currentDepartureDate?: dependency_1.google.protobuf.Timestamp;
            departureAirportCode?: string;
            localizedDepartureAirportCode?: dependency_2.io.LocalizedString;
            departureAirportName?: string;
            localizedDepartureAirportName?: dependency_2.io.LocalizedString;
            departureGate?: string;
            localizedDepartureGate?: dependency_2.io.LocalizedString;
            departureLocation?: string;
            localizedDepartureLocation?: dependency_2.io.LocalizedString;
            departureLocationDescription?: string;
            localizedDepartureLocationDescription?: dependency_2.io.LocalizedString;
            departurePlatform?: string;
            localizedDeparturePlatform?: dependency_2.io.LocalizedString;
            departureStationName?: string;
            localizedDepartureStationName?: dependency_2.io.LocalizedString;
            departureTerminal?: string;
            localizedDepartureTerminal?: dependency_2.io.LocalizedString;
            destinationAirportCode?: string;
            localizedDestinationAirportCode?: dependency_2.io.LocalizedString;
            destinationAirportName?: string;
            localizedDestinationAirportName?: dependency_2.io.LocalizedString;
            destinationGate?: string;
            localizedDestinationGate?: dependency_2.io.LocalizedString;
            destinationLocation?: string;
            localizedDestinationLocation?: dependency_2.io.LocalizedString;
            destinationLocationDescription?: string;
            localizedDestinationLocationDescription?: dependency_2.io.LocalizedString;
            destinationPlatform?: string;
            localizedDestinationPlatform?: dependency_2.io.LocalizedString;
            destinationStationName?: string;
            localizedDestinationStationName?: dependency_2.io.LocalizedString;
            destinationTerminal?: string;
            localizedDestinationTerminal?: dependency_2.io.LocalizedString;
            duration?: number;
            eventEndDate?: dependency_1.google.protobuf.Timestamp;
            eventName?: string;
            localizedEventName?: dependency_2.io.LocalizedString;
            eventStartDate?: dependency_1.google.protobuf.Timestamp;
            eventStartDateInfo?: SemanticEventDateInfo;
            eventType?: EventType;
            flightCode?: string;
            localizedFlightCode?: dependency_2.io.LocalizedString;
            flightNumber?: number;
            genre?: string;
            localizedGenre?: dependency_2.io.LocalizedString;
            homeTeamAbbreviation?: string;
            localizedHomeTeamAbbreviation?: dependency_2.io.LocalizedString;
            homeTeamLocation?: string;
            localizedHomeTeamLocation?: dependency_2.io.LocalizedString;
            homeTeamName?: string;
            localizedHomeTeamName?: dependency_2.io.LocalizedString;
            leagueAbbreviation?: string;
            localizedLeagueAbbreviation?: dependency_2.io.LocalizedString;
            leagueName?: string;
            localizedLeagueName?: dependency_2.io.LocalizedString;
            membershipProgramName?: string;
            localizedMembershipProgramName?: dependency_2.io.LocalizedString;
            membershipProgramNumber?: string;
            originalArrivalDate?: dependency_1.google.protobuf.Timestamp;
            originalBoardingDate?: dependency_1.google.protobuf.Timestamp;
            originalDepartureDate?: dependency_1.google.protobuf.Timestamp;
            passengerName?: SemanticPersonName;
            performerNames?: string[];
            priorityStatus?: string;
            localizedPriorityStatus?: dependency_2.io.LocalizedString;
            albumIds?: string[];
            playlistIds?: string[];
            seats?: SemanticSeat[];
            securityScreening?: string;
            localizedSecurityScreening?: dependency_2.io.LocalizedString;
            silenceRequested?: boolean;
            sportName?: string;
            localizedSportName?: dependency_2.io.LocalizedString;
            totalPrice?: SemanticCurrencyAmount;
            transitProvider?: string;
            localizedTransitProvider?: dependency_2.io.LocalizedString;
            transitStatus?: string;
            localizedTransitStatus?: dependency_2.io.LocalizedString;
            transitStatusReason?: string;
            localizedTransitStatusReason?: dependency_2.io.LocalizedString;
            vehicleName?: string;
            localizedVehicleName?: dependency_2.io.LocalizedString;
            vehicleNumber?: string;
            localizedVehicleNumber?: dependency_2.io.LocalizedString;
            vehicleType?: string;
            localizedVehicleType?: dependency_2.io.LocalizedString;
            venueBoxOfficeOpenDate?: dependency_1.google.protobuf.Timestamp;
            venueCloseDate?: dependency_1.google.protobuf.Timestamp;
            venueDoorsOpenDate?: dependency_1.google.protobuf.Timestamp;
            venueEntrance?: string;
            localizedVenueEntrance?: dependency_2.io.LocalizedString;
            venueLocation?: SemanticLocation;
            venueName?: string;
            localizedVenueName?: dependency_2.io.LocalizedString;
            venuePhoneNumber?: string;
            localizedVenuePhoneNumber?: dependency_2.io.LocalizedString;
            venueRegionName?: string;
            localizedVenueRegionName?: dependency_2.io.LocalizedString;
            venueRoom?: string;
            localizedVenueRoom?: dependency_2.io.LocalizedString;
            wifiAccess?: SemanticWifiNetwork[];
            venueFanZoneOpenDate?: dependency_1.google.protobuf.Timestamp;
            venueGatesOpenDate?: dependency_1.google.protobuf.Timestamp;
            venueParkingLotsOpenDate?: dependency_1.google.protobuf.Timestamp;
            venueEntranceDoor?: string;
            localizedVenueEntranceDoor?: dependency_2.io.LocalizedString;
            venueEntranceGate?: string;
            localizedVenueEntranceGate?: dependency_2.io.LocalizedString;
            venueEntrancePortal?: string;
            localizedVenueEntrancePortal?: dependency_2.io.LocalizedString;
            entranceDescription?: string;
            localizedEntranceDescription?: dependency_2.io.LocalizedString;
            tailgatingAllowed?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11, 90, 93, 94, 95, 128], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("admissionLevel" in data && data.admissionLevel != undefined) {
                    this.admissionLevel = data.admissionLevel;
                }
                if ("localizedAdmissionLevel" in data && data.localizedAdmissionLevel != undefined) {
                    this.localizedAdmissionLevel = data.localizedAdmissionLevel;
                }
                if ("admissionLevelAbbreviation" in data && data.admissionLevelAbbreviation != undefined) {
                    this.admissionLevelAbbreviation = data.admissionLevelAbbreviation;
                }
                if ("localizedAdmissionLevelAbbreviation" in data && data.localizedAdmissionLevelAbbreviation != undefined) {
                    this.localizedAdmissionLevelAbbreviation = data.localizedAdmissionLevelAbbreviation;
                }
                if ("additionalTicketAttributes" in data && data.additionalTicketAttributes != undefined) {
                    this.additionalTicketAttributes = data.additionalTicketAttributes;
                }
                if ("localizedAdditionalTicketAttributes" in data && data.localizedAdditionalTicketAttributes != undefined) {
                    this.localizedAdditionalTicketAttributes = data.localizedAdditionalTicketAttributes;
                }
                if ("airlineCode" in data && data.airlineCode != undefined) {
                    this.airlineCode = data.airlineCode;
                }
                if ("localizedAirlineCode" in data && data.localizedAirlineCode != undefined) {
                    this.localizedAirlineCode = data.localizedAirlineCode;
                }
                if ("attendeeName" in data && data.attendeeName != undefined) {
                    this.attendeeName = data.attendeeName;
                }
                if ("localizedAttendeeName" in data && data.localizedAttendeeName != undefined) {
                    this.localizedAttendeeName = data.localizedAttendeeName;
                }
                if ("artistIds" in data && data.artistIds != undefined) {
                    this.artistIds = data.artistIds;
                }
                if ("awayTeamAbbreviation" in data && data.awayTeamAbbreviation != undefined) {
                    this.awayTeamAbbreviation = data.awayTeamAbbreviation;
                }
                if ("localizedAwayTeamAbbreviation" in data && data.localizedAwayTeamAbbreviation != undefined) {
                    this.localizedAwayTeamAbbreviation = data.localizedAwayTeamAbbreviation;
                }
                if ("awayTeamLocation" in data && data.awayTeamLocation != undefined) {
                    this.awayTeamLocation = data.awayTeamLocation;
                }
                if ("localizedAwayTeamLocation" in data && data.localizedAwayTeamLocation != undefined) {
                    this.localizedAwayTeamLocation = data.localizedAwayTeamLocation;
                }
                if ("awayTeamName" in data && data.awayTeamName != undefined) {
                    this.awayTeamName = data.awayTeamName;
                }
                if ("localizedAwayTeamName" in data && data.localizedAwayTeamName != undefined) {
                    this.localizedAwayTeamName = data.localizedAwayTeamName;
                }
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
                if ("boardingGroup" in data && data.boardingGroup != undefined) {
                    this.boardingGroup = data.boardingGroup;
                }
                if ("localizedBoardingGroup" in data && data.localizedBoardingGroup != undefined) {
                    this.localizedBoardingGroup = data.localizedBoardingGroup;
                }
                if ("boardingSequenceNumber" in data && data.boardingSequenceNumber != undefined) {
                    this.boardingSequenceNumber = data.boardingSequenceNumber;
                }
                if ("carNumber" in data && data.carNumber != undefined) {
                    this.carNumber = data.carNumber;
                }
                if ("localizedCarNumber" in data && data.localizedCarNumber != undefined) {
                    this.localizedCarNumber = data.localizedCarNumber;
                }
                if ("confirmationNumber" in data && data.confirmationNumber != undefined) {
                    this.confirmationNumber = data.confirmationNumber;
                }
                if ("localizedConfirmationNumber" in data && data.localizedConfirmationNumber != undefined) {
                    this.localizedConfirmationNumber = data.localizedConfirmationNumber;
                }
                if ("currentArrivalDate" in data && data.currentArrivalDate != undefined) {
                    this.currentArrivalDate = data.currentArrivalDate;
                }
                if ("currentBoardingDate" in data && data.currentBoardingDate != undefined) {
                    this.currentBoardingDate = data.currentBoardingDate;
                }
                if ("currentDepartureDate" in data && data.currentDepartureDate != undefined) {
                    this.currentDepartureDate = data.currentDepartureDate;
                }
                if ("departureAirportCode" in data && data.departureAirportCode != undefined) {
                    this.departureAirportCode = data.departureAirportCode;
                }
                if ("localizedDepartureAirportCode" in data && data.localizedDepartureAirportCode != undefined) {
                    this.localizedDepartureAirportCode = data.localizedDepartureAirportCode;
                }
                if ("departureAirportName" in data && data.departureAirportName != undefined) {
                    this.departureAirportName = data.departureAirportName;
                }
                if ("localizedDepartureAirportName" in data && data.localizedDepartureAirportName != undefined) {
                    this.localizedDepartureAirportName = data.localizedDepartureAirportName;
                }
                if ("departureGate" in data && data.departureGate != undefined) {
                    this.departureGate = data.departureGate;
                }
                if ("localizedDepartureGate" in data && data.localizedDepartureGate != undefined) {
                    this.localizedDepartureGate = data.localizedDepartureGate;
                }
                if ("departureLocation" in data && data.departureLocation != undefined) {
                    this.departureLocation = data.departureLocation;
                }
                if ("localizedDepartureLocation" in data && data.localizedDepartureLocation != undefined) {
                    this.localizedDepartureLocation = data.localizedDepartureLocation;
                }
                if ("departureLocationDescription" in data && data.departureLocationDescription != undefined) {
                    this.departureLocationDescription = data.departureLocationDescription;
                }
                if ("localizedDepartureLocationDescription" in data && data.localizedDepartureLocationDescription != undefined) {
                    this.localizedDepartureLocationDescription = data.localizedDepartureLocationDescription;
                }
                if ("departurePlatform" in data && data.departurePlatform != undefined) {
                    this.departurePlatform = data.departurePlatform;
                }
                if ("localizedDeparturePlatform" in data && data.localizedDeparturePlatform != undefined) {
                    this.localizedDeparturePlatform = data.localizedDeparturePlatform;
                }
                if ("departureStationName" in data && data.departureStationName != undefined) {
                    this.departureStationName = data.departureStationName;
                }
                if ("localizedDepartureStationName" in data && data.localizedDepartureStationName != undefined) {
                    this.localizedDepartureStationName = data.localizedDepartureStationName;
                }
                if ("departureTerminal" in data && data.departureTerminal != undefined) {
                    this.departureTerminal = data.departureTerminal;
                }
                if ("localizedDepartureTerminal" in data && data.localizedDepartureTerminal != undefined) {
                    this.localizedDepartureTerminal = data.localizedDepartureTerminal;
                }
                if ("destinationAirportCode" in data && data.destinationAirportCode != undefined) {
                    this.destinationAirportCode = data.destinationAirportCode;
                }
                if ("localizedDestinationAirportCode" in data && data.localizedDestinationAirportCode != undefined) {
                    this.localizedDestinationAirportCode = data.localizedDestinationAirportCode;
                }
                if ("destinationAirportName" in data && data.destinationAirportName != undefined) {
                    this.destinationAirportName = data.destinationAirportName;
                }
                if ("localizedDestinationAirportName" in data && data.localizedDestinationAirportName != undefined) {
                    this.localizedDestinationAirportName = data.localizedDestinationAirportName;
                }
                if ("destinationGate" in data && data.destinationGate != undefined) {
                    this.destinationGate = data.destinationGate;
                }
                if ("localizedDestinationGate" in data && data.localizedDestinationGate != undefined) {
                    this.localizedDestinationGate = data.localizedDestinationGate;
                }
                if ("destinationLocation" in data && data.destinationLocation != undefined) {
                    this.destinationLocation = data.destinationLocation;
                }
                if ("localizedDestinationLocation" in data && data.localizedDestinationLocation != undefined) {
                    this.localizedDestinationLocation = data.localizedDestinationLocation;
                }
                if ("destinationLocationDescription" in data && data.destinationLocationDescription != undefined) {
                    this.destinationLocationDescription = data.destinationLocationDescription;
                }
                if ("localizedDestinationLocationDescription" in data && data.localizedDestinationLocationDescription != undefined) {
                    this.localizedDestinationLocationDescription = data.localizedDestinationLocationDescription;
                }
                if ("destinationPlatform" in data && data.destinationPlatform != undefined) {
                    this.destinationPlatform = data.destinationPlatform;
                }
                if ("localizedDestinationPlatform" in data && data.localizedDestinationPlatform != undefined) {
                    this.localizedDestinationPlatform = data.localizedDestinationPlatform;
                }
                if ("destinationStationName" in data && data.destinationStationName != undefined) {
                    this.destinationStationName = data.destinationStationName;
                }
                if ("localizedDestinationStationName" in data && data.localizedDestinationStationName != undefined) {
                    this.localizedDestinationStationName = data.localizedDestinationStationName;
                }
                if ("destinationTerminal" in data && data.destinationTerminal != undefined) {
                    this.destinationTerminal = data.destinationTerminal;
                }
                if ("localizedDestinationTerminal" in data && data.localizedDestinationTerminal != undefined) {
                    this.localizedDestinationTerminal = data.localizedDestinationTerminal;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("eventEndDate" in data && data.eventEndDate != undefined) {
                    this.eventEndDate = data.eventEndDate;
                }
                if ("eventName" in data && data.eventName != undefined) {
                    this.eventName = data.eventName;
                }
                if ("localizedEventName" in data && data.localizedEventName != undefined) {
                    this.localizedEventName = data.localizedEventName;
                }
                if ("eventStartDate" in data && data.eventStartDate != undefined) {
                    this.eventStartDate = data.eventStartDate;
                }
                if ("eventStartDateInfo" in data && data.eventStartDateInfo != undefined) {
                    this.eventStartDateInfo = data.eventStartDateInfo;
                }
                if ("eventType" in data && data.eventType != undefined) {
                    this.eventType = data.eventType;
                }
                if ("flightCode" in data && data.flightCode != undefined) {
                    this.flightCode = data.flightCode;
                }
                if ("localizedFlightCode" in data && data.localizedFlightCode != undefined) {
                    this.localizedFlightCode = data.localizedFlightCode;
                }
                if ("flightNumber" in data && data.flightNumber != undefined) {
                    this.flightNumber = data.flightNumber;
                }
                if ("genre" in data && data.genre != undefined) {
                    this.genre = data.genre;
                }
                if ("localizedGenre" in data && data.localizedGenre != undefined) {
                    this.localizedGenre = data.localizedGenre;
                }
                if ("homeTeamAbbreviation" in data && data.homeTeamAbbreviation != undefined) {
                    this.homeTeamAbbreviation = data.homeTeamAbbreviation;
                }
                if ("localizedHomeTeamAbbreviation" in data && data.localizedHomeTeamAbbreviation != undefined) {
                    this.localizedHomeTeamAbbreviation = data.localizedHomeTeamAbbreviation;
                }
                if ("homeTeamLocation" in data && data.homeTeamLocation != undefined) {
                    this.homeTeamLocation = data.homeTeamLocation;
                }
                if ("localizedHomeTeamLocation" in data && data.localizedHomeTeamLocation != undefined) {
                    this.localizedHomeTeamLocation = data.localizedHomeTeamLocation;
                }
                if ("homeTeamName" in data && data.homeTeamName != undefined) {
                    this.homeTeamName = data.homeTeamName;
                }
                if ("localizedHomeTeamName" in data && data.localizedHomeTeamName != undefined) {
                    this.localizedHomeTeamName = data.localizedHomeTeamName;
                }
                if ("leagueAbbreviation" in data && data.leagueAbbreviation != undefined) {
                    this.leagueAbbreviation = data.leagueAbbreviation;
                }
                if ("localizedLeagueAbbreviation" in data && data.localizedLeagueAbbreviation != undefined) {
                    this.localizedLeagueAbbreviation = data.localizedLeagueAbbreviation;
                }
                if ("leagueName" in data && data.leagueName != undefined) {
                    this.leagueName = data.leagueName;
                }
                if ("localizedLeagueName" in data && data.localizedLeagueName != undefined) {
                    this.localizedLeagueName = data.localizedLeagueName;
                }
                if ("membershipProgramName" in data && data.membershipProgramName != undefined) {
                    this.membershipProgramName = data.membershipProgramName;
                }
                if ("localizedMembershipProgramName" in data && data.localizedMembershipProgramName != undefined) {
                    this.localizedMembershipProgramName = data.localizedMembershipProgramName;
                }
                if ("membershipProgramNumber" in data && data.membershipProgramNumber != undefined) {
                    this.membershipProgramNumber = data.membershipProgramNumber;
                }
                if ("originalArrivalDate" in data && data.originalArrivalDate != undefined) {
                    this.originalArrivalDate = data.originalArrivalDate;
                }
                if ("originalBoardingDate" in data && data.originalBoardingDate != undefined) {
                    this.originalBoardingDate = data.originalBoardingDate;
                }
                if ("originalDepartureDate" in data && data.originalDepartureDate != undefined) {
                    this.originalDepartureDate = data.originalDepartureDate;
                }
                if ("passengerName" in data && data.passengerName != undefined) {
                    this.passengerName = data.passengerName;
                }
                if ("performerNames" in data && data.performerNames != undefined) {
                    this.performerNames = data.performerNames;
                }
                if ("priorityStatus" in data && data.priorityStatus != undefined) {
                    this.priorityStatus = data.priorityStatus;
                }
                if ("localizedPriorityStatus" in data && data.localizedPriorityStatus != undefined) {
                    this.localizedPriorityStatus = data.localizedPriorityStatus;
                }
                if ("albumIds" in data && data.albumIds != undefined) {
                    this.albumIds = data.albumIds;
                }
                if ("playlistIds" in data && data.playlistIds != undefined) {
                    this.playlistIds = data.playlistIds;
                }
                if ("seats" in data && data.seats != undefined) {
                    this.seats = data.seats;
                }
                if ("securityScreening" in data && data.securityScreening != undefined) {
                    this.securityScreening = data.securityScreening;
                }
                if ("localizedSecurityScreening" in data && data.localizedSecurityScreening != undefined) {
                    this.localizedSecurityScreening = data.localizedSecurityScreening;
                }
                if ("silenceRequested" in data && data.silenceRequested != undefined) {
                    this.silenceRequested = data.silenceRequested;
                }
                if ("sportName" in data && data.sportName != undefined) {
                    this.sportName = data.sportName;
                }
                if ("localizedSportName" in data && data.localizedSportName != undefined) {
                    this.localizedSportName = data.localizedSportName;
                }
                if ("totalPrice" in data && data.totalPrice != undefined) {
                    this.totalPrice = data.totalPrice;
                }
                if ("transitProvider" in data && data.transitProvider != undefined) {
                    this.transitProvider = data.transitProvider;
                }
                if ("localizedTransitProvider" in data && data.localizedTransitProvider != undefined) {
                    this.localizedTransitProvider = data.localizedTransitProvider;
                }
                if ("transitStatus" in data && data.transitStatus != undefined) {
                    this.transitStatus = data.transitStatus;
                }
                if ("localizedTransitStatus" in data && data.localizedTransitStatus != undefined) {
                    this.localizedTransitStatus = data.localizedTransitStatus;
                }
                if ("transitStatusReason" in data && data.transitStatusReason != undefined) {
                    this.transitStatusReason = data.transitStatusReason;
                }
                if ("localizedTransitStatusReason" in data && data.localizedTransitStatusReason != undefined) {
                    this.localizedTransitStatusReason = data.localizedTransitStatusReason;
                }
                if ("vehicleName" in data && data.vehicleName != undefined) {
                    this.vehicleName = data.vehicleName;
                }
                if ("localizedVehicleName" in data && data.localizedVehicleName != undefined) {
                    this.localizedVehicleName = data.localizedVehicleName;
                }
                if ("vehicleNumber" in data && data.vehicleNumber != undefined) {
                    this.vehicleNumber = data.vehicleNumber;
                }
                if ("localizedVehicleNumber" in data && data.localizedVehicleNumber != undefined) {
                    this.localizedVehicleNumber = data.localizedVehicleNumber;
                }
                if ("vehicleType" in data && data.vehicleType != undefined) {
                    this.vehicleType = data.vehicleType;
                }
                if ("localizedVehicleType" in data && data.localizedVehicleType != undefined) {
                    this.localizedVehicleType = data.localizedVehicleType;
                }
                if ("venueBoxOfficeOpenDate" in data && data.venueBoxOfficeOpenDate != undefined) {
                    this.venueBoxOfficeOpenDate = data.venueBoxOfficeOpenDate;
                }
                if ("venueCloseDate" in data && data.venueCloseDate != undefined) {
                    this.venueCloseDate = data.venueCloseDate;
                }
                if ("venueDoorsOpenDate" in data && data.venueDoorsOpenDate != undefined) {
                    this.venueDoorsOpenDate = data.venueDoorsOpenDate;
                }
                if ("venueEntrance" in data && data.venueEntrance != undefined) {
                    this.venueEntrance = data.venueEntrance;
                }
                if ("localizedVenueEntrance" in data && data.localizedVenueEntrance != undefined) {
                    this.localizedVenueEntrance = data.localizedVenueEntrance;
                }
                if ("venueLocation" in data && data.venueLocation != undefined) {
                    this.venueLocation = data.venueLocation;
                }
                if ("venueName" in data && data.venueName != undefined) {
                    this.venueName = data.venueName;
                }
                if ("localizedVenueName" in data && data.localizedVenueName != undefined) {
                    this.localizedVenueName = data.localizedVenueName;
                }
                if ("venuePhoneNumber" in data && data.venuePhoneNumber != undefined) {
                    this.venuePhoneNumber = data.venuePhoneNumber;
                }
                if ("localizedVenuePhoneNumber" in data && data.localizedVenuePhoneNumber != undefined) {
                    this.localizedVenuePhoneNumber = data.localizedVenuePhoneNumber;
                }
                if ("venueRegionName" in data && data.venueRegionName != undefined) {
                    this.venueRegionName = data.venueRegionName;
                }
                if ("localizedVenueRegionName" in data && data.localizedVenueRegionName != undefined) {
                    this.localizedVenueRegionName = data.localizedVenueRegionName;
                }
                if ("venueRoom" in data && data.venueRoom != undefined) {
                    this.venueRoom = data.venueRoom;
                }
                if ("localizedVenueRoom" in data && data.localizedVenueRoom != undefined) {
                    this.localizedVenueRoom = data.localizedVenueRoom;
                }
                if ("wifiAccess" in data && data.wifiAccess != undefined) {
                    this.wifiAccess = data.wifiAccess;
                }
                if ("venueFanZoneOpenDate" in data && data.venueFanZoneOpenDate != undefined) {
                    this.venueFanZoneOpenDate = data.venueFanZoneOpenDate;
                }
                if ("venueGatesOpenDate" in data && data.venueGatesOpenDate != undefined) {
                    this.venueGatesOpenDate = data.venueGatesOpenDate;
                }
                if ("venueParkingLotsOpenDate" in data && data.venueParkingLotsOpenDate != undefined) {
                    this.venueParkingLotsOpenDate = data.venueParkingLotsOpenDate;
                }
                if ("venueEntranceDoor" in data && data.venueEntranceDoor != undefined) {
                    this.venueEntranceDoor = data.venueEntranceDoor;
                }
                if ("localizedVenueEntranceDoor" in data && data.localizedVenueEntranceDoor != undefined) {
                    this.localizedVenueEntranceDoor = data.localizedVenueEntranceDoor;
                }
                if ("venueEntranceGate" in data && data.venueEntranceGate != undefined) {
                    this.venueEntranceGate = data.venueEntranceGate;
                }
                if ("localizedVenueEntranceGate" in data && data.localizedVenueEntranceGate != undefined) {
                    this.localizedVenueEntranceGate = data.localizedVenueEntranceGate;
                }
                if ("venueEntrancePortal" in data && data.venueEntrancePortal != undefined) {
                    this.venueEntrancePortal = data.venueEntrancePortal;
                }
                if ("localizedVenueEntrancePortal" in data && data.localizedVenueEntrancePortal != undefined) {
                    this.localizedVenueEntrancePortal = data.localizedVenueEntrancePortal;
                }
                if ("entranceDescription" in data && data.entranceDescription != undefined) {
                    this.entranceDescription = data.entranceDescription;
                }
                if ("localizedEntranceDescription" in data && data.localizedEntranceDescription != undefined) {
                    this.localizedEntranceDescription = data.localizedEntranceDescription;
                }
                if ("tailgatingAllowed" in data && data.tailgatingAllowed != undefined) {
                    this.tailgatingAllowed = data.tailgatingAllowed;
                }
            }
        }
        get admissionLevel() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set admissionLevel(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get localizedAdmissionLevel() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 2) as dependency_2.io.LocalizedString;
        }
        set localizedAdmissionLevel(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasLocalizedAdmissionLevel() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get admissionLevelAbbreviation() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set admissionLevelAbbreviation(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get localizedAdmissionLevelAbbreviation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 4) as dependency_2.io.LocalizedString;
        }
        set localizedAdmissionLevelAbbreviation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get hasLocalizedAdmissionLevelAbbreviation() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get additionalTicketAttributes() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set additionalTicketAttributes(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get localizedAdditionalTicketAttributes() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 6) as dependency_2.io.LocalizedString;
        }
        set localizedAdditionalTicketAttributes(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasLocalizedAdditionalTicketAttributes() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get airlineCode() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set airlineCode(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get localizedAirlineCode() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 8) as dependency_2.io.LocalizedString;
        }
        set localizedAirlineCode(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get hasLocalizedAirlineCode() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get attendeeName() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set attendeeName(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get localizedAttendeeName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 10) as dependency_2.io.LocalizedString;
        }
        set localizedAttendeeName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get hasLocalizedAttendeeName() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get artistIds() {
            return pb_1.Message.getFieldWithDefault(this, 11, []) as string[];
        }
        set artistIds(value: string[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get awayTeamAbbreviation() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set awayTeamAbbreviation(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get localizedAwayTeamAbbreviation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 13) as dependency_2.io.LocalizedString;
        }
        set localizedAwayTeamAbbreviation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get hasLocalizedAwayTeamAbbreviation() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get awayTeamLocation() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set awayTeamLocation(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get localizedAwayTeamLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 15) as dependency_2.io.LocalizedString;
        }
        set localizedAwayTeamLocation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get hasLocalizedAwayTeamLocation() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get awayTeamName() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set awayTeamName(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get localizedAwayTeamName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 17) as dependency_2.io.LocalizedString;
        }
        set localizedAwayTeamName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 17, value);
        }
        get hasLocalizedAwayTeamName() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get balance() {
            return pb_1.Message.getWrapperField(this, SemanticCurrencyAmount, 18) as SemanticCurrencyAmount;
        }
        set balance(value: SemanticCurrencyAmount) {
            pb_1.Message.setWrapperField(this, 18, value);
        }
        get hasBalance() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get boardingGroup() {
            return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
        }
        set boardingGroup(value: string) {
            pb_1.Message.setField(this, 19, value);
        }
        get localizedBoardingGroup() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 20) as dependency_2.io.LocalizedString;
        }
        set localizedBoardingGroup(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 20, value);
        }
        get hasLocalizedBoardingGroup() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get boardingSequenceNumber() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set boardingSequenceNumber(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get carNumber() {
            return pb_1.Message.getFieldWithDefault(this, 22, "") as string;
        }
        set carNumber(value: string) {
            pb_1.Message.setField(this, 22, value);
        }
        get localizedCarNumber() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 23) as dependency_2.io.LocalizedString;
        }
        set localizedCarNumber(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 23, value);
        }
        get hasLocalizedCarNumber() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get confirmationNumber() {
            return pb_1.Message.getFieldWithDefault(this, 24, "") as string;
        }
        set confirmationNumber(value: string) {
            pb_1.Message.setField(this, 24, value);
        }
        get localizedConfirmationNumber() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 25) as dependency_2.io.LocalizedString;
        }
        set localizedConfirmationNumber(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 25, value);
        }
        get hasLocalizedConfirmationNumber() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get currentArrivalDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 26) as dependency_1.google.protobuf.Timestamp;
        }
        set currentArrivalDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 26, value);
        }
        get hasCurrentArrivalDate() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get currentBoardingDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 27) as dependency_1.google.protobuf.Timestamp;
        }
        set currentBoardingDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 27, value);
        }
        get hasCurrentBoardingDate() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get currentDepartureDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 28) as dependency_1.google.protobuf.Timestamp;
        }
        set currentDepartureDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 28, value);
        }
        get hasCurrentDepartureDate() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get departureAirportCode() {
            return pb_1.Message.getFieldWithDefault(this, 29, "") as string;
        }
        set departureAirportCode(value: string) {
            pb_1.Message.setField(this, 29, value);
        }
        get localizedDepartureAirportCode() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 30) as dependency_2.io.LocalizedString;
        }
        set localizedDepartureAirportCode(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 30, value);
        }
        get hasLocalizedDepartureAirportCode() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get departureAirportName() {
            return pb_1.Message.getFieldWithDefault(this, 31, "") as string;
        }
        set departureAirportName(value: string) {
            pb_1.Message.setField(this, 31, value);
        }
        get localizedDepartureAirportName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 32) as dependency_2.io.LocalizedString;
        }
        set localizedDepartureAirportName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 32, value);
        }
        get hasLocalizedDepartureAirportName() {
            return pb_1.Message.getField(this, 32) != null;
        }
        get departureGate() {
            return pb_1.Message.getFieldWithDefault(this, 33, "") as string;
        }
        set departureGate(value: string) {
            pb_1.Message.setField(this, 33, value);
        }
        get localizedDepartureGate() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 34) as dependency_2.io.LocalizedString;
        }
        set localizedDepartureGate(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 34, value);
        }
        get hasLocalizedDepartureGate() {
            return pb_1.Message.getField(this, 34) != null;
        }
        get departureLocation() {
            return pb_1.Message.getFieldWithDefault(this, 35, "") as string;
        }
        set departureLocation(value: string) {
            pb_1.Message.setField(this, 35, value);
        }
        get localizedDepartureLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 36) as dependency_2.io.LocalizedString;
        }
        set localizedDepartureLocation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 36, value);
        }
        get hasLocalizedDepartureLocation() {
            return pb_1.Message.getField(this, 36) != null;
        }
        get departureLocationDescription() {
            return pb_1.Message.getFieldWithDefault(this, 37, "") as string;
        }
        set departureLocationDescription(value: string) {
            pb_1.Message.setField(this, 37, value);
        }
        get localizedDepartureLocationDescription() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 38) as dependency_2.io.LocalizedString;
        }
        set localizedDepartureLocationDescription(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 38, value);
        }
        get hasLocalizedDepartureLocationDescription() {
            return pb_1.Message.getField(this, 38) != null;
        }
        get departurePlatform() {
            return pb_1.Message.getFieldWithDefault(this, 39, "") as string;
        }
        set departurePlatform(value: string) {
            pb_1.Message.setField(this, 39, value);
        }
        get localizedDeparturePlatform() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 40) as dependency_2.io.LocalizedString;
        }
        set localizedDeparturePlatform(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 40, value);
        }
        get hasLocalizedDeparturePlatform() {
            return pb_1.Message.getField(this, 40) != null;
        }
        get departureStationName() {
            return pb_1.Message.getFieldWithDefault(this, 41, "") as string;
        }
        set departureStationName(value: string) {
            pb_1.Message.setField(this, 41, value);
        }
        get localizedDepartureStationName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 42) as dependency_2.io.LocalizedString;
        }
        set localizedDepartureStationName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 42, value);
        }
        get hasLocalizedDepartureStationName() {
            return pb_1.Message.getField(this, 42) != null;
        }
        get departureTerminal() {
            return pb_1.Message.getFieldWithDefault(this, 43, "") as string;
        }
        set departureTerminal(value: string) {
            pb_1.Message.setField(this, 43, value);
        }
        get localizedDepartureTerminal() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 44) as dependency_2.io.LocalizedString;
        }
        set localizedDepartureTerminal(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 44, value);
        }
        get hasLocalizedDepartureTerminal() {
            return pb_1.Message.getField(this, 44) != null;
        }
        get destinationAirportCode() {
            return pb_1.Message.getFieldWithDefault(this, 45, "") as string;
        }
        set destinationAirportCode(value: string) {
            pb_1.Message.setField(this, 45, value);
        }
        get localizedDestinationAirportCode() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 46) as dependency_2.io.LocalizedString;
        }
        set localizedDestinationAirportCode(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 46, value);
        }
        get hasLocalizedDestinationAirportCode() {
            return pb_1.Message.getField(this, 46) != null;
        }
        get destinationAirportName() {
            return pb_1.Message.getFieldWithDefault(this, 47, "") as string;
        }
        set destinationAirportName(value: string) {
            pb_1.Message.setField(this, 47, value);
        }
        get localizedDestinationAirportName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 48) as dependency_2.io.LocalizedString;
        }
        set localizedDestinationAirportName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 48, value);
        }
        get hasLocalizedDestinationAirportName() {
            return pb_1.Message.getField(this, 48) != null;
        }
        get destinationGate() {
            return pb_1.Message.getFieldWithDefault(this, 49, "") as string;
        }
        set destinationGate(value: string) {
            pb_1.Message.setField(this, 49, value);
        }
        get localizedDestinationGate() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 50) as dependency_2.io.LocalizedString;
        }
        set localizedDestinationGate(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 50, value);
        }
        get hasLocalizedDestinationGate() {
            return pb_1.Message.getField(this, 50) != null;
        }
        get destinationLocation() {
            return pb_1.Message.getFieldWithDefault(this, 51, "") as string;
        }
        set destinationLocation(value: string) {
            pb_1.Message.setField(this, 51, value);
        }
        get localizedDestinationLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 52) as dependency_2.io.LocalizedString;
        }
        set localizedDestinationLocation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 52, value);
        }
        get hasLocalizedDestinationLocation() {
            return pb_1.Message.getField(this, 52) != null;
        }
        get destinationLocationDescription() {
            return pb_1.Message.getFieldWithDefault(this, 53, "") as string;
        }
        set destinationLocationDescription(value: string) {
            pb_1.Message.setField(this, 53, value);
        }
        get localizedDestinationLocationDescription() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 54) as dependency_2.io.LocalizedString;
        }
        set localizedDestinationLocationDescription(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 54, value);
        }
        get hasLocalizedDestinationLocationDescription() {
            return pb_1.Message.getField(this, 54) != null;
        }
        get destinationPlatform() {
            return pb_1.Message.getFieldWithDefault(this, 55, "") as string;
        }
        set destinationPlatform(value: string) {
            pb_1.Message.setField(this, 55, value);
        }
        get localizedDestinationPlatform() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 56) as dependency_2.io.LocalizedString;
        }
        set localizedDestinationPlatform(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 56, value);
        }
        get hasLocalizedDestinationPlatform() {
            return pb_1.Message.getField(this, 56) != null;
        }
        get destinationStationName() {
            return pb_1.Message.getFieldWithDefault(this, 57, "") as string;
        }
        set destinationStationName(value: string) {
            pb_1.Message.setField(this, 57, value);
        }
        get localizedDestinationStationName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 58) as dependency_2.io.LocalizedString;
        }
        set localizedDestinationStationName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 58, value);
        }
        get hasLocalizedDestinationStationName() {
            return pb_1.Message.getField(this, 58) != null;
        }
        get destinationTerminal() {
            return pb_1.Message.getFieldWithDefault(this, 59, "") as string;
        }
        set destinationTerminal(value: string) {
            pb_1.Message.setField(this, 59, value);
        }
        get localizedDestinationTerminal() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 60) as dependency_2.io.LocalizedString;
        }
        set localizedDestinationTerminal(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 60, value);
        }
        get hasLocalizedDestinationTerminal() {
            return pb_1.Message.getField(this, 60) != null;
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 61, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setField(this, 61, value);
        }
        get eventEndDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 62) as dependency_1.google.protobuf.Timestamp;
        }
        set eventEndDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 62, value);
        }
        get hasEventEndDate() {
            return pb_1.Message.getField(this, 62) != null;
        }
        get eventName() {
            return pb_1.Message.getFieldWithDefault(this, 63, "") as string;
        }
        set eventName(value: string) {
            pb_1.Message.setField(this, 63, value);
        }
        get localizedEventName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 64) as dependency_2.io.LocalizedString;
        }
        set localizedEventName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 64, value);
        }
        get hasLocalizedEventName() {
            return pb_1.Message.getField(this, 64) != null;
        }
        get eventStartDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 65) as dependency_1.google.protobuf.Timestamp;
        }
        set eventStartDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 65, value);
        }
        get hasEventStartDate() {
            return pb_1.Message.getField(this, 65) != null;
        }
        get eventStartDateInfo() {
            return pb_1.Message.getWrapperField(this, SemanticEventDateInfo, 66) as SemanticEventDateInfo;
        }
        set eventStartDateInfo(value: SemanticEventDateInfo) {
            pb_1.Message.setWrapperField(this, 66, value);
        }
        get hasEventStartDateInfo() {
            return pb_1.Message.getField(this, 66) != null;
        }
        get eventType() {
            return pb_1.Message.getFieldWithDefault(this, 67, EventType.EVENT_TYPE_NONE) as EventType;
        }
        set eventType(value: EventType) {
            pb_1.Message.setField(this, 67, value);
        }
        get flightCode() {
            return pb_1.Message.getFieldWithDefault(this, 68, "") as string;
        }
        set flightCode(value: string) {
            pb_1.Message.setField(this, 68, value);
        }
        get localizedFlightCode() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 69) as dependency_2.io.LocalizedString;
        }
        set localizedFlightCode(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 69, value);
        }
        get hasLocalizedFlightCode() {
            return pb_1.Message.getField(this, 69) != null;
        }
        get flightNumber() {
            return pb_1.Message.getFieldWithDefault(this, 70, 0) as number;
        }
        set flightNumber(value: number) {
            pb_1.Message.setField(this, 70, value);
        }
        get genre() {
            return pb_1.Message.getFieldWithDefault(this, 71, "") as string;
        }
        set genre(value: string) {
            pb_1.Message.setField(this, 71, value);
        }
        get localizedGenre() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 72) as dependency_2.io.LocalizedString;
        }
        set localizedGenre(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 72, value);
        }
        get hasLocalizedGenre() {
            return pb_1.Message.getField(this, 72) != null;
        }
        get homeTeamAbbreviation() {
            return pb_1.Message.getFieldWithDefault(this, 73, "") as string;
        }
        set homeTeamAbbreviation(value: string) {
            pb_1.Message.setField(this, 73, value);
        }
        get localizedHomeTeamAbbreviation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 74) as dependency_2.io.LocalizedString;
        }
        set localizedHomeTeamAbbreviation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 74, value);
        }
        get hasLocalizedHomeTeamAbbreviation() {
            return pb_1.Message.getField(this, 74) != null;
        }
        get homeTeamLocation() {
            return pb_1.Message.getFieldWithDefault(this, 75, "") as string;
        }
        set homeTeamLocation(value: string) {
            pb_1.Message.setField(this, 75, value);
        }
        get localizedHomeTeamLocation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 76) as dependency_2.io.LocalizedString;
        }
        set localizedHomeTeamLocation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 76, value);
        }
        get hasLocalizedHomeTeamLocation() {
            return pb_1.Message.getField(this, 76) != null;
        }
        get homeTeamName() {
            return pb_1.Message.getFieldWithDefault(this, 77, "") as string;
        }
        set homeTeamName(value: string) {
            pb_1.Message.setField(this, 77, value);
        }
        get localizedHomeTeamName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 78) as dependency_2.io.LocalizedString;
        }
        set localizedHomeTeamName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 78, value);
        }
        get hasLocalizedHomeTeamName() {
            return pb_1.Message.getField(this, 78) != null;
        }
        get leagueAbbreviation() {
            return pb_1.Message.getFieldWithDefault(this, 79, "") as string;
        }
        set leagueAbbreviation(value: string) {
            pb_1.Message.setField(this, 79, value);
        }
        get localizedLeagueAbbreviation() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 80) as dependency_2.io.LocalizedString;
        }
        set localizedLeagueAbbreviation(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 80, value);
        }
        get hasLocalizedLeagueAbbreviation() {
            return pb_1.Message.getField(this, 80) != null;
        }
        get leagueName() {
            return pb_1.Message.getFieldWithDefault(this, 81, "") as string;
        }
        set leagueName(value: string) {
            pb_1.Message.setField(this, 81, value);
        }
        get localizedLeagueName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 82) as dependency_2.io.LocalizedString;
        }
        set localizedLeagueName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 82, value);
        }
        get hasLocalizedLeagueName() {
            return pb_1.Message.getField(this, 82) != null;
        }
        get membershipProgramName() {
            return pb_1.Message.getFieldWithDefault(this, 83, "") as string;
        }
        set membershipProgramName(value: string) {
            pb_1.Message.setField(this, 83, value);
        }
        get localizedMembershipProgramName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 84) as dependency_2.io.LocalizedString;
        }
        set localizedMembershipProgramName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 84, value);
        }
        get hasLocalizedMembershipProgramName() {
            return pb_1.Message.getField(this, 84) != null;
        }
        get membershipProgramNumber() {
            return pb_1.Message.getFieldWithDefault(this, 85, "") as string;
        }
        set membershipProgramNumber(value: string) {
            pb_1.Message.setField(this, 85, value);
        }
        get originalArrivalDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 86) as dependency_1.google.protobuf.Timestamp;
        }
        set originalArrivalDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 86, value);
        }
        get hasOriginalArrivalDate() {
            return pb_1.Message.getField(this, 86) != null;
        }
        get originalBoardingDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 87) as dependency_1.google.protobuf.Timestamp;
        }
        set originalBoardingDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 87, value);
        }
        get hasOriginalBoardingDate() {
            return pb_1.Message.getField(this, 87) != null;
        }
        get originalDepartureDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 88) as dependency_1.google.protobuf.Timestamp;
        }
        set originalDepartureDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 88, value);
        }
        get hasOriginalDepartureDate() {
            return pb_1.Message.getField(this, 88) != null;
        }
        get passengerName() {
            return pb_1.Message.getWrapperField(this, SemanticPersonName, 89) as SemanticPersonName;
        }
        set passengerName(value: SemanticPersonName) {
            pb_1.Message.setWrapperField(this, 89, value);
        }
        get hasPassengerName() {
            return pb_1.Message.getField(this, 89) != null;
        }
        get performerNames() {
            return pb_1.Message.getFieldWithDefault(this, 90, []) as string[];
        }
        set performerNames(value: string[]) {
            pb_1.Message.setField(this, 90, value);
        }
        get priorityStatus() {
            return pb_1.Message.getFieldWithDefault(this, 91, "") as string;
        }
        set priorityStatus(value: string) {
            pb_1.Message.setField(this, 91, value);
        }
        get localizedPriorityStatus() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 92) as dependency_2.io.LocalizedString;
        }
        set localizedPriorityStatus(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 92, value);
        }
        get hasLocalizedPriorityStatus() {
            return pb_1.Message.getField(this, 92) != null;
        }
        get albumIds() {
            return pb_1.Message.getFieldWithDefault(this, 93, []) as string[];
        }
        set albumIds(value: string[]) {
            pb_1.Message.setField(this, 93, value);
        }
        get playlistIds() {
            return pb_1.Message.getFieldWithDefault(this, 94, []) as string[];
        }
        set playlistIds(value: string[]) {
            pb_1.Message.setField(this, 94, value);
        }
        get seats() {
            return pb_1.Message.getRepeatedWrapperField(this, SemanticSeat, 95) as SemanticSeat[];
        }
        set seats(value: SemanticSeat[]) {
            pb_1.Message.setRepeatedWrapperField(this, 95, value);
        }
        get securityScreening() {
            return pb_1.Message.getFieldWithDefault(this, 96, "") as string;
        }
        set securityScreening(value: string) {
            pb_1.Message.setField(this, 96, value);
        }
        get localizedSecurityScreening() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 97) as dependency_2.io.LocalizedString;
        }
        set localizedSecurityScreening(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 97, value);
        }
        get hasLocalizedSecurityScreening() {
            return pb_1.Message.getField(this, 97) != null;
        }
        get silenceRequested() {
            return pb_1.Message.getFieldWithDefault(this, 98, false) as boolean;
        }
        set silenceRequested(value: boolean) {
            pb_1.Message.setField(this, 98, value);
        }
        get sportName() {
            return pb_1.Message.getFieldWithDefault(this, 99, "") as string;
        }
        set sportName(value: string) {
            pb_1.Message.setField(this, 99, value);
        }
        get localizedSportName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 100) as dependency_2.io.LocalizedString;
        }
        set localizedSportName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 100, value);
        }
        get hasLocalizedSportName() {
            return pb_1.Message.getField(this, 100) != null;
        }
        get totalPrice() {
            return pb_1.Message.getWrapperField(this, SemanticCurrencyAmount, 101) as SemanticCurrencyAmount;
        }
        set totalPrice(value: SemanticCurrencyAmount) {
            pb_1.Message.setWrapperField(this, 101, value);
        }
        get hasTotalPrice() {
            return pb_1.Message.getField(this, 101) != null;
        }
        get transitProvider() {
            return pb_1.Message.getFieldWithDefault(this, 102, "") as string;
        }
        set transitProvider(value: string) {
            pb_1.Message.setField(this, 102, value);
        }
        get localizedTransitProvider() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 103) as dependency_2.io.LocalizedString;
        }
        set localizedTransitProvider(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 103, value);
        }
        get hasLocalizedTransitProvider() {
            return pb_1.Message.getField(this, 103) != null;
        }
        get transitStatus() {
            return pb_1.Message.getFieldWithDefault(this, 104, "") as string;
        }
        set transitStatus(value: string) {
            pb_1.Message.setField(this, 104, value);
        }
        get localizedTransitStatus() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 105) as dependency_2.io.LocalizedString;
        }
        set localizedTransitStatus(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 105, value);
        }
        get hasLocalizedTransitStatus() {
            return pb_1.Message.getField(this, 105) != null;
        }
        get transitStatusReason() {
            return pb_1.Message.getFieldWithDefault(this, 106, "") as string;
        }
        set transitStatusReason(value: string) {
            pb_1.Message.setField(this, 106, value);
        }
        get localizedTransitStatusReason() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 107) as dependency_2.io.LocalizedString;
        }
        set localizedTransitStatusReason(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 107, value);
        }
        get hasLocalizedTransitStatusReason() {
            return pb_1.Message.getField(this, 107) != null;
        }
        get vehicleName() {
            return pb_1.Message.getFieldWithDefault(this, 108, "") as string;
        }
        set vehicleName(value: string) {
            pb_1.Message.setField(this, 108, value);
        }
        get localizedVehicleName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 109) as dependency_2.io.LocalizedString;
        }
        set localizedVehicleName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 109, value);
        }
        get hasLocalizedVehicleName() {
            return pb_1.Message.getField(this, 109) != null;
        }
        get vehicleNumber() {
            return pb_1.Message.getFieldWithDefault(this, 110, "") as string;
        }
        set vehicleNumber(value: string) {
            pb_1.Message.setField(this, 110, value);
        }
        get localizedVehicleNumber() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 111) as dependency_2.io.LocalizedString;
        }
        set localizedVehicleNumber(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 111, value);
        }
        get hasLocalizedVehicleNumber() {
            return pb_1.Message.getField(this, 111) != null;
        }
        get vehicleType() {
            return pb_1.Message.getFieldWithDefault(this, 112, "") as string;
        }
        set vehicleType(value: string) {
            pb_1.Message.setField(this, 112, value);
        }
        get localizedVehicleType() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 113) as dependency_2.io.LocalizedString;
        }
        set localizedVehicleType(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 113, value);
        }
        get hasLocalizedVehicleType() {
            return pb_1.Message.getField(this, 113) != null;
        }
        get venueBoxOfficeOpenDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 114) as dependency_1.google.protobuf.Timestamp;
        }
        set venueBoxOfficeOpenDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 114, value);
        }
        get hasVenueBoxOfficeOpenDate() {
            return pb_1.Message.getField(this, 114) != null;
        }
        get venueCloseDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 115) as dependency_1.google.protobuf.Timestamp;
        }
        set venueCloseDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 115, value);
        }
        get hasVenueCloseDate() {
            return pb_1.Message.getField(this, 115) != null;
        }
        get venueDoorsOpenDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 116) as dependency_1.google.protobuf.Timestamp;
        }
        set venueDoorsOpenDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 116, value);
        }
        get hasVenueDoorsOpenDate() {
            return pb_1.Message.getField(this, 116) != null;
        }
        get venueEntrance() {
            return pb_1.Message.getFieldWithDefault(this, 117, "") as string;
        }
        set venueEntrance(value: string) {
            pb_1.Message.setField(this, 117, value);
        }
        get localizedVenueEntrance() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 118) as dependency_2.io.LocalizedString;
        }
        set localizedVenueEntrance(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 118, value);
        }
        get hasLocalizedVenueEntrance() {
            return pb_1.Message.getField(this, 118) != null;
        }
        get venueLocation() {
            return pb_1.Message.getWrapperField(this, SemanticLocation, 119) as SemanticLocation;
        }
        set venueLocation(value: SemanticLocation) {
            pb_1.Message.setWrapperField(this, 119, value);
        }
        get hasVenueLocation() {
            return pb_1.Message.getField(this, 119) != null;
        }
        get venueName() {
            return pb_1.Message.getFieldWithDefault(this, 120, "") as string;
        }
        set venueName(value: string) {
            pb_1.Message.setField(this, 120, value);
        }
        get localizedVenueName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 121) as dependency_2.io.LocalizedString;
        }
        set localizedVenueName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 121, value);
        }
        get hasLocalizedVenueName() {
            return pb_1.Message.getField(this, 121) != null;
        }
        get venuePhoneNumber() {
            return pb_1.Message.getFieldWithDefault(this, 122, "") as string;
        }
        set venuePhoneNumber(value: string) {
            pb_1.Message.setField(this, 122, value);
        }
        get localizedVenuePhoneNumber() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 123) as dependency_2.io.LocalizedString;
        }
        set localizedVenuePhoneNumber(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 123, value);
        }
        get hasLocalizedVenuePhoneNumber() {
            return pb_1.Message.getField(this, 123) != null;
        }
        get venueRegionName() {
            return pb_1.Message.getFieldWithDefault(this, 124, "") as string;
        }
        set venueRegionName(value: string) {
            pb_1.Message.setField(this, 124, value);
        }
        get localizedVenueRegionName() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 125) as dependency_2.io.LocalizedString;
        }
        set localizedVenueRegionName(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 125, value);
        }
        get hasLocalizedVenueRegionName() {
            return pb_1.Message.getField(this, 125) != null;
        }
        get venueRoom() {
            return pb_1.Message.getFieldWithDefault(this, 126, "") as string;
        }
        set venueRoom(value: string) {
            pb_1.Message.setField(this, 126, value);
        }
        get localizedVenueRoom() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 127) as dependency_2.io.LocalizedString;
        }
        set localizedVenueRoom(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 127, value);
        }
        get hasLocalizedVenueRoom() {
            return pb_1.Message.getField(this, 127) != null;
        }
        get wifiAccess() {
            return pb_1.Message.getRepeatedWrapperField(this, SemanticWifiNetwork, 128) as SemanticWifiNetwork[];
        }
        set wifiAccess(value: SemanticWifiNetwork[]) {
            pb_1.Message.setRepeatedWrapperField(this, 128, value);
        }
        get venueFanZoneOpenDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 129) as dependency_1.google.protobuf.Timestamp;
        }
        set venueFanZoneOpenDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 129, value);
        }
        get hasVenueFanZoneOpenDate() {
            return pb_1.Message.getField(this, 129) != null;
        }
        get venueGatesOpenDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 130) as dependency_1.google.protobuf.Timestamp;
        }
        set venueGatesOpenDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 130, value);
        }
        get hasVenueGatesOpenDate() {
            return pb_1.Message.getField(this, 130) != null;
        }
        get venueParkingLotsOpenDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 131) as dependency_1.google.protobuf.Timestamp;
        }
        set venueParkingLotsOpenDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 131, value);
        }
        get hasVenueParkingLotsOpenDate() {
            return pb_1.Message.getField(this, 131) != null;
        }
        get venueEntranceDoor() {
            return pb_1.Message.getFieldWithDefault(this, 132, "") as string;
        }
        set venueEntranceDoor(value: string) {
            pb_1.Message.setField(this, 132, value);
        }
        get localizedVenueEntranceDoor() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 133) as dependency_2.io.LocalizedString;
        }
        set localizedVenueEntranceDoor(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 133, value);
        }
        get hasLocalizedVenueEntranceDoor() {
            return pb_1.Message.getField(this, 133) != null;
        }
        get venueEntranceGate() {
            return pb_1.Message.getFieldWithDefault(this, 134, "") as string;
        }
        set venueEntranceGate(value: string) {
            pb_1.Message.setField(this, 134, value);
        }
        get localizedVenueEntranceGate() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 135) as dependency_2.io.LocalizedString;
        }
        set localizedVenueEntranceGate(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 135, value);
        }
        get hasLocalizedVenueEntranceGate() {
            return pb_1.Message.getField(this, 135) != null;
        }
        get venueEntrancePortal() {
            return pb_1.Message.getFieldWithDefault(this, 136, "") as string;
        }
        set venueEntrancePortal(value: string) {
            pb_1.Message.setField(this, 136, value);
        }
        get localizedVenueEntrancePortal() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 137) as dependency_2.io.LocalizedString;
        }
        set localizedVenueEntrancePortal(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 137, value);
        }
        get hasLocalizedVenueEntrancePortal() {
            return pb_1.Message.getField(this, 137) != null;
        }
        get entranceDescription() {
            return pb_1.Message.getFieldWithDefault(this, 138, "") as string;
        }
        set entranceDescription(value: string) {
            pb_1.Message.setField(this, 138, value);
        }
        get localizedEntranceDescription() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.LocalizedString, 139) as dependency_2.io.LocalizedString;
        }
        set localizedEntranceDescription(value: dependency_2.io.LocalizedString) {
            pb_1.Message.setWrapperField(this, 139, value);
        }
        get hasLocalizedEntranceDescription() {
            return pb_1.Message.getField(this, 139) != null;
        }
        get tailgatingAllowed() {
            return pb_1.Message.getFieldWithDefault(this, 140, false) as boolean;
        }
        set tailgatingAllowed(value: boolean) {
            pb_1.Message.setField(this, 140, value);
        }
        static fromObject(data: {
            admissionLevel?: string;
            localizedAdmissionLevel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            admissionLevelAbbreviation?: string;
            localizedAdmissionLevelAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            additionalTicketAttributes?: string;
            localizedAdditionalTicketAttributes?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            airlineCode?: string;
            localizedAirlineCode?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            attendeeName?: string;
            localizedAttendeeName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            artistIds?: string[];
            awayTeamAbbreviation?: string;
            localizedAwayTeamAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            awayTeamLocation?: string;
            localizedAwayTeamLocation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            awayTeamName?: string;
            localizedAwayTeamName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            balance?: ReturnType<typeof SemanticCurrencyAmount.prototype.toObject>;
            boardingGroup?: string;
            localizedBoardingGroup?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            boardingSequenceNumber?: string;
            carNumber?: string;
            localizedCarNumber?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            confirmationNumber?: string;
            localizedConfirmationNumber?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            currentArrivalDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            currentBoardingDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            currentDepartureDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            departureAirportCode?: string;
            localizedDepartureAirportCode?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            departureAirportName?: string;
            localizedDepartureAirportName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            departureGate?: string;
            localizedDepartureGate?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            departureLocation?: string;
            localizedDepartureLocation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            departureLocationDescription?: string;
            localizedDepartureLocationDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            departurePlatform?: string;
            localizedDeparturePlatform?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            departureStationName?: string;
            localizedDepartureStationName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            departureTerminal?: string;
            localizedDepartureTerminal?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            destinationAirportCode?: string;
            localizedDestinationAirportCode?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            destinationAirportName?: string;
            localizedDestinationAirportName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            destinationGate?: string;
            localizedDestinationGate?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            destinationLocation?: string;
            localizedDestinationLocation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            destinationLocationDescription?: string;
            localizedDestinationLocationDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            destinationPlatform?: string;
            localizedDestinationPlatform?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            destinationStationName?: string;
            localizedDestinationStationName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            destinationTerminal?: string;
            localizedDestinationTerminal?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            duration?: number;
            eventEndDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            eventName?: string;
            localizedEventName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            eventStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            eventStartDateInfo?: ReturnType<typeof SemanticEventDateInfo.prototype.toObject>;
            eventType?: EventType;
            flightCode?: string;
            localizedFlightCode?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            flightNumber?: number;
            genre?: string;
            localizedGenre?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            homeTeamAbbreviation?: string;
            localizedHomeTeamAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            homeTeamLocation?: string;
            localizedHomeTeamLocation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            homeTeamName?: string;
            localizedHomeTeamName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            leagueAbbreviation?: string;
            localizedLeagueAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            leagueName?: string;
            localizedLeagueName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            membershipProgramName?: string;
            localizedMembershipProgramName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            membershipProgramNumber?: string;
            originalArrivalDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            originalBoardingDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            originalDepartureDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            passengerName?: ReturnType<typeof SemanticPersonName.prototype.toObject>;
            performerNames?: string[];
            priorityStatus?: string;
            localizedPriorityStatus?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            albumIds?: string[];
            playlistIds?: string[];
            seats?: ReturnType<typeof SemanticSeat.prototype.toObject>[];
            securityScreening?: string;
            localizedSecurityScreening?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            silenceRequested?: boolean;
            sportName?: string;
            localizedSportName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            totalPrice?: ReturnType<typeof SemanticCurrencyAmount.prototype.toObject>;
            transitProvider?: string;
            localizedTransitProvider?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            transitStatus?: string;
            localizedTransitStatus?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            transitStatusReason?: string;
            localizedTransitStatusReason?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            vehicleName?: string;
            localizedVehicleName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            vehicleNumber?: string;
            localizedVehicleNumber?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            vehicleType?: string;
            localizedVehicleType?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            venueBoxOfficeOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            venueCloseDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            venueDoorsOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            venueEntrance?: string;
            localizedVenueEntrance?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            venueLocation?: ReturnType<typeof SemanticLocation.prototype.toObject>;
            venueName?: string;
            localizedVenueName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            venuePhoneNumber?: string;
            localizedVenuePhoneNumber?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            venueRegionName?: string;
            localizedVenueRegionName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            venueRoom?: string;
            localizedVenueRoom?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            wifiAccess?: ReturnType<typeof SemanticWifiNetwork.prototype.toObject>[];
            venueFanZoneOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            venueGatesOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            venueParkingLotsOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            venueEntranceDoor?: string;
            localizedVenueEntranceDoor?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            venueEntranceGate?: string;
            localizedVenueEntranceGate?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            venueEntrancePortal?: string;
            localizedVenueEntrancePortal?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            entranceDescription?: string;
            localizedEntranceDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
            tailgatingAllowed?: boolean;
        }): SemanticTags {
            const message = new SemanticTags({});
            if (data.admissionLevel != null) {
                message.admissionLevel = data.admissionLevel;
            }
            if (data.localizedAdmissionLevel != null) {
                message.localizedAdmissionLevel = dependency_2.io.LocalizedString.fromObject(data.localizedAdmissionLevel);
            }
            if (data.admissionLevelAbbreviation != null) {
                message.admissionLevelAbbreviation = data.admissionLevelAbbreviation;
            }
            if (data.localizedAdmissionLevelAbbreviation != null) {
                message.localizedAdmissionLevelAbbreviation = dependency_2.io.LocalizedString.fromObject(data.localizedAdmissionLevelAbbreviation);
            }
            if (data.additionalTicketAttributes != null) {
                message.additionalTicketAttributes = data.additionalTicketAttributes;
            }
            if (data.localizedAdditionalTicketAttributes != null) {
                message.localizedAdditionalTicketAttributes = dependency_2.io.LocalizedString.fromObject(data.localizedAdditionalTicketAttributes);
            }
            if (data.airlineCode != null) {
                message.airlineCode = data.airlineCode;
            }
            if (data.localizedAirlineCode != null) {
                message.localizedAirlineCode = dependency_2.io.LocalizedString.fromObject(data.localizedAirlineCode);
            }
            if (data.attendeeName != null) {
                message.attendeeName = data.attendeeName;
            }
            if (data.localizedAttendeeName != null) {
                message.localizedAttendeeName = dependency_2.io.LocalizedString.fromObject(data.localizedAttendeeName);
            }
            if (data.artistIds != null) {
                message.artistIds = data.artistIds;
            }
            if (data.awayTeamAbbreviation != null) {
                message.awayTeamAbbreviation = data.awayTeamAbbreviation;
            }
            if (data.localizedAwayTeamAbbreviation != null) {
                message.localizedAwayTeamAbbreviation = dependency_2.io.LocalizedString.fromObject(data.localizedAwayTeamAbbreviation);
            }
            if (data.awayTeamLocation != null) {
                message.awayTeamLocation = data.awayTeamLocation;
            }
            if (data.localizedAwayTeamLocation != null) {
                message.localizedAwayTeamLocation = dependency_2.io.LocalizedString.fromObject(data.localizedAwayTeamLocation);
            }
            if (data.awayTeamName != null) {
                message.awayTeamName = data.awayTeamName;
            }
            if (data.localizedAwayTeamName != null) {
                message.localizedAwayTeamName = dependency_2.io.LocalizedString.fromObject(data.localizedAwayTeamName);
            }
            if (data.balance != null) {
                message.balance = SemanticCurrencyAmount.fromObject(data.balance);
            }
            if (data.boardingGroup != null) {
                message.boardingGroup = data.boardingGroup;
            }
            if (data.localizedBoardingGroup != null) {
                message.localizedBoardingGroup = dependency_2.io.LocalizedString.fromObject(data.localizedBoardingGroup);
            }
            if (data.boardingSequenceNumber != null) {
                message.boardingSequenceNumber = data.boardingSequenceNumber;
            }
            if (data.carNumber != null) {
                message.carNumber = data.carNumber;
            }
            if (data.localizedCarNumber != null) {
                message.localizedCarNumber = dependency_2.io.LocalizedString.fromObject(data.localizedCarNumber);
            }
            if (data.confirmationNumber != null) {
                message.confirmationNumber = data.confirmationNumber;
            }
            if (data.localizedConfirmationNumber != null) {
                message.localizedConfirmationNumber = dependency_2.io.LocalizedString.fromObject(data.localizedConfirmationNumber);
            }
            if (data.currentArrivalDate != null) {
                message.currentArrivalDate = dependency_1.google.protobuf.Timestamp.fromObject(data.currentArrivalDate);
            }
            if (data.currentBoardingDate != null) {
                message.currentBoardingDate = dependency_1.google.protobuf.Timestamp.fromObject(data.currentBoardingDate);
            }
            if (data.currentDepartureDate != null) {
                message.currentDepartureDate = dependency_1.google.protobuf.Timestamp.fromObject(data.currentDepartureDate);
            }
            if (data.departureAirportCode != null) {
                message.departureAirportCode = data.departureAirportCode;
            }
            if (data.localizedDepartureAirportCode != null) {
                message.localizedDepartureAirportCode = dependency_2.io.LocalizedString.fromObject(data.localizedDepartureAirportCode);
            }
            if (data.departureAirportName != null) {
                message.departureAirportName = data.departureAirportName;
            }
            if (data.localizedDepartureAirportName != null) {
                message.localizedDepartureAirportName = dependency_2.io.LocalizedString.fromObject(data.localizedDepartureAirportName);
            }
            if (data.departureGate != null) {
                message.departureGate = data.departureGate;
            }
            if (data.localizedDepartureGate != null) {
                message.localizedDepartureGate = dependency_2.io.LocalizedString.fromObject(data.localizedDepartureGate);
            }
            if (data.departureLocation != null) {
                message.departureLocation = data.departureLocation;
            }
            if (data.localizedDepartureLocation != null) {
                message.localizedDepartureLocation = dependency_2.io.LocalizedString.fromObject(data.localizedDepartureLocation);
            }
            if (data.departureLocationDescription != null) {
                message.departureLocationDescription = data.departureLocationDescription;
            }
            if (data.localizedDepartureLocationDescription != null) {
                message.localizedDepartureLocationDescription = dependency_2.io.LocalizedString.fromObject(data.localizedDepartureLocationDescription);
            }
            if (data.departurePlatform != null) {
                message.departurePlatform = data.departurePlatform;
            }
            if (data.localizedDeparturePlatform != null) {
                message.localizedDeparturePlatform = dependency_2.io.LocalizedString.fromObject(data.localizedDeparturePlatform);
            }
            if (data.departureStationName != null) {
                message.departureStationName = data.departureStationName;
            }
            if (data.localizedDepartureStationName != null) {
                message.localizedDepartureStationName = dependency_2.io.LocalizedString.fromObject(data.localizedDepartureStationName);
            }
            if (data.departureTerminal != null) {
                message.departureTerminal = data.departureTerminal;
            }
            if (data.localizedDepartureTerminal != null) {
                message.localizedDepartureTerminal = dependency_2.io.LocalizedString.fromObject(data.localizedDepartureTerminal);
            }
            if (data.destinationAirportCode != null) {
                message.destinationAirportCode = data.destinationAirportCode;
            }
            if (data.localizedDestinationAirportCode != null) {
                message.localizedDestinationAirportCode = dependency_2.io.LocalizedString.fromObject(data.localizedDestinationAirportCode);
            }
            if (data.destinationAirportName != null) {
                message.destinationAirportName = data.destinationAirportName;
            }
            if (data.localizedDestinationAirportName != null) {
                message.localizedDestinationAirportName = dependency_2.io.LocalizedString.fromObject(data.localizedDestinationAirportName);
            }
            if (data.destinationGate != null) {
                message.destinationGate = data.destinationGate;
            }
            if (data.localizedDestinationGate != null) {
                message.localizedDestinationGate = dependency_2.io.LocalizedString.fromObject(data.localizedDestinationGate);
            }
            if (data.destinationLocation != null) {
                message.destinationLocation = data.destinationLocation;
            }
            if (data.localizedDestinationLocation != null) {
                message.localizedDestinationLocation = dependency_2.io.LocalizedString.fromObject(data.localizedDestinationLocation);
            }
            if (data.destinationLocationDescription != null) {
                message.destinationLocationDescription = data.destinationLocationDescription;
            }
            if (data.localizedDestinationLocationDescription != null) {
                message.localizedDestinationLocationDescription = dependency_2.io.LocalizedString.fromObject(data.localizedDestinationLocationDescription);
            }
            if (data.destinationPlatform != null) {
                message.destinationPlatform = data.destinationPlatform;
            }
            if (data.localizedDestinationPlatform != null) {
                message.localizedDestinationPlatform = dependency_2.io.LocalizedString.fromObject(data.localizedDestinationPlatform);
            }
            if (data.destinationStationName != null) {
                message.destinationStationName = data.destinationStationName;
            }
            if (data.localizedDestinationStationName != null) {
                message.localizedDestinationStationName = dependency_2.io.LocalizedString.fromObject(data.localizedDestinationStationName);
            }
            if (data.destinationTerminal != null) {
                message.destinationTerminal = data.destinationTerminal;
            }
            if (data.localizedDestinationTerminal != null) {
                message.localizedDestinationTerminal = dependency_2.io.LocalizedString.fromObject(data.localizedDestinationTerminal);
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.eventEndDate != null) {
                message.eventEndDate = dependency_1.google.protobuf.Timestamp.fromObject(data.eventEndDate);
            }
            if (data.eventName != null) {
                message.eventName = data.eventName;
            }
            if (data.localizedEventName != null) {
                message.localizedEventName = dependency_2.io.LocalizedString.fromObject(data.localizedEventName);
            }
            if (data.eventStartDate != null) {
                message.eventStartDate = dependency_1.google.protobuf.Timestamp.fromObject(data.eventStartDate);
            }
            if (data.eventStartDateInfo != null) {
                message.eventStartDateInfo = SemanticEventDateInfo.fromObject(data.eventStartDateInfo);
            }
            if (data.eventType != null) {
                message.eventType = data.eventType;
            }
            if (data.flightCode != null) {
                message.flightCode = data.flightCode;
            }
            if (data.localizedFlightCode != null) {
                message.localizedFlightCode = dependency_2.io.LocalizedString.fromObject(data.localizedFlightCode);
            }
            if (data.flightNumber != null) {
                message.flightNumber = data.flightNumber;
            }
            if (data.genre != null) {
                message.genre = data.genre;
            }
            if (data.localizedGenre != null) {
                message.localizedGenre = dependency_2.io.LocalizedString.fromObject(data.localizedGenre);
            }
            if (data.homeTeamAbbreviation != null) {
                message.homeTeamAbbreviation = data.homeTeamAbbreviation;
            }
            if (data.localizedHomeTeamAbbreviation != null) {
                message.localizedHomeTeamAbbreviation = dependency_2.io.LocalizedString.fromObject(data.localizedHomeTeamAbbreviation);
            }
            if (data.homeTeamLocation != null) {
                message.homeTeamLocation = data.homeTeamLocation;
            }
            if (data.localizedHomeTeamLocation != null) {
                message.localizedHomeTeamLocation = dependency_2.io.LocalizedString.fromObject(data.localizedHomeTeamLocation);
            }
            if (data.homeTeamName != null) {
                message.homeTeamName = data.homeTeamName;
            }
            if (data.localizedHomeTeamName != null) {
                message.localizedHomeTeamName = dependency_2.io.LocalizedString.fromObject(data.localizedHomeTeamName);
            }
            if (data.leagueAbbreviation != null) {
                message.leagueAbbreviation = data.leagueAbbreviation;
            }
            if (data.localizedLeagueAbbreviation != null) {
                message.localizedLeagueAbbreviation = dependency_2.io.LocalizedString.fromObject(data.localizedLeagueAbbreviation);
            }
            if (data.leagueName != null) {
                message.leagueName = data.leagueName;
            }
            if (data.localizedLeagueName != null) {
                message.localizedLeagueName = dependency_2.io.LocalizedString.fromObject(data.localizedLeagueName);
            }
            if (data.membershipProgramName != null) {
                message.membershipProgramName = data.membershipProgramName;
            }
            if (data.localizedMembershipProgramName != null) {
                message.localizedMembershipProgramName = dependency_2.io.LocalizedString.fromObject(data.localizedMembershipProgramName);
            }
            if (data.membershipProgramNumber != null) {
                message.membershipProgramNumber = data.membershipProgramNumber;
            }
            if (data.originalArrivalDate != null) {
                message.originalArrivalDate = dependency_1.google.protobuf.Timestamp.fromObject(data.originalArrivalDate);
            }
            if (data.originalBoardingDate != null) {
                message.originalBoardingDate = dependency_1.google.protobuf.Timestamp.fromObject(data.originalBoardingDate);
            }
            if (data.originalDepartureDate != null) {
                message.originalDepartureDate = dependency_1.google.protobuf.Timestamp.fromObject(data.originalDepartureDate);
            }
            if (data.passengerName != null) {
                message.passengerName = SemanticPersonName.fromObject(data.passengerName);
            }
            if (data.performerNames != null) {
                message.performerNames = data.performerNames;
            }
            if (data.priorityStatus != null) {
                message.priorityStatus = data.priorityStatus;
            }
            if (data.localizedPriorityStatus != null) {
                message.localizedPriorityStatus = dependency_2.io.LocalizedString.fromObject(data.localizedPriorityStatus);
            }
            if (data.albumIds != null) {
                message.albumIds = data.albumIds;
            }
            if (data.playlistIds != null) {
                message.playlistIds = data.playlistIds;
            }
            if (data.seats != null) {
                message.seats = data.seats.map(item => SemanticSeat.fromObject(item));
            }
            if (data.securityScreening != null) {
                message.securityScreening = data.securityScreening;
            }
            if (data.localizedSecurityScreening != null) {
                message.localizedSecurityScreening = dependency_2.io.LocalizedString.fromObject(data.localizedSecurityScreening);
            }
            if (data.silenceRequested != null) {
                message.silenceRequested = data.silenceRequested;
            }
            if (data.sportName != null) {
                message.sportName = data.sportName;
            }
            if (data.localizedSportName != null) {
                message.localizedSportName = dependency_2.io.LocalizedString.fromObject(data.localizedSportName);
            }
            if (data.totalPrice != null) {
                message.totalPrice = SemanticCurrencyAmount.fromObject(data.totalPrice);
            }
            if (data.transitProvider != null) {
                message.transitProvider = data.transitProvider;
            }
            if (data.localizedTransitProvider != null) {
                message.localizedTransitProvider = dependency_2.io.LocalizedString.fromObject(data.localizedTransitProvider);
            }
            if (data.transitStatus != null) {
                message.transitStatus = data.transitStatus;
            }
            if (data.localizedTransitStatus != null) {
                message.localizedTransitStatus = dependency_2.io.LocalizedString.fromObject(data.localizedTransitStatus);
            }
            if (data.transitStatusReason != null) {
                message.transitStatusReason = data.transitStatusReason;
            }
            if (data.localizedTransitStatusReason != null) {
                message.localizedTransitStatusReason = dependency_2.io.LocalizedString.fromObject(data.localizedTransitStatusReason);
            }
            if (data.vehicleName != null) {
                message.vehicleName = data.vehicleName;
            }
            if (data.localizedVehicleName != null) {
                message.localizedVehicleName = dependency_2.io.LocalizedString.fromObject(data.localizedVehicleName);
            }
            if (data.vehicleNumber != null) {
                message.vehicleNumber = data.vehicleNumber;
            }
            if (data.localizedVehicleNumber != null) {
                message.localizedVehicleNumber = dependency_2.io.LocalizedString.fromObject(data.localizedVehicleNumber);
            }
            if (data.vehicleType != null) {
                message.vehicleType = data.vehicleType;
            }
            if (data.localizedVehicleType != null) {
                message.localizedVehicleType = dependency_2.io.LocalizedString.fromObject(data.localizedVehicleType);
            }
            if (data.venueBoxOfficeOpenDate != null) {
                message.venueBoxOfficeOpenDate = dependency_1.google.protobuf.Timestamp.fromObject(data.venueBoxOfficeOpenDate);
            }
            if (data.venueCloseDate != null) {
                message.venueCloseDate = dependency_1.google.protobuf.Timestamp.fromObject(data.venueCloseDate);
            }
            if (data.venueDoorsOpenDate != null) {
                message.venueDoorsOpenDate = dependency_1.google.protobuf.Timestamp.fromObject(data.venueDoorsOpenDate);
            }
            if (data.venueEntrance != null) {
                message.venueEntrance = data.venueEntrance;
            }
            if (data.localizedVenueEntrance != null) {
                message.localizedVenueEntrance = dependency_2.io.LocalizedString.fromObject(data.localizedVenueEntrance);
            }
            if (data.venueLocation != null) {
                message.venueLocation = SemanticLocation.fromObject(data.venueLocation);
            }
            if (data.venueName != null) {
                message.venueName = data.venueName;
            }
            if (data.localizedVenueName != null) {
                message.localizedVenueName = dependency_2.io.LocalizedString.fromObject(data.localizedVenueName);
            }
            if (data.venuePhoneNumber != null) {
                message.venuePhoneNumber = data.venuePhoneNumber;
            }
            if (data.localizedVenuePhoneNumber != null) {
                message.localizedVenuePhoneNumber = dependency_2.io.LocalizedString.fromObject(data.localizedVenuePhoneNumber);
            }
            if (data.venueRegionName != null) {
                message.venueRegionName = data.venueRegionName;
            }
            if (data.localizedVenueRegionName != null) {
                message.localizedVenueRegionName = dependency_2.io.LocalizedString.fromObject(data.localizedVenueRegionName);
            }
            if (data.venueRoom != null) {
                message.venueRoom = data.venueRoom;
            }
            if (data.localizedVenueRoom != null) {
                message.localizedVenueRoom = dependency_2.io.LocalizedString.fromObject(data.localizedVenueRoom);
            }
            if (data.wifiAccess != null) {
                message.wifiAccess = data.wifiAccess.map(item => SemanticWifiNetwork.fromObject(item));
            }
            if (data.venueFanZoneOpenDate != null) {
                message.venueFanZoneOpenDate = dependency_1.google.protobuf.Timestamp.fromObject(data.venueFanZoneOpenDate);
            }
            if (data.venueGatesOpenDate != null) {
                message.venueGatesOpenDate = dependency_1.google.protobuf.Timestamp.fromObject(data.venueGatesOpenDate);
            }
            if (data.venueParkingLotsOpenDate != null) {
                message.venueParkingLotsOpenDate = dependency_1.google.protobuf.Timestamp.fromObject(data.venueParkingLotsOpenDate);
            }
            if (data.venueEntranceDoor != null) {
                message.venueEntranceDoor = data.venueEntranceDoor;
            }
            if (data.localizedVenueEntranceDoor != null) {
                message.localizedVenueEntranceDoor = dependency_2.io.LocalizedString.fromObject(data.localizedVenueEntranceDoor);
            }
            if (data.venueEntranceGate != null) {
                message.venueEntranceGate = data.venueEntranceGate;
            }
            if (data.localizedVenueEntranceGate != null) {
                message.localizedVenueEntranceGate = dependency_2.io.LocalizedString.fromObject(data.localizedVenueEntranceGate);
            }
            if (data.venueEntrancePortal != null) {
                message.venueEntrancePortal = data.venueEntrancePortal;
            }
            if (data.localizedVenueEntrancePortal != null) {
                message.localizedVenueEntrancePortal = dependency_2.io.LocalizedString.fromObject(data.localizedVenueEntrancePortal);
            }
            if (data.entranceDescription != null) {
                message.entranceDescription = data.entranceDescription;
            }
            if (data.localizedEntranceDescription != null) {
                message.localizedEntranceDescription = dependency_2.io.LocalizedString.fromObject(data.localizedEntranceDescription);
            }
            if (data.tailgatingAllowed != null) {
                message.tailgatingAllowed = data.tailgatingAllowed;
            }
            return message;
        }
        toObject() {
            const data: {
                admissionLevel?: string;
                localizedAdmissionLevel?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                admissionLevelAbbreviation?: string;
                localizedAdmissionLevelAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                additionalTicketAttributes?: string;
                localizedAdditionalTicketAttributes?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                airlineCode?: string;
                localizedAirlineCode?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                attendeeName?: string;
                localizedAttendeeName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                artistIds?: string[];
                awayTeamAbbreviation?: string;
                localizedAwayTeamAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                awayTeamLocation?: string;
                localizedAwayTeamLocation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                awayTeamName?: string;
                localizedAwayTeamName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                balance?: ReturnType<typeof SemanticCurrencyAmount.prototype.toObject>;
                boardingGroup?: string;
                localizedBoardingGroup?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                boardingSequenceNumber?: string;
                carNumber?: string;
                localizedCarNumber?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                confirmationNumber?: string;
                localizedConfirmationNumber?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                currentArrivalDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                currentBoardingDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                currentDepartureDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                departureAirportCode?: string;
                localizedDepartureAirportCode?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                departureAirportName?: string;
                localizedDepartureAirportName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                departureGate?: string;
                localizedDepartureGate?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                departureLocation?: string;
                localizedDepartureLocation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                departureLocationDescription?: string;
                localizedDepartureLocationDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                departurePlatform?: string;
                localizedDeparturePlatform?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                departureStationName?: string;
                localizedDepartureStationName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                departureTerminal?: string;
                localizedDepartureTerminal?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                destinationAirportCode?: string;
                localizedDestinationAirportCode?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                destinationAirportName?: string;
                localizedDestinationAirportName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                destinationGate?: string;
                localizedDestinationGate?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                destinationLocation?: string;
                localizedDestinationLocation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                destinationLocationDescription?: string;
                localizedDestinationLocationDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                destinationPlatform?: string;
                localizedDestinationPlatform?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                destinationStationName?: string;
                localizedDestinationStationName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                destinationTerminal?: string;
                localizedDestinationTerminal?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                duration?: number;
                eventEndDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                eventName?: string;
                localizedEventName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                eventStartDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                eventStartDateInfo?: ReturnType<typeof SemanticEventDateInfo.prototype.toObject>;
                eventType?: EventType;
                flightCode?: string;
                localizedFlightCode?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                flightNumber?: number;
                genre?: string;
                localizedGenre?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                homeTeamAbbreviation?: string;
                localizedHomeTeamAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                homeTeamLocation?: string;
                localizedHomeTeamLocation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                homeTeamName?: string;
                localizedHomeTeamName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                leagueAbbreviation?: string;
                localizedLeagueAbbreviation?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                leagueName?: string;
                localizedLeagueName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                membershipProgramName?: string;
                localizedMembershipProgramName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                membershipProgramNumber?: string;
                originalArrivalDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                originalBoardingDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                originalDepartureDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                passengerName?: ReturnType<typeof SemanticPersonName.prototype.toObject>;
                performerNames?: string[];
                priorityStatus?: string;
                localizedPriorityStatus?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                albumIds?: string[];
                playlistIds?: string[];
                seats?: ReturnType<typeof SemanticSeat.prototype.toObject>[];
                securityScreening?: string;
                localizedSecurityScreening?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                silenceRequested?: boolean;
                sportName?: string;
                localizedSportName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                totalPrice?: ReturnType<typeof SemanticCurrencyAmount.prototype.toObject>;
                transitProvider?: string;
                localizedTransitProvider?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                transitStatus?: string;
                localizedTransitStatus?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                transitStatusReason?: string;
                localizedTransitStatusReason?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                vehicleName?: string;
                localizedVehicleName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                vehicleNumber?: string;
                localizedVehicleNumber?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                vehicleType?: string;
                localizedVehicleType?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                venueBoxOfficeOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                venueCloseDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                venueDoorsOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                venueEntrance?: string;
                localizedVenueEntrance?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                venueLocation?: ReturnType<typeof SemanticLocation.prototype.toObject>;
                venueName?: string;
                localizedVenueName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                venuePhoneNumber?: string;
                localizedVenuePhoneNumber?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                venueRegionName?: string;
                localizedVenueRegionName?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                venueRoom?: string;
                localizedVenueRoom?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                wifiAccess?: ReturnType<typeof SemanticWifiNetwork.prototype.toObject>[];
                venueFanZoneOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                venueGatesOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                venueParkingLotsOpenDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                venueEntranceDoor?: string;
                localizedVenueEntranceDoor?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                venueEntranceGate?: string;
                localizedVenueEntranceGate?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                venueEntrancePortal?: string;
                localizedVenueEntrancePortal?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                entranceDescription?: string;
                localizedEntranceDescription?: ReturnType<typeof dependency_2.io.LocalizedString.prototype.toObject>;
                tailgatingAllowed?: boolean;
            } = {};
            if (this.admissionLevel != null) {
                data.admissionLevel = this.admissionLevel;
            }
            if (this.localizedAdmissionLevel != null) {
                data.localizedAdmissionLevel = this.localizedAdmissionLevel.toObject();
            }
            if (this.admissionLevelAbbreviation != null) {
                data.admissionLevelAbbreviation = this.admissionLevelAbbreviation;
            }
            if (this.localizedAdmissionLevelAbbreviation != null) {
                data.localizedAdmissionLevelAbbreviation = this.localizedAdmissionLevelAbbreviation.toObject();
            }
            if (this.additionalTicketAttributes != null) {
                data.additionalTicketAttributes = this.additionalTicketAttributes;
            }
            if (this.localizedAdditionalTicketAttributes != null) {
                data.localizedAdditionalTicketAttributes = this.localizedAdditionalTicketAttributes.toObject();
            }
            if (this.airlineCode != null) {
                data.airlineCode = this.airlineCode;
            }
            if (this.localizedAirlineCode != null) {
                data.localizedAirlineCode = this.localizedAirlineCode.toObject();
            }
            if (this.attendeeName != null) {
                data.attendeeName = this.attendeeName;
            }
            if (this.localizedAttendeeName != null) {
                data.localizedAttendeeName = this.localizedAttendeeName.toObject();
            }
            if (this.artistIds != null) {
                data.artistIds = this.artistIds;
            }
            if (this.awayTeamAbbreviation != null) {
                data.awayTeamAbbreviation = this.awayTeamAbbreviation;
            }
            if (this.localizedAwayTeamAbbreviation != null) {
                data.localizedAwayTeamAbbreviation = this.localizedAwayTeamAbbreviation.toObject();
            }
            if (this.awayTeamLocation != null) {
                data.awayTeamLocation = this.awayTeamLocation;
            }
            if (this.localizedAwayTeamLocation != null) {
                data.localizedAwayTeamLocation = this.localizedAwayTeamLocation.toObject();
            }
            if (this.awayTeamName != null) {
                data.awayTeamName = this.awayTeamName;
            }
            if (this.localizedAwayTeamName != null) {
                data.localizedAwayTeamName = this.localizedAwayTeamName.toObject();
            }
            if (this.balance != null) {
                data.balance = this.balance.toObject();
            }
            if (this.boardingGroup != null) {
                data.boardingGroup = this.boardingGroup;
            }
            if (this.localizedBoardingGroup != null) {
                data.localizedBoardingGroup = this.localizedBoardingGroup.toObject();
            }
            if (this.boardingSequenceNumber != null) {
                data.boardingSequenceNumber = this.boardingSequenceNumber;
            }
            if (this.carNumber != null) {
                data.carNumber = this.carNumber;
            }
            if (this.localizedCarNumber != null) {
                data.localizedCarNumber = this.localizedCarNumber.toObject();
            }
            if (this.confirmationNumber != null) {
                data.confirmationNumber = this.confirmationNumber;
            }
            if (this.localizedConfirmationNumber != null) {
                data.localizedConfirmationNumber = this.localizedConfirmationNumber.toObject();
            }
            if (this.currentArrivalDate != null) {
                data.currentArrivalDate = this.currentArrivalDate.toObject();
            }
            if (this.currentBoardingDate != null) {
                data.currentBoardingDate = this.currentBoardingDate.toObject();
            }
            if (this.currentDepartureDate != null) {
                data.currentDepartureDate = this.currentDepartureDate.toObject();
            }
            if (this.departureAirportCode != null) {
                data.departureAirportCode = this.departureAirportCode;
            }
            if (this.localizedDepartureAirportCode != null) {
                data.localizedDepartureAirportCode = this.localizedDepartureAirportCode.toObject();
            }
            if (this.departureAirportName != null) {
                data.departureAirportName = this.departureAirportName;
            }
            if (this.localizedDepartureAirportName != null) {
                data.localizedDepartureAirportName = this.localizedDepartureAirportName.toObject();
            }
            if (this.departureGate != null) {
                data.departureGate = this.departureGate;
            }
            if (this.localizedDepartureGate != null) {
                data.localizedDepartureGate = this.localizedDepartureGate.toObject();
            }
            if (this.departureLocation != null) {
                data.departureLocation = this.departureLocation;
            }
            if (this.localizedDepartureLocation != null) {
                data.localizedDepartureLocation = this.localizedDepartureLocation.toObject();
            }
            if (this.departureLocationDescription != null) {
                data.departureLocationDescription = this.departureLocationDescription;
            }
            if (this.localizedDepartureLocationDescription != null) {
                data.localizedDepartureLocationDescription = this.localizedDepartureLocationDescription.toObject();
            }
            if (this.departurePlatform != null) {
                data.departurePlatform = this.departurePlatform;
            }
            if (this.localizedDeparturePlatform != null) {
                data.localizedDeparturePlatform = this.localizedDeparturePlatform.toObject();
            }
            if (this.departureStationName != null) {
                data.departureStationName = this.departureStationName;
            }
            if (this.localizedDepartureStationName != null) {
                data.localizedDepartureStationName = this.localizedDepartureStationName.toObject();
            }
            if (this.departureTerminal != null) {
                data.departureTerminal = this.departureTerminal;
            }
            if (this.localizedDepartureTerminal != null) {
                data.localizedDepartureTerminal = this.localizedDepartureTerminal.toObject();
            }
            if (this.destinationAirportCode != null) {
                data.destinationAirportCode = this.destinationAirportCode;
            }
            if (this.localizedDestinationAirportCode != null) {
                data.localizedDestinationAirportCode = this.localizedDestinationAirportCode.toObject();
            }
            if (this.destinationAirportName != null) {
                data.destinationAirportName = this.destinationAirportName;
            }
            if (this.localizedDestinationAirportName != null) {
                data.localizedDestinationAirportName = this.localizedDestinationAirportName.toObject();
            }
            if (this.destinationGate != null) {
                data.destinationGate = this.destinationGate;
            }
            if (this.localizedDestinationGate != null) {
                data.localizedDestinationGate = this.localizedDestinationGate.toObject();
            }
            if (this.destinationLocation != null) {
                data.destinationLocation = this.destinationLocation;
            }
            if (this.localizedDestinationLocation != null) {
                data.localizedDestinationLocation = this.localizedDestinationLocation.toObject();
            }
            if (this.destinationLocationDescription != null) {
                data.destinationLocationDescription = this.destinationLocationDescription;
            }
            if (this.localizedDestinationLocationDescription != null) {
                data.localizedDestinationLocationDescription = this.localizedDestinationLocationDescription.toObject();
            }
            if (this.destinationPlatform != null) {
                data.destinationPlatform = this.destinationPlatform;
            }
            if (this.localizedDestinationPlatform != null) {
                data.localizedDestinationPlatform = this.localizedDestinationPlatform.toObject();
            }
            if (this.destinationStationName != null) {
                data.destinationStationName = this.destinationStationName;
            }
            if (this.localizedDestinationStationName != null) {
                data.localizedDestinationStationName = this.localizedDestinationStationName.toObject();
            }
            if (this.destinationTerminal != null) {
                data.destinationTerminal = this.destinationTerminal;
            }
            if (this.localizedDestinationTerminal != null) {
                data.localizedDestinationTerminal = this.localizedDestinationTerminal.toObject();
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.eventEndDate != null) {
                data.eventEndDate = this.eventEndDate.toObject();
            }
            if (this.eventName != null) {
                data.eventName = this.eventName;
            }
            if (this.localizedEventName != null) {
                data.localizedEventName = this.localizedEventName.toObject();
            }
            if (this.eventStartDate != null) {
                data.eventStartDate = this.eventStartDate.toObject();
            }
            if (this.eventStartDateInfo != null) {
                data.eventStartDateInfo = this.eventStartDateInfo.toObject();
            }
            if (this.eventType != null) {
                data.eventType = this.eventType;
            }
            if (this.flightCode != null) {
                data.flightCode = this.flightCode;
            }
            if (this.localizedFlightCode != null) {
                data.localizedFlightCode = this.localizedFlightCode.toObject();
            }
            if (this.flightNumber != null) {
                data.flightNumber = this.flightNumber;
            }
            if (this.genre != null) {
                data.genre = this.genre;
            }
            if (this.localizedGenre != null) {
                data.localizedGenre = this.localizedGenre.toObject();
            }
            if (this.homeTeamAbbreviation != null) {
                data.homeTeamAbbreviation = this.homeTeamAbbreviation;
            }
            if (this.localizedHomeTeamAbbreviation != null) {
                data.localizedHomeTeamAbbreviation = this.localizedHomeTeamAbbreviation.toObject();
            }
            if (this.homeTeamLocation != null) {
                data.homeTeamLocation = this.homeTeamLocation;
            }
            if (this.localizedHomeTeamLocation != null) {
                data.localizedHomeTeamLocation = this.localizedHomeTeamLocation.toObject();
            }
            if (this.homeTeamName != null) {
                data.homeTeamName = this.homeTeamName;
            }
            if (this.localizedHomeTeamName != null) {
                data.localizedHomeTeamName = this.localizedHomeTeamName.toObject();
            }
            if (this.leagueAbbreviation != null) {
                data.leagueAbbreviation = this.leagueAbbreviation;
            }
            if (this.localizedLeagueAbbreviation != null) {
                data.localizedLeagueAbbreviation = this.localizedLeagueAbbreviation.toObject();
            }
            if (this.leagueName != null) {
                data.leagueName = this.leagueName;
            }
            if (this.localizedLeagueName != null) {
                data.localizedLeagueName = this.localizedLeagueName.toObject();
            }
            if (this.membershipProgramName != null) {
                data.membershipProgramName = this.membershipProgramName;
            }
            if (this.localizedMembershipProgramName != null) {
                data.localizedMembershipProgramName = this.localizedMembershipProgramName.toObject();
            }
            if (this.membershipProgramNumber != null) {
                data.membershipProgramNumber = this.membershipProgramNumber;
            }
            if (this.originalArrivalDate != null) {
                data.originalArrivalDate = this.originalArrivalDate.toObject();
            }
            if (this.originalBoardingDate != null) {
                data.originalBoardingDate = this.originalBoardingDate.toObject();
            }
            if (this.originalDepartureDate != null) {
                data.originalDepartureDate = this.originalDepartureDate.toObject();
            }
            if (this.passengerName != null) {
                data.passengerName = this.passengerName.toObject();
            }
            if (this.performerNames != null) {
                data.performerNames = this.performerNames;
            }
            if (this.priorityStatus != null) {
                data.priorityStatus = this.priorityStatus;
            }
            if (this.localizedPriorityStatus != null) {
                data.localizedPriorityStatus = this.localizedPriorityStatus.toObject();
            }
            if (this.albumIds != null) {
                data.albumIds = this.albumIds;
            }
            if (this.playlistIds != null) {
                data.playlistIds = this.playlistIds;
            }
            if (this.seats != null) {
                data.seats = this.seats.map((item: SemanticSeat) => item.toObject());
            }
            if (this.securityScreening != null) {
                data.securityScreening = this.securityScreening;
            }
            if (this.localizedSecurityScreening != null) {
                data.localizedSecurityScreening = this.localizedSecurityScreening.toObject();
            }
            if (this.silenceRequested != null) {
                data.silenceRequested = this.silenceRequested;
            }
            if (this.sportName != null) {
                data.sportName = this.sportName;
            }
            if (this.localizedSportName != null) {
                data.localizedSportName = this.localizedSportName.toObject();
            }
            if (this.totalPrice != null) {
                data.totalPrice = this.totalPrice.toObject();
            }
            if (this.transitProvider != null) {
                data.transitProvider = this.transitProvider;
            }
            if (this.localizedTransitProvider != null) {
                data.localizedTransitProvider = this.localizedTransitProvider.toObject();
            }
            if (this.transitStatus != null) {
                data.transitStatus = this.transitStatus;
            }
            if (this.localizedTransitStatus != null) {
                data.localizedTransitStatus = this.localizedTransitStatus.toObject();
            }
            if (this.transitStatusReason != null) {
                data.transitStatusReason = this.transitStatusReason;
            }
            if (this.localizedTransitStatusReason != null) {
                data.localizedTransitStatusReason = this.localizedTransitStatusReason.toObject();
            }
            if (this.vehicleName != null) {
                data.vehicleName = this.vehicleName;
            }
            if (this.localizedVehicleName != null) {
                data.localizedVehicleName = this.localizedVehicleName.toObject();
            }
            if (this.vehicleNumber != null) {
                data.vehicleNumber = this.vehicleNumber;
            }
            if (this.localizedVehicleNumber != null) {
                data.localizedVehicleNumber = this.localizedVehicleNumber.toObject();
            }
            if (this.vehicleType != null) {
                data.vehicleType = this.vehicleType;
            }
            if (this.localizedVehicleType != null) {
                data.localizedVehicleType = this.localizedVehicleType.toObject();
            }
            if (this.venueBoxOfficeOpenDate != null) {
                data.venueBoxOfficeOpenDate = this.venueBoxOfficeOpenDate.toObject();
            }
            if (this.venueCloseDate != null) {
                data.venueCloseDate = this.venueCloseDate.toObject();
            }
            if (this.venueDoorsOpenDate != null) {
                data.venueDoorsOpenDate = this.venueDoorsOpenDate.toObject();
            }
            if (this.venueEntrance != null) {
                data.venueEntrance = this.venueEntrance;
            }
            if (this.localizedVenueEntrance != null) {
                data.localizedVenueEntrance = this.localizedVenueEntrance.toObject();
            }
            if (this.venueLocation != null) {
                data.venueLocation = this.venueLocation.toObject();
            }
            if (this.venueName != null) {
                data.venueName = this.venueName;
            }
            if (this.localizedVenueName != null) {
                data.localizedVenueName = this.localizedVenueName.toObject();
            }
            if (this.venuePhoneNumber != null) {
                data.venuePhoneNumber = this.venuePhoneNumber;
            }
            if (this.localizedVenuePhoneNumber != null) {
                data.localizedVenuePhoneNumber = this.localizedVenuePhoneNumber.toObject();
            }
            if (this.venueRegionName != null) {
                data.venueRegionName = this.venueRegionName;
            }
            if (this.localizedVenueRegionName != null) {
                data.localizedVenueRegionName = this.localizedVenueRegionName.toObject();
            }
            if (this.venueRoom != null) {
                data.venueRoom = this.venueRoom;
            }
            if (this.localizedVenueRoom != null) {
                data.localizedVenueRoom = this.localizedVenueRoom.toObject();
            }
            if (this.wifiAccess != null) {
                data.wifiAccess = this.wifiAccess.map((item: SemanticWifiNetwork) => item.toObject());
            }
            if (this.venueFanZoneOpenDate != null) {
                data.venueFanZoneOpenDate = this.venueFanZoneOpenDate.toObject();
            }
            if (this.venueGatesOpenDate != null) {
                data.venueGatesOpenDate = this.venueGatesOpenDate.toObject();
            }
            if (this.venueParkingLotsOpenDate != null) {
                data.venueParkingLotsOpenDate = this.venueParkingLotsOpenDate.toObject();
            }
            if (this.venueEntranceDoor != null) {
                data.venueEntranceDoor = this.venueEntranceDoor;
            }
            if (this.localizedVenueEntranceDoor != null) {
                data.localizedVenueEntranceDoor = this.localizedVenueEntranceDoor.toObject();
            }
            if (this.venueEntranceGate != null) {
                data.venueEntranceGate = this.venueEntranceGate;
            }
            if (this.localizedVenueEntranceGate != null) {
                data.localizedVenueEntranceGate = this.localizedVenueEntranceGate.toObject();
            }
            if (this.venueEntrancePortal != null) {
                data.venueEntrancePortal = this.venueEntrancePortal;
            }
            if (this.localizedVenueEntrancePortal != null) {
                data.localizedVenueEntrancePortal = this.localizedVenueEntrancePortal.toObject();
            }
            if (this.entranceDescription != null) {
                data.entranceDescription = this.entranceDescription;
            }
            if (this.localizedEntranceDescription != null) {
                data.localizedEntranceDescription = this.localizedEntranceDescription.toObject();
            }
            if (this.tailgatingAllowed != null) {
                data.tailgatingAllowed = this.tailgatingAllowed;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.admissionLevel.length)
                writer.writeString(1, this.admissionLevel);
            if (this.hasLocalizedAdmissionLevel)
                writer.writeMessage(2, this.localizedAdmissionLevel, () => this.localizedAdmissionLevel.serialize(writer));
            if (this.admissionLevelAbbreviation.length)
                writer.writeString(3, this.admissionLevelAbbreviation);
            if (this.hasLocalizedAdmissionLevelAbbreviation)
                writer.writeMessage(4, this.localizedAdmissionLevelAbbreviation, () => this.localizedAdmissionLevelAbbreviation.serialize(writer));
            if (this.additionalTicketAttributes.length)
                writer.writeString(5, this.additionalTicketAttributes);
            if (this.hasLocalizedAdditionalTicketAttributes)
                writer.writeMessage(6, this.localizedAdditionalTicketAttributes, () => this.localizedAdditionalTicketAttributes.serialize(writer));
            if (this.airlineCode.length)
                writer.writeString(7, this.airlineCode);
            if (this.hasLocalizedAirlineCode)
                writer.writeMessage(8, this.localizedAirlineCode, () => this.localizedAirlineCode.serialize(writer));
            if (this.attendeeName.length)
                writer.writeString(9, this.attendeeName);
            if (this.hasLocalizedAttendeeName)
                writer.writeMessage(10, this.localizedAttendeeName, () => this.localizedAttendeeName.serialize(writer));
            if (this.artistIds.length)
                writer.writeRepeatedString(11, this.artistIds);
            if (this.awayTeamAbbreviation.length)
                writer.writeString(12, this.awayTeamAbbreviation);
            if (this.hasLocalizedAwayTeamAbbreviation)
                writer.writeMessage(13, this.localizedAwayTeamAbbreviation, () => this.localizedAwayTeamAbbreviation.serialize(writer));
            if (this.awayTeamLocation.length)
                writer.writeString(14, this.awayTeamLocation);
            if (this.hasLocalizedAwayTeamLocation)
                writer.writeMessage(15, this.localizedAwayTeamLocation, () => this.localizedAwayTeamLocation.serialize(writer));
            if (this.awayTeamName.length)
                writer.writeString(16, this.awayTeamName);
            if (this.hasLocalizedAwayTeamName)
                writer.writeMessage(17, this.localizedAwayTeamName, () => this.localizedAwayTeamName.serialize(writer));
            if (this.hasBalance)
                writer.writeMessage(18, this.balance, () => this.balance.serialize(writer));
            if (this.boardingGroup.length)
                writer.writeString(19, this.boardingGroup);
            if (this.hasLocalizedBoardingGroup)
                writer.writeMessage(20, this.localizedBoardingGroup, () => this.localizedBoardingGroup.serialize(writer));
            if (this.boardingSequenceNumber.length)
                writer.writeString(21, this.boardingSequenceNumber);
            if (this.carNumber.length)
                writer.writeString(22, this.carNumber);
            if (this.hasLocalizedCarNumber)
                writer.writeMessage(23, this.localizedCarNumber, () => this.localizedCarNumber.serialize(writer));
            if (this.confirmationNumber.length)
                writer.writeString(24, this.confirmationNumber);
            if (this.hasLocalizedConfirmationNumber)
                writer.writeMessage(25, this.localizedConfirmationNumber, () => this.localizedConfirmationNumber.serialize(writer));
            if (this.hasCurrentArrivalDate)
                writer.writeMessage(26, this.currentArrivalDate, () => this.currentArrivalDate.serialize(writer));
            if (this.hasCurrentBoardingDate)
                writer.writeMessage(27, this.currentBoardingDate, () => this.currentBoardingDate.serialize(writer));
            if (this.hasCurrentDepartureDate)
                writer.writeMessage(28, this.currentDepartureDate, () => this.currentDepartureDate.serialize(writer));
            if (this.departureAirportCode.length)
                writer.writeString(29, this.departureAirportCode);
            if (this.hasLocalizedDepartureAirportCode)
                writer.writeMessage(30, this.localizedDepartureAirportCode, () => this.localizedDepartureAirportCode.serialize(writer));
            if (this.departureAirportName.length)
                writer.writeString(31, this.departureAirportName);
            if (this.hasLocalizedDepartureAirportName)
                writer.writeMessage(32, this.localizedDepartureAirportName, () => this.localizedDepartureAirportName.serialize(writer));
            if (this.departureGate.length)
                writer.writeString(33, this.departureGate);
            if (this.hasLocalizedDepartureGate)
                writer.writeMessage(34, this.localizedDepartureGate, () => this.localizedDepartureGate.serialize(writer));
            if (this.departureLocation.length)
                writer.writeString(35, this.departureLocation);
            if (this.hasLocalizedDepartureLocation)
                writer.writeMessage(36, this.localizedDepartureLocation, () => this.localizedDepartureLocation.serialize(writer));
            if (this.departureLocationDescription.length)
                writer.writeString(37, this.departureLocationDescription);
            if (this.hasLocalizedDepartureLocationDescription)
                writer.writeMessage(38, this.localizedDepartureLocationDescription, () => this.localizedDepartureLocationDescription.serialize(writer));
            if (this.departurePlatform.length)
                writer.writeString(39, this.departurePlatform);
            if (this.hasLocalizedDeparturePlatform)
                writer.writeMessage(40, this.localizedDeparturePlatform, () => this.localizedDeparturePlatform.serialize(writer));
            if (this.departureStationName.length)
                writer.writeString(41, this.departureStationName);
            if (this.hasLocalizedDepartureStationName)
                writer.writeMessage(42, this.localizedDepartureStationName, () => this.localizedDepartureStationName.serialize(writer));
            if (this.departureTerminal.length)
                writer.writeString(43, this.departureTerminal);
            if (this.hasLocalizedDepartureTerminal)
                writer.writeMessage(44, this.localizedDepartureTerminal, () => this.localizedDepartureTerminal.serialize(writer));
            if (this.destinationAirportCode.length)
                writer.writeString(45, this.destinationAirportCode);
            if (this.hasLocalizedDestinationAirportCode)
                writer.writeMessage(46, this.localizedDestinationAirportCode, () => this.localizedDestinationAirportCode.serialize(writer));
            if (this.destinationAirportName.length)
                writer.writeString(47, this.destinationAirportName);
            if (this.hasLocalizedDestinationAirportName)
                writer.writeMessage(48, this.localizedDestinationAirportName, () => this.localizedDestinationAirportName.serialize(writer));
            if (this.destinationGate.length)
                writer.writeString(49, this.destinationGate);
            if (this.hasLocalizedDestinationGate)
                writer.writeMessage(50, this.localizedDestinationGate, () => this.localizedDestinationGate.serialize(writer));
            if (this.destinationLocation.length)
                writer.writeString(51, this.destinationLocation);
            if (this.hasLocalizedDestinationLocation)
                writer.writeMessage(52, this.localizedDestinationLocation, () => this.localizedDestinationLocation.serialize(writer));
            if (this.destinationLocationDescription.length)
                writer.writeString(53, this.destinationLocationDescription);
            if (this.hasLocalizedDestinationLocationDescription)
                writer.writeMessage(54, this.localizedDestinationLocationDescription, () => this.localizedDestinationLocationDescription.serialize(writer));
            if (this.destinationPlatform.length)
                writer.writeString(55, this.destinationPlatform);
            if (this.hasLocalizedDestinationPlatform)
                writer.writeMessage(56, this.localizedDestinationPlatform, () => this.localizedDestinationPlatform.serialize(writer));
            if (this.destinationStationName.length)
                writer.writeString(57, this.destinationStationName);
            if (this.hasLocalizedDestinationStationName)
                writer.writeMessage(58, this.localizedDestinationStationName, () => this.localizedDestinationStationName.serialize(writer));
            if (this.destinationTerminal.length)
                writer.writeString(59, this.destinationTerminal);
            if (this.hasLocalizedDestinationTerminal)
                writer.writeMessage(60, this.localizedDestinationTerminal, () => this.localizedDestinationTerminal.serialize(writer));
            if (this.duration != 0)
                writer.writeUint64(61, this.duration);
            if (this.hasEventEndDate)
                writer.writeMessage(62, this.eventEndDate, () => this.eventEndDate.serialize(writer));
            if (this.eventName.length)
                writer.writeString(63, this.eventName);
            if (this.hasLocalizedEventName)
                writer.writeMessage(64, this.localizedEventName, () => this.localizedEventName.serialize(writer));
            if (this.hasEventStartDate)
                writer.writeMessage(65, this.eventStartDate, () => this.eventStartDate.serialize(writer));
            if (this.hasEventStartDateInfo)
                writer.writeMessage(66, this.eventStartDateInfo, () => this.eventStartDateInfo.serialize(writer));
            if (this.eventType != EventType.EVENT_TYPE_NONE)
                writer.writeEnum(67, this.eventType);
            if (this.flightCode.length)
                writer.writeString(68, this.flightCode);
            if (this.hasLocalizedFlightCode)
                writer.writeMessage(69, this.localizedFlightCode, () => this.localizedFlightCode.serialize(writer));
            if (this.flightNumber != 0)
                writer.writeUint32(70, this.flightNumber);
            if (this.genre.length)
                writer.writeString(71, this.genre);
            if (this.hasLocalizedGenre)
                writer.writeMessage(72, this.localizedGenre, () => this.localizedGenre.serialize(writer));
            if (this.homeTeamAbbreviation.length)
                writer.writeString(73, this.homeTeamAbbreviation);
            if (this.hasLocalizedHomeTeamAbbreviation)
                writer.writeMessage(74, this.localizedHomeTeamAbbreviation, () => this.localizedHomeTeamAbbreviation.serialize(writer));
            if (this.homeTeamLocation.length)
                writer.writeString(75, this.homeTeamLocation);
            if (this.hasLocalizedHomeTeamLocation)
                writer.writeMessage(76, this.localizedHomeTeamLocation, () => this.localizedHomeTeamLocation.serialize(writer));
            if (this.homeTeamName.length)
                writer.writeString(77, this.homeTeamName);
            if (this.hasLocalizedHomeTeamName)
                writer.writeMessage(78, this.localizedHomeTeamName, () => this.localizedHomeTeamName.serialize(writer));
            if (this.leagueAbbreviation.length)
                writer.writeString(79, this.leagueAbbreviation);
            if (this.hasLocalizedLeagueAbbreviation)
                writer.writeMessage(80, this.localizedLeagueAbbreviation, () => this.localizedLeagueAbbreviation.serialize(writer));
            if (this.leagueName.length)
                writer.writeString(81, this.leagueName);
            if (this.hasLocalizedLeagueName)
                writer.writeMessage(82, this.localizedLeagueName, () => this.localizedLeagueName.serialize(writer));
            if (this.membershipProgramName.length)
                writer.writeString(83, this.membershipProgramName);
            if (this.hasLocalizedMembershipProgramName)
                writer.writeMessage(84, this.localizedMembershipProgramName, () => this.localizedMembershipProgramName.serialize(writer));
            if (this.membershipProgramNumber.length)
                writer.writeString(85, this.membershipProgramNumber);
            if (this.hasOriginalArrivalDate)
                writer.writeMessage(86, this.originalArrivalDate, () => this.originalArrivalDate.serialize(writer));
            if (this.hasOriginalBoardingDate)
                writer.writeMessage(87, this.originalBoardingDate, () => this.originalBoardingDate.serialize(writer));
            if (this.hasOriginalDepartureDate)
                writer.writeMessage(88, this.originalDepartureDate, () => this.originalDepartureDate.serialize(writer));
            if (this.hasPassengerName)
                writer.writeMessage(89, this.passengerName, () => this.passengerName.serialize(writer));
            if (this.performerNames.length)
                writer.writeRepeatedString(90, this.performerNames);
            if (this.priorityStatus.length)
                writer.writeString(91, this.priorityStatus);
            if (this.hasLocalizedPriorityStatus)
                writer.writeMessage(92, this.localizedPriorityStatus, () => this.localizedPriorityStatus.serialize(writer));
            if (this.albumIds.length)
                writer.writeRepeatedString(93, this.albumIds);
            if (this.playlistIds.length)
                writer.writeRepeatedString(94, this.playlistIds);
            if (this.seats.length)
                writer.writeRepeatedMessage(95, this.seats, (item: SemanticSeat) => item.serialize(writer));
            if (this.securityScreening.length)
                writer.writeString(96, this.securityScreening);
            if (this.hasLocalizedSecurityScreening)
                writer.writeMessage(97, this.localizedSecurityScreening, () => this.localizedSecurityScreening.serialize(writer));
            if (this.silenceRequested != false)
                writer.writeBool(98, this.silenceRequested);
            if (this.sportName.length)
                writer.writeString(99, this.sportName);
            if (this.hasLocalizedSportName)
                writer.writeMessage(100, this.localizedSportName, () => this.localizedSportName.serialize(writer));
            if (this.hasTotalPrice)
                writer.writeMessage(101, this.totalPrice, () => this.totalPrice.serialize(writer));
            if (this.transitProvider.length)
                writer.writeString(102, this.transitProvider);
            if (this.hasLocalizedTransitProvider)
                writer.writeMessage(103, this.localizedTransitProvider, () => this.localizedTransitProvider.serialize(writer));
            if (this.transitStatus.length)
                writer.writeString(104, this.transitStatus);
            if (this.hasLocalizedTransitStatus)
                writer.writeMessage(105, this.localizedTransitStatus, () => this.localizedTransitStatus.serialize(writer));
            if (this.transitStatusReason.length)
                writer.writeString(106, this.transitStatusReason);
            if (this.hasLocalizedTransitStatusReason)
                writer.writeMessage(107, this.localizedTransitStatusReason, () => this.localizedTransitStatusReason.serialize(writer));
            if (this.vehicleName.length)
                writer.writeString(108, this.vehicleName);
            if (this.hasLocalizedVehicleName)
                writer.writeMessage(109, this.localizedVehicleName, () => this.localizedVehicleName.serialize(writer));
            if (this.vehicleNumber.length)
                writer.writeString(110, this.vehicleNumber);
            if (this.hasLocalizedVehicleNumber)
                writer.writeMessage(111, this.localizedVehicleNumber, () => this.localizedVehicleNumber.serialize(writer));
            if (this.vehicleType.length)
                writer.writeString(112, this.vehicleType);
            if (this.hasLocalizedVehicleType)
                writer.writeMessage(113, this.localizedVehicleType, () => this.localizedVehicleType.serialize(writer));
            if (this.hasVenueBoxOfficeOpenDate)
                writer.writeMessage(114, this.venueBoxOfficeOpenDate, () => this.venueBoxOfficeOpenDate.serialize(writer));
            if (this.hasVenueCloseDate)
                writer.writeMessage(115, this.venueCloseDate, () => this.venueCloseDate.serialize(writer));
            if (this.hasVenueDoorsOpenDate)
                writer.writeMessage(116, this.venueDoorsOpenDate, () => this.venueDoorsOpenDate.serialize(writer));
            if (this.venueEntrance.length)
                writer.writeString(117, this.venueEntrance);
            if (this.hasLocalizedVenueEntrance)
                writer.writeMessage(118, this.localizedVenueEntrance, () => this.localizedVenueEntrance.serialize(writer));
            if (this.hasVenueLocation)
                writer.writeMessage(119, this.venueLocation, () => this.venueLocation.serialize(writer));
            if (this.venueName.length)
                writer.writeString(120, this.venueName);
            if (this.hasLocalizedVenueName)
                writer.writeMessage(121, this.localizedVenueName, () => this.localizedVenueName.serialize(writer));
            if (this.venuePhoneNumber.length)
                writer.writeString(122, this.venuePhoneNumber);
            if (this.hasLocalizedVenuePhoneNumber)
                writer.writeMessage(123, this.localizedVenuePhoneNumber, () => this.localizedVenuePhoneNumber.serialize(writer));
            if (this.venueRegionName.length)
                writer.writeString(124, this.venueRegionName);
            if (this.hasLocalizedVenueRegionName)
                writer.writeMessage(125, this.localizedVenueRegionName, () => this.localizedVenueRegionName.serialize(writer));
            if (this.venueRoom.length)
                writer.writeString(126, this.venueRoom);
            if (this.hasLocalizedVenueRoom)
                writer.writeMessage(127, this.localizedVenueRoom, () => this.localizedVenueRoom.serialize(writer));
            if (this.wifiAccess.length)
                writer.writeRepeatedMessage(128, this.wifiAccess, (item: SemanticWifiNetwork) => item.serialize(writer));
            if (this.hasVenueFanZoneOpenDate)
                writer.writeMessage(129, this.venueFanZoneOpenDate, () => this.venueFanZoneOpenDate.serialize(writer));
            if (this.hasVenueGatesOpenDate)
                writer.writeMessage(130, this.venueGatesOpenDate, () => this.venueGatesOpenDate.serialize(writer));
            if (this.hasVenueParkingLotsOpenDate)
                writer.writeMessage(131, this.venueParkingLotsOpenDate, () => this.venueParkingLotsOpenDate.serialize(writer));
            if (this.venueEntranceDoor.length)
                writer.writeString(132, this.venueEntranceDoor);
            if (this.hasLocalizedVenueEntranceDoor)
                writer.writeMessage(133, this.localizedVenueEntranceDoor, () => this.localizedVenueEntranceDoor.serialize(writer));
            if (this.venueEntranceGate.length)
                writer.writeString(134, this.venueEntranceGate);
            if (this.hasLocalizedVenueEntranceGate)
                writer.writeMessage(135, this.localizedVenueEntranceGate, () => this.localizedVenueEntranceGate.serialize(writer));
            if (this.venueEntrancePortal.length)
                writer.writeString(136, this.venueEntrancePortal);
            if (this.hasLocalizedVenueEntrancePortal)
                writer.writeMessage(137, this.localizedVenueEntrancePortal, () => this.localizedVenueEntrancePortal.serialize(writer));
            if (this.entranceDescription.length)
                writer.writeString(138, this.entranceDescription);
            if (this.hasLocalizedEntranceDescription)
                writer.writeMessage(139, this.localizedEntranceDescription, () => this.localizedEntranceDescription.serialize(writer));
            if (this.tailgatingAllowed != false)
                writer.writeBool(140, this.tailgatingAllowed);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SemanticTags {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SemanticTags();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.admissionLevel = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.localizedAdmissionLevel, () => message.localizedAdmissionLevel = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 3:
                        message.admissionLevelAbbreviation = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.localizedAdmissionLevelAbbreviation, () => message.localizedAdmissionLevelAbbreviation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 5:
                        message.additionalTicketAttributes = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.localizedAdditionalTicketAttributes, () => message.localizedAdditionalTicketAttributes = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 7:
                        message.airlineCode = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.localizedAirlineCode, () => message.localizedAirlineCode = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 9:
                        message.attendeeName = reader.readString();
                        break;
                    case 10:
                        reader.readMessage(message.localizedAttendeeName, () => message.localizedAttendeeName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 11:
                        pb_1.Message.addToRepeatedField(message, 11, reader.readString());
                        break;
                    case 12:
                        message.awayTeamAbbreviation = reader.readString();
                        break;
                    case 13:
                        reader.readMessage(message.localizedAwayTeamAbbreviation, () => message.localizedAwayTeamAbbreviation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 14:
                        message.awayTeamLocation = reader.readString();
                        break;
                    case 15:
                        reader.readMessage(message.localizedAwayTeamLocation, () => message.localizedAwayTeamLocation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 16:
                        message.awayTeamName = reader.readString();
                        break;
                    case 17:
                        reader.readMessage(message.localizedAwayTeamName, () => message.localizedAwayTeamName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 18:
                        reader.readMessage(message.balance, () => message.balance = SemanticCurrencyAmount.deserialize(reader));
                        break;
                    case 19:
                        message.boardingGroup = reader.readString();
                        break;
                    case 20:
                        reader.readMessage(message.localizedBoardingGroup, () => message.localizedBoardingGroup = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 21:
                        message.boardingSequenceNumber = reader.readString();
                        break;
                    case 22:
                        message.carNumber = reader.readString();
                        break;
                    case 23:
                        reader.readMessage(message.localizedCarNumber, () => message.localizedCarNumber = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 24:
                        message.confirmationNumber = reader.readString();
                        break;
                    case 25:
                        reader.readMessage(message.localizedConfirmationNumber, () => message.localizedConfirmationNumber = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 26:
                        reader.readMessage(message.currentArrivalDate, () => message.currentArrivalDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 27:
                        reader.readMessage(message.currentBoardingDate, () => message.currentBoardingDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 28:
                        reader.readMessage(message.currentDepartureDate, () => message.currentDepartureDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 29:
                        message.departureAirportCode = reader.readString();
                        break;
                    case 30:
                        reader.readMessage(message.localizedDepartureAirportCode, () => message.localizedDepartureAirportCode = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 31:
                        message.departureAirportName = reader.readString();
                        break;
                    case 32:
                        reader.readMessage(message.localizedDepartureAirportName, () => message.localizedDepartureAirportName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 33:
                        message.departureGate = reader.readString();
                        break;
                    case 34:
                        reader.readMessage(message.localizedDepartureGate, () => message.localizedDepartureGate = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 35:
                        message.departureLocation = reader.readString();
                        break;
                    case 36:
                        reader.readMessage(message.localizedDepartureLocation, () => message.localizedDepartureLocation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 37:
                        message.departureLocationDescription = reader.readString();
                        break;
                    case 38:
                        reader.readMessage(message.localizedDepartureLocationDescription, () => message.localizedDepartureLocationDescription = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 39:
                        message.departurePlatform = reader.readString();
                        break;
                    case 40:
                        reader.readMessage(message.localizedDeparturePlatform, () => message.localizedDeparturePlatform = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 41:
                        message.departureStationName = reader.readString();
                        break;
                    case 42:
                        reader.readMessage(message.localizedDepartureStationName, () => message.localizedDepartureStationName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 43:
                        message.departureTerminal = reader.readString();
                        break;
                    case 44:
                        reader.readMessage(message.localizedDepartureTerminal, () => message.localizedDepartureTerminal = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 45:
                        message.destinationAirportCode = reader.readString();
                        break;
                    case 46:
                        reader.readMessage(message.localizedDestinationAirportCode, () => message.localizedDestinationAirportCode = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 47:
                        message.destinationAirportName = reader.readString();
                        break;
                    case 48:
                        reader.readMessage(message.localizedDestinationAirportName, () => message.localizedDestinationAirportName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 49:
                        message.destinationGate = reader.readString();
                        break;
                    case 50:
                        reader.readMessage(message.localizedDestinationGate, () => message.localizedDestinationGate = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 51:
                        message.destinationLocation = reader.readString();
                        break;
                    case 52:
                        reader.readMessage(message.localizedDestinationLocation, () => message.localizedDestinationLocation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 53:
                        message.destinationLocationDescription = reader.readString();
                        break;
                    case 54:
                        reader.readMessage(message.localizedDestinationLocationDescription, () => message.localizedDestinationLocationDescription = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 55:
                        message.destinationPlatform = reader.readString();
                        break;
                    case 56:
                        reader.readMessage(message.localizedDestinationPlatform, () => message.localizedDestinationPlatform = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 57:
                        message.destinationStationName = reader.readString();
                        break;
                    case 58:
                        reader.readMessage(message.localizedDestinationStationName, () => message.localizedDestinationStationName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 59:
                        message.destinationTerminal = reader.readString();
                        break;
                    case 60:
                        reader.readMessage(message.localizedDestinationTerminal, () => message.localizedDestinationTerminal = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 61:
                        message.duration = reader.readUint64();
                        break;
                    case 62:
                        reader.readMessage(message.eventEndDate, () => message.eventEndDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 63:
                        message.eventName = reader.readString();
                        break;
                    case 64:
                        reader.readMessage(message.localizedEventName, () => message.localizedEventName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 65:
                        reader.readMessage(message.eventStartDate, () => message.eventStartDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 66:
                        reader.readMessage(message.eventStartDateInfo, () => message.eventStartDateInfo = SemanticEventDateInfo.deserialize(reader));
                        break;
                    case 67:
                        message.eventType = reader.readEnum();
                        break;
                    case 68:
                        message.flightCode = reader.readString();
                        break;
                    case 69:
                        reader.readMessage(message.localizedFlightCode, () => message.localizedFlightCode = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 70:
                        message.flightNumber = reader.readUint32();
                        break;
                    case 71:
                        message.genre = reader.readString();
                        break;
                    case 72:
                        reader.readMessage(message.localizedGenre, () => message.localizedGenre = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 73:
                        message.homeTeamAbbreviation = reader.readString();
                        break;
                    case 74:
                        reader.readMessage(message.localizedHomeTeamAbbreviation, () => message.localizedHomeTeamAbbreviation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 75:
                        message.homeTeamLocation = reader.readString();
                        break;
                    case 76:
                        reader.readMessage(message.localizedHomeTeamLocation, () => message.localizedHomeTeamLocation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 77:
                        message.homeTeamName = reader.readString();
                        break;
                    case 78:
                        reader.readMessage(message.localizedHomeTeamName, () => message.localizedHomeTeamName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 79:
                        message.leagueAbbreviation = reader.readString();
                        break;
                    case 80:
                        reader.readMessage(message.localizedLeagueAbbreviation, () => message.localizedLeagueAbbreviation = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 81:
                        message.leagueName = reader.readString();
                        break;
                    case 82:
                        reader.readMessage(message.localizedLeagueName, () => message.localizedLeagueName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 83:
                        message.membershipProgramName = reader.readString();
                        break;
                    case 84:
                        reader.readMessage(message.localizedMembershipProgramName, () => message.localizedMembershipProgramName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 85:
                        message.membershipProgramNumber = reader.readString();
                        break;
                    case 86:
                        reader.readMessage(message.originalArrivalDate, () => message.originalArrivalDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 87:
                        reader.readMessage(message.originalBoardingDate, () => message.originalBoardingDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 88:
                        reader.readMessage(message.originalDepartureDate, () => message.originalDepartureDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 89:
                        reader.readMessage(message.passengerName, () => message.passengerName = SemanticPersonName.deserialize(reader));
                        break;
                    case 90:
                        pb_1.Message.addToRepeatedField(message, 90, reader.readString());
                        break;
                    case 91:
                        message.priorityStatus = reader.readString();
                        break;
                    case 92:
                        reader.readMessage(message.localizedPriorityStatus, () => message.localizedPriorityStatus = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 93:
                        pb_1.Message.addToRepeatedField(message, 93, reader.readString());
                        break;
                    case 94:
                        pb_1.Message.addToRepeatedField(message, 94, reader.readString());
                        break;
                    case 95:
                        reader.readMessage(message.seats, () => pb_1.Message.addToRepeatedWrapperField(message, 95, SemanticSeat.deserialize(reader), SemanticSeat));
                        break;
                    case 96:
                        message.securityScreening = reader.readString();
                        break;
                    case 97:
                        reader.readMessage(message.localizedSecurityScreening, () => message.localizedSecurityScreening = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 98:
                        message.silenceRequested = reader.readBool();
                        break;
                    case 99:
                        message.sportName = reader.readString();
                        break;
                    case 100:
                        reader.readMessage(message.localizedSportName, () => message.localizedSportName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 101:
                        reader.readMessage(message.totalPrice, () => message.totalPrice = SemanticCurrencyAmount.deserialize(reader));
                        break;
                    case 102:
                        message.transitProvider = reader.readString();
                        break;
                    case 103:
                        reader.readMessage(message.localizedTransitProvider, () => message.localizedTransitProvider = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 104:
                        message.transitStatus = reader.readString();
                        break;
                    case 105:
                        reader.readMessage(message.localizedTransitStatus, () => message.localizedTransitStatus = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 106:
                        message.transitStatusReason = reader.readString();
                        break;
                    case 107:
                        reader.readMessage(message.localizedTransitStatusReason, () => message.localizedTransitStatusReason = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 108:
                        message.vehicleName = reader.readString();
                        break;
                    case 109:
                        reader.readMessage(message.localizedVehicleName, () => message.localizedVehicleName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 110:
                        message.vehicleNumber = reader.readString();
                        break;
                    case 111:
                        reader.readMessage(message.localizedVehicleNumber, () => message.localizedVehicleNumber = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 112:
                        message.vehicleType = reader.readString();
                        break;
                    case 113:
                        reader.readMessage(message.localizedVehicleType, () => message.localizedVehicleType = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 114:
                        reader.readMessage(message.venueBoxOfficeOpenDate, () => message.venueBoxOfficeOpenDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 115:
                        reader.readMessage(message.venueCloseDate, () => message.venueCloseDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 116:
                        reader.readMessage(message.venueDoorsOpenDate, () => message.venueDoorsOpenDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 117:
                        message.venueEntrance = reader.readString();
                        break;
                    case 118:
                        reader.readMessage(message.localizedVenueEntrance, () => message.localizedVenueEntrance = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 119:
                        reader.readMessage(message.venueLocation, () => message.venueLocation = SemanticLocation.deserialize(reader));
                        break;
                    case 120:
                        message.venueName = reader.readString();
                        break;
                    case 121:
                        reader.readMessage(message.localizedVenueName, () => message.localizedVenueName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 122:
                        message.venuePhoneNumber = reader.readString();
                        break;
                    case 123:
                        reader.readMessage(message.localizedVenuePhoneNumber, () => message.localizedVenuePhoneNumber = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 124:
                        message.venueRegionName = reader.readString();
                        break;
                    case 125:
                        reader.readMessage(message.localizedVenueRegionName, () => message.localizedVenueRegionName = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 126:
                        message.venueRoom = reader.readString();
                        break;
                    case 127:
                        reader.readMessage(message.localizedVenueRoom, () => message.localizedVenueRoom = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 128:
                        reader.readMessage(message.wifiAccess, () => pb_1.Message.addToRepeatedWrapperField(message, 128, SemanticWifiNetwork.deserialize(reader), SemanticWifiNetwork));
                        break;
                    case 129:
                        reader.readMessage(message.venueFanZoneOpenDate, () => message.venueFanZoneOpenDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 130:
                        reader.readMessage(message.venueGatesOpenDate, () => message.venueGatesOpenDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 131:
                        reader.readMessage(message.venueParkingLotsOpenDate, () => message.venueParkingLotsOpenDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 132:
                        message.venueEntranceDoor = reader.readString();
                        break;
                    case 133:
                        reader.readMessage(message.localizedVenueEntranceDoor, () => message.localizedVenueEntranceDoor = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 134:
                        message.venueEntranceGate = reader.readString();
                        break;
                    case 135:
                        reader.readMessage(message.localizedVenueEntranceGate, () => message.localizedVenueEntranceGate = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 136:
                        message.venueEntrancePortal = reader.readString();
                        break;
                    case 137:
                        reader.readMessage(message.localizedVenueEntrancePortal, () => message.localizedVenueEntrancePortal = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 138:
                        message.entranceDescription = reader.readString();
                        break;
                    case 139:
                        reader.readMessage(message.localizedEntranceDescription, () => message.localizedEntranceDescription = dependency_2.io.LocalizedString.deserialize(reader));
                        break;
                    case 140:
                        message.tailgatingAllowed = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SemanticTags {
            return SemanticTags.deserialize(bytes);
        }
    }
}
