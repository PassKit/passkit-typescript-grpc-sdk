/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/member/member_events.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../google/protobuf/timestamp";
import * as dependency_2 from "./../common/personal";
import * as dependency_3 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace members {
    export enum MemberEvents {
        EVENT_MEMBER_DO_NOT_USE = 0,
        EVENT_MEMBER_CHECKED_IN = 1,
        EVENT_MEMBER_CHECKED_OUT = 2,
        EVENT_MEMBER_VERIFIED = 3,
        EVENT_MEMBER_POINTS_EARNED = 4,
        EVENT_MEMBER_POINTS_BURNED = 5,
        EVENT_MEMBER_POINTS_SET = 6,
        EVENT_MEMBER_TIER_CHANGED = 7
    }
    export class MemberEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            member?: MemberMininmal;
            eventType?: MemberEvents;
            address?: string;
            lat?: number;
            lon?: number;
            alt?: number;
            externalId?: string;
            externalUserId?: string;
            externalDeviceId?: string;
            externalServiceId?: string;
            metaData?: Map<string, string>;
            notes?: string;
            date?: dependency_1.google.protobuf.Timestamp;
            retainedUntilDate?: dependency_1.google.protobuf.Timestamp;
            created?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("member" in data && data.member != undefined) {
                    this.member = data.member;
                }
                if ("eventType" in data && data.eventType != undefined) {
                    this.eventType = data.eventType;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("lat" in data && data.lat != undefined) {
                    this.lat = data.lat;
                }
                if ("lon" in data && data.lon != undefined) {
                    this.lon = data.lon;
                }
                if ("alt" in data && data.alt != undefined) {
                    this.alt = data.alt;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("externalUserId" in data && data.externalUserId != undefined) {
                    this.externalUserId = data.externalUserId;
                }
                if ("externalDeviceId" in data && data.externalDeviceId != undefined) {
                    this.externalDeviceId = data.externalDeviceId;
                }
                if ("externalServiceId" in data && data.externalServiceId != undefined) {
                    this.externalServiceId = data.externalServiceId;
                }
                if ("metaData" in data && data.metaData != undefined) {
                    this.metaData = data.metaData;
                }
                if ("notes" in data && data.notes != undefined) {
                    this.notes = data.notes;
                }
                if ("date" in data && data.date != undefined) {
                    this.date = data.date;
                }
                if ("retainedUntilDate" in data && data.retainedUntilDate != undefined) {
                    this.retainedUntilDate = data.retainedUntilDate;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
            }
            if (!this.metaData)
                this.metaData = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get member() {
            return pb_1.Message.getWrapperField(this, MemberMininmal, 2) as MemberMininmal;
        }
        set member(value: MemberMininmal) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get hasMember() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get eventType() {
            return pb_1.Message.getFieldWithDefault(this, 3, MemberEvents.EVENT_MEMBER_DO_NOT_USE) as MemberEvents;
        }
        set eventType(value: MemberEvents) {
            pb_1.Message.setField(this, 3, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get lat() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set lat(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get lon() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set lon(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get alt() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set alt(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get externalUserId() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set externalUserId(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get externalDeviceId() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set externalDeviceId(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get externalServiceId() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set externalServiceId(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get metaData() {
            return pb_1.Message.getField(this, 12) as any as Map<string, string>;
        }
        set metaData(value: Map<string, string>) {
            pb_1.Message.setField(this, 12, value as any);
        }
        get notes() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set notes(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get date() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 14) as dependency_1.google.protobuf.Timestamp;
        }
        set date(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get hasDate() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get retainedUntilDate() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 15) as dependency_1.google.protobuf.Timestamp;
        }
        set retainedUntilDate(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get hasRetainedUntilDate() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get created() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 16) as dependency_1.google.protobuf.Timestamp;
        }
        set created(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get hasCreated() {
            return pb_1.Message.getField(this, 16) != null;
        }
        static fromObject(data: {
            id?: string;
            member?: ReturnType<typeof MemberMininmal.prototype.toObject>;
            eventType?: MemberEvents;
            address?: string;
            lat?: number;
            lon?: number;
            alt?: number;
            externalId?: string;
            externalUserId?: string;
            externalDeviceId?: string;
            externalServiceId?: string;
            metaData?: {
                [key: string]: string;
            };
            notes?: string;
            date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            retainedUntilDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): MemberEvent {
            const message = new MemberEvent({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.member != null) {
                message.member = MemberMininmal.fromObject(data.member);
            }
            if (data.eventType != null) {
                message.eventType = data.eventType;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.lat != null) {
                message.lat = data.lat;
            }
            if (data.lon != null) {
                message.lon = data.lon;
            }
            if (data.alt != null) {
                message.alt = data.alt;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (data.externalUserId != null) {
                message.externalUserId = data.externalUserId;
            }
            if (data.externalDeviceId != null) {
                message.externalDeviceId = data.externalDeviceId;
            }
            if (data.externalServiceId != null) {
                message.externalServiceId = data.externalServiceId;
            }
            if (typeof data.metaData == "object") {
                message.metaData = new Map(Object.entries(data.metaData));
            }
            if (data.notes != null) {
                message.notes = data.notes;
            }
            if (data.date != null) {
                message.date = dependency_1.google.protobuf.Timestamp.fromObject(data.date);
            }
            if (data.retainedUntilDate != null) {
                message.retainedUntilDate = dependency_1.google.protobuf.Timestamp.fromObject(data.retainedUntilDate);
            }
            if (data.created != null) {
                message.created = dependency_1.google.protobuf.Timestamp.fromObject(data.created);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                member?: ReturnType<typeof MemberMininmal.prototype.toObject>;
                eventType?: MemberEvents;
                address?: string;
                lat?: number;
                lon?: number;
                alt?: number;
                externalId?: string;
                externalUserId?: string;
                externalDeviceId?: string;
                externalServiceId?: string;
                metaData?: {
                    [key: string]: string;
                };
                notes?: string;
                date?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                retainedUntilDate?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                created?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.member != null) {
                data.member = this.member.toObject();
            }
            if (this.eventType != null) {
                data.eventType = this.eventType;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.lat != null) {
                data.lat = this.lat;
            }
            if (this.lon != null) {
                data.lon = this.lon;
            }
            if (this.alt != null) {
                data.alt = this.alt;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.externalUserId != null) {
                data.externalUserId = this.externalUserId;
            }
            if (this.externalDeviceId != null) {
                data.externalDeviceId = this.externalDeviceId;
            }
            if (this.externalServiceId != null) {
                data.externalServiceId = this.externalServiceId;
            }
            if (this.metaData != null) {
                data.metaData = (Object.fromEntries)(this.metaData);
            }
            if (this.notes != null) {
                data.notes = this.notes;
            }
            if (this.date != null) {
                data.date = this.date.toObject();
            }
            if (this.retainedUntilDate != null) {
                data.retainedUntilDate = this.retainedUntilDate.toObject();
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.hasMember)
                writer.writeMessage(2, this.member, () => this.member.serialize(writer));
            if (this.eventType != MemberEvents.EVENT_MEMBER_DO_NOT_USE)
                writer.writeEnum(3, this.eventType);
            if (this.address.length)
                writer.writeString(4, this.address);
            if (this.lat != 0)
                writer.writeDouble(5, this.lat);
            if (this.lon != 0)
                writer.writeDouble(6, this.lon);
            if (this.alt != 0)
                writer.writeInt32(7, this.alt);
            if (this.externalId.length)
                writer.writeString(8, this.externalId);
            if (this.externalUserId.length)
                writer.writeString(9, this.externalUserId);
            if (this.externalDeviceId.length)
                writer.writeString(10, this.externalDeviceId);
            if (this.externalServiceId.length)
                writer.writeString(11, this.externalServiceId);
            for (const [key, value] of this.metaData) {
                writer.writeMessage(12, this.metaData, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.notes.length)
                writer.writeString(13, this.notes);
            if (this.hasDate)
                writer.writeMessage(14, this.date, () => this.date.serialize(writer));
            if (this.hasRetainedUntilDate)
                writer.writeMessage(15, this.retainedUntilDate, () => this.retainedUntilDate.serialize(writer));
            if (this.hasCreated)
                writer.writeMessage(16, this.created, () => this.created.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.member, () => message.member = MemberMininmal.deserialize(reader));
                        break;
                    case 3:
                        message.eventType = reader.readEnum();
                        break;
                    case 4:
                        message.address = reader.readString();
                        break;
                    case 5:
                        message.lat = reader.readDouble();
                        break;
                    case 6:
                        message.lon = reader.readDouble();
                        break;
                    case 7:
                        message.alt = reader.readInt32();
                        break;
                    case 8:
                        message.externalId = reader.readString();
                        break;
                    case 9:
                        message.externalUserId = reader.readString();
                        break;
                    case 10:
                        message.externalDeviceId = reader.readString();
                        break;
                    case 11:
                        message.externalServiceId = reader.readString();
                        break;
                    case 12:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.metaData as any, reader, reader.readString, reader.readString));
                        break;
                    case 13:
                        message.notes = reader.readString();
                        break;
                    case 14:
                        reader.readMessage(message.date, () => message.date = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.retainedUntilDate, () => message.retainedUntilDate = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.created, () => message.created = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemberEvent {
            return MemberEvent.deserialize(bytes);
        }
    }
    export class MemberMininmal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            externalId?: string;
            groupingIdentifier?: string;
            tierId?: string;
            programId?: string;
            person?: dependency_2.io.Person;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("groupingIdentifier" in data && data.groupingIdentifier != undefined) {
                    this.groupingIdentifier = data.groupingIdentifier;
                }
                if ("tierId" in data && data.tierId != undefined) {
                    this.tierId = data.tierId;
                }
                if ("programId" in data && data.programId != undefined) {
                    this.programId = data.programId;
                }
                if ("person" in data && data.person != undefined) {
                    this.person = data.person;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get groupingIdentifier() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set groupingIdentifier(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tierId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set tierId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get programId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set programId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get person() {
            return pb_1.Message.getWrapperField(this, dependency_2.io.Person, 6) as dependency_2.io.Person;
        }
        set person(value: dependency_2.io.Person) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get hasPerson() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            id?: string;
            externalId?: string;
            groupingIdentifier?: string;
            tierId?: string;
            programId?: string;
            person?: ReturnType<typeof dependency_2.io.Person.prototype.toObject>;
        }): MemberMininmal {
            const message = new MemberMininmal({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (data.groupingIdentifier != null) {
                message.groupingIdentifier = data.groupingIdentifier;
            }
            if (data.tierId != null) {
                message.tierId = data.tierId;
            }
            if (data.programId != null) {
                message.programId = data.programId;
            }
            if (data.person != null) {
                message.person = dependency_2.io.Person.fromObject(data.person);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                externalId?: string;
                groupingIdentifier?: string;
                tierId?: string;
                programId?: string;
                person?: ReturnType<typeof dependency_2.io.Person.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.groupingIdentifier != null) {
                data.groupingIdentifier = this.groupingIdentifier;
            }
            if (this.tierId != null) {
                data.tierId = this.tierId;
            }
            if (this.programId != null) {
                data.programId = this.programId;
            }
            if (this.person != null) {
                data.person = this.person.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.externalId.length)
                writer.writeString(2, this.externalId);
            if (this.groupingIdentifier.length)
                writer.writeString(3, this.groupingIdentifier);
            if (this.tierId.length)
                writer.writeString(4, this.tierId);
            if (this.programId.length)
                writer.writeString(5, this.programId);
            if (this.hasPerson)
                writer.writeMessage(6, this.person, () => this.person.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MemberMininmal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MemberMininmal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.externalId = reader.readString();
                        break;
                    case 3:
                        message.groupingIdentifier = reader.readString();
                        break;
                    case 4:
                        message.tierId = reader.readString();
                        break;
                    case 5:
                        message.programId = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.person, () => message.person = dependency_2.io.Person.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MemberMininmal {
            return MemberMininmal.deserialize(bytes);
        }
    }
}
