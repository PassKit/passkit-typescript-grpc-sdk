/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.0
 * source: io/common/pagination.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../protoc-gen-openapiv2/options/annotations";
import * as pb_1 from "google-protobuf";
export namespace io {
    export class Pagination extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            limit?: number;
            offset?: number;
            filterField?: string[];
            filterValue?: string[];
            filterOperator?: string[];
            orderBy?: string;
            orderAsc?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("filterField" in data && data.filterField != undefined) {
                    this.filterField = data.filterField;
                }
                if ("filterValue" in data && data.filterValue != undefined) {
                    this.filterValue = data.filterValue;
                }
                if ("filterOperator" in data && data.filterOperator != undefined) {
                    this.filterOperator = data.filterOperator;
                }
                if ("orderBy" in data && data.orderBy != undefined) {
                    this.orderBy = data.orderBy;
                }
                if ("orderAsc" in data && data.orderAsc != undefined) {
                    this.orderAsc = data.orderAsc;
                }
            }
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get filterField() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set filterField(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get filterValue() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set filterValue(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get filterOperator() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set filterOperator(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get orderBy() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set orderBy(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get orderAsc() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set orderAsc(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            limit?: number;
            offset?: number;
            filterField?: string[];
            filterValue?: string[];
            filterOperator?: string[];
            orderBy?: string;
            orderAsc?: boolean;
        }): Pagination {
            const message = new Pagination({});
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.filterField != null) {
                message.filterField = data.filterField;
            }
            if (data.filterValue != null) {
                message.filterValue = data.filterValue;
            }
            if (data.filterOperator != null) {
                message.filterOperator = data.filterOperator;
            }
            if (data.orderBy != null) {
                message.orderBy = data.orderBy;
            }
            if (data.orderAsc != null) {
                message.orderAsc = data.orderAsc;
            }
            return message;
        }
        toObject() {
            const data: {
                limit?: number;
                offset?: number;
                filterField?: string[];
                filterValue?: string[];
                filterOperator?: string[];
                orderBy?: string;
                orderAsc?: boolean;
            } = {};
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.filterField != null) {
                data.filterField = this.filterField;
            }
            if (this.filterValue != null) {
                data.filterValue = this.filterValue;
            }
            if (this.filterOperator != null) {
                data.filterOperator = this.filterOperator;
            }
            if (this.orderBy != null) {
                data.orderBy = this.orderBy;
            }
            if (this.orderAsc != null) {
                data.orderAsc = this.orderAsc;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.limit != 0)
                writer.writeInt32(1, this.limit);
            if (this.offset != 0)
                writer.writeInt32(2, this.offset);
            if (this.filterField.length)
                writer.writeRepeatedString(3, this.filterField);
            if (this.filterValue.length)
                writer.writeRepeatedString(4, this.filterValue);
            if (this.filterOperator.length)
                writer.writeRepeatedString(5, this.filterOperator);
            if (this.orderBy.length)
                writer.writeString(6, this.orderBy);
            if (this.orderAsc != false)
                writer.writeBool(7, this.orderAsc);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pagination {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pagination();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.limit = reader.readInt32();
                        break;
                    case 2:
                        message.offset = reader.readInt32();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.orderBy = reader.readString();
                        break;
                    case 7:
                        message.orderAsc = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Pagination {
            return Pagination.deserialize(bytes);
        }
    }
    export class Filter extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            filterField?: string[];
            filterValue?: string[];
            filterOperator?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("filterField" in data && data.filterField != undefined) {
                    this.filterField = data.filterField;
                }
                if ("filterValue" in data && data.filterValue != undefined) {
                    this.filterValue = data.filterValue;
                }
                if ("filterOperator" in data && data.filterOperator != undefined) {
                    this.filterOperator = data.filterOperator;
                }
            }
        }
        get filterField() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set filterField(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get filterValue() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set filterValue(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get filterOperator() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set filterOperator(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            filterField?: string[];
            filterValue?: string[];
            filterOperator?: string[];
        }): Filter {
            const message = new Filter({});
            if (data.filterField != null) {
                message.filterField = data.filterField;
            }
            if (data.filterValue != null) {
                message.filterValue = data.filterValue;
            }
            if (data.filterOperator != null) {
                message.filterOperator = data.filterOperator;
            }
            return message;
        }
        toObject() {
            const data: {
                filterField?: string[];
                filterValue?: string[];
                filterOperator?: string[];
            } = {};
            if (this.filterField != null) {
                data.filterField = this.filterField;
            }
            if (this.filterValue != null) {
                data.filterValue = this.filterValue;
            }
            if (this.filterOperator != null) {
                data.filterOperator = this.filterOperator;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.filterField.length)
                writer.writeRepeatedString(1, this.filterField);
            if (this.filterValue.length)
                writer.writeRepeatedString(2, this.filterValue);
            if (this.filterOperator.length)
                writer.writeRepeatedString(3, this.filterOperator);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Filter {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Filter();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Filter {
            return Filter.deserialize(bytes);
        }
    }
}
